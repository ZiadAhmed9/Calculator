
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003616  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00003616  000036aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800068  00800068  000036b2  2**0
                  ALLOC
  3 .stab         00002868  00000000  00000000  000036b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d61  00000000  00000000  00005f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008b76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009a61  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a810  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a970  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000abfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b3cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a8 37       	cpi	r26, 0x78	; 120
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e1       	ldi	r30, 0x16	; 22
      78:	f6 e3       	ldi	r31, 0x36	; 54
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 09 1b 	jmp	0x3612	; 0x3612 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8d 1a 	jmp	0x351a	; 0x351a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8d 1a 	jmp	0x351a	; 0x351a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a9 1a 	jmp	0x3552	; 0x3552 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9d 1a 	jmp	0x353a	; 0x353a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b9 1a 	jmp	0x3572	; 0x3572 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
/*******************************************************************************
 *                           Main Function                                     *
 *******************************************************************************/

int main(void)
{
     b46:	ef 92       	push	r14
     b48:	ff 92       	push	r15
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	df 93       	push	r29
     b50:	cf 93       	push	r28
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
	check=0;
     b56:	10 92 70 00 	sts	0x0070, r1
     b5a:	10 92 71 00 	sts	0x0071, r1
     b5e:	10 92 72 00 	sts	0x0072, r1
     b62:	10 92 73 00 	sts	0x0073, r1
	LCD_init();
     b66:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <LCD_init>
	KeyPad_init();
     b6a:	0e 94 6d 11 	call	0x22da	; 0x22da <KeyPad_init>
	GET_OP1();
     b6e:	0e 94 0f 08 	call	0x101e	; 0x101e <GET_OP1>

	if(check==1)
     b72:	80 91 70 00 	lds	r24, 0x0070
     b76:	90 91 71 00 	lds	r25, 0x0071
     b7a:	a0 91 72 00 	lds	r26, 0x0072
     b7e:	b0 91 73 00 	lds	r27, 0x0073
     b82:	81 30       	cpi	r24, 0x01	; 1
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	11 f4       	brne	.+4      	; 0xb90 <main+0x4a>
	{
		main();
     b8c:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
	}

//	GET_OPERATION();

	GET_OP2();
     b90:	0e 94 fd 08 	call	0x11fa	; 0x11fa <GET_OP2>

	if(check==1)
     b94:	80 91 70 00 	lds	r24, 0x0070
     b98:	90 91 71 00 	lds	r25, 0x0071
     b9c:	a0 91 72 00 	lds	r26, 0x0072
     ba0:	b0 91 73 00 	lds	r27, 0x0073
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	91 05       	cpc	r25, r1
     ba8:	a1 05       	cpc	r26, r1
     baa:	b1 05       	cpc	r27, r1
     bac:	11 f4       	brne	.+4      	; 0xbb2 <main+0x6c>
	{
		main();
     bae:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
	}

	LCD_Clear();
     bb2:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <LCD_Clear>

	calc(operation,op1,op2);
     bb6:	80 91 6c 00 	lds	r24, 0x006C
     bba:	90 91 6d 00 	lds	r25, 0x006D
     bbe:	a0 91 6e 00 	lds	r26, 0x006E
     bc2:	b0 91 6f 00 	lds	r27, 0x006F
     bc6:	20 91 74 00 	lds	r18, 0x0074
     bca:	30 91 75 00 	lds	r19, 0x0075
     bce:	40 91 76 00 	lds	r20, 0x0076
     bd2:	50 91 77 00 	lds	r21, 0x0077
     bd6:	e0 90 68 00 	lds	r14, 0x0068
     bda:	f0 90 69 00 	lds	r15, 0x0069
     bde:	00 91 6a 00 	lds	r16, 0x006A
     be2:	10 91 6b 00 	lds	r17, 0x006B
     be6:	ba 01       	movw	r22, r20
     be8:	a9 01       	movw	r20, r18
     bea:	98 01       	movw	r18, r16
     bec:	87 01       	movw	r16, r14
     bee:	0e 94 00 06 	call	0xc00	; 0xc00 <calc>


	while(1)
	{
		if(KeyPad_getPressedKey()=='A')
     bf2:	0e 94 b0 11 	call	0x2360	; 0x2360 <KeyPad_getPressedKey>
     bf6:	81 34       	cpi	r24, 0x41	; 65
     bf8:	e1 f7       	brne	.-8      	; 0xbf2 <main+0xac>
		{
			main();
     bfa:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
     bfe:	f9 cf       	rjmp	.-14     	; 0xbf2 <main+0xac>

00000c00 <calc>:

	}
}

void calc(uint8 operation,uint32 op1,uint32 op2)
{
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	df 93       	push	r29
     c06:	cf 93       	push	r28
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	2f 97       	sbiw	r28, 0x0f	; 15
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	8d 83       	std	Y+5, r24	; 0x05
     c1a:	4e 83       	std	Y+6, r20	; 0x06
     c1c:	5f 83       	std	Y+7, r21	; 0x07
     c1e:	68 87       	std	Y+8, r22	; 0x08
     c20:	79 87       	std	Y+9, r23	; 0x09
     c22:	0a 87       	std	Y+10, r16	; 0x0a
     c24:	1b 87       	std	Y+11, r17	; 0x0b
     c26:	2c 87       	std	Y+12, r18	; 0x0c
     c28:	3d 87       	std	Y+13, r19	; 0x0d
	uint32 result;
	switch(operation)
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	28 2f       	mov	r18, r24
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	3f 87       	std	Y+15, r19	; 0x0f
     c32:	2e 87       	std	Y+14, r18	; 0x0e
     c34:	8e 85       	ldd	r24, Y+14	; 0x0e
     c36:	9f 85       	ldd	r25, Y+15	; 0x0f
     c38:	8b 32       	cpi	r24, 0x2B	; 43
     c3a:	91 05       	cpc	r25, r1
     c3c:	b1 f0       	breq	.+44     	; 0xc6a <calc+0x6a>
     c3e:	2e 85       	ldd	r18, Y+14	; 0x0e
     c40:	3f 85       	ldd	r19, Y+15	; 0x0f
     c42:	2c 32       	cpi	r18, 0x2C	; 44
     c44:	31 05       	cpc	r19, r1
     c46:	34 f4       	brge	.+12     	; 0xc54 <calc+0x54>
     c48:	8e 85       	ldd	r24, Y+14	; 0x0e
     c4a:	9f 85       	ldd	r25, Y+15	; 0x0f
     c4c:	8a 32       	cpi	r24, 0x2A	; 42
     c4e:	91 05       	cpc	r25, r1
     c50:	71 f1       	breq	.+92     	; 0xcae <calc+0xae>
     c52:	52 c0       	rjmp	.+164    	; 0xcf8 <calc+0xf8>
     c54:	2e 85       	ldd	r18, Y+14	; 0x0e
     c56:	3f 85       	ldd	r19, Y+15	; 0x0f
     c58:	2d 32       	cpi	r18, 0x2D	; 45
     c5a:	31 05       	cpc	r19, r1
     c5c:	b9 f0       	breq	.+46     	; 0xc8c <calc+0x8c>
     c5e:	8e 85       	ldd	r24, Y+14	; 0x0e
     c60:	9f 85       	ldd	r25, Y+15	; 0x0f
     c62:	8f 32       	cpi	r24, 0x2F	; 47
     c64:	91 05       	cpc	r25, r1
     c66:	b1 f1       	breq	.+108    	; 0xcd4 <calc+0xd4>
     c68:	47 c0       	rjmp	.+142    	; 0xcf8 <calc+0xf8>
	{
	case '+' :
		result=op1+op2;
     c6a:	8e 81       	ldd	r24, Y+6	; 0x06
     c6c:	9f 81       	ldd	r25, Y+7	; 0x07
     c6e:	a8 85       	ldd	r26, Y+8	; 0x08
     c70:	b9 85       	ldd	r27, Y+9	; 0x09
     c72:	2a 85       	ldd	r18, Y+10	; 0x0a
     c74:	3b 85       	ldd	r19, Y+11	; 0x0b
     c76:	4c 85       	ldd	r20, Y+12	; 0x0c
     c78:	5d 85       	ldd	r21, Y+13	; 0x0d
     c7a:	82 0f       	add	r24, r18
     c7c:	93 1f       	adc	r25, r19
     c7e:	a4 1f       	adc	r26, r20
     c80:	b5 1f       	adc	r27, r21
     c82:	89 83       	std	Y+1, r24	; 0x01
     c84:	9a 83       	std	Y+2, r25	; 0x02
     c86:	ab 83       	std	Y+3, r26	; 0x03
     c88:	bc 83       	std	Y+4, r27	; 0x04
     c8a:	36 c0       	rjmp	.+108    	; 0xcf8 <calc+0xf8>
		break;
	case '-' :
		result=op1-op2;
     c8c:	8e 81       	ldd	r24, Y+6	; 0x06
     c8e:	9f 81       	ldd	r25, Y+7	; 0x07
     c90:	a8 85       	ldd	r26, Y+8	; 0x08
     c92:	b9 85       	ldd	r27, Y+9	; 0x09
     c94:	2a 85       	ldd	r18, Y+10	; 0x0a
     c96:	3b 85       	ldd	r19, Y+11	; 0x0b
     c98:	4c 85       	ldd	r20, Y+12	; 0x0c
     c9a:	5d 85       	ldd	r21, Y+13	; 0x0d
     c9c:	82 1b       	sub	r24, r18
     c9e:	93 0b       	sbc	r25, r19
     ca0:	a4 0b       	sbc	r26, r20
     ca2:	b5 0b       	sbc	r27, r21
     ca4:	89 83       	std	Y+1, r24	; 0x01
     ca6:	9a 83       	std	Y+2, r25	; 0x02
     ca8:	ab 83       	std	Y+3, r26	; 0x03
     caa:	bc 83       	std	Y+4, r27	; 0x04
     cac:	25 c0       	rjmp	.+74     	; 0xcf8 <calc+0xf8>
		break;
	case '*' :
		result=op1*op2;
     cae:	8e 81       	ldd	r24, Y+6	; 0x06
     cb0:	9f 81       	ldd	r25, Y+7	; 0x07
     cb2:	a8 85       	ldd	r26, Y+8	; 0x08
     cb4:	b9 85       	ldd	r27, Y+9	; 0x09
     cb6:	2a 85       	ldd	r18, Y+10	; 0x0a
     cb8:	3b 85       	ldd	r19, Y+11	; 0x0b
     cba:	4c 85       	ldd	r20, Y+12	; 0x0c
     cbc:	5d 85       	ldd	r21, Y+13	; 0x0d
     cbe:	bc 01       	movw	r22, r24
     cc0:	cd 01       	movw	r24, r26
     cc2:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__mulsi3>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	89 83       	std	Y+1, r24	; 0x01
     ccc:	9a 83       	std	Y+2, r25	; 0x02
     cce:	ab 83       	std	Y+3, r26	; 0x03
     cd0:	bc 83       	std	Y+4, r27	; 0x04
     cd2:	12 c0       	rjmp	.+36     	; 0xcf8 <calc+0xf8>
		break;
	case '/' :
		result=op1/op2;
     cd4:	8e 81       	ldd	r24, Y+6	; 0x06
     cd6:	9f 81       	ldd	r25, Y+7	; 0x07
     cd8:	a8 85       	ldd	r26, Y+8	; 0x08
     cda:	b9 85       	ldd	r27, Y+9	; 0x09
     cdc:	2a 85       	ldd	r18, Y+10	; 0x0a
     cde:	3b 85       	ldd	r19, Y+11	; 0x0b
     ce0:	4c 85       	ldd	r20, Y+12	; 0x0c
     ce2:	5d 85       	ldd	r21, Y+13	; 0x0d
     ce4:	bc 01       	movw	r22, r24
     ce6:	cd 01       	movw	r24, r26
     ce8:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
     cec:	da 01       	movw	r26, r20
     cee:	c9 01       	movw	r24, r18
     cf0:	89 83       	std	Y+1, r24	; 0x01
     cf2:	9a 83       	std	Y+2, r25	; 0x02
     cf4:	ab 83       	std	Y+3, r26	; 0x03
     cf6:	bc 83       	std	Y+4, r27	; 0x04
		break;
	}
	if(result>=0&&result<10)
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	9a 81       	ldd	r25, Y+2	; 0x02
     cfc:	ab 81       	ldd	r26, Y+3	; 0x03
     cfe:	bc 81       	ldd	r27, Y+4	; 0x04
     d00:	8a 30       	cpi	r24, 0x0A	; 10
     d02:	91 05       	cpc	r25, r1
     d04:	a1 05       	cpc	r26, r1
     d06:	b1 05       	cpc	r27, r1
     d08:	20 f4       	brcc	.+8      	; 0xd12 <calc+0x112>
	{
		LCD_display_int_nodelay(result);
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_display_int_nodelay>
     d10:	7b c1       	rjmp	.+758    	; 0x1008 <calc+0x408>
	}
	else if(result>=10&&result<100)
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	9a 81       	ldd	r25, Y+2	; 0x02
     d16:	ab 81       	ldd	r26, Y+3	; 0x03
     d18:	bc 81       	ldd	r27, Y+4	; 0x04
     d1a:	8a 30       	cpi	r24, 0x0A	; 10
     d1c:	91 05       	cpc	r25, r1
     d1e:	a1 05       	cpc	r26, r1
     d20:	b1 05       	cpc	r27, r1
     d22:	50 f1       	brcs	.+84     	; 0xd78 <calc+0x178>
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	9a 81       	ldd	r25, Y+2	; 0x02
     d28:	ab 81       	ldd	r26, Y+3	; 0x03
     d2a:	bc 81       	ldd	r27, Y+4	; 0x04
     d2c:	84 36       	cpi	r24, 0x64	; 100
     d2e:	91 05       	cpc	r25, r1
     d30:	a1 05       	cpc	r26, r1
     d32:	b1 05       	cpc	r27, r1
     d34:	08 f5       	brcc	.+66     	; 0xd78 <calc+0x178>
	{
		LCD_display_int_nodelay(result/10);
     d36:	89 81       	ldd	r24, Y+1	; 0x01
     d38:	9a 81       	ldd	r25, Y+2	; 0x02
     d3a:	ab 81       	ldd	r26, Y+3	; 0x03
     d3c:	bc 81       	ldd	r27, Y+4	; 0x04
     d3e:	2a e0       	ldi	r18, 0x0A	; 10
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	40 e0       	ldi	r20, 0x00	; 0
     d44:	50 e0       	ldi	r21, 0x00	; 0
     d46:	bc 01       	movw	r22, r24
     d48:	cd 01       	movw	r24, r26
     d4a:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
     d4e:	da 01       	movw	r26, r20
     d50:	c9 01       	movw	r24, r18
     d52:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_display_int_nodelay>
		LCD_display_int_nodelay(result%10);
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	9a 81       	ldd	r25, Y+2	; 0x02
     d5a:	ab 81       	ldd	r26, Y+3	; 0x03
     d5c:	bc 81       	ldd	r27, Y+4	; 0x04
     d5e:	2a e0       	ldi	r18, 0x0A	; 10
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	40 e0       	ldi	r20, 0x00	; 0
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	bc 01       	movw	r22, r24
     d68:	cd 01       	movw	r24, r26
     d6a:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_display_int_nodelay>
     d76:	48 c1       	rjmp	.+656    	; 0x1008 <calc+0x408>
	}
	else if(result>=100&&result<1000)
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	9a 81       	ldd	r25, Y+2	; 0x02
     d7c:	ab 81       	ldd	r26, Y+3	; 0x03
     d7e:	bc 81       	ldd	r27, Y+4	; 0x04
     d80:	84 36       	cpi	r24, 0x64	; 100
     d82:	91 05       	cpc	r25, r1
     d84:	a1 05       	cpc	r26, r1
     d86:	b1 05       	cpc	r27, r1
     d88:	08 f4       	brcc	.+2      	; 0xd8c <calc+0x18c>
     d8a:	47 c0       	rjmp	.+142    	; 0xe1a <calc+0x21a>
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	9a 81       	ldd	r25, Y+2	; 0x02
     d90:	ab 81       	ldd	r26, Y+3	; 0x03
     d92:	bc 81       	ldd	r27, Y+4	; 0x04
     d94:	88 3e       	cpi	r24, 0xE8	; 232
     d96:	23 e0       	ldi	r18, 0x03	; 3
     d98:	92 07       	cpc	r25, r18
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	a2 07       	cpc	r26, r18
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	b2 07       	cpc	r27, r18
     da2:	d8 f5       	brcc	.+118    	; 0xe1a <calc+0x21a>
	{
		LCD_display_int_nodelay(result/100);
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	9a 81       	ldd	r25, Y+2	; 0x02
     da8:	ab 81       	ldd	r26, Y+3	; 0x03
     daa:	bc 81       	ldd	r27, Y+4	; 0x04
     dac:	24 e6       	ldi	r18, 0x64	; 100
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	40 e0       	ldi	r20, 0x00	; 0
     db2:	50 e0       	ldi	r21, 0x00	; 0
     db4:	bc 01       	movw	r22, r24
     db6:	cd 01       	movw	r24, r26
     db8:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
     dbc:	da 01       	movw	r26, r20
     dbe:	c9 01       	movw	r24, r18
     dc0:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_display_int_nodelay>
		LCD_display_int_nodelay((result/10)%10);
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	9a 81       	ldd	r25, Y+2	; 0x02
     dc8:	ab 81       	ldd	r26, Y+3	; 0x03
     dca:	bc 81       	ldd	r27, Y+4	; 0x04
     dcc:	2a e0       	ldi	r18, 0x0A	; 10
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	40 e0       	ldi	r20, 0x00	; 0
     dd2:	50 e0       	ldi	r21, 0x00	; 0
     dd4:	bc 01       	movw	r22, r24
     dd6:	cd 01       	movw	r24, r26
     dd8:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
     ddc:	da 01       	movw	r26, r20
     dde:	c9 01       	movw	r24, r18
     de0:	2a e0       	ldi	r18, 0x0A	; 10
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	40 e0       	ldi	r20, 0x00	; 0
     de6:	50 e0       	ldi	r21, 0x00	; 0
     de8:	bc 01       	movw	r22, r24
     dea:	cd 01       	movw	r24, r26
     dec:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
     df0:	dc 01       	movw	r26, r24
     df2:	cb 01       	movw	r24, r22
     df4:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_display_int_nodelay>
		LCD_display_int_nodelay(result%10);
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	9a 81       	ldd	r25, Y+2	; 0x02
     dfc:	ab 81       	ldd	r26, Y+3	; 0x03
     dfe:	bc 81       	ldd	r27, Y+4	; 0x04
     e00:	2a e0       	ldi	r18, 0x0A	; 10
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	bc 01       	movw	r22, r24
     e0a:	cd 01       	movw	r24, r26
     e0c:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_display_int_nodelay>
     e18:	f7 c0       	rjmp	.+494    	; 0x1008 <calc+0x408>
	}
	else if(result>=1000&&result<10000)
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	9a 81       	ldd	r25, Y+2	; 0x02
     e1e:	ab 81       	ldd	r26, Y+3	; 0x03
     e20:	bc 81       	ldd	r27, Y+4	; 0x04
     e22:	88 3e       	cpi	r24, 0xE8	; 232
     e24:	33 e0       	ldi	r19, 0x03	; 3
     e26:	93 07       	cpc	r25, r19
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	a3 07       	cpc	r26, r19
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	b3 07       	cpc	r27, r19
     e30:	08 f4       	brcc	.+2      	; 0xe34 <calc+0x234>
     e32:	62 c0       	rjmp	.+196    	; 0xef8 <calc+0x2f8>
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	9a 81       	ldd	r25, Y+2	; 0x02
     e38:	ab 81       	ldd	r26, Y+3	; 0x03
     e3a:	bc 81       	ldd	r27, Y+4	; 0x04
     e3c:	80 31       	cpi	r24, 0x10	; 16
     e3e:	27 e2       	ldi	r18, 0x27	; 39
     e40:	92 07       	cpc	r25, r18
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	a2 07       	cpc	r26, r18
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	b2 07       	cpc	r27, r18
     e4a:	08 f0       	brcs	.+2      	; 0xe4e <calc+0x24e>
     e4c:	55 c0       	rjmp	.+170    	; 0xef8 <calc+0x2f8>
	{
		LCD_display_int_nodelay(result/1000);
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	9a 81       	ldd	r25, Y+2	; 0x02
     e52:	ab 81       	ldd	r26, Y+3	; 0x03
     e54:	bc 81       	ldd	r27, Y+4	; 0x04
     e56:	28 ee       	ldi	r18, 0xE8	; 232
     e58:	33 e0       	ldi	r19, 0x03	; 3
     e5a:	40 e0       	ldi	r20, 0x00	; 0
     e5c:	50 e0       	ldi	r21, 0x00	; 0
     e5e:	bc 01       	movw	r22, r24
     e60:	cd 01       	movw	r24, r26
     e62:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
     e66:	da 01       	movw	r26, r20
     e68:	c9 01       	movw	r24, r18
     e6a:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_display_int_nodelay>
		LCD_display_int_nodelay((result/100)%10);
     e6e:	89 81       	ldd	r24, Y+1	; 0x01
     e70:	9a 81       	ldd	r25, Y+2	; 0x02
     e72:	ab 81       	ldd	r26, Y+3	; 0x03
     e74:	bc 81       	ldd	r27, Y+4	; 0x04
     e76:	24 e6       	ldi	r18, 0x64	; 100
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	40 e0       	ldi	r20, 0x00	; 0
     e7c:	50 e0       	ldi	r21, 0x00	; 0
     e7e:	bc 01       	movw	r22, r24
     e80:	cd 01       	movw	r24, r26
     e82:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
     e86:	da 01       	movw	r26, r20
     e88:	c9 01       	movw	r24, r18
     e8a:	2a e0       	ldi	r18, 0x0A	; 10
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	40 e0       	ldi	r20, 0x00	; 0
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	bc 01       	movw	r22, r24
     e94:	cd 01       	movw	r24, r26
     e96:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_display_int_nodelay>
		LCD_display_int_nodelay((result/10)%10);
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	9a 81       	ldd	r25, Y+2	; 0x02
     ea6:	ab 81       	ldd	r26, Y+3	; 0x03
     ea8:	bc 81       	ldd	r27, Y+4	; 0x04
     eaa:	2a e0       	ldi	r18, 0x0A	; 10
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	40 e0       	ldi	r20, 0x00	; 0
     eb0:	50 e0       	ldi	r21, 0x00	; 0
     eb2:	bc 01       	movw	r22, r24
     eb4:	cd 01       	movw	r24, r26
     eb6:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
     eba:	da 01       	movw	r26, r20
     ebc:	c9 01       	movw	r24, r18
     ebe:	2a e0       	ldi	r18, 0x0A	; 10
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	bc 01       	movw	r22, r24
     ec8:	cd 01       	movw	r24, r26
     eca:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_display_int_nodelay>
		LCD_display_int_nodelay(result%10);
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	9a 81       	ldd	r25, Y+2	; 0x02
     eda:	ab 81       	ldd	r26, Y+3	; 0x03
     edc:	bc 81       	ldd	r27, Y+4	; 0x04
     ede:	2a e0       	ldi	r18, 0x0A	; 10
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	40 e0       	ldi	r20, 0x00	; 0
     ee4:	50 e0       	ldi	r21, 0x00	; 0
     ee6:	bc 01       	movw	r22, r24
     ee8:	cd 01       	movw	r24, r26
     eea:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
     eee:	dc 01       	movw	r26, r24
     ef0:	cb 01       	movw	r24, r22
     ef2:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_display_int_nodelay>
     ef6:	88 c0       	rjmp	.+272    	; 0x1008 <calc+0x408>

	}
	else if(result>=10000&&result<100000)
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	9a 81       	ldd	r25, Y+2	; 0x02
     efc:	ab 81       	ldd	r26, Y+3	; 0x03
     efe:	bc 81       	ldd	r27, Y+4	; 0x04
     f00:	80 31       	cpi	r24, 0x10	; 16
     f02:	37 e2       	ldi	r19, 0x27	; 39
     f04:	93 07       	cpc	r25, r19
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	a3 07       	cpc	r26, r19
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	b3 07       	cpc	r27, r19
     f0e:	08 f4       	brcc	.+2      	; 0xf12 <calc+0x312>
     f10:	7b c0       	rjmp	.+246    	; 0x1008 <calc+0x408>
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	9a 81       	ldd	r25, Y+2	; 0x02
     f16:	ab 81       	ldd	r26, Y+3	; 0x03
     f18:	bc 81       	ldd	r27, Y+4	; 0x04
     f1a:	80 3a       	cpi	r24, 0xA0	; 160
     f1c:	26 e8       	ldi	r18, 0x86	; 134
     f1e:	92 07       	cpc	r25, r18
     f20:	21 e0       	ldi	r18, 0x01	; 1
     f22:	a2 07       	cpc	r26, r18
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	b2 07       	cpc	r27, r18
     f28:	08 f0       	brcs	.+2      	; 0xf2c <calc+0x32c>
     f2a:	6e c0       	rjmp	.+220    	; 0x1008 <calc+0x408>
	{
		LCD_display_int_nodelay(result/10000);
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	9a 81       	ldd	r25, Y+2	; 0x02
     f30:	ab 81       	ldd	r26, Y+3	; 0x03
     f32:	bc 81       	ldd	r27, Y+4	; 0x04
     f34:	20 e1       	ldi	r18, 0x10	; 16
     f36:	37 e2       	ldi	r19, 0x27	; 39
     f38:	40 e0       	ldi	r20, 0x00	; 0
     f3a:	50 e0       	ldi	r21, 0x00	; 0
     f3c:	bc 01       	movw	r22, r24
     f3e:	cd 01       	movw	r24, r26
     f40:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
     f44:	da 01       	movw	r26, r20
     f46:	c9 01       	movw	r24, r18
     f48:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_display_int_nodelay>
		LCD_display_int_nodelay((result/1000)%10);
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	9a 81       	ldd	r25, Y+2	; 0x02
     f50:	ab 81       	ldd	r26, Y+3	; 0x03
     f52:	bc 81       	ldd	r27, Y+4	; 0x04
     f54:	28 ee       	ldi	r18, 0xE8	; 232
     f56:	33 e0       	ldi	r19, 0x03	; 3
     f58:	40 e0       	ldi	r20, 0x00	; 0
     f5a:	50 e0       	ldi	r21, 0x00	; 0
     f5c:	bc 01       	movw	r22, r24
     f5e:	cd 01       	movw	r24, r26
     f60:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
     f64:	da 01       	movw	r26, r20
     f66:	c9 01       	movw	r24, r18
     f68:	2a e0       	ldi	r18, 0x0A	; 10
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 e0       	ldi	r20, 0x00	; 0
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	bc 01       	movw	r22, r24
     f72:	cd 01       	movw	r24, r26
     f74:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
     f78:	dc 01       	movw	r26, r24
     f7a:	cb 01       	movw	r24, r22
     f7c:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_display_int_nodelay>
		LCD_display_int_nodelay((result/100)%10);
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	9a 81       	ldd	r25, Y+2	; 0x02
     f84:	ab 81       	ldd	r26, Y+3	; 0x03
     f86:	bc 81       	ldd	r27, Y+4	; 0x04
     f88:	24 e6       	ldi	r18, 0x64	; 100
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	40 e0       	ldi	r20, 0x00	; 0
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	bc 01       	movw	r22, r24
     f92:	cd 01       	movw	r24, r26
     f94:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
     f98:	da 01       	movw	r26, r20
     f9a:	c9 01       	movw	r24, r18
     f9c:	2a e0       	ldi	r18, 0x0A	; 10
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	40 e0       	ldi	r20, 0x00	; 0
     fa2:	50 e0       	ldi	r21, 0x00	; 0
     fa4:	bc 01       	movw	r22, r24
     fa6:	cd 01       	movw	r24, r26
     fa8:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_display_int_nodelay>
		LCD_display_int_nodelay((result/10)%10);
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	9a 81       	ldd	r25, Y+2	; 0x02
     fb8:	ab 81       	ldd	r26, Y+3	; 0x03
     fba:	bc 81       	ldd	r27, Y+4	; 0x04
     fbc:	2a e0       	ldi	r18, 0x0A	; 10
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	40 e0       	ldi	r20, 0x00	; 0
     fc2:	50 e0       	ldi	r21, 0x00	; 0
     fc4:	bc 01       	movw	r22, r24
     fc6:	cd 01       	movw	r24, r26
     fc8:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
     fcc:	da 01       	movw	r26, r20
     fce:	c9 01       	movw	r24, r18
     fd0:	2a e0       	ldi	r18, 0x0A	; 10
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	40 e0       	ldi	r20, 0x00	; 0
     fd6:	50 e0       	ldi	r21, 0x00	; 0
     fd8:	bc 01       	movw	r22, r24
     fda:	cd 01       	movw	r24, r26
     fdc:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
     fe0:	dc 01       	movw	r26, r24
     fe2:	cb 01       	movw	r24, r22
     fe4:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_display_int_nodelay>
		LCD_display_int_nodelay(result%10);
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	9a 81       	ldd	r25, Y+2	; 0x02
     fec:	ab 81       	ldd	r26, Y+3	; 0x03
     fee:	bc 81       	ldd	r27, Y+4	; 0x04
     ff0:	2a e0       	ldi	r18, 0x0A	; 10
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	40 e0       	ldi	r20, 0x00	; 0
     ff6:	50 e0       	ldi	r21, 0x00	; 0
     ff8:	bc 01       	movw	r22, r24
     ffa:	cd 01       	movw	r24, r26
     ffc:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__udivmodsi4>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	0e 94 38 1a 	call	0x3470	; 0x3470 <LCD_display_int_nodelay>

	}

}
    1008:	2f 96       	adiw	r28, 0x0f	; 15
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	cd bf       	out	0x3d, r28	; 61
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	1f 91       	pop	r17
    101a:	0f 91       	pop	r16
    101c:	08 95       	ret

0000101e <GET_OP1>:

void GET_OP1(void)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	0f 92       	push	r0
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
	volatile uint8 key;
	key = KeyPad_getPressedKey(); /* get the pressed key number */
    1028:	0e 94 b0 11 	call	0x2360	; 0x2360 <KeyPad_getPressedKey>
    102c:	89 83       	std	Y+1, r24	; 0x01
	if(key=='+'||key=='-'||key=='/'||key=='='||key=='A'||key=='*')
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	8b 32       	cpi	r24, 0x2B	; 43
    1032:	79 f0       	breq	.+30     	; 0x1052 <GET_OP1+0x34>
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	8d 32       	cpi	r24, 0x2D	; 45
    1038:	61 f0       	breq	.+24     	; 0x1052 <GET_OP1+0x34>
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	8f 32       	cpi	r24, 0x2F	; 47
    103e:	49 f0       	breq	.+18     	; 0x1052 <GET_OP1+0x34>
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	8d 33       	cpi	r24, 0x3D	; 61
    1044:	31 f0       	breq	.+12     	; 0x1052 <GET_OP1+0x34>
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	81 34       	cpi	r24, 0x41	; 65
    104a:	19 f0       	breq	.+6      	; 0x1052 <GET_OP1+0x34>
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	8a 32       	cpi	r24, 0x2A	; 42
    1050:	19 f4       	brne	.+6      	; 0x1058 <GET_OP1+0x3a>
	{
		restart();
    1052:	0e 94 ca 09 	call	0x1394	; 0x1394 <restart>
    1056:	cd c0       	rjmp	.+410    	; 0x11f2 <GET_OP1+0x1d4>
		return;
	}
	LCD_display_int(key);   /*Display the pressed key*/
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	0e 94 a8 19 	call	0x3350	; 0x3350 <LCD_display_int>
	op1=key;
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	88 2f       	mov	r24, r24
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	a0 e0       	ldi	r26, 0x00	; 0
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	80 93 74 00 	sts	0x0074, r24
    106c:	90 93 75 00 	sts	0x0075, r25
    1070:	a0 93 76 00 	sts	0x0076, r26
    1074:	b0 93 77 00 	sts	0x0077, r27
	key = KeyPad_getPressedKey();
    1078:	0e 94 b0 11 	call	0x2360	; 0x2360 <KeyPad_getPressedKey>
    107c:	89 83       	std	Y+1, r24	; 0x01
	if(key=='+'||key=='-'||key=='/'||key=='*')   /*if the entered digit is an arthimetic operator*/
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	8b 32       	cpi	r24, 0x2B	; 43
    1082:	49 f0       	breq	.+18     	; 0x1096 <GET_OP1+0x78>
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	8d 32       	cpi	r24, 0x2D	; 45
    1088:	31 f0       	breq	.+12     	; 0x1096 <GET_OP1+0x78>
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	8f 32       	cpi	r24, 0x2F	; 47
    108e:	19 f0       	breq	.+6      	; 0x1096 <GET_OP1+0x78>
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	8a 32       	cpi	r24, 0x2A	; 42
    1094:	89 f4       	brne	.+34     	; 0x10b8 <GET_OP1+0x9a>
		{
			LCD_display_int(key);   /*Display the pressed key*/
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	0e 94 a8 19 	call	0x3350	; 0x3350 <LCD_display_int>
			operation=key;
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	88 2f       	mov	r24, r24
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	a0 e0       	ldi	r26, 0x00	; 0
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	80 93 6c 00 	sts	0x006C, r24
    10aa:	90 93 6d 00 	sts	0x006D, r25
    10ae:	a0 93 6e 00 	sts	0x006E, r26
    10b2:	b0 93 6f 00 	sts	0x006F, r27
    10b6:	9d c0       	rjmp	.+314    	; 0x11f2 <GET_OP1+0x1d4>
			return;
		}
	else if(key=='A'||key=='=')
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	81 34       	cpi	r24, 0x41	; 65
    10bc:	19 f0       	breq	.+6      	; 0x10c4 <GET_OP1+0xa6>
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	8d 33       	cpi	r24, 0x3D	; 61
    10c2:	19 f4       	brne	.+6      	; 0x10ca <GET_OP1+0xac>
	{
		restart();
    10c4:	0e 94 ca 09 	call	0x1394	; 0x1394 <restart>
    10c8:	94 c0       	rjmp	.+296    	; 0x11f2 <GET_OP1+0x1d4>
		return;
	}
	LCD_display_int(key);
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	0e 94 a8 19 	call	0x3350	; 0x3350 <LCD_display_int>
	op1=op1*10+key;
    10d0:	80 91 74 00 	lds	r24, 0x0074
    10d4:	90 91 75 00 	lds	r25, 0x0075
    10d8:	a0 91 76 00 	lds	r26, 0x0076
    10dc:	b0 91 77 00 	lds	r27, 0x0077
    10e0:	2a e0       	ldi	r18, 0x0A	; 10
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	40 e0       	ldi	r20, 0x00	; 0
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	bc 01       	movw	r22, r24
    10ea:	cd 01       	movw	r24, r26
    10ec:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__mulsi3>
    10f0:	9b 01       	movw	r18, r22
    10f2:	ac 01       	movw	r20, r24
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	88 2f       	mov	r24, r24
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	a0 e0       	ldi	r26, 0x00	; 0
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	82 0f       	add	r24, r18
    1100:	93 1f       	adc	r25, r19
    1102:	a4 1f       	adc	r26, r20
    1104:	b5 1f       	adc	r27, r21
    1106:	80 93 74 00 	sts	0x0074, r24
    110a:	90 93 75 00 	sts	0x0075, r25
    110e:	a0 93 76 00 	sts	0x0076, r26
    1112:	b0 93 77 00 	sts	0x0077, r27
	key = KeyPad_getPressedKey();
    1116:	0e 94 b0 11 	call	0x2360	; 0x2360 <KeyPad_getPressedKey>
    111a:	89 83       	std	Y+1, r24	; 0x01
	if(key=='+'||key=='-'||key=='/'||key=='*')   /*if the entered digit is an arthimetic operator*/
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	8b 32       	cpi	r24, 0x2B	; 43
    1120:	49 f0       	breq	.+18     	; 0x1134 <GET_OP1+0x116>
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	8d 32       	cpi	r24, 0x2D	; 45
    1126:	31 f0       	breq	.+12     	; 0x1134 <GET_OP1+0x116>
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	8f 32       	cpi	r24, 0x2F	; 47
    112c:	19 f0       	breq	.+6      	; 0x1134 <GET_OP1+0x116>
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	8a 32       	cpi	r24, 0x2A	; 42
    1132:	89 f4       	brne	.+34     	; 0x1156 <GET_OP1+0x138>
			{
				LCD_display_int(key);   /*Display the pressed key*/
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	0e 94 a8 19 	call	0x3350	; 0x3350 <LCD_display_int>
				operation=key;
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	88 2f       	mov	r24, r24
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	a0 e0       	ldi	r26, 0x00	; 0
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	80 93 6c 00 	sts	0x006C, r24
    1148:	90 93 6d 00 	sts	0x006D, r25
    114c:	a0 93 6e 00 	sts	0x006E, r26
    1150:	b0 93 6f 00 	sts	0x006F, r27
    1154:	4e c0       	rjmp	.+156    	; 0x11f2 <GET_OP1+0x1d4>
				return;
			}
	else if(key=='A'||key=='=')
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	81 34       	cpi	r24, 0x41	; 65
    115a:	19 f0       	breq	.+6      	; 0x1162 <GET_OP1+0x144>
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	8d 33       	cpi	r24, 0x3D	; 61
    1160:	19 f4       	brne	.+6      	; 0x1168 <GET_OP1+0x14a>
	{
		restart();
    1162:	0e 94 ca 09 	call	0x1394	; 0x1394 <restart>
    1166:	45 c0       	rjmp	.+138    	; 0x11f2 <GET_OP1+0x1d4>
		return;
	}
	LCD_display_int(key);
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	0e 94 a8 19 	call	0x3350	; 0x3350 <LCD_display_int>
		op1=op1*10+key;
    116e:	80 91 74 00 	lds	r24, 0x0074
    1172:	90 91 75 00 	lds	r25, 0x0075
    1176:	a0 91 76 00 	lds	r26, 0x0076
    117a:	b0 91 77 00 	lds	r27, 0x0077
    117e:	2a e0       	ldi	r18, 0x0A	; 10
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	40 e0       	ldi	r20, 0x00	; 0
    1184:	50 e0       	ldi	r21, 0x00	; 0
    1186:	bc 01       	movw	r22, r24
    1188:	cd 01       	movw	r24, r26
    118a:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__mulsi3>
    118e:	9b 01       	movw	r18, r22
    1190:	ac 01       	movw	r20, r24
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	88 2f       	mov	r24, r24
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	a0 e0       	ldi	r26, 0x00	; 0
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	82 0f       	add	r24, r18
    119e:	93 1f       	adc	r25, r19
    11a0:	a4 1f       	adc	r26, r20
    11a2:	b5 1f       	adc	r27, r21
    11a4:	80 93 74 00 	sts	0x0074, r24
    11a8:	90 93 75 00 	sts	0x0075, r25
    11ac:	a0 93 76 00 	sts	0x0076, r26
    11b0:	b0 93 77 00 	sts	0x0077, r27
		key = KeyPad_getPressedKey();
    11b4:	0e 94 b0 11 	call	0x2360	; 0x2360 <KeyPad_getPressedKey>
    11b8:	89 83       	std	Y+1, r24	; 0x01
		if(key=='+'||key=='-'||key=='/'||key=='*')   /*if the entered digit is an arthimetic operator*/
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	8b 32       	cpi	r24, 0x2B	; 43
    11be:	49 f0       	breq	.+18     	; 0x11d2 <GET_OP1+0x1b4>
    11c0:	89 81       	ldd	r24, Y+1	; 0x01
    11c2:	8d 32       	cpi	r24, 0x2D	; 45
    11c4:	31 f0       	breq	.+12     	; 0x11d2 <GET_OP1+0x1b4>
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	8f 32       	cpi	r24, 0x2F	; 47
    11ca:	19 f0       	breq	.+6      	; 0x11d2 <GET_OP1+0x1b4>
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	8a 32       	cpi	r24, 0x2A	; 42
    11d0:	81 f4       	brne	.+32     	; 0x11f2 <GET_OP1+0x1d4>
				{
					LCD_display_int(key);   /*Display the pressed key*/
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	0e 94 a8 19 	call	0x3350	; 0x3350 <LCD_display_int>
					operation=key;
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	88 2f       	mov	r24, r24
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	a0 e0       	ldi	r26, 0x00	; 0
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	80 93 6c 00 	sts	0x006C, r24
    11e6:	90 93 6d 00 	sts	0x006D, r25
    11ea:	a0 93 6e 00 	sts	0x006E, r26
    11ee:	b0 93 6f 00 	sts	0x006F, r27
					return;
				}
}
    11f2:	0f 90       	pop	r0
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <GET_OP2>:




void GET_OP2(void)
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	0f 92       	push	r0
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
	uint8 key;

	key =KeyPad_getPressedKey();
    1204:	0e 94 b0 11 	call	0x2360	; 0x2360 <KeyPad_getPressedKey>
    1208:	89 83       	std	Y+1, r24	; 0x01
	if(key=='+'||key=='-'||key=='/'||key=='='||key=='A'||key=='*')
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	8b 32       	cpi	r24, 0x2B	; 43
    120e:	79 f0       	breq	.+30     	; 0x122e <GET_OP2+0x34>
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	8d 32       	cpi	r24, 0x2D	; 45
    1214:	61 f0       	breq	.+24     	; 0x122e <GET_OP2+0x34>
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	8f 32       	cpi	r24, 0x2F	; 47
    121a:	49 f0       	breq	.+18     	; 0x122e <GET_OP2+0x34>
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	8d 33       	cpi	r24, 0x3D	; 61
    1220:	31 f0       	breq	.+12     	; 0x122e <GET_OP2+0x34>
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	81 34       	cpi	r24, 0x41	; 65
    1226:	19 f0       	breq	.+6      	; 0x122e <GET_OP2+0x34>
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	8a 32       	cpi	r24, 0x2A	; 42
    122c:	19 f4       	brne	.+6      	; 0x1234 <GET_OP2+0x3a>
	{
		restart();
    122e:	0e 94 ca 09 	call	0x1394	; 0x1394 <restart>
    1232:	ac c0       	rjmp	.+344    	; 0x138c <GET_OP2+0x192>
		return;
	}
	LCD_display_int(key);   /*Display the pressed key*/
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	0e 94 a8 19 	call	0x3350	; 0x3350 <LCD_display_int>
	op2=key;
    123a:	89 81       	ldd	r24, Y+1	; 0x01
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	a0 e0       	ldi	r26, 0x00	; 0
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	80 93 68 00 	sts	0x0068, r24
    1248:	90 93 69 00 	sts	0x0069, r25
    124c:	a0 93 6a 00 	sts	0x006A, r26
    1250:	b0 93 6b 00 	sts	0x006B, r27

	key =KeyPad_getPressedKey();
    1254:	0e 94 b0 11 	call	0x2360	; 0x2360 <KeyPad_getPressedKey>
    1258:	89 83       	std	Y+1, r24	; 0x01
	if(key=='+'||key=='-'||key=='/'||key=='A'||key=='*')
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	8b 32       	cpi	r24, 0x2B	; 43
    125e:	61 f0       	breq	.+24     	; 0x1278 <GET_OP2+0x7e>
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	8d 32       	cpi	r24, 0x2D	; 45
    1264:	49 f0       	breq	.+18     	; 0x1278 <GET_OP2+0x7e>
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	8f 32       	cpi	r24, 0x2F	; 47
    126a:	31 f0       	breq	.+12     	; 0x1278 <GET_OP2+0x7e>
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	81 34       	cpi	r24, 0x41	; 65
    1270:	19 f0       	breq	.+6      	; 0x1278 <GET_OP2+0x7e>
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	8a 32       	cpi	r24, 0x2A	; 42
    1276:	19 f4       	brne	.+6      	; 0x127e <GET_OP2+0x84>
	{
		restart();
    1278:	0e 94 ca 09 	call	0x1394	; 0x1394 <restart>
    127c:	87 c0       	rjmp	.+270    	; 0x138c <GET_OP2+0x192>
		return;
	}
	else if(key=='=')
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	8d 33       	cpi	r24, 0x3D	; 61
    1282:	09 f4       	brne	.+2      	; 0x1286 <GET_OP2+0x8c>
    1284:	83 c0       	rjmp	.+262    	; 0x138c <GET_OP2+0x192>
	{
		return;
	}
	LCD_display_int(key);
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	0e 94 a8 19 	call	0x3350	; 0x3350 <LCD_display_int>
	op2=op2*10+key;
    128c:	80 91 68 00 	lds	r24, 0x0068
    1290:	90 91 69 00 	lds	r25, 0x0069
    1294:	a0 91 6a 00 	lds	r26, 0x006A
    1298:	b0 91 6b 00 	lds	r27, 0x006B
    129c:	2a e0       	ldi	r18, 0x0A	; 10
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	40 e0       	ldi	r20, 0x00	; 0
    12a2:	50 e0       	ldi	r21, 0x00	; 0
    12a4:	bc 01       	movw	r22, r24
    12a6:	cd 01       	movw	r24, r26
    12a8:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__mulsi3>
    12ac:	9b 01       	movw	r18, r22
    12ae:	ac 01       	movw	r20, r24
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	88 2f       	mov	r24, r24
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	a0 e0       	ldi	r26, 0x00	; 0
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	82 0f       	add	r24, r18
    12bc:	93 1f       	adc	r25, r19
    12be:	a4 1f       	adc	r26, r20
    12c0:	b5 1f       	adc	r27, r21
    12c2:	80 93 68 00 	sts	0x0068, r24
    12c6:	90 93 69 00 	sts	0x0069, r25
    12ca:	a0 93 6a 00 	sts	0x006A, r26
    12ce:	b0 93 6b 00 	sts	0x006B, r27
	key =KeyPad_getPressedKey();
    12d2:	0e 94 b0 11 	call	0x2360	; 0x2360 <KeyPad_getPressedKey>
    12d6:	89 83       	std	Y+1, r24	; 0x01
	if(key=='+'||key=='-'||key=='/'||key=='A'||key=='*')
    12d8:	89 81       	ldd	r24, Y+1	; 0x01
    12da:	8b 32       	cpi	r24, 0x2B	; 43
    12dc:	61 f0       	breq	.+24     	; 0x12f6 <GET_OP2+0xfc>
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	8d 32       	cpi	r24, 0x2D	; 45
    12e2:	49 f0       	breq	.+18     	; 0x12f6 <GET_OP2+0xfc>
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	8f 32       	cpi	r24, 0x2F	; 47
    12e8:	31 f0       	breq	.+12     	; 0x12f6 <GET_OP2+0xfc>
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	81 34       	cpi	r24, 0x41	; 65
    12ee:	19 f0       	breq	.+6      	; 0x12f6 <GET_OP2+0xfc>
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	8a 32       	cpi	r24, 0x2A	; 42
    12f4:	19 f4       	brne	.+6      	; 0x12fc <GET_OP2+0x102>
	{
		restart();
    12f6:	0e 94 ca 09 	call	0x1394	; 0x1394 <restart>
    12fa:	48 c0       	rjmp	.+144    	; 0x138c <GET_OP2+0x192>
		return;
	}
	else if(key=='=')
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	8d 33       	cpi	r24, 0x3D	; 61
    1300:	09 f4       	brne	.+2      	; 0x1304 <GET_OP2+0x10a>
    1302:	44 c0       	rjmp	.+136    	; 0x138c <GET_OP2+0x192>
	{
		return;
	}
	LCD_display_int(key);
    1304:	89 81       	ldd	r24, Y+1	; 0x01
    1306:	0e 94 a8 19 	call	0x3350	; 0x3350 <LCD_display_int>
		op2=op2*10+key;
    130a:	80 91 68 00 	lds	r24, 0x0068
    130e:	90 91 69 00 	lds	r25, 0x0069
    1312:	a0 91 6a 00 	lds	r26, 0x006A
    1316:	b0 91 6b 00 	lds	r27, 0x006B
    131a:	2a e0       	ldi	r18, 0x0A	; 10
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	50 e0       	ldi	r21, 0x00	; 0
    1322:	bc 01       	movw	r22, r24
    1324:	cd 01       	movw	r24, r26
    1326:	0e 94 4c 1a 	call	0x3498	; 0x3498 <__mulsi3>
    132a:	9b 01       	movw	r18, r22
    132c:	ac 01       	movw	r20, r24
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	88 2f       	mov	r24, r24
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	a0 e0       	ldi	r26, 0x00	; 0
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	82 0f       	add	r24, r18
    133a:	93 1f       	adc	r25, r19
    133c:	a4 1f       	adc	r26, r20
    133e:	b5 1f       	adc	r27, r21
    1340:	80 93 68 00 	sts	0x0068, r24
    1344:	90 93 69 00 	sts	0x0069, r25
    1348:	a0 93 6a 00 	sts	0x006A, r26
    134c:	b0 93 6b 00 	sts	0x006B, r27
		key =KeyPad_getPressedKey();
    1350:	0e 94 b0 11 	call	0x2360	; 0x2360 <KeyPad_getPressedKey>
    1354:	89 83       	std	Y+1, r24	; 0x01
		if(key=='+'||key=='-'||key=='/'||key=='A'||key=='*')
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	8b 32       	cpi	r24, 0x2B	; 43
    135a:	61 f0       	breq	.+24     	; 0x1374 <GET_OP2+0x17a>
    135c:	89 81       	ldd	r24, Y+1	; 0x01
    135e:	8d 32       	cpi	r24, 0x2D	; 45
    1360:	49 f0       	breq	.+18     	; 0x1374 <GET_OP2+0x17a>
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	8f 32       	cpi	r24, 0x2F	; 47
    1366:	31 f0       	breq	.+12     	; 0x1374 <GET_OP2+0x17a>
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	81 34       	cpi	r24, 0x41	; 65
    136c:	19 f0       	breq	.+6      	; 0x1374 <GET_OP2+0x17a>
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	8a 32       	cpi	r24, 0x2A	; 42
    1372:	61 f4       	brne	.+24     	; 0x138c <GET_OP2+0x192>
		{
			check=1;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	a0 e0       	ldi	r26, 0x00	; 0
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	80 93 70 00 	sts	0x0070, r24
    1380:	90 93 71 00 	sts	0x0071, r25
    1384:	a0 93 72 00 	sts	0x0072, r26
    1388:	b0 93 73 00 	sts	0x0073, r27
		}
		else if(key=='=')
		{
			return;
		}
}
    138c:	0f 90       	pop	r0
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <restart>:
//	LCD_display_int(key);   /*Display the pressed key*/
//	operation=key;
//}

void restart(void)
{
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
	LCD_Clear();
    139c:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <LCD_Clear>
	check=1;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	a0 e0       	ldi	r26, 0x00	; 0
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	80 93 70 00 	sts	0x0070, r24
    13ac:	90 93 71 00 	sts	0x0071, r25
    13b0:	a0 93 72 00 	sts	0x0072, r26
    13b4:	b0 93 73 00 	sts	0x0073, r27
}
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <DIO_setPINDir>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void DIO_setPINDir(uint8 portname,uint8 pin,uint8 direction)
{
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <DIO_setPINDir+0x6>
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <DIO_setPINDir+0x8>
    13c6:	0f 92       	push	r0
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	6a 83       	std	Y+2, r22	; 0x02
    13d0:	4b 83       	std	Y+3, r20	; 0x03

	switch(portname)
    13d2:	89 81       	ldd	r24, Y+1	; 0x01
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	3d 83       	std	Y+5, r19	; 0x05
    13da:	2c 83       	std	Y+4, r18	; 0x04
    13dc:	8c 81       	ldd	r24, Y+4	; 0x04
    13de:	9d 81       	ldd	r25, Y+5	; 0x05
    13e0:	82 34       	cpi	r24, 0x42	; 66
    13e2:	91 05       	cpc	r25, r1
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <DIO_setPINDir+0x2a>
    13e6:	44 c0       	rjmp	.+136    	; 0x1470 <DIO_setPINDir+0xb2>
    13e8:	2c 81       	ldd	r18, Y+4	; 0x04
    13ea:	3d 81       	ldd	r19, Y+5	; 0x05
    13ec:	23 34       	cpi	r18, 0x43	; 67
    13ee:	31 05       	cpc	r19, r1
    13f0:	34 f4       	brge	.+12     	; 0x13fe <DIO_setPINDir+0x40>
    13f2:	8c 81       	ldd	r24, Y+4	; 0x04
    13f4:	9d 81       	ldd	r25, Y+5	; 0x05
    13f6:	81 34       	cpi	r24, 0x41	; 65
    13f8:	91 05       	cpc	r25, r1
    13fa:	71 f0       	breq	.+28     	; 0x1418 <DIO_setPINDir+0x5a>
    13fc:	bc c0       	rjmp	.+376    	; 0x1576 <DIO_setPINDir+0x1b8>
    13fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1400:	3d 81       	ldd	r19, Y+5	; 0x05
    1402:	23 34       	cpi	r18, 0x43	; 67
    1404:	31 05       	cpc	r19, r1
    1406:	09 f4       	brne	.+2      	; 0x140a <DIO_setPINDir+0x4c>
    1408:	5f c0       	rjmp	.+190    	; 0x14c8 <DIO_setPINDir+0x10a>
    140a:	8c 81       	ldd	r24, Y+4	; 0x04
    140c:	9d 81       	ldd	r25, Y+5	; 0x05
    140e:	84 34       	cpi	r24, 0x44	; 68
    1410:	91 05       	cpc	r25, r1
    1412:	09 f4       	brne	.+2      	; 0x1416 <DIO_setPINDir+0x58>
    1414:	85 c0       	rjmp	.+266    	; 0x1520 <DIO_setPINDir+0x162>
    1416:	af c0       	rjmp	.+350    	; 0x1576 <DIO_setPINDir+0x1b8>
	{

	case 'A':
		if( direction==1 )
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	a1 f4       	brne	.+40     	; 0x1446 <DIO_setPINDir+0x88>
		{
			SET_BIT(DDRA,pin);
    141e:	aa e3       	ldi	r26, 0x3A	; 58
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	ea e3       	ldi	r30, 0x3A	; 58
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <DIO_setPINDir+0x7e>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <DIO_setPINDir+0x7a>
    1440:	84 2b       	or	r24, r20
    1442:	8c 93       	st	X, r24
    1444:	98 c0       	rjmp	.+304    	; 0x1576 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRA,pin);
    1446:	aa e3       	ldi	r26, 0x3A	; 58
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	ea e3       	ldi	r30, 0x3A	; 58
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	48 2f       	mov	r20, r24
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 2e       	mov	r0, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <DIO_setPINDir+0xa6>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <DIO_setPINDir+0xa2>
    1468:	80 95       	com	r24
    146a:	84 23       	and	r24, r20
    146c:	8c 93       	st	X, r24
    146e:	83 c0       	rjmp	.+262    	; 0x1576 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'B':
		if( direction==1 )
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	a1 f4       	brne	.+40     	; 0x149e <DIO_setPINDir+0xe0>
		{
			SET_BIT(DDRB,pin);
    1476:	a7 e3       	ldi	r26, 0x37	; 55
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e7 e3       	ldi	r30, 0x37	; 55
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	48 2f       	mov	r20, r24
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 2e       	mov	r0, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <DIO_setPINDir+0xd6>
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <DIO_setPINDir+0xd2>
    1498:	84 2b       	or	r24, r20
    149a:	8c 93       	st	X, r24
    149c:	6c c0       	rjmp	.+216    	; 0x1576 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRB,pin);
    149e:	a7 e3       	ldi	r26, 0x37	; 55
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e7 e3       	ldi	r30, 0x37	; 55
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	48 2f       	mov	r20, r24
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	02 2e       	mov	r0, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <DIO_setPINDir+0xfe>
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	0a 94       	dec	r0
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <DIO_setPINDir+0xfa>
    14c0:	80 95       	com	r24
    14c2:	84 23       	and	r24, r20
    14c4:	8c 93       	st	X, r24
    14c6:	57 c0       	rjmp	.+174    	; 0x1576 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'C':
		if( direction==1 )
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	a1 f4       	brne	.+40     	; 0x14f6 <DIO_setPINDir+0x138>
		{
			SET_BIT(DDRC,pin);
    14ce:	a4 e3       	ldi	r26, 0x34	; 52
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e4 e3       	ldi	r30, 0x34	; 52
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	48 2f       	mov	r20, r24
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 2e       	mov	r0, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <DIO_setPINDir+0x12e>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <DIO_setPINDir+0x12a>
    14f0:	84 2b       	or	r24, r20
    14f2:	8c 93       	st	X, r24
    14f4:	40 c0       	rjmp	.+128    	; 0x1576 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRC,pin);
    14f6:	a4 e3       	ldi	r26, 0x34	; 52
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e4 e3       	ldi	r30, 0x34	; 52
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	48 2f       	mov	r20, r24
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 2e       	mov	r0, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <DIO_setPINDir+0x156>
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <DIO_setPINDir+0x152>
    1518:	80 95       	com	r24
    151a:	84 23       	and	r24, r20
    151c:	8c 93       	st	X, r24
    151e:	2b c0       	rjmp	.+86     	; 0x1576 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'D':
		if( direction==1)
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	a1 f4       	brne	.+40     	; 0x154e <DIO_setPINDir+0x190>
		{
			SET_BIT(DDRD,pin);
    1526:	a1 e3       	ldi	r26, 0x31	; 49
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e1 e3       	ldi	r30, 0x31	; 49
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	48 2f       	mov	r20, r24
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	02 2e       	mov	r0, r18
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <DIO_setPINDir+0x186>
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	0a 94       	dec	r0
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <DIO_setPINDir+0x182>
    1548:	84 2b       	or	r24, r20
    154a:	8c 93       	st	X, r24
    154c:	14 c0       	rjmp	.+40     	; 0x1576 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRD,pin);
    154e:	a1 e3       	ldi	r26, 0x31	; 49
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e1 e3       	ldi	r30, 0x31	; 49
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	48 2f       	mov	r20, r24
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	02 2e       	mov	r0, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <DIO_setPINDir+0x1ae>
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	0a 94       	dec	r0
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <DIO_setPINDir+0x1aa>
    1570:	80 95       	com	r24
    1572:	84 23       	and	r24, r20
    1574:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <DIO_write_PIN>:


void DIO_write_PIN(uint8 portname,uint8 pin,uint8 pinvalue)
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	00 d0       	rcall	.+0      	; 0x158c <DIO_write_PIN+0x6>
    158c:	00 d0       	rcall	.+0      	; 0x158e <DIO_write_PIN+0x8>
    158e:	0f 92       	push	r0
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	6a 83       	std	Y+2, r22	; 0x02
    1598:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	3d 83       	std	Y+5, r19	; 0x05
    15a2:	2c 83       	std	Y+4, r18	; 0x04
    15a4:	8c 81       	ldd	r24, Y+4	; 0x04
    15a6:	9d 81       	ldd	r25, Y+5	; 0x05
    15a8:	82 34       	cpi	r24, 0x42	; 66
    15aa:	91 05       	cpc	r25, r1
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <DIO_write_PIN+0x2a>
    15ae:	44 c0       	rjmp	.+136    	; 0x1638 <DIO_write_PIN+0xb2>
    15b0:	2c 81       	ldd	r18, Y+4	; 0x04
    15b2:	3d 81       	ldd	r19, Y+5	; 0x05
    15b4:	23 34       	cpi	r18, 0x43	; 67
    15b6:	31 05       	cpc	r19, r1
    15b8:	34 f4       	brge	.+12     	; 0x15c6 <DIO_write_PIN+0x40>
    15ba:	8c 81       	ldd	r24, Y+4	; 0x04
    15bc:	9d 81       	ldd	r25, Y+5	; 0x05
    15be:	81 34       	cpi	r24, 0x41	; 65
    15c0:	91 05       	cpc	r25, r1
    15c2:	71 f0       	breq	.+28     	; 0x15e0 <DIO_write_PIN+0x5a>
    15c4:	bc c0       	rjmp	.+376    	; 0x173e <DIO_write_PIN+0x1b8>
    15c6:	2c 81       	ldd	r18, Y+4	; 0x04
    15c8:	3d 81       	ldd	r19, Y+5	; 0x05
    15ca:	23 34       	cpi	r18, 0x43	; 67
    15cc:	31 05       	cpc	r19, r1
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <DIO_write_PIN+0x4c>
    15d0:	5f c0       	rjmp	.+190    	; 0x1690 <DIO_write_PIN+0x10a>
    15d2:	8c 81       	ldd	r24, Y+4	; 0x04
    15d4:	9d 81       	ldd	r25, Y+5	; 0x05
    15d6:	84 34       	cpi	r24, 0x44	; 68
    15d8:	91 05       	cpc	r25, r1
    15da:	09 f4       	brne	.+2      	; 0x15de <DIO_write_PIN+0x58>
    15dc:	85 c0       	rjmp	.+266    	; 0x16e8 <DIO_write_PIN+0x162>
    15de:	af c0       	rjmp	.+350    	; 0x173e <DIO_write_PIN+0x1b8>
	{

	case 'A':
		if( pinvalue==1 )
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	a1 f4       	brne	.+40     	; 0x160e <DIO_write_PIN+0x88>
		{
			SET_BIT(PORTA,pin);
    15e6:	ab e3       	ldi	r26, 0x3B	; 59
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	eb e3       	ldi	r30, 0x3B	; 59
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	48 2f       	mov	r20, r24
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 2e       	mov	r0, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <DIO_write_PIN+0x7e>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <DIO_write_PIN+0x7a>
    1608:	84 2b       	or	r24, r20
    160a:	8c 93       	st	X, r24
    160c:	98 c0       	rjmp	.+304    	; 0x173e <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
    160e:	ab e3       	ldi	r26, 0x3B	; 59
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	eb e3       	ldi	r30, 0x3B	; 59
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	48 2f       	mov	r20, r24
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	02 2e       	mov	r0, r18
    1626:	02 c0       	rjmp	.+4      	; 0x162c <DIO_write_PIN+0xa6>
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	0a 94       	dec	r0
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <DIO_write_PIN+0xa2>
    1630:	80 95       	com	r24
    1632:	84 23       	and	r24, r20
    1634:	8c 93       	st	X, r24
    1636:	83 c0       	rjmp	.+262    	; 0x173e <DIO_write_PIN+0x1b8>
		}
		break;
	case 'B':
		if( pinvalue==1 )
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	81 30       	cpi	r24, 0x01	; 1
    163c:	a1 f4       	brne	.+40     	; 0x1666 <DIO_write_PIN+0xe0>
		{
			SET_BIT(PORTB,pin);
    163e:	a8 e3       	ldi	r26, 0x38	; 56
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e8 e3       	ldi	r30, 0x38	; 56
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	48 2f       	mov	r20, r24
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	02 2e       	mov	r0, r18
    1656:	02 c0       	rjmp	.+4      	; 0x165c <DIO_write_PIN+0xd6>
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	0a 94       	dec	r0
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <DIO_write_PIN+0xd2>
    1660:	84 2b       	or	r24, r20
    1662:	8c 93       	st	X, r24
    1664:	6c c0       	rjmp	.+216    	; 0x173e <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTB,pin);
    1666:	a8 e3       	ldi	r26, 0x38	; 56
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e8 e3       	ldi	r30, 0x38	; 56
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	48 2f       	mov	r20, r24
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	02 2e       	mov	r0, r18
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <DIO_write_PIN+0xfe>
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	0a 94       	dec	r0
    1686:	e2 f7       	brpl	.-8      	; 0x1680 <DIO_write_PIN+0xfa>
    1688:	80 95       	com	r24
    168a:	84 23       	and	r24, r20
    168c:	8c 93       	st	X, r24
    168e:	57 c0       	rjmp	.+174    	; 0x173e <DIO_write_PIN+0x1b8>
		}
		break;
	case 'C':
		if( pinvalue==1 )
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	81 30       	cpi	r24, 0x01	; 1
    1694:	a1 f4       	brne	.+40     	; 0x16be <DIO_write_PIN+0x138>
		{
			SET_BIT(PORTC,pin);
    1696:	a5 e3       	ldi	r26, 0x35	; 53
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e5 e3       	ldi	r30, 0x35	; 53
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	48 2f       	mov	r20, r24
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 2e       	mov	r0, r18
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <DIO_write_PIN+0x12e>
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	0a 94       	dec	r0
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <DIO_write_PIN+0x12a>
    16b8:	84 2b       	or	r24, r20
    16ba:	8c 93       	st	X, r24
    16bc:	40 c0       	rjmp	.+128    	; 0x173e <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTC,pin);
    16be:	a5 e3       	ldi	r26, 0x35	; 53
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e5 e3       	ldi	r30, 0x35	; 53
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	48 2f       	mov	r20, r24
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	02 2e       	mov	r0, r18
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <DIO_write_PIN+0x156>
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	0a 94       	dec	r0
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <DIO_write_PIN+0x152>
    16e0:	80 95       	com	r24
    16e2:	84 23       	and	r24, r20
    16e4:	8c 93       	st	X, r24
    16e6:	2b c0       	rjmp	.+86     	; 0x173e <DIO_write_PIN+0x1b8>
		}
		break;
	case 'D':
		if( pinvalue==1)
    16e8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	a1 f4       	brne	.+40     	; 0x1716 <DIO_write_PIN+0x190>
		{
			SET_BIT(PORTD,pin);
    16ee:	a2 e3       	ldi	r26, 0x32	; 50
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e2 e3       	ldi	r30, 0x32	; 50
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	48 2f       	mov	r20, r24
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	02 2e       	mov	r0, r18
    1706:	02 c0       	rjmp	.+4      	; 0x170c <DIO_write_PIN+0x186>
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	0a 94       	dec	r0
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <DIO_write_PIN+0x182>
    1710:	84 2b       	or	r24, r20
    1712:	8c 93       	st	X, r24
    1714:	14 c0       	rjmp	.+40     	; 0x173e <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTD,pin);
    1716:	a2 e3       	ldi	r26, 0x32	; 50
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e2 e3       	ldi	r30, 0x32	; 50
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	48 2f       	mov	r20, r24
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 2e       	mov	r0, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <DIO_write_PIN+0x1ae>
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	0a 94       	dec	r0
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <DIO_write_PIN+0x1aa>
    1738:	80 95       	com	r24
    173a:	84 23       	and	r24, r20
    173c:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	08 95       	ret

0000174e <DIO_read_PIN>:

uint8 DIO_read_PIN(uint8 portname,uint8 pin)
{
    174e:	df 93       	push	r29
    1750:	cf 93       	push	r28
    1752:	00 d0       	rcall	.+0      	; 0x1754 <DIO_read_PIN+0x6>
    1754:	00 d0       	rcall	.+0      	; 0x1756 <DIO_read_PIN+0x8>
    1756:	0f 92       	push	r0
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	8a 83       	std	Y+2, r24	; 0x02
    175e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_val=0;
    1760:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	3d 83       	std	Y+5, r19	; 0x05
    176a:	2c 83       	std	Y+4, r18	; 0x04
    176c:	8c 81       	ldd	r24, Y+4	; 0x04
    176e:	9d 81       	ldd	r25, Y+5	; 0x05
    1770:	82 34       	cpi	r24, 0x42	; 66
    1772:	91 05       	cpc	r25, r1
    1774:	41 f1       	breq	.+80     	; 0x17c6 <DIO_read_PIN+0x78>
    1776:	2c 81       	ldd	r18, Y+4	; 0x04
    1778:	3d 81       	ldd	r19, Y+5	; 0x05
    177a:	23 34       	cpi	r18, 0x43	; 67
    177c:	31 05       	cpc	r19, r1
    177e:	34 f4       	brge	.+12     	; 0x178c <DIO_read_PIN+0x3e>
    1780:	8c 81       	ldd	r24, Y+4	; 0x04
    1782:	9d 81       	ldd	r25, Y+5	; 0x05
    1784:	81 34       	cpi	r24, 0x41	; 65
    1786:	91 05       	cpc	r25, r1
    1788:	61 f0       	breq	.+24     	; 0x17a2 <DIO_read_PIN+0x54>
    178a:	52 c0       	rjmp	.+164    	; 0x1830 <DIO_read_PIN+0xe2>
    178c:	2c 81       	ldd	r18, Y+4	; 0x04
    178e:	3d 81       	ldd	r19, Y+5	; 0x05
    1790:	23 34       	cpi	r18, 0x43	; 67
    1792:	31 05       	cpc	r19, r1
    1794:	51 f1       	breq	.+84     	; 0x17ea <DIO_read_PIN+0x9c>
    1796:	8c 81       	ldd	r24, Y+4	; 0x04
    1798:	9d 81       	ldd	r25, Y+5	; 0x05
    179a:	84 34       	cpi	r24, 0x44	; 68
    179c:	91 05       	cpc	r25, r1
    179e:	b9 f1       	breq	.+110    	; 0x180e <DIO_read_PIN+0xc0>
    17a0:	47 c0       	rjmp	.+142    	; 0x1830 <DIO_read_PIN+0xe2>
	{

	case 'A':
		pin_val=READ_BIT(PINA,pin);
    17a2:	e9 e3       	ldi	r30, 0x39	; 57
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	48 2f       	mov	r20, r24
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	02 2e       	mov	r0, r18
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <DIO_read_PIN+0x6e>
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	0a 94       	dec	r0
    17be:	e2 f7       	brpl	.-8      	; 0x17b8 <DIO_read_PIN+0x6a>
    17c0:	84 23       	and	r24, r20
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	35 c0       	rjmp	.+106    	; 0x1830 <DIO_read_PIN+0xe2>
		break;
	case 'B':
		pin_val=READ_BIT(PINB,pin);
    17c6:	e6 e3       	ldi	r30, 0x36	; 54
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	48 2f       	mov	r20, r24
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	02 2e       	mov	r0, r18
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <DIO_read_PIN+0x92>
    17dc:	88 0f       	add	r24, r24
    17de:	99 1f       	adc	r25, r25
    17e0:	0a 94       	dec	r0
    17e2:	e2 f7       	brpl	.-8      	; 0x17dc <DIO_read_PIN+0x8e>
    17e4:	84 23       	and	r24, r20
    17e6:	89 83       	std	Y+1, r24	; 0x01
    17e8:	23 c0       	rjmp	.+70     	; 0x1830 <DIO_read_PIN+0xe2>
		break;
	case 'C':
		pin_val=READ_BIT(PINC,pin);
    17ea:	e3 e3       	ldi	r30, 0x33	; 51
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	48 2f       	mov	r20, r24
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	02 2e       	mov	r0, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <DIO_read_PIN+0xb6>
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	0a 94       	dec	r0
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <DIO_read_PIN+0xb2>
    1808:	84 23       	and	r24, r20
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	11 c0       	rjmp	.+34     	; 0x1830 <DIO_read_PIN+0xe2>
		break;
	case 'D':
		pin_val=READ_BIT(PIND,pin);
    180e:	e0 e3       	ldi	r30, 0x30	; 48
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	48 2f       	mov	r20, r24
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	02 2e       	mov	r0, r18
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <DIO_read_PIN+0xda>
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	0a 94       	dec	r0
    182a:	e2 f7       	brpl	.-8      	; 0x1824 <DIO_read_PIN+0xd6>
    182c:	84 23       	and	r24, r20
    182e:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	return pin_val;
    1830:	89 81       	ldd	r24, Y+1	; 0x01
}
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	cf 91       	pop	r28
    183e:	df 91       	pop	r29
    1840:	08 95       	ret

00001842 <DIO_BIT_TOGGLE>:

void DIO_BIT_TOGGLE(uint8 portname,uint8 pin)
{
    1842:	df 93       	push	r29
    1844:	cf 93       	push	r28
    1846:	00 d0       	rcall	.+0      	; 0x1848 <DIO_BIT_TOGGLE+0x6>
    1848:	00 d0       	rcall	.+0      	; 0x184a <DIO_BIT_TOGGLE+0x8>
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	89 83       	std	Y+1, r24	; 0x01
    1850:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	3c 83       	std	Y+4, r19	; 0x04
    185a:	2b 83       	std	Y+3, r18	; 0x03
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	9c 81       	ldd	r25, Y+4	; 0x04
    1860:	82 34       	cpi	r24, 0x42	; 66
    1862:	91 05       	cpc	r25, r1
    1864:	51 f1       	breq	.+84     	; 0x18ba <DIO_BIT_TOGGLE+0x78>
    1866:	2b 81       	ldd	r18, Y+3	; 0x03
    1868:	3c 81       	ldd	r19, Y+4	; 0x04
    186a:	23 34       	cpi	r18, 0x43	; 67
    186c:	31 05       	cpc	r19, r1
    186e:	34 f4       	brge	.+12     	; 0x187c <DIO_BIT_TOGGLE+0x3a>
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	9c 81       	ldd	r25, Y+4	; 0x04
    1874:	81 34       	cpi	r24, 0x41	; 65
    1876:	91 05       	cpc	r25, r1
    1878:	61 f0       	breq	.+24     	; 0x1892 <DIO_BIT_TOGGLE+0x50>
    187a:	5a c0       	rjmp	.+180    	; 0x1930 <DIO_BIT_TOGGLE+0xee>
    187c:	2b 81       	ldd	r18, Y+3	; 0x03
    187e:	3c 81       	ldd	r19, Y+4	; 0x04
    1880:	23 34       	cpi	r18, 0x43	; 67
    1882:	31 05       	cpc	r19, r1
    1884:	71 f1       	breq	.+92     	; 0x18e2 <DIO_BIT_TOGGLE+0xa0>
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	9c 81       	ldd	r25, Y+4	; 0x04
    188a:	84 34       	cpi	r24, 0x44	; 68
    188c:	91 05       	cpc	r25, r1
    188e:	e9 f1       	breq	.+122    	; 0x190a <DIO_BIT_TOGGLE+0xc8>
    1890:	4f c0       	rjmp	.+158    	; 0x1930 <DIO_BIT_TOGGLE+0xee>
	{

	case 'A':
		TOGGLE_BIT(PORTA,pin);
    1892:	ab e3       	ldi	r26, 0x3B	; 59
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	eb e3       	ldi	r30, 0x3B	; 59
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	48 2f       	mov	r20, r24
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	02 2e       	mov	r0, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <DIO_BIT_TOGGLE+0x6e>
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	0a 94       	dec	r0
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <DIO_BIT_TOGGLE+0x6a>
    18b4:	84 27       	eor	r24, r20
    18b6:	8c 93       	st	X, r24
    18b8:	3b c0       	rjmp	.+118    	; 0x1930 <DIO_BIT_TOGGLE+0xee>
		break;
	case 'B':
		TOGGLE_BIT(PORTB,pin);
    18ba:	a8 e3       	ldi	r26, 0x38	; 56
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e8 e3       	ldi	r30, 0x38	; 56
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	48 2f       	mov	r20, r24
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	28 2f       	mov	r18, r24
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	02 2e       	mov	r0, r18
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <DIO_BIT_TOGGLE+0x96>
    18d4:	88 0f       	add	r24, r24
    18d6:	99 1f       	adc	r25, r25
    18d8:	0a 94       	dec	r0
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <DIO_BIT_TOGGLE+0x92>
    18dc:	84 27       	eor	r24, r20
    18de:	8c 93       	st	X, r24
    18e0:	27 c0       	rjmp	.+78     	; 0x1930 <DIO_BIT_TOGGLE+0xee>
		break;
	case 'C':
		TOGGLE_BIT(PORTC,pin);
    18e2:	a5 e3       	ldi	r26, 0x35	; 53
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e5 e3       	ldi	r30, 0x35	; 53
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	48 2f       	mov	r20, r24
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	02 2e       	mov	r0, r18
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <DIO_BIT_TOGGLE+0xbe>
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	0a 94       	dec	r0
    1902:	e2 f7       	brpl	.-8      	; 0x18fc <DIO_BIT_TOGGLE+0xba>
    1904:	84 27       	eor	r24, r20
    1906:	8c 93       	st	X, r24
    1908:	13 c0       	rjmp	.+38     	; 0x1930 <DIO_BIT_TOGGLE+0xee>
		break;
	case 'D':
		TOGGLE_BIT(PORTD,pin);
    190a:	a2 e3       	ldi	r26, 0x32	; 50
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e2 e3       	ldi	r30, 0x32	; 50
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	48 2f       	mov	r20, r24
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	02 2e       	mov	r0, r18
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <DIO_BIT_TOGGLE+0xe6>
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	0a 94       	dec	r0
    192a:	e2 f7       	brpl	.-8      	; 0x1924 <DIO_BIT_TOGGLE+0xe2>
    192c:	84 27       	eor	r24, r20
    192e:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	08 95       	ret

0000193e <DIO_set_port_Dir>:

void DIO_set_port_Dir(uint8 portname,uint8 direction)
{
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	00 d0       	rcall	.+0      	; 0x1944 <DIO_set_port_Dir+0x6>
    1944:	00 d0       	rcall	.+0      	; 0x1946 <DIO_set_port_Dir+0x8>
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    194e:	89 81       	ldd	r24, Y+1	; 0x01
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	3c 83       	std	Y+4, r19	; 0x04
    1956:	2b 83       	std	Y+3, r18	; 0x03
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	9c 81       	ldd	r25, Y+4	; 0x04
    195c:	82 34       	cpi	r24, 0x42	; 66
    195e:	91 05       	cpc	r25, r1
    1960:	11 f1       	breq	.+68     	; 0x19a6 <DIO_set_port_Dir+0x68>
    1962:	2b 81       	ldd	r18, Y+3	; 0x03
    1964:	3c 81       	ldd	r19, Y+4	; 0x04
    1966:	23 34       	cpi	r18, 0x43	; 67
    1968:	31 05       	cpc	r19, r1
    196a:	34 f4       	brge	.+12     	; 0x1978 <DIO_set_port_Dir+0x3a>
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	9c 81       	ldd	r25, Y+4	; 0x04
    1970:	81 34       	cpi	r24, 0x41	; 65
    1972:	91 05       	cpc	r25, r1
    1974:	61 f0       	breq	.+24     	; 0x198e <DIO_set_port_Dir+0x50>
    1976:	3a c0       	rjmp	.+116    	; 0x19ec <DIO_set_port_Dir+0xae>
    1978:	2b 81       	ldd	r18, Y+3	; 0x03
    197a:	3c 81       	ldd	r19, Y+4	; 0x04
    197c:	23 34       	cpi	r18, 0x43	; 67
    197e:	31 05       	cpc	r19, r1
    1980:	f1 f0       	breq	.+60     	; 0x19be <DIO_set_port_Dir+0x80>
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	9c 81       	ldd	r25, Y+4	; 0x04
    1986:	84 34       	cpi	r24, 0x44	; 68
    1988:	91 05       	cpc	r25, r1
    198a:	29 f1       	breq	.+74     	; 0x19d6 <DIO_set_port_Dir+0x98>
    198c:	2f c0       	rjmp	.+94     	; 0x19ec <DIO_set_port_Dir+0xae>
	{
	case 'A':
		if(direction==1)
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	81 30       	cpi	r24, 0x01	; 1
    1992:	29 f4       	brne	.+10     	; 0x199e <DIO_set_port_Dir+0x60>
		{
			DDRA=0xFF;
    1994:	ea e3       	ldi	r30, 0x3A	; 58
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	8f ef       	ldi	r24, 0xFF	; 255
    199a:	80 83       	st	Z, r24
    199c:	27 c0       	rjmp	.+78     	; 0x19ec <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRA=0;
    199e:	ea e3       	ldi	r30, 0x3A	; 58
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	10 82       	st	Z, r1
    19a4:	23 c0       	rjmp	.+70     	; 0x19ec <DIO_set_port_Dir+0xae>
		}
		break;
	case 'B':
		if(direction==1)
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	81 30       	cpi	r24, 0x01	; 1
    19aa:	29 f4       	brne	.+10     	; 0x19b6 <DIO_set_port_Dir+0x78>
		{
			DDRB=0xFF;
    19ac:	e7 e3       	ldi	r30, 0x37	; 55
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	8f ef       	ldi	r24, 0xFF	; 255
    19b2:	80 83       	st	Z, r24
    19b4:	1b c0       	rjmp	.+54     	; 0x19ec <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRB=0;
    19b6:	e7 e3       	ldi	r30, 0x37	; 55
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	10 82       	st	Z, r1
    19bc:	17 c0       	rjmp	.+46     	; 0x19ec <DIO_set_port_Dir+0xae>
		}
		break;
	case 'C':
		if(direction==1)
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	81 30       	cpi	r24, 0x01	; 1
    19c2:	29 f4       	brne	.+10     	; 0x19ce <DIO_set_port_Dir+0x90>
		{
			DDRC=0XFF;
    19c4:	e4 e3       	ldi	r30, 0x34	; 52
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	8f ef       	ldi	r24, 0xFF	; 255
    19ca:	80 83       	st	Z, r24
    19cc:	0f c0       	rjmp	.+30     	; 0x19ec <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRC=0;
    19ce:	e4 e3       	ldi	r30, 0x34	; 52
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	10 82       	st	Z, r1
    19d4:	0b c0       	rjmp	.+22     	; 0x19ec <DIO_set_port_Dir+0xae>
		}
		break;
	case 'D':
		if(direction==1)
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	81 30       	cpi	r24, 0x01	; 1
    19da:	29 f4       	brne	.+10     	; 0x19e6 <DIO_set_port_Dir+0xa8>
		{
			DDRD=0XFF;
    19dc:	e1 e3       	ldi	r30, 0x31	; 49
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	8f ef       	ldi	r24, 0xFF	; 255
    19e2:	80 83       	st	Z, r24
    19e4:	03 c0       	rjmp	.+6      	; 0x19ec <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRD=0;
    19e6:	e1 e3       	ldi	r30, 0x31	; 49
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	10 82       	st	Z, r1
		}
		break;
	default:
		break;
	}
}
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <DIO_write_port>:

void DIO_write_port(uint8 portname,uint8 portvalue)
{
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <DIO_write_port+0x6>
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <DIO_write_port+0x8>
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	89 83       	std	Y+1, r24	; 0x01
    1a08:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	28 2f       	mov	r18, r24
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	3c 83       	std	Y+4, r19	; 0x04
    1a12:	2b 83       	std	Y+3, r18	; 0x03
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	82 34       	cpi	r24, 0x42	; 66
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	d9 f0       	breq	.+54     	; 0x1a54 <DIO_write_port+0x5a>
    1a1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a20:	3c 81       	ldd	r19, Y+4	; 0x04
    1a22:	23 34       	cpi	r18, 0x43	; 67
    1a24:	31 05       	cpc	r19, r1
    1a26:	34 f4       	brge	.+12     	; 0x1a34 <DIO_write_port+0x3a>
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2c:	81 34       	cpi	r24, 0x41	; 65
    1a2e:	91 05       	cpc	r25, r1
    1a30:	61 f0       	breq	.+24     	; 0x1a4a <DIO_write_port+0x50>
    1a32:	1e c0       	rjmp	.+60     	; 0x1a70 <DIO_write_port+0x76>
    1a34:	2b 81       	ldd	r18, Y+3	; 0x03
    1a36:	3c 81       	ldd	r19, Y+4	; 0x04
    1a38:	23 34       	cpi	r18, 0x43	; 67
    1a3a:	31 05       	cpc	r19, r1
    1a3c:	81 f0       	breq	.+32     	; 0x1a5e <DIO_write_port+0x64>
    1a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a40:	9c 81       	ldd	r25, Y+4	; 0x04
    1a42:	84 34       	cpi	r24, 0x44	; 68
    1a44:	91 05       	cpc	r25, r1
    1a46:	81 f0       	breq	.+32     	; 0x1a68 <DIO_write_port+0x6e>
    1a48:	13 c0       	rjmp	.+38     	; 0x1a70 <DIO_write_port+0x76>
	{
	case 'A':
		PORTA=portvalue;
    1a4a:	eb e3       	ldi	r30, 0x3B	; 59
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	80 83       	st	Z, r24
    1a52:	0e c0       	rjmp	.+28     	; 0x1a70 <DIO_write_port+0x76>
		break;
	case 'B':
		PORTB=portvalue;
    1a54:	e8 e3       	ldi	r30, 0x38	; 56
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	80 83       	st	Z, r24
    1a5c:	09 c0       	rjmp	.+18     	; 0x1a70 <DIO_write_port+0x76>
		break;
	case 'C':
		PORTC=portvalue;
    1a5e:	e5 e3       	ldi	r30, 0x35	; 53
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	80 83       	st	Z, r24
    1a66:	04 c0       	rjmp	.+8      	; 0x1a70 <DIO_write_port+0x76>
		break;
	case 'D':
		PORTD=portvalue;
    1a68:	e2 e3       	ldi	r30, 0x32	; 50
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	80 83       	st	Z, r24
	}
}
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <DIO_read_port>:

uint8 DIO_read_port(uint8 portname)
{
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <DIO_read_port+0x6>
    1a84:	00 d0       	rcall	.+0      	; 0x1a86 <DIO_read_port+0x8>
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_val=0;
    1a8c:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	3c 83       	std	Y+4, r19	; 0x04
    1a96:	2b 83       	std	Y+3, r18	; 0x03
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9c:	82 34       	cpi	r24, 0x42	; 66
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	d9 f0       	breq	.+54     	; 0x1ad8 <DIO_read_port+0x5a>
    1aa2:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa4:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa6:	23 34       	cpi	r18, 0x43	; 67
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	34 f4       	brge	.+12     	; 0x1ab8 <DIO_read_port+0x3a>
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab0:	81 34       	cpi	r24, 0x41	; 65
    1ab2:	91 05       	cpc	r25, r1
    1ab4:	61 f0       	breq	.+24     	; 0x1ace <DIO_read_port+0x50>
    1ab6:	1e c0       	rjmp	.+60     	; 0x1af4 <DIO_read_port+0x76>
    1ab8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aba:	3c 81       	ldd	r19, Y+4	; 0x04
    1abc:	23 34       	cpi	r18, 0x43	; 67
    1abe:	31 05       	cpc	r19, r1
    1ac0:	81 f0       	breq	.+32     	; 0x1ae2 <DIO_read_port+0x64>
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac6:	84 34       	cpi	r24, 0x44	; 68
    1ac8:	91 05       	cpc	r25, r1
    1aca:	81 f0       	breq	.+32     	; 0x1aec <DIO_read_port+0x6e>
    1acc:	13 c0       	rjmp	.+38     	; 0x1af4 <DIO_read_port+0x76>
	{

	case 'A':
		port_val=PINA;
    1ace:	e9 e3       	ldi	r30, 0x39	; 57
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	0e c0       	rjmp	.+28     	; 0x1af4 <DIO_read_port+0x76>
		break;
	case 'B':
		port_val=PINB;
    1ad8:	e6 e3       	ldi	r30, 0x36	; 54
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	89 83       	std	Y+1, r24	; 0x01
    1ae0:	09 c0       	rjmp	.+18     	; 0x1af4 <DIO_read_port+0x76>
		break;
	case 'C':
		port_val=PINC;
    1ae2:	e3 e3       	ldi	r30, 0x33	; 51
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	89 83       	std	Y+1, r24	; 0x01
    1aea:	04 c0       	rjmp	.+8      	; 0x1af4 <DIO_read_port+0x76>
		break;
	case 'D':
		port_val=PIND;
    1aec:	e0 e3       	ldi	r30, 0x30	; 48
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	return port_val;
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <DIO_enablePullup_pin>:

void DIO_enablePullup_pin(uint8 portname,uint8 pin,uint8 status)
{
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	00 d0       	rcall	.+0      	; 0x1b0a <DIO_enablePullup_pin+0x6>
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <DIO_enablePullup_pin+0x8>
    1b0c:	0f 92       	push	r0
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    1b12:	89 83       	std	Y+1, r24	; 0x01
    1b14:	6a 83       	std	Y+2, r22	; 0x02
    1b16:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	3d 83       	std	Y+5, r19	; 0x05
    1b20:	2c 83       	std	Y+4, r18	; 0x04
    1b22:	8c 81       	ldd	r24, Y+4	; 0x04
    1b24:	9d 81       	ldd	r25, Y+5	; 0x05
    1b26:	82 34       	cpi	r24, 0x42	; 66
    1b28:	91 05       	cpc	r25, r1
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <DIO_enablePullup_pin+0x2a>
    1b2c:	44 c0       	rjmp	.+136    	; 0x1bb6 <DIO_enablePullup_pin+0xb2>
    1b2e:	2c 81       	ldd	r18, Y+4	; 0x04
    1b30:	3d 81       	ldd	r19, Y+5	; 0x05
    1b32:	23 34       	cpi	r18, 0x43	; 67
    1b34:	31 05       	cpc	r19, r1
    1b36:	34 f4       	brge	.+12     	; 0x1b44 <DIO_enablePullup_pin+0x40>
    1b38:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3c:	81 34       	cpi	r24, 0x41	; 65
    1b3e:	91 05       	cpc	r25, r1
    1b40:	71 f0       	breq	.+28     	; 0x1b5e <DIO_enablePullup_pin+0x5a>
    1b42:	bc c0       	rjmp	.+376    	; 0x1cbc <DIO_enablePullup_pin+0x1b8>
    1b44:	2c 81       	ldd	r18, Y+4	; 0x04
    1b46:	3d 81       	ldd	r19, Y+5	; 0x05
    1b48:	23 34       	cpi	r18, 0x43	; 67
    1b4a:	31 05       	cpc	r19, r1
    1b4c:	09 f4       	brne	.+2      	; 0x1b50 <DIO_enablePullup_pin+0x4c>
    1b4e:	5f c0       	rjmp	.+190    	; 0x1c0e <DIO_enablePullup_pin+0x10a>
    1b50:	8c 81       	ldd	r24, Y+4	; 0x04
    1b52:	9d 81       	ldd	r25, Y+5	; 0x05
    1b54:	84 34       	cpi	r24, 0x44	; 68
    1b56:	91 05       	cpc	r25, r1
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <DIO_enablePullup_pin+0x58>
    1b5a:	85 c0       	rjmp	.+266    	; 0x1c66 <DIO_enablePullup_pin+0x162>
    1b5c:	af c0       	rjmp	.+350    	; 0x1cbc <DIO_enablePullup_pin+0x1b8>
	{
	case 'A':
		if(status==1)
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	81 30       	cpi	r24, 0x01	; 1
    1b62:	a1 f4       	brne	.+40     	; 0x1b8c <DIO_enablePullup_pin+0x88>
		{
			SET_BIT(PORTA,pin);
    1b64:	ab e3       	ldi	r26, 0x3B	; 59
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	eb e3       	ldi	r30, 0x3B	; 59
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	48 2f       	mov	r20, r24
    1b70:	8a 81       	ldd	r24, Y+2	; 0x02
    1b72:	28 2f       	mov	r18, r24
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	02 2e       	mov	r0, r18
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <DIO_enablePullup_pin+0x7e>
    1b7e:	88 0f       	add	r24, r24
    1b80:	99 1f       	adc	r25, r25
    1b82:	0a 94       	dec	r0
    1b84:	e2 f7       	brpl	.-8      	; 0x1b7e <DIO_enablePullup_pin+0x7a>
    1b86:	84 2b       	or	r24, r20
    1b88:	8c 93       	st	X, r24
    1b8a:	98 c0       	rjmp	.+304    	; 0x1cbc <DIO_enablePullup_pin+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
    1b8c:	ab e3       	ldi	r26, 0x3B	; 59
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	eb e3       	ldi	r30, 0x3B	; 59
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	48 2f       	mov	r20, r24
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	28 2f       	mov	r18, r24
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	02 2e       	mov	r0, r18
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <DIO_enablePullup_pin+0xa6>
    1ba6:	88 0f       	add	r24, r24
    1ba8:	99 1f       	adc	r25, r25
    1baa:	0a 94       	dec	r0
    1bac:	e2 f7       	brpl	.-8      	; 0x1ba6 <DIO_enablePullup_pin+0xa2>
    1bae:	80 95       	com	r24
    1bb0:	84 23       	and	r24, r20
    1bb2:	8c 93       	st	X, r24
    1bb4:	83 c0       	rjmp	.+262    	; 0x1cbc <DIO_enablePullup_pin+0x1b8>
		}
		break;
	case 'B':
		if(status==1)
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	81 30       	cpi	r24, 0x01	; 1
    1bba:	a1 f4       	brne	.+40     	; 0x1be4 <DIO_enablePullup_pin+0xe0>
				{
					SET_BIT(PORTB,pin);
    1bbc:	a8 e3       	ldi	r26, 0x38	; 56
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	e8 e3       	ldi	r30, 0x38	; 56
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	48 2f       	mov	r20, r24
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	28 2f       	mov	r18, r24
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	02 2e       	mov	r0, r18
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <DIO_enablePullup_pin+0xd6>
    1bd6:	88 0f       	add	r24, r24
    1bd8:	99 1f       	adc	r25, r25
    1bda:	0a 94       	dec	r0
    1bdc:	e2 f7       	brpl	.-8      	; 0x1bd6 <DIO_enablePullup_pin+0xd2>
    1bde:	84 2b       	or	r24, r20
    1be0:	8c 93       	st	X, r24
    1be2:	6c c0       	rjmp	.+216    	; 0x1cbc <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTB,pin);
    1be4:	a8 e3       	ldi	r26, 0x38	; 56
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	e8 e3       	ldi	r30, 0x38	; 56
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	80 81       	ld	r24, Z
    1bee:	48 2f       	mov	r20, r24
    1bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	02 2e       	mov	r0, r18
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <DIO_enablePullup_pin+0xfe>
    1bfe:	88 0f       	add	r24, r24
    1c00:	99 1f       	adc	r25, r25
    1c02:	0a 94       	dec	r0
    1c04:	e2 f7       	brpl	.-8      	; 0x1bfe <DIO_enablePullup_pin+0xfa>
    1c06:	80 95       	com	r24
    1c08:	84 23       	and	r24, r20
    1c0a:	8c 93       	st	X, r24
    1c0c:	57 c0       	rjmp	.+174    	; 0x1cbc <DIO_enablePullup_pin+0x1b8>
				}
				break;
	case 'C':
		if(status==1)
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	81 30       	cpi	r24, 0x01	; 1
    1c12:	a1 f4       	brne	.+40     	; 0x1c3c <DIO_enablePullup_pin+0x138>
				{
					SET_BIT(PORTC,pin);
    1c14:	a5 e3       	ldi	r26, 0x35	; 53
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e5 e3       	ldi	r30, 0x35	; 53
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	48 2f       	mov	r20, r24
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
    1c22:	28 2f       	mov	r18, r24
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	02 2e       	mov	r0, r18
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <DIO_enablePullup_pin+0x12e>
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	0a 94       	dec	r0
    1c34:	e2 f7       	brpl	.-8      	; 0x1c2e <DIO_enablePullup_pin+0x12a>
    1c36:	84 2b       	or	r24, r20
    1c38:	8c 93       	st	X, r24
    1c3a:	40 c0       	rjmp	.+128    	; 0x1cbc <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTC,pin);
    1c3c:	a5 e3       	ldi	r26, 0x35	; 53
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e5 e3       	ldi	r30, 0x35	; 53
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	48 2f       	mov	r20, r24
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	02 2e       	mov	r0, r18
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <DIO_enablePullup_pin+0x156>
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	0a 94       	dec	r0
    1c5c:	e2 f7       	brpl	.-8      	; 0x1c56 <DIO_enablePullup_pin+0x152>
    1c5e:	80 95       	com	r24
    1c60:	84 23       	and	r24, r20
    1c62:	8c 93       	st	X, r24
    1c64:	2b c0       	rjmp	.+86     	; 0x1cbc <DIO_enablePullup_pin+0x1b8>
				}
				break;
	case 'D':
		if(status==1)
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	81 30       	cpi	r24, 0x01	; 1
    1c6a:	a1 f4       	brne	.+40     	; 0x1c94 <DIO_enablePullup_pin+0x190>
				{
					SET_BIT(PORTD,pin);
    1c6c:	a2 e3       	ldi	r26, 0x32	; 50
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	e2 e3       	ldi	r30, 0x32	; 50
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	48 2f       	mov	r20, r24
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	02 2e       	mov	r0, r18
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <DIO_enablePullup_pin+0x186>
    1c86:	88 0f       	add	r24, r24
    1c88:	99 1f       	adc	r25, r25
    1c8a:	0a 94       	dec	r0
    1c8c:	e2 f7       	brpl	.-8      	; 0x1c86 <DIO_enablePullup_pin+0x182>
    1c8e:	84 2b       	or	r24, r20
    1c90:	8c 93       	st	X, r24
    1c92:	14 c0       	rjmp	.+40     	; 0x1cbc <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTD,pin);
    1c94:	a2 e3       	ldi	r26, 0x32	; 50
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e2 e3       	ldi	r30, 0x32	; 50
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	48 2f       	mov	r20, r24
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	02 2e       	mov	r0, r18
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <DIO_enablePullup_pin+0x1ae>
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	0a 94       	dec	r0
    1cb4:	e2 f7       	brpl	.-8      	; 0x1cae <DIO_enablePullup_pin+0x1aa>
    1cb6:	80 95       	com	r24
    1cb8:	84 23       	and	r24, r20
    1cba:	8c 93       	st	X, r24
				}
				break;
	}
}
    1cbc:	0f 90       	pop	r0
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	cf 91       	pop	r28
    1cc8:	df 91       	pop	r29
    1cca:	08 95       	ret

00001ccc <DIO_write_low_nibble>:

void DIO_write_low_nibble(uint8 portname,uint8 value)
{
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	00 d0       	rcall	.+0      	; 0x1cd2 <DIO_write_low_nibble+0x6>
    1cd2:	00 d0       	rcall	.+0      	; 0x1cd4 <DIO_write_low_nibble+0x8>
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
    1cd8:	89 83       	std	Y+1, r24	; 0x01
    1cda:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	8f 70       	andi	r24, 0x0F	; 15
    1ce0:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    1ce2:	89 81       	ldd	r24, Y+1	; 0x01
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	3c 83       	std	Y+4, r19	; 0x04
    1cea:	2b 83       	std	Y+3, r18	; 0x03
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf0:	82 34       	cpi	r24, 0x42	; 66
    1cf2:	91 05       	cpc	r25, r1
    1cf4:	31 f1       	breq	.+76     	; 0x1d42 <DIO_write_low_nibble+0x76>
    1cf6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cf8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cfa:	23 34       	cpi	r18, 0x43	; 67
    1cfc:	31 05       	cpc	r19, r1
    1cfe:	34 f4       	brge	.+12     	; 0x1d0c <DIO_write_low_nibble+0x40>
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	9c 81       	ldd	r25, Y+4	; 0x04
    1d04:	81 34       	cpi	r24, 0x41	; 65
    1d06:	91 05       	cpc	r25, r1
    1d08:	61 f0       	breq	.+24     	; 0x1d22 <DIO_write_low_nibble+0x56>
    1d0a:	4a c0       	rjmp	.+148    	; 0x1da0 <DIO_write_low_nibble+0xd4>
    1d0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d10:	23 34       	cpi	r18, 0x43	; 67
    1d12:	31 05       	cpc	r19, r1
    1d14:	31 f1       	breq	.+76     	; 0x1d62 <DIO_write_low_nibble+0x96>
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1a:	84 34       	cpi	r24, 0x44	; 68
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	89 f1       	breq	.+98     	; 0x1d82 <DIO_write_low_nibble+0xb6>
    1d20:	3f c0       	rjmp	.+126    	; 0x1da0 <DIO_write_low_nibble+0xd4>
	{
	case 'A':
		PORTA&=0xf0;
    1d22:	ab e3       	ldi	r26, 0x3B	; 59
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	eb e3       	ldi	r30, 0x3B	; 59
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	80 7f       	andi	r24, 0xF0	; 240
    1d2e:	8c 93       	st	X, r24
		PORTA|=value;
    1d30:	ab e3       	ldi	r26, 0x3B	; 59
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	eb e3       	ldi	r30, 0x3B	; 59
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	90 81       	ld	r25, Z
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	89 2b       	or	r24, r25
    1d3e:	8c 93       	st	X, r24
    1d40:	2f c0       	rjmp	.+94     	; 0x1da0 <DIO_write_low_nibble+0xd4>
		break;
	case 'B':
		PORTB&=0xf0;
    1d42:	a8 e3       	ldi	r26, 0x38	; 56
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	e8 e3       	ldi	r30, 0x38	; 56
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	80 7f       	andi	r24, 0xF0	; 240
    1d4e:	8c 93       	st	X, r24
		PORTA|=value;
    1d50:	ab e3       	ldi	r26, 0x3B	; 59
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	eb e3       	ldi	r30, 0x3B	; 59
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	90 81       	ld	r25, Z
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	89 2b       	or	r24, r25
    1d5e:	8c 93       	st	X, r24
    1d60:	1f c0       	rjmp	.+62     	; 0x1da0 <DIO_write_low_nibble+0xd4>
		break;
	case 'C':
		PORTC&=0xf0;
    1d62:	a5 e3       	ldi	r26, 0x35	; 53
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	e5 e3       	ldi	r30, 0x35	; 53
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	80 7f       	andi	r24, 0xF0	; 240
    1d6e:	8c 93       	st	X, r24
		PORTA|=value;
    1d70:	ab e3       	ldi	r26, 0x3B	; 59
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	eb e3       	ldi	r30, 0x3B	; 59
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	90 81       	ld	r25, Z
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	89 2b       	or	r24, r25
    1d7e:	8c 93       	st	X, r24
    1d80:	0f c0       	rjmp	.+30     	; 0x1da0 <DIO_write_low_nibble+0xd4>
		break;
	case 'D':
		PORTD&=0xf0;
    1d82:	a2 e3       	ldi	r26, 0x32	; 50
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e2 e3       	ldi	r30, 0x32	; 50
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	80 7f       	andi	r24, 0xF0	; 240
    1d8e:	8c 93       	st	X, r24
		PORTD|=value;
    1d90:	a2 e3       	ldi	r26, 0x32	; 50
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e2 e3       	ldi	r30, 0x32	; 50
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	90 81       	ld	r25, Z
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	89 2b       	or	r24, r25
    1d9e:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <DIO_set_low_nibble>:

void DIO_set_low_nibble(uint8 portname)
{
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <DIO_set_low_nibble+0x6>
    1db4:	0f 92       	push	r0
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	3b 83       	std	Y+3, r19	; 0x03
    1dc4:	2a 83       	std	Y+2, r18	; 0x02
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dca:	82 34       	cpi	r24, 0x42	; 66
    1dcc:	91 05       	cpc	r25, r1
    1dce:	f1 f0       	breq	.+60     	; 0x1e0c <DIO_set_low_nibble+0x5e>
    1dd0:	2a 81       	ldd	r18, Y+2	; 0x02
    1dd2:	3b 81       	ldd	r19, Y+3	; 0x03
    1dd4:	23 34       	cpi	r18, 0x43	; 67
    1dd6:	31 05       	cpc	r19, r1
    1dd8:	34 f4       	brge	.+12     	; 0x1de6 <DIO_set_low_nibble+0x38>
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dde:	81 34       	cpi	r24, 0x41	; 65
    1de0:	91 05       	cpc	r25, r1
    1de2:	61 f0       	breq	.+24     	; 0x1dfc <DIO_set_low_nibble+0x4e>
    1de4:	2a c0       	rjmp	.+84     	; 0x1e3a <DIO_set_low_nibble+0x8c>
    1de6:	2a 81       	ldd	r18, Y+2	; 0x02
    1de8:	3b 81       	ldd	r19, Y+3	; 0x03
    1dea:	23 34       	cpi	r18, 0x43	; 67
    1dec:	31 05       	cpc	r19, r1
    1dee:	b1 f0       	breq	.+44     	; 0x1e1c <DIO_set_low_nibble+0x6e>
    1df0:	8a 81       	ldd	r24, Y+2	; 0x02
    1df2:	9b 81       	ldd	r25, Y+3	; 0x03
    1df4:	84 34       	cpi	r24, 0x44	; 68
    1df6:	91 05       	cpc	r25, r1
    1df8:	c9 f0       	breq	.+50     	; 0x1e2c <DIO_set_low_nibble+0x7e>
    1dfa:	1f c0       	rjmp	.+62     	; 0x1e3a <DIO_set_low_nibble+0x8c>
	{
	case 'A':
		PORTA|=0x0f;
    1dfc:	ab e3       	ldi	r26, 0x3B	; 59
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	eb e3       	ldi	r30, 0x3B	; 59
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	8f 60       	ori	r24, 0x0F	; 15
    1e08:	8c 93       	st	X, r24
    1e0a:	17 c0       	rjmp	.+46     	; 0x1e3a <DIO_set_low_nibble+0x8c>
		break;
	case 'B':
		PORTB|=0x0f;
    1e0c:	a8 e3       	ldi	r26, 0x38	; 56
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e8 e3       	ldi	r30, 0x38	; 56
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	8f 60       	ori	r24, 0x0F	; 15
    1e18:	8c 93       	st	X, r24
    1e1a:	0f c0       	rjmp	.+30     	; 0x1e3a <DIO_set_low_nibble+0x8c>
		break;
	case 'C':
		PORTC|=0x0f;
    1e1c:	a5 e3       	ldi	r26, 0x35	; 53
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	e5 e3       	ldi	r30, 0x35	; 53
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	8f 60       	ori	r24, 0x0F	; 15
    1e28:	8c 93       	st	X, r24
    1e2a:	07 c0       	rjmp	.+14     	; 0x1e3a <DIO_set_low_nibble+0x8c>
		break;
	case 'D':
		PORTD|=0x0f;
    1e2c:	a2 e3       	ldi	r26, 0x32	; 50
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e2 e3       	ldi	r30, 0x32	; 50
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	8f 60       	ori	r24, 0x0F	; 15
    1e38:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <DIO_clear_low_nibble>:

void DIO_clear_low_nibble(uint8 portname)
{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <DIO_clear_low_nibble+0x6>
    1e4c:	0f 92       	push	r0
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
    1e56:	28 2f       	mov	r18, r24
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	3b 83       	std	Y+3, r19	; 0x03
    1e5c:	2a 83       	std	Y+2, r18	; 0x02
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	9b 81       	ldd	r25, Y+3	; 0x03
    1e62:	82 34       	cpi	r24, 0x42	; 66
    1e64:	91 05       	cpc	r25, r1
    1e66:	f1 f0       	breq	.+60     	; 0x1ea4 <DIO_clear_low_nibble+0x5e>
    1e68:	2a 81       	ldd	r18, Y+2	; 0x02
    1e6a:	3b 81       	ldd	r19, Y+3	; 0x03
    1e6c:	23 34       	cpi	r18, 0x43	; 67
    1e6e:	31 05       	cpc	r19, r1
    1e70:	34 f4       	brge	.+12     	; 0x1e7e <DIO_clear_low_nibble+0x38>
    1e72:	8a 81       	ldd	r24, Y+2	; 0x02
    1e74:	9b 81       	ldd	r25, Y+3	; 0x03
    1e76:	81 34       	cpi	r24, 0x41	; 65
    1e78:	91 05       	cpc	r25, r1
    1e7a:	61 f0       	breq	.+24     	; 0x1e94 <DIO_clear_low_nibble+0x4e>
    1e7c:	2a c0       	rjmp	.+84     	; 0x1ed2 <DIO_clear_low_nibble+0x8c>
    1e7e:	2a 81       	ldd	r18, Y+2	; 0x02
    1e80:	3b 81       	ldd	r19, Y+3	; 0x03
    1e82:	23 34       	cpi	r18, 0x43	; 67
    1e84:	31 05       	cpc	r19, r1
    1e86:	b1 f0       	breq	.+44     	; 0x1eb4 <DIO_clear_low_nibble+0x6e>
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8c:	84 34       	cpi	r24, 0x44	; 68
    1e8e:	91 05       	cpc	r25, r1
    1e90:	c9 f0       	breq	.+50     	; 0x1ec4 <DIO_clear_low_nibble+0x7e>
    1e92:	1f c0       	rjmp	.+62     	; 0x1ed2 <DIO_clear_low_nibble+0x8c>
	{
	case 'A':
		PORTA&=~(0x0f);
    1e94:	ab e3       	ldi	r26, 0x3B	; 59
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	eb e3       	ldi	r30, 0x3B	; 59
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	80 7f       	andi	r24, 0xF0	; 240
    1ea0:	8c 93       	st	X, r24
    1ea2:	17 c0       	rjmp	.+46     	; 0x1ed2 <DIO_clear_low_nibble+0x8c>
		break;
	case 'B':
		PORTB&=~(0x0f);
    1ea4:	a8 e3       	ldi	r26, 0x38	; 56
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e8 e3       	ldi	r30, 0x38	; 56
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	80 7f       	andi	r24, 0xF0	; 240
    1eb0:	8c 93       	st	X, r24
    1eb2:	0f c0       	rjmp	.+30     	; 0x1ed2 <DIO_clear_low_nibble+0x8c>
		break;
	case 'C':
		PORTC&=~(0x0f);
    1eb4:	a5 e3       	ldi	r26, 0x35	; 53
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e5 e3       	ldi	r30, 0x35	; 53
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	80 7f       	andi	r24, 0xF0	; 240
    1ec0:	8c 93       	st	X, r24
    1ec2:	07 c0       	rjmp	.+14     	; 0x1ed2 <DIO_clear_low_nibble+0x8c>
		break;
	case 'D':
		PORTD&=~(0x0f);
    1ec4:	a2 e3       	ldi	r26, 0x32	; 50
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e2 e3       	ldi	r30, 0x32	; 50
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	80 7f       	andi	r24, 0xF0	; 240
    1ed0:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	cf 91       	pop	r28
    1eda:	df 91       	pop	r29
    1edc:	08 95       	ret

00001ede <DIO_set_high_nibble>:

void DIO_set_high_nibble(uint8 portname)
{
    1ede:	df 93       	push	r29
    1ee0:	cf 93       	push	r28
    1ee2:	00 d0       	rcall	.+0      	; 0x1ee4 <DIO_set_high_nibble+0x6>
    1ee4:	0f 92       	push	r0
    1ee6:	cd b7       	in	r28, 0x3d	; 61
    1ee8:	de b7       	in	r29, 0x3e	; 62
    1eea:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	28 2f       	mov	r18, r24
    1ef0:	30 e0       	ldi	r19, 0x00	; 0
    1ef2:	3b 83       	std	Y+3, r19	; 0x03
    1ef4:	2a 83       	std	Y+2, r18	; 0x02
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	9b 81       	ldd	r25, Y+3	; 0x03
    1efa:	82 34       	cpi	r24, 0x42	; 66
    1efc:	91 05       	cpc	r25, r1
    1efe:	f1 f0       	breq	.+60     	; 0x1f3c <DIO_set_high_nibble+0x5e>
    1f00:	2a 81       	ldd	r18, Y+2	; 0x02
    1f02:	3b 81       	ldd	r19, Y+3	; 0x03
    1f04:	23 34       	cpi	r18, 0x43	; 67
    1f06:	31 05       	cpc	r19, r1
    1f08:	34 f4       	brge	.+12     	; 0x1f16 <DIO_set_high_nibble+0x38>
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f0e:	81 34       	cpi	r24, 0x41	; 65
    1f10:	91 05       	cpc	r25, r1
    1f12:	61 f0       	breq	.+24     	; 0x1f2c <DIO_set_high_nibble+0x4e>
    1f14:	2a c0       	rjmp	.+84     	; 0x1f6a <DIO_set_high_nibble+0x8c>
    1f16:	2a 81       	ldd	r18, Y+2	; 0x02
    1f18:	3b 81       	ldd	r19, Y+3	; 0x03
    1f1a:	23 34       	cpi	r18, 0x43	; 67
    1f1c:	31 05       	cpc	r19, r1
    1f1e:	b1 f0       	breq	.+44     	; 0x1f4c <DIO_set_high_nibble+0x6e>
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	9b 81       	ldd	r25, Y+3	; 0x03
    1f24:	84 34       	cpi	r24, 0x44	; 68
    1f26:	91 05       	cpc	r25, r1
    1f28:	c9 f0       	breq	.+50     	; 0x1f5c <DIO_set_high_nibble+0x7e>
    1f2a:	1f c0       	rjmp	.+62     	; 0x1f6a <DIO_set_high_nibble+0x8c>
	{
	case 'A':
		PORTA|=0xf0;
    1f2c:	ab e3       	ldi	r26, 0x3B	; 59
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	eb e3       	ldi	r30, 0x3B	; 59
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	80 81       	ld	r24, Z
    1f36:	80 6f       	ori	r24, 0xF0	; 240
    1f38:	8c 93       	st	X, r24
    1f3a:	17 c0       	rjmp	.+46     	; 0x1f6a <DIO_set_high_nibble+0x8c>
		break;
	case 'B':
		PORTB|=0xf0;
    1f3c:	a8 e3       	ldi	r26, 0x38	; 56
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e8 e3       	ldi	r30, 0x38	; 56
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	80 6f       	ori	r24, 0xF0	; 240
    1f48:	8c 93       	st	X, r24
    1f4a:	0f c0       	rjmp	.+30     	; 0x1f6a <DIO_set_high_nibble+0x8c>
		break;
	case 'C':
		PORTC|=0xf0;
    1f4c:	a5 e3       	ldi	r26, 0x35	; 53
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e5 e3       	ldi	r30, 0x35	; 53
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	80 6f       	ori	r24, 0xF0	; 240
    1f58:	8c 93       	st	X, r24
    1f5a:	07 c0       	rjmp	.+14     	; 0x1f6a <DIO_set_high_nibble+0x8c>
		break;
	case 'D':
		PORTD|=0xf0;
    1f5c:	a2 e3       	ldi	r26, 0x32	; 50
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	e2 e3       	ldi	r30, 0x32	; 50
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	80 6f       	ori	r24, 0xF0	; 240
    1f68:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	0f 90       	pop	r0
    1f70:	cf 91       	pop	r28
    1f72:	df 91       	pop	r29
    1f74:	08 95       	ret

00001f76 <DIO_clear_high_nibble>:

void DIO_clear_high_nibble(uint8 portname)
{
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	00 d0       	rcall	.+0      	; 0x1f7c <DIO_clear_high_nibble+0x6>
    1f7c:	0f 92       	push	r0
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
    1f82:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	28 2f       	mov	r18, r24
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	3b 83       	std	Y+3, r19	; 0x03
    1f8c:	2a 83       	std	Y+2, r18	; 0x02
    1f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f90:	9b 81       	ldd	r25, Y+3	; 0x03
    1f92:	82 34       	cpi	r24, 0x42	; 66
    1f94:	91 05       	cpc	r25, r1
    1f96:	f1 f0       	breq	.+60     	; 0x1fd4 <DIO_clear_high_nibble+0x5e>
    1f98:	2a 81       	ldd	r18, Y+2	; 0x02
    1f9a:	3b 81       	ldd	r19, Y+3	; 0x03
    1f9c:	23 34       	cpi	r18, 0x43	; 67
    1f9e:	31 05       	cpc	r19, r1
    1fa0:	34 f4       	brge	.+12     	; 0x1fae <DIO_clear_high_nibble+0x38>
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa6:	81 34       	cpi	r24, 0x41	; 65
    1fa8:	91 05       	cpc	r25, r1
    1faa:	61 f0       	breq	.+24     	; 0x1fc4 <DIO_clear_high_nibble+0x4e>
    1fac:	2a c0       	rjmp	.+84     	; 0x2002 <DIO_clear_high_nibble+0x8c>
    1fae:	2a 81       	ldd	r18, Y+2	; 0x02
    1fb0:	3b 81       	ldd	r19, Y+3	; 0x03
    1fb2:	23 34       	cpi	r18, 0x43	; 67
    1fb4:	31 05       	cpc	r19, r1
    1fb6:	b1 f0       	breq	.+44     	; 0x1fe4 <DIO_clear_high_nibble+0x6e>
    1fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fba:	9b 81       	ldd	r25, Y+3	; 0x03
    1fbc:	84 34       	cpi	r24, 0x44	; 68
    1fbe:	91 05       	cpc	r25, r1
    1fc0:	c9 f0       	breq	.+50     	; 0x1ff4 <DIO_clear_high_nibble+0x7e>
    1fc2:	1f c0       	rjmp	.+62     	; 0x2002 <DIO_clear_high_nibble+0x8c>
	{
	case 'A':
		PORTA&=~(0xf0);
    1fc4:	ab e3       	ldi	r26, 0x3B	; 59
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	eb e3       	ldi	r30, 0x3B	; 59
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	80 81       	ld	r24, Z
    1fce:	8f 70       	andi	r24, 0x0F	; 15
    1fd0:	8c 93       	st	X, r24
    1fd2:	17 c0       	rjmp	.+46     	; 0x2002 <DIO_clear_high_nibble+0x8c>
		break;
	case 'B':
		PORTB&=~(0xf0);
    1fd4:	a8 e3       	ldi	r26, 0x38	; 56
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e8 e3       	ldi	r30, 0x38	; 56
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	80 81       	ld	r24, Z
    1fde:	8f 70       	andi	r24, 0x0F	; 15
    1fe0:	8c 93       	st	X, r24
    1fe2:	0f c0       	rjmp	.+30     	; 0x2002 <DIO_clear_high_nibble+0x8c>
		break;
	case 'C':
		PORTC&=~(0xf0);
    1fe4:	a5 e3       	ldi	r26, 0x35	; 53
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e5 e3       	ldi	r30, 0x35	; 53
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	8f 70       	andi	r24, 0x0F	; 15
    1ff0:	8c 93       	st	X, r24
    1ff2:	07 c0       	rjmp	.+14     	; 0x2002 <DIO_clear_high_nibble+0x8c>
		break;
	case 'D':
		PORTD&=~(0xf0);
    1ff4:	a2 e3       	ldi	r26, 0x32	; 50
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	e2 e3       	ldi	r30, 0x32	; 50
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	8f 70       	andi	r24, 0x0F	; 15
    2000:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <DIO_write_high_nibble>:

void DIO_write_high_nibble(uint8 portname,uint8 value)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	00 d0       	rcall	.+0      	; 0x2014 <DIO_write_high_nibble+0x6>
    2014:	00 d0       	rcall	.+0      	; 0x2016 <DIO_write_high_nibble+0x8>
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    201a:	89 83       	std	Y+1, r24	; 0x01
    201c:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	82 95       	swap	r24
    2022:	80 7f       	andi	r24, 0xF0	; 240
    2024:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	28 2f       	mov	r18, r24
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	3c 83       	std	Y+4, r19	; 0x04
    202e:	2b 83       	std	Y+3, r18	; 0x03
    2030:	8b 81       	ldd	r24, Y+3	; 0x03
    2032:	9c 81       	ldd	r25, Y+4	; 0x04
    2034:	82 34       	cpi	r24, 0x42	; 66
    2036:	91 05       	cpc	r25, r1
    2038:	31 f1       	breq	.+76     	; 0x2086 <DIO_write_high_nibble+0x78>
    203a:	2b 81       	ldd	r18, Y+3	; 0x03
    203c:	3c 81       	ldd	r19, Y+4	; 0x04
    203e:	23 34       	cpi	r18, 0x43	; 67
    2040:	31 05       	cpc	r19, r1
    2042:	34 f4       	brge	.+12     	; 0x2050 <DIO_write_high_nibble+0x42>
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	9c 81       	ldd	r25, Y+4	; 0x04
    2048:	81 34       	cpi	r24, 0x41	; 65
    204a:	91 05       	cpc	r25, r1
    204c:	61 f0       	breq	.+24     	; 0x2066 <DIO_write_high_nibble+0x58>
    204e:	4a c0       	rjmp	.+148    	; 0x20e4 <DIO_write_high_nibble+0xd6>
    2050:	2b 81       	ldd	r18, Y+3	; 0x03
    2052:	3c 81       	ldd	r19, Y+4	; 0x04
    2054:	23 34       	cpi	r18, 0x43	; 67
    2056:	31 05       	cpc	r19, r1
    2058:	31 f1       	breq	.+76     	; 0x20a6 <DIO_write_high_nibble+0x98>
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	9c 81       	ldd	r25, Y+4	; 0x04
    205e:	84 34       	cpi	r24, 0x44	; 68
    2060:	91 05       	cpc	r25, r1
    2062:	89 f1       	breq	.+98     	; 0x20c6 <DIO_write_high_nibble+0xb8>
    2064:	3f c0       	rjmp	.+126    	; 0x20e4 <DIO_write_high_nibble+0xd6>
	{
	case 'A':
		PORTA&=0x0f;
    2066:	ab e3       	ldi	r26, 0x3B	; 59
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	eb e3       	ldi	r30, 0x3B	; 59
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	8f 70       	andi	r24, 0x0F	; 15
    2072:	8c 93       	st	X, r24
		PORTA|=value;
    2074:	ab e3       	ldi	r26, 0x3B	; 59
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	eb e3       	ldi	r30, 0x3B	; 59
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	90 81       	ld	r25, Z
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	89 2b       	or	r24, r25
    2082:	8c 93       	st	X, r24
    2084:	2f c0       	rjmp	.+94     	; 0x20e4 <DIO_write_high_nibble+0xd6>
		break;
	case 'B':
		PORTB&=0x0f;
    2086:	a8 e3       	ldi	r26, 0x38	; 56
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e8 e3       	ldi	r30, 0x38	; 56
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	8f 70       	andi	r24, 0x0F	; 15
    2092:	8c 93       	st	X, r24
		PORTA|=value;
    2094:	ab e3       	ldi	r26, 0x3B	; 59
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	eb e3       	ldi	r30, 0x3B	; 59
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	90 81       	ld	r25, Z
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	89 2b       	or	r24, r25
    20a2:	8c 93       	st	X, r24
    20a4:	1f c0       	rjmp	.+62     	; 0x20e4 <DIO_write_high_nibble+0xd6>
		break;
	case 'C':
		PORTC&=0x0f;
    20a6:	a5 e3       	ldi	r26, 0x35	; 53
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	e5 e3       	ldi	r30, 0x35	; 53
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	8f 70       	andi	r24, 0x0F	; 15
    20b2:	8c 93       	st	X, r24
		PORTA|=value;
    20b4:	ab e3       	ldi	r26, 0x3B	; 59
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	eb e3       	ldi	r30, 0x3B	; 59
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	90 81       	ld	r25, Z
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	89 2b       	or	r24, r25
    20c2:	8c 93       	st	X, r24
    20c4:	0f c0       	rjmp	.+30     	; 0x20e4 <DIO_write_high_nibble+0xd6>
		break;
	case 'D':
		PORTD&=0x0f;
    20c6:	a2 e3       	ldi	r26, 0x32	; 50
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	e2 e3       	ldi	r30, 0x32	; 50
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	8f 70       	andi	r24, 0x0F	; 15
    20d2:	8c 93       	st	X, r24
		PORTD|=value;
    20d4:	a2 e3       	ldi	r26, 0x32	; 50
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e2 e3       	ldi	r30, 0x32	; 50
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	90 81       	ld	r25, Z
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	89 2b       	or	r24, r25
    20e2:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	08 95       	ret

000020f2 <DIO_write_high_nibbleDir>:

void DIO_write_high_nibbleDir(uint8 portname,uint8 direction)
{
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	00 d0       	rcall	.+0      	; 0x20f8 <DIO_write_high_nibbleDir+0x6>
    20f8:	00 d0       	rcall	.+0      	; 0x20fa <DIO_write_high_nibbleDir+0x8>
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    20fe:	89 83       	std	Y+1, r24	; 0x01
    2100:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	28 2f       	mov	r18, r24
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	3c 83       	std	Y+4, r19	; 0x04
    210a:	2b 83       	std	Y+3, r18	; 0x03
    210c:	8b 81       	ldd	r24, Y+3	; 0x03
    210e:	9c 81       	ldd	r25, Y+4	; 0x04
    2110:	82 34       	cpi	r24, 0x42	; 66
    2112:	91 05       	cpc	r25, r1
    2114:	49 f1       	breq	.+82     	; 0x2168 <DIO_write_high_nibbleDir+0x76>
    2116:	2b 81       	ldd	r18, Y+3	; 0x03
    2118:	3c 81       	ldd	r19, Y+4	; 0x04
    211a:	23 34       	cpi	r18, 0x43	; 67
    211c:	31 05       	cpc	r19, r1
    211e:	34 f4       	brge	.+12     	; 0x212c <DIO_write_high_nibbleDir+0x3a>
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	9c 81       	ldd	r25, Y+4	; 0x04
    2124:	81 34       	cpi	r24, 0x41	; 65
    2126:	91 05       	cpc	r25, r1
    2128:	61 f0       	breq	.+24     	; 0x2142 <DIO_write_high_nibbleDir+0x50>
    212a:	56 c0       	rjmp	.+172    	; 0x21d8 <DIO_write_high_nibbleDir+0xe6>
    212c:	2b 81       	ldd	r18, Y+3	; 0x03
    212e:	3c 81       	ldd	r19, Y+4	; 0x04
    2130:	23 34       	cpi	r18, 0x43	; 67
    2132:	31 05       	cpc	r19, r1
    2134:	61 f1       	breq	.+88     	; 0x218e <DIO_write_high_nibbleDir+0x9c>
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	9c 81       	ldd	r25, Y+4	; 0x04
    213a:	84 34       	cpi	r24, 0x44	; 68
    213c:	91 05       	cpc	r25, r1
    213e:	d1 f1       	breq	.+116    	; 0x21b4 <DIO_write_high_nibbleDir+0xc2>
    2140:	4b c0       	rjmp	.+150    	; 0x21d8 <DIO_write_high_nibbleDir+0xe6>
	{
	case 'A':
		if(direction==1)
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	81 30       	cpi	r24, 0x01	; 1
    2146:	41 f4       	brne	.+16     	; 0x2158 <DIO_write_high_nibbleDir+0x66>
			DDRA|=0xf0;
    2148:	aa e3       	ldi	r26, 0x3A	; 58
    214a:	b0 e0       	ldi	r27, 0x00	; 0
    214c:	ea e3       	ldi	r30, 0x3A	; 58
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	80 81       	ld	r24, Z
    2152:	80 6f       	ori	r24, 0xF0	; 240
    2154:	8c 93       	st	X, r24
    2156:	40 c0       	rjmp	.+128    	; 0x21d8 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRA&=~(0xf0);
    2158:	aa e3       	ldi	r26, 0x3A	; 58
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	ea e3       	ldi	r30, 0x3A	; 58
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	8f 70       	andi	r24, 0x0F	; 15
    2164:	8c 93       	st	X, r24
    2166:	38 c0       	rjmp	.+112    	; 0x21d8 <DIO_write_high_nibbleDir+0xe6>
		break;
	case 'B':
		if(direction==1)
    2168:	8a 81       	ldd	r24, Y+2	; 0x02
    216a:	81 30       	cpi	r24, 0x01	; 1
    216c:	41 f4       	brne	.+16     	; 0x217e <DIO_write_high_nibbleDir+0x8c>
			DDRB|=0xf0;
    216e:	a7 e3       	ldi	r26, 0x37	; 55
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e7 e3       	ldi	r30, 0x37	; 55
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	80 6f       	ori	r24, 0xF0	; 240
    217a:	8c 93       	st	X, r24
    217c:	2d c0       	rjmp	.+90     	; 0x21d8 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRB&=~(0xf0);
    217e:	a7 e3       	ldi	r26, 0x37	; 55
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e7 e3       	ldi	r30, 0x37	; 55
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	8f 70       	andi	r24, 0x0F	; 15
    218a:	8c 93       	st	X, r24
    218c:	25 c0       	rjmp	.+74     	; 0x21d8 <DIO_write_high_nibbleDir+0xe6>
		break;
	case 'C':
		if(direction==1)
    218e:	8a 81       	ldd	r24, Y+2	; 0x02
    2190:	81 30       	cpi	r24, 0x01	; 1
    2192:	41 f4       	brne	.+16     	; 0x21a4 <DIO_write_high_nibbleDir+0xb2>
			DDRC|=0xf0;
    2194:	a4 e3       	ldi	r26, 0x34	; 52
    2196:	b0 e0       	ldi	r27, 0x00	; 0
    2198:	e4 e3       	ldi	r30, 0x34	; 52
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	80 81       	ld	r24, Z
    219e:	80 6f       	ori	r24, 0xF0	; 240
    21a0:	8c 93       	st	X, r24
    21a2:	1a c0       	rjmp	.+52     	; 0x21d8 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRC&=~(0xf0);
    21a4:	a4 e3       	ldi	r26, 0x34	; 52
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e4 e3       	ldi	r30, 0x34	; 52
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	8f 70       	andi	r24, 0x0F	; 15
    21b0:	8c 93       	st	X, r24
    21b2:	12 c0       	rjmp	.+36     	; 0x21d8 <DIO_write_high_nibbleDir+0xe6>
		break;
	case 'D':
		if(direction==1)
    21b4:	8a 81       	ldd	r24, Y+2	; 0x02
    21b6:	81 30       	cpi	r24, 0x01	; 1
    21b8:	41 f4       	brne	.+16     	; 0x21ca <DIO_write_high_nibbleDir+0xd8>
			DDRD|=0xf0;
    21ba:	a1 e3       	ldi	r26, 0x31	; 49
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e1 e3       	ldi	r30, 0x31	; 49
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	80 6f       	ori	r24, 0xF0	; 240
    21c6:	8c 93       	st	X, r24
    21c8:	07 c0       	rjmp	.+14     	; 0x21d8 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRD&=~(0xf0);
    21ca:	a1 e3       	ldi	r26, 0x31	; 49
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	e1 e3       	ldi	r30, 0x31	; 49
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	8f 70       	andi	r24, 0x0F	; 15
    21d6:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	08 95       	ret

000021e6 <DIO_write_low_nibbleDir>:

void DIO_write_low_nibbleDir(uint8 portname,uint8 direction)
{
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	00 d0       	rcall	.+0      	; 0x21ec <DIO_write_low_nibbleDir+0x6>
    21ec:	00 d0       	rcall	.+0      	; 0x21ee <DIO_write_low_nibbleDir+0x8>
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
    21f2:	89 83       	std	Y+1, r24	; 0x01
    21f4:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	3c 83       	std	Y+4, r19	; 0x04
    21fe:	2b 83       	std	Y+3, r18	; 0x03
    2200:	8b 81       	ldd	r24, Y+3	; 0x03
    2202:	9c 81       	ldd	r25, Y+4	; 0x04
    2204:	82 34       	cpi	r24, 0x42	; 66
    2206:	91 05       	cpc	r25, r1
    2208:	49 f1       	breq	.+82     	; 0x225c <DIO_write_low_nibbleDir+0x76>
    220a:	2b 81       	ldd	r18, Y+3	; 0x03
    220c:	3c 81       	ldd	r19, Y+4	; 0x04
    220e:	23 34       	cpi	r18, 0x43	; 67
    2210:	31 05       	cpc	r19, r1
    2212:	34 f4       	brge	.+12     	; 0x2220 <DIO_write_low_nibbleDir+0x3a>
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	9c 81       	ldd	r25, Y+4	; 0x04
    2218:	81 34       	cpi	r24, 0x41	; 65
    221a:	91 05       	cpc	r25, r1
    221c:	61 f0       	breq	.+24     	; 0x2236 <DIO_write_low_nibbleDir+0x50>
    221e:	56 c0       	rjmp	.+172    	; 0x22cc <DIO_write_low_nibbleDir+0xe6>
    2220:	2b 81       	ldd	r18, Y+3	; 0x03
    2222:	3c 81       	ldd	r19, Y+4	; 0x04
    2224:	23 34       	cpi	r18, 0x43	; 67
    2226:	31 05       	cpc	r19, r1
    2228:	61 f1       	breq	.+88     	; 0x2282 <DIO_write_low_nibbleDir+0x9c>
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	84 34       	cpi	r24, 0x44	; 68
    2230:	91 05       	cpc	r25, r1
    2232:	d1 f1       	breq	.+116    	; 0x22a8 <DIO_write_low_nibbleDir+0xc2>
    2234:	4b c0       	rjmp	.+150    	; 0x22cc <DIO_write_low_nibbleDir+0xe6>
	{
	case 'A':
		if(direction==1)
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	81 30       	cpi	r24, 0x01	; 1
    223a:	41 f4       	brne	.+16     	; 0x224c <DIO_write_low_nibbleDir+0x66>
			DDRA|=0x0f;
    223c:	aa e3       	ldi	r26, 0x3A	; 58
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	ea e3       	ldi	r30, 0x3A	; 58
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	8f 60       	ori	r24, 0x0F	; 15
    2248:	8c 93       	st	X, r24
    224a:	40 c0       	rjmp	.+128    	; 0x22cc <DIO_write_low_nibbleDir+0xe6>
		else
			DDRA&=~(0x0f);
    224c:	aa e3       	ldi	r26, 0x3A	; 58
    224e:	b0 e0       	ldi	r27, 0x00	; 0
    2250:	ea e3       	ldi	r30, 0x3A	; 58
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	80 81       	ld	r24, Z
    2256:	80 7f       	andi	r24, 0xF0	; 240
    2258:	8c 93       	st	X, r24
    225a:	38 c0       	rjmp	.+112    	; 0x22cc <DIO_write_low_nibbleDir+0xe6>
		break;
	case 'B':
		if(direction==1)
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	81 30       	cpi	r24, 0x01	; 1
    2260:	41 f4       	brne	.+16     	; 0x2272 <DIO_write_low_nibbleDir+0x8c>
			DDRB|=0x0f;
    2262:	a7 e3       	ldi	r26, 0x37	; 55
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	e7 e3       	ldi	r30, 0x37	; 55
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	8f 60       	ori	r24, 0x0F	; 15
    226e:	8c 93       	st	X, r24
    2270:	2d c0       	rjmp	.+90     	; 0x22cc <DIO_write_low_nibbleDir+0xe6>
		else
			DDRB&=~(0x0f);
    2272:	a7 e3       	ldi	r26, 0x37	; 55
    2274:	b0 e0       	ldi	r27, 0x00	; 0
    2276:	e7 e3       	ldi	r30, 0x37	; 55
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	80 7f       	andi	r24, 0xF0	; 240
    227e:	8c 93       	st	X, r24
    2280:	25 c0       	rjmp	.+74     	; 0x22cc <DIO_write_low_nibbleDir+0xe6>
		break;
	case 'C':
		if(direction==1)
    2282:	8a 81       	ldd	r24, Y+2	; 0x02
    2284:	81 30       	cpi	r24, 0x01	; 1
    2286:	41 f4       	brne	.+16     	; 0x2298 <DIO_write_low_nibbleDir+0xb2>
			DDRC|=0x0f;
    2288:	a4 e3       	ldi	r26, 0x34	; 52
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	e4 e3       	ldi	r30, 0x34	; 52
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	8f 60       	ori	r24, 0x0F	; 15
    2294:	8c 93       	st	X, r24
    2296:	1a c0       	rjmp	.+52     	; 0x22cc <DIO_write_low_nibbleDir+0xe6>
		else
			DDRC&=~(0x0f);
    2298:	a4 e3       	ldi	r26, 0x34	; 52
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	e4 e3       	ldi	r30, 0x34	; 52
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	80 7f       	andi	r24, 0xF0	; 240
    22a4:	8c 93       	st	X, r24
    22a6:	12 c0       	rjmp	.+36     	; 0x22cc <DIO_write_low_nibbleDir+0xe6>
		break;
	case 'D':
		if(direction==1)
    22a8:	8a 81       	ldd	r24, Y+2	; 0x02
    22aa:	81 30       	cpi	r24, 0x01	; 1
    22ac:	41 f4       	brne	.+16     	; 0x22be <DIO_write_low_nibbleDir+0xd8>
			DDRD|=0x0f;
    22ae:	a1 e3       	ldi	r26, 0x31	; 49
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	e1 e3       	ldi	r30, 0x31	; 49
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	8f 60       	ori	r24, 0x0F	; 15
    22ba:	8c 93       	st	X, r24
    22bc:	07 c0       	rjmp	.+14     	; 0x22cc <DIO_write_low_nibbleDir+0xe6>
		else
			DDRD&=~(0x0f);
    22be:	a1 e3       	ldi	r26, 0x31	; 49
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e1 e3       	ldi	r30, 0x31	; 49
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	80 7f       	andi	r24, 0xF0	; 240
    22ca:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <KeyPad_init>:
#endif
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void KeyPad_init(void)
{
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
	DIO_setPINDir( KEYPAD_PORT_OUT,0,in);
    22e2:	82 e4       	ldi	r24, 0x42	; 66
    22e4:	60 e0       	ldi	r22, 0x00	; 0
    22e6:	40 e0       	ldi	r20, 0x00	; 0
    22e8:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_OUT,1,in);
    22ec:	82 e4       	ldi	r24, 0x42	; 66
    22ee:	61 e0       	ldi	r22, 0x01	; 1
    22f0:	40 e0       	ldi	r20, 0x00	; 0
    22f2:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_OUT,2,in);
    22f6:	82 e4       	ldi	r24, 0x42	; 66
    22f8:	62 e0       	ldi	r22, 0x02	; 2
    22fa:	40 e0       	ldi	r20, 0x00	; 0
    22fc:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_OUT,3,in);
    2300:	82 e4       	ldi	r24, 0x42	; 66
    2302:	63 e0       	ldi	r22, 0x03	; 3
    2304:	40 e0       	ldi	r20, 0x00	; 0
    2306:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,0,in);
    230a:	81 e4       	ldi	r24, 0x41	; 65
    230c:	60 e0       	ldi	r22, 0x00	; 0
    230e:	40 e0       	ldi	r20, 0x00	; 0
    2310:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,1,in);
    2314:	81 e4       	ldi	r24, 0x41	; 65
    2316:	61 e0       	ldi	r22, 0x01	; 1
    2318:	40 e0       	ldi	r20, 0x00	; 0
    231a:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,2,in);
    231e:	81 e4       	ldi	r24, 0x41	; 65
    2320:	62 e0       	ldi	r22, 0x02	; 2
    2322:	40 e0       	ldi	r20, 0x00	; 0
    2324:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,3,in);
    2328:	81 e4       	ldi	r24, 0x41	; 65
    232a:	63 e0       	ldi	r22, 0x03	; 3
    232c:	40 e0       	ldi	r20, 0x00	; 0
    232e:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_setPINDir>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,0,1);
    2332:	81 e4       	ldi	r24, 0x41	; 65
    2334:	60 e0       	ldi	r22, 0x00	; 0
    2336:	41 e0       	ldi	r20, 0x01	; 1
    2338:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <DIO_enablePullup_pin>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,1,1);
    233c:	81 e4       	ldi	r24, 0x41	; 65
    233e:	61 e0       	ldi	r22, 0x01	; 1
    2340:	41 e0       	ldi	r20, 0x01	; 1
    2342:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <DIO_enablePullup_pin>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,2,1);
    2346:	81 e4       	ldi	r24, 0x41	; 65
    2348:	62 e0       	ldi	r22, 0x02	; 2
    234a:	41 e0       	ldi	r20, 0x01	; 1
    234c:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <DIO_enablePullup_pin>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,3,1);
    2350:	81 e4       	ldi	r24, 0x41	; 65
    2352:	63 e0       	ldi	r22, 0x03	; 3
    2354:	41 e0       	ldi	r20, 0x01	; 1
    2356:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <DIO_enablePullup_pin>
}
    235a:	cf 91       	pop	r28
    235c:	df 91       	pop	r29
    235e:	08 95       	ret

00002360 <KeyPad_getPressedKey>:

uint8 KeyPad_getPressedKey(void)
{
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	00 d0       	rcall	.+0      	; 0x2366 <KeyPad_getPressedKey+0x6>
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		KeyPad_init();
    236a:	0e 94 6d 11 	call	0x22da	; 0x22da <KeyPad_init>
		for(row=0;row<N_row;row++)
    236e:	19 82       	std	Y+1, r1	; 0x01
    2370:	38 c0       	rjmp	.+112    	; 0x23e2 <KeyPad_getPressedKey+0x82>
		{
			if(row>0)
    2372:	89 81       	ldd	r24, Y+1	; 0x01
    2374:	88 23       	and	r24, r24
    2376:	41 f0       	breq	.+16     	; 0x2388 <KeyPad_getPressedKey+0x28>
			{
				DIO_setPINDir( KEYPAD_PORT_OUT,row-1,in);
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	98 2f       	mov	r25, r24
    237c:	91 50       	subi	r25, 0x01	; 1
    237e:	82 e4       	ldi	r24, 0x42	; 66
    2380:	69 2f       	mov	r22, r25
    2382:	40 e0       	ldi	r20, 0x00	; 0
    2384:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_setPINDir>
			}
			DIO_setPINDir( KEYPAD_PORT_OUT,row,out);
    2388:	82 e4       	ldi	r24, 0x42	; 66
    238a:	69 81       	ldd	r22, Y+1	; 0x01
    238c:	41 e0       	ldi	r20, 0x01	; 1
    238e:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_setPINDir>
			DIO_write_PIN(KEYPAD_PORT_OUT,row,0);
    2392:	82 e4       	ldi	r24, 0x42	; 66
    2394:	69 81       	ldd	r22, Y+1	; 0x01
    2396:	40 e0       	ldi	r20, 0x00	; 0
    2398:	0e 94 c3 0a 	call	0x1586	; 0x1586 <DIO_write_PIN>
			for(col=0;col<N_col;col++)
    239c:	1a 82       	std	Y+2, r1	; 0x02
    239e:	1b c0       	rjmp	.+54     	; 0x23d6 <KeyPad_getPressedKey+0x76>
			{
				if(DIO_read_PIN(KEYPAD_PORT_IN,col)==0)
    23a0:	81 e4       	ldi	r24, 0x41	; 65
    23a2:	6a 81       	ldd	r22, Y+2	; 0x02
    23a4:	0e 94 a7 0b 	call	0x174e	; 0x174e <DIO_read_PIN>
    23a8:	88 23       	and	r24, r24
    23aa:	91 f4       	brne	.+36     	; 0x23d0 <KeyPad_getPressedKey+0x70>
				{
					#if (N_col==3)
					return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col==4)
					return KeyPad_4x4_adjustKeyNumber((col*N_col)+row+1);
    23ac:	8a 81       	ldd	r24, Y+2	; 0x02
    23ae:	88 2f       	mov	r24, r24
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	88 0f       	add	r24, r24
    23b4:	99 1f       	adc	r25, r25
    23b6:	88 0f       	add	r24, r24
    23b8:	99 1f       	adc	r25, r25
    23ba:	98 2f       	mov	r25, r24
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	89 0f       	add	r24, r25
    23c0:	8f 5f       	subi	r24, 0xFF	; 255
    23c2:	0e 94 61 12 	call	0x24c2	; 0x24c2 <KeyPad_4x4_adjustKeyNumber>
				}
			}
		}
	}

}
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	cf 91       	pop	r28
    23cc:	df 91       	pop	r29
    23ce:	08 95       	ret
			{
				DIO_setPINDir( KEYPAD_PORT_OUT,row-1,in);
			}
			DIO_setPINDir( KEYPAD_PORT_OUT,row,out);
			DIO_write_PIN(KEYPAD_PORT_OUT,row,0);
			for(col=0;col<N_col;col++)
    23d0:	8a 81       	ldd	r24, Y+2	; 0x02
    23d2:	8f 5f       	subi	r24, 0xFF	; 255
    23d4:	8a 83       	std	Y+2, r24	; 0x02
    23d6:	8a 81       	ldd	r24, Y+2	; 0x02
    23d8:	84 30       	cpi	r24, 0x04	; 4
    23da:	10 f3       	brcs	.-60     	; 0x23a0 <KeyPad_getPressedKey+0x40>
{
	uint8 col,row;
	while(1)
	{
		KeyPad_init();
		for(row=0;row<N_row;row++)
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
    23de:	8f 5f       	subi	r24, 0xFF	; 255
    23e0:	89 83       	std	Y+1, r24	; 0x01
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	84 30       	cpi	r24, 0x04	; 4
    23e6:	28 f2       	brcs	.-118    	; 0x2372 <KeyPad_getPressedKey+0x12>
    23e8:	c0 cf       	rjmp	.-128    	; 0x236a <KeyPad_getPressedKey+0xa>

000023ea <KeyPad_4x3_adjustKeyNumber>:

}


uint8 KeyPad_4x3_adjustKeyNumber(uint8 button_number)
{
    23ea:	df 93       	push	r29
    23ec:	cf 93       	push	r28
    23ee:	00 d0       	rcall	.+0      	; 0x23f0 <KeyPad_4x3_adjustKeyNumber+0x6>
    23f0:	00 d0       	rcall	.+0      	; 0x23f2 <KeyPad_4x3_adjustKeyNumber+0x8>
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
    23f6:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    23f8:	89 81       	ldd	r24, Y+1	; 0x01
    23fa:	28 2f       	mov	r18, r24
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	3c 83       	std	Y+4, r19	; 0x04
    2400:	2b 83       	std	Y+3, r18	; 0x03
    2402:	8b 81       	ldd	r24, Y+3	; 0x03
    2404:	9c 81       	ldd	r25, Y+4	; 0x04
    2406:	85 30       	cpi	r24, 0x05	; 5
    2408:	91 05       	cpc	r25, r1
    240a:	09 f4       	brne	.+2      	; 0x240e <KeyPad_4x3_adjustKeyNumber+0x24>
    240c:	41 c0       	rjmp	.+130    	; 0x2490 <KeyPad_4x3_adjustKeyNumber+0xa6>
    240e:	2b 81       	ldd	r18, Y+3	; 0x03
    2410:	3c 81       	ldd	r19, Y+4	; 0x04
    2412:	26 30       	cpi	r18, 0x06	; 6
    2414:	31 05       	cpc	r19, r1
    2416:	dc f4       	brge	.+54     	; 0x244e <KeyPad_4x3_adjustKeyNumber+0x64>
    2418:	8b 81       	ldd	r24, Y+3	; 0x03
    241a:	9c 81       	ldd	r25, Y+4	; 0x04
    241c:	82 30       	cpi	r24, 0x02	; 2
    241e:	91 05       	cpc	r25, r1
    2420:	71 f1       	breq	.+92     	; 0x247e <KeyPad_4x3_adjustKeyNumber+0x94>
    2422:	2b 81       	ldd	r18, Y+3	; 0x03
    2424:	3c 81       	ldd	r19, Y+4	; 0x04
    2426:	23 30       	cpi	r18, 0x03	; 3
    2428:	31 05       	cpc	r19, r1
    242a:	34 f4       	brge	.+12     	; 0x2438 <KeyPad_4x3_adjustKeyNumber+0x4e>
    242c:	8b 81       	ldd	r24, Y+3	; 0x03
    242e:	9c 81       	ldd	r25, Y+4	; 0x04
    2430:	81 30       	cpi	r24, 0x01	; 1
    2432:	91 05       	cpc	r25, r1
    2434:	09 f1       	breq	.+66     	; 0x2478 <KeyPad_4x3_adjustKeyNumber+0x8e>
    2436:	3b c0       	rjmp	.+118    	; 0x24ae <KeyPad_4x3_adjustKeyNumber+0xc4>
    2438:	2b 81       	ldd	r18, Y+3	; 0x03
    243a:	3c 81       	ldd	r19, Y+4	; 0x04
    243c:	23 30       	cpi	r18, 0x03	; 3
    243e:	31 05       	cpc	r19, r1
    2440:	09 f1       	breq	.+66     	; 0x2484 <KeyPad_4x3_adjustKeyNumber+0x9a>
    2442:	8b 81       	ldd	r24, Y+3	; 0x03
    2444:	9c 81       	ldd	r25, Y+4	; 0x04
    2446:	84 30       	cpi	r24, 0x04	; 4
    2448:	91 05       	cpc	r25, r1
    244a:	f9 f0       	breq	.+62     	; 0x248a <KeyPad_4x3_adjustKeyNumber+0xa0>
    244c:	30 c0       	rjmp	.+96     	; 0x24ae <KeyPad_4x3_adjustKeyNumber+0xc4>
    244e:	2b 81       	ldd	r18, Y+3	; 0x03
    2450:	3c 81       	ldd	r19, Y+4	; 0x04
    2452:	27 30       	cpi	r18, 0x07	; 7
    2454:	31 05       	cpc	r19, r1
    2456:	11 f1       	breq	.+68     	; 0x249c <KeyPad_4x3_adjustKeyNumber+0xb2>
    2458:	8b 81       	ldd	r24, Y+3	; 0x03
    245a:	9c 81       	ldd	r25, Y+4	; 0x04
    245c:	87 30       	cpi	r24, 0x07	; 7
    245e:	91 05       	cpc	r25, r1
    2460:	d4 f0       	brlt	.+52     	; 0x2496 <KeyPad_4x3_adjustKeyNumber+0xac>
    2462:	2b 81       	ldd	r18, Y+3	; 0x03
    2464:	3c 81       	ldd	r19, Y+4	; 0x04
    2466:	28 30       	cpi	r18, 0x08	; 8
    2468:	31 05       	cpc	r19, r1
    246a:	d9 f0       	breq	.+54     	; 0x24a2 <KeyPad_4x3_adjustKeyNumber+0xb8>
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	9c 81       	ldd	r25, Y+4	; 0x04
    2470:	89 30       	cpi	r24, 0x09	; 9
    2472:	91 05       	cpc	r25, r1
    2474:	c9 f0       	breq	.+50     	; 0x24a8 <KeyPad_4x3_adjustKeyNumber+0xbe>
    2476:	1b c0       	rjmp	.+54     	; 0x24ae <KeyPad_4x3_adjustKeyNumber+0xc4>
	{
	case 1:
		return '1';
    2478:	91 e3       	ldi	r25, 0x31	; 49
    247a:	9a 83       	std	Y+2, r25	; 0x02
    247c:	1a c0       	rjmp	.+52     	; 0x24b2 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 2:
		return '2';
    247e:	22 e3       	ldi	r18, 0x32	; 50
    2480:	2a 83       	std	Y+2, r18	; 0x02
    2482:	17 c0       	rjmp	.+46     	; 0x24b2 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 3:
		return '3';
    2484:	33 e3       	ldi	r19, 0x33	; 51
    2486:	3a 83       	std	Y+2, r19	; 0x02
    2488:	14 c0       	rjmp	.+40     	; 0x24b2 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 4:
		return '4';
    248a:	84 e3       	ldi	r24, 0x34	; 52
    248c:	8a 83       	std	Y+2, r24	; 0x02
    248e:	11 c0       	rjmp	.+34     	; 0x24b2 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 5:
		return '5';
    2490:	95 e3       	ldi	r25, 0x35	; 53
    2492:	9a 83       	std	Y+2, r25	; 0x02
    2494:	0e c0       	rjmp	.+28     	; 0x24b2 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 6:
		return '6';
    2496:	26 e3       	ldi	r18, 0x36	; 54
    2498:	2a 83       	std	Y+2, r18	; 0x02
    249a:	0b c0       	rjmp	.+22     	; 0x24b2 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 7:
		return '7';
    249c:	37 e3       	ldi	r19, 0x37	; 55
    249e:	3a 83       	std	Y+2, r19	; 0x02
    24a0:	08 c0       	rjmp	.+16     	; 0x24b2 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 8:
		return '8';
    24a2:	88 e3       	ldi	r24, 0x38	; 56
    24a4:	8a 83       	std	Y+2, r24	; 0x02
    24a6:	05 c0       	rjmp	.+10     	; 0x24b2 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 9:
		return '9';
    24a8:	99 e3       	ldi	r25, 0x39	; 57
    24aa:	9a 83       	std	Y+2, r25	; 0x02
    24ac:	02 c0       	rjmp	.+4      	; 0x24b2 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	default:
		return '0';
    24ae:	20 e3       	ldi	r18, 0x30	; 48
    24b0:	2a 83       	std	Y+2, r18	; 0x02
    24b2:	8a 81       	ldd	r24, Y+2	; 0x02
		break;

	}

}
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	cf 91       	pop	r28
    24be:	df 91       	pop	r29
    24c0:	08 95       	ret

000024c2 <KeyPad_4x4_adjustKeyNumber>:

uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	00 d0       	rcall	.+0      	; 0x24c8 <KeyPad_4x4_adjustKeyNumber+0x6>
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <KeyPad_4x4_adjustKeyNumber+0x8>
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	28 2f       	mov	r18, r24
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	3c 83       	std	Y+4, r19	; 0x04
    24d8:	2b 83       	std	Y+3, r18	; 0x03
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	9c 81       	ldd	r25, Y+4	; 0x04
    24de:	88 30       	cpi	r24, 0x08	; 8
    24e0:	91 05       	cpc	r25, r1
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <KeyPad_4x4_adjustKeyNumber+0x24>
    24e4:	70 c0       	rjmp	.+224    	; 0x25c6 <KeyPad_4x4_adjustKeyNumber+0x104>
    24e6:	2b 81       	ldd	r18, Y+3	; 0x03
    24e8:	3c 81       	ldd	r19, Y+4	; 0x04
    24ea:	29 30       	cpi	r18, 0x09	; 9
    24ec:	31 05       	cpc	r19, r1
    24ee:	5c f5       	brge	.+86     	; 0x2546 <KeyPad_4x4_adjustKeyNumber+0x84>
    24f0:	8b 81       	ldd	r24, Y+3	; 0x03
    24f2:	9c 81       	ldd	r25, Y+4	; 0x04
    24f4:	84 30       	cpi	r24, 0x04	; 4
    24f6:	91 05       	cpc	r25, r1
    24f8:	09 f4       	brne	.+2      	; 0x24fc <KeyPad_4x4_adjustKeyNumber+0x3a>
    24fa:	59 c0       	rjmp	.+178    	; 0x25ae <KeyPad_4x4_adjustKeyNumber+0xec>
    24fc:	2b 81       	ldd	r18, Y+3	; 0x03
    24fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2500:	25 30       	cpi	r18, 0x05	; 5
    2502:	31 05       	cpc	r19, r1
    2504:	9c f4       	brge	.+38     	; 0x252c <KeyPad_4x4_adjustKeyNumber+0x6a>
    2506:	8b 81       	ldd	r24, Y+3	; 0x03
    2508:	9c 81       	ldd	r25, Y+4	; 0x04
    250a:	82 30       	cpi	r24, 0x02	; 2
    250c:	91 05       	cpc	r25, r1
    250e:	09 f4       	brne	.+2      	; 0x2512 <KeyPad_4x4_adjustKeyNumber+0x50>
    2510:	48 c0       	rjmp	.+144    	; 0x25a2 <KeyPad_4x4_adjustKeyNumber+0xe0>
    2512:	2b 81       	ldd	r18, Y+3	; 0x03
    2514:	3c 81       	ldd	r19, Y+4	; 0x04
    2516:	23 30       	cpi	r18, 0x03	; 3
    2518:	31 05       	cpc	r19, r1
    251a:	0c f0       	brlt	.+2      	; 0x251e <KeyPad_4x4_adjustKeyNumber+0x5c>
    251c:	45 c0       	rjmp	.+138    	; 0x25a8 <KeyPad_4x4_adjustKeyNumber+0xe6>
    251e:	8b 81       	ldd	r24, Y+3	; 0x03
    2520:	9c 81       	ldd	r25, Y+4	; 0x04
    2522:	81 30       	cpi	r24, 0x01	; 1
    2524:	91 05       	cpc	r25, r1
    2526:	09 f4       	brne	.+2      	; 0x252a <KeyPad_4x4_adjustKeyNumber+0x68>
    2528:	39 c0       	rjmp	.+114    	; 0x259c <KeyPad_4x4_adjustKeyNumber+0xda>
    252a:	67 c0       	rjmp	.+206    	; 0x25fa <KeyPad_4x4_adjustKeyNumber+0x138>
    252c:	2b 81       	ldd	r18, Y+3	; 0x03
    252e:	3c 81       	ldd	r19, Y+4	; 0x04
    2530:	26 30       	cpi	r18, 0x06	; 6
    2532:	31 05       	cpc	r19, r1
    2534:	09 f4       	brne	.+2      	; 0x2538 <KeyPad_4x4_adjustKeyNumber+0x76>
    2536:	41 c0       	rjmp	.+130    	; 0x25ba <KeyPad_4x4_adjustKeyNumber+0xf8>
    2538:	8b 81       	ldd	r24, Y+3	; 0x03
    253a:	9c 81       	ldd	r25, Y+4	; 0x04
    253c:	87 30       	cpi	r24, 0x07	; 7
    253e:	91 05       	cpc	r25, r1
    2540:	0c f0       	brlt	.+2      	; 0x2544 <KeyPad_4x4_adjustKeyNumber+0x82>
    2542:	3e c0       	rjmp	.+124    	; 0x25c0 <KeyPad_4x4_adjustKeyNumber+0xfe>
    2544:	37 c0       	rjmp	.+110    	; 0x25b4 <KeyPad_4x4_adjustKeyNumber+0xf2>
    2546:	2b 81       	ldd	r18, Y+3	; 0x03
    2548:	3c 81       	ldd	r19, Y+4	; 0x04
    254a:	2c 30       	cpi	r18, 0x0C	; 12
    254c:	31 05       	cpc	r19, r1
    254e:	09 f4       	brne	.+2      	; 0x2552 <KeyPad_4x4_adjustKeyNumber+0x90>
    2550:	46 c0       	rjmp	.+140    	; 0x25de <KeyPad_4x4_adjustKeyNumber+0x11c>
    2552:	8b 81       	ldd	r24, Y+3	; 0x03
    2554:	9c 81       	ldd	r25, Y+4	; 0x04
    2556:	8d 30       	cpi	r24, 0x0D	; 13
    2558:	91 05       	cpc	r25, r1
    255a:	5c f4       	brge	.+22     	; 0x2572 <KeyPad_4x4_adjustKeyNumber+0xb0>
    255c:	2b 81       	ldd	r18, Y+3	; 0x03
    255e:	3c 81       	ldd	r19, Y+4	; 0x04
    2560:	2a 30       	cpi	r18, 0x0A	; 10
    2562:	31 05       	cpc	r19, r1
    2564:	b1 f1       	breq	.+108    	; 0x25d2 <KeyPad_4x4_adjustKeyNumber+0x110>
    2566:	8b 81       	ldd	r24, Y+3	; 0x03
    2568:	9c 81       	ldd	r25, Y+4	; 0x04
    256a:	8b 30       	cpi	r24, 0x0B	; 11
    256c:	91 05       	cpc	r25, r1
    256e:	a4 f5       	brge	.+104    	; 0x25d8 <KeyPad_4x4_adjustKeyNumber+0x116>
    2570:	2d c0       	rjmp	.+90     	; 0x25cc <KeyPad_4x4_adjustKeyNumber+0x10a>
    2572:	2b 81       	ldd	r18, Y+3	; 0x03
    2574:	3c 81       	ldd	r19, Y+4	; 0x04
    2576:	2e 30       	cpi	r18, 0x0E	; 14
    2578:	31 05       	cpc	r19, r1
    257a:	b9 f1       	breq	.+110    	; 0x25ea <KeyPad_4x4_adjustKeyNumber+0x128>
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	9c 81       	ldd	r25, Y+4	; 0x04
    2580:	8e 30       	cpi	r24, 0x0E	; 14
    2582:	91 05       	cpc	r25, r1
    2584:	7c f1       	brlt	.+94     	; 0x25e4 <KeyPad_4x4_adjustKeyNumber+0x122>
    2586:	2b 81       	ldd	r18, Y+3	; 0x03
    2588:	3c 81       	ldd	r19, Y+4	; 0x04
    258a:	2f 30       	cpi	r18, 0x0F	; 15
    258c:	31 05       	cpc	r19, r1
    258e:	79 f1       	breq	.+94     	; 0x25ee <KeyPad_4x4_adjustKeyNumber+0x12c>
    2590:	8b 81       	ldd	r24, Y+3	; 0x03
    2592:	9c 81       	ldd	r25, Y+4	; 0x04
    2594:	80 31       	cpi	r24, 0x10	; 16
    2596:	91 05       	cpc	r25, r1
    2598:	69 f1       	breq	.+90     	; 0x25f4 <KeyPad_4x4_adjustKeyNumber+0x132>
    259a:	2f c0       	rjmp	.+94     	; 0x25fa <KeyPad_4x4_adjustKeyNumber+0x138>
	{
	case 1:
		return 7;
    259c:	97 e0       	ldi	r25, 0x07	; 7
    259e:	9a 83       	std	Y+2, r25	; 0x02
    25a0:	2d c0       	rjmp	.+90     	; 0x25fc <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 2:
		return 8;
    25a2:	28 e0       	ldi	r18, 0x08	; 8
    25a4:	2a 83       	std	Y+2, r18	; 0x02
    25a6:	2a c0       	rjmp	.+84     	; 0x25fc <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 3:
		return 9;
    25a8:	39 e0       	ldi	r19, 0x09	; 9
    25aa:	3a 83       	std	Y+2, r19	; 0x02
    25ac:	27 c0       	rjmp	.+78     	; 0x25fc <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 4:
		return '/';
    25ae:	8f e2       	ldi	r24, 0x2F	; 47
    25b0:	8a 83       	std	Y+2, r24	; 0x02
    25b2:	24 c0       	rjmp	.+72     	; 0x25fc <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 5:
		return 4;
    25b4:	94 e0       	ldi	r25, 0x04	; 4
    25b6:	9a 83       	std	Y+2, r25	; 0x02
    25b8:	21 c0       	rjmp	.+66     	; 0x25fc <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 6:
		return 5;
    25ba:	25 e0       	ldi	r18, 0x05	; 5
    25bc:	2a 83       	std	Y+2, r18	; 0x02
    25be:	1e c0       	rjmp	.+60     	; 0x25fc <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 7:
		return 6;
    25c0:	36 e0       	ldi	r19, 0x06	; 6
    25c2:	3a 83       	std	Y+2, r19	; 0x02
    25c4:	1b c0       	rjmp	.+54     	; 0x25fc <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 8:
		return '*';
    25c6:	8a e2       	ldi	r24, 0x2A	; 42
    25c8:	8a 83       	std	Y+2, r24	; 0x02
    25ca:	18 c0       	rjmp	.+48     	; 0x25fc <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 9:
		return 1;
    25cc:	91 e0       	ldi	r25, 0x01	; 1
    25ce:	9a 83       	std	Y+2, r25	; 0x02
    25d0:	15 c0       	rjmp	.+42     	; 0x25fc <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 10:
		return 2;
    25d2:	22 e0       	ldi	r18, 0x02	; 2
    25d4:	2a 83       	std	Y+2, r18	; 0x02
    25d6:	12 c0       	rjmp	.+36     	; 0x25fc <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 11:
		return 3;
    25d8:	33 e0       	ldi	r19, 0x03	; 3
    25da:	3a 83       	std	Y+2, r19	; 0x02
    25dc:	0f c0       	rjmp	.+30     	; 0x25fc <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 12:
		return '-';
    25de:	8d e2       	ldi	r24, 0x2D	; 45
    25e0:	8a 83       	std	Y+2, r24	; 0x02
    25e2:	0c c0       	rjmp	.+24     	; 0x25fc <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 13:
		return 'A';
    25e4:	91 e4       	ldi	r25, 0x41	; 65
    25e6:	9a 83       	std	Y+2, r25	; 0x02
    25e8:	09 c0       	rjmp	.+18     	; 0x25fc <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 14:
		return 0;
    25ea:	1a 82       	std	Y+2, r1	; 0x02
    25ec:	07 c0       	rjmp	.+14     	; 0x25fc <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 15:
		return '=';
    25ee:	2d e3       	ldi	r18, 0x3D	; 61
    25f0:	2a 83       	std	Y+2, r18	; 0x02
    25f2:	04 c0       	rjmp	.+8      	; 0x25fc <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 16:
		return '+';
    25f4:	3b e2       	ldi	r19, 0x2B	; 43
    25f6:	3a 83       	std	Y+2, r19	; 0x02
    25f8:	01 c0       	rjmp	.+2      	; 0x25fc <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;

	default:
		return 0 ;
    25fa:	1a 82       	std	Y+2, r1	; 0x02
    25fc:	8a 81       	ldd	r24, Y+2	; 0x02
		break;


	}

}
    25fe:	0f 90       	pop	r0
    2600:	0f 90       	pop	r0
    2602:	0f 90       	pop	r0
    2604:	0f 90       	pop	r0
    2606:	cf 91       	pop	r28
    2608:	df 91       	pop	r29
    260a:	08 95       	ret

0000260c <LCD_refresh>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_refresh(void)
{
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	aa 97       	sbiw	r28, 0x2a	; 42
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	f8 94       	cli
    261a:	de bf       	out	0x3e, r29	; 62
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	cd bf       	out	0x3d, r28	; 61
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	a0 e8       	ldi	r26, 0x80	; 128
    2626:	bf e3       	ldi	r27, 0x3F	; 63
    2628:	8f a3       	std	Y+39, r24	; 0x27
    262a:	98 a7       	std	Y+40, r25	; 0x28
    262c:	a9 a7       	std	Y+41, r26	; 0x29
    262e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2630:	6f a1       	ldd	r22, Y+39	; 0x27
    2632:	78 a5       	ldd	r23, Y+40	; 0x28
    2634:	89 a5       	ldd	r24, Y+41	; 0x29
    2636:	9a a5       	ldd	r25, Y+42	; 0x2a
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	4a e7       	ldi	r20, 0x7A	; 122
    263e:	53 e4       	ldi	r21, 0x43	; 67
    2640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	8b a3       	std	Y+35, r24	; 0x23
    264a:	9c a3       	std	Y+36, r25	; 0x24
    264c:	ad a3       	std	Y+37, r26	; 0x25
    264e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2650:	6b a1       	ldd	r22, Y+35	; 0x23
    2652:	7c a1       	ldd	r23, Y+36	; 0x24
    2654:	8d a1       	ldd	r24, Y+37	; 0x25
    2656:	9e a1       	ldd	r25, Y+38	; 0x26
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e8       	ldi	r20, 0x80	; 128
    265e:	5f e3       	ldi	r21, 0x3F	; 63
    2660:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2664:	88 23       	and	r24, r24
    2666:	2c f4       	brge	.+10     	; 0x2672 <LCD_refresh+0x66>
		__ticks = 1;
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	9a a3       	std	Y+34, r25	; 0x22
    266e:	89 a3       	std	Y+33, r24	; 0x21
    2670:	3f c0       	rjmp	.+126    	; 0x26f0 <LCD_refresh+0xe4>
	else if (__tmp > 65535)
    2672:	6b a1       	ldd	r22, Y+35	; 0x23
    2674:	7c a1       	ldd	r23, Y+36	; 0x24
    2676:	8d a1       	ldd	r24, Y+37	; 0x25
    2678:	9e a1       	ldd	r25, Y+38	; 0x26
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	3f ef       	ldi	r19, 0xFF	; 255
    267e:	4f e7       	ldi	r20, 0x7F	; 127
    2680:	57 e4       	ldi	r21, 0x47	; 71
    2682:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2686:	18 16       	cp	r1, r24
    2688:	4c f5       	brge	.+82     	; 0x26dc <LCD_refresh+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268a:	6f a1       	ldd	r22, Y+39	; 0x27
    268c:	78 a5       	ldd	r23, Y+40	; 0x28
    268e:	89 a5       	ldd	r24, Y+41	; 0x29
    2690:	9a a5       	ldd	r25, Y+42	; 0x2a
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	40 e2       	ldi	r20, 0x20	; 32
    2698:	51 e4       	ldi	r21, 0x41	; 65
    269a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	bc 01       	movw	r22, r24
    26a4:	cd 01       	movw	r24, r26
    26a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	9a a3       	std	Y+34, r25	; 0x22
    26b0:	89 a3       	std	Y+33, r24	; 0x21
    26b2:	0f c0       	rjmp	.+30     	; 0x26d2 <LCD_refresh+0xc6>
    26b4:	89 e1       	ldi	r24, 0x19	; 25
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	98 a3       	std	Y+32, r25	; 0x20
    26ba:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    26be:	98 a1       	ldd	r25, Y+32	; 0x20
    26c0:	01 97       	sbiw	r24, 0x01	; 1
    26c2:	f1 f7       	brne	.-4      	; 0x26c0 <LCD_refresh+0xb4>
    26c4:	98 a3       	std	Y+32, r25	; 0x20
    26c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26c8:	89 a1       	ldd	r24, Y+33	; 0x21
    26ca:	9a a1       	ldd	r25, Y+34	; 0x22
    26cc:	01 97       	sbiw	r24, 0x01	; 1
    26ce:	9a a3       	std	Y+34, r25	; 0x22
    26d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d2:	89 a1       	ldd	r24, Y+33	; 0x21
    26d4:	9a a1       	ldd	r25, Y+34	; 0x22
    26d6:	00 97       	sbiw	r24, 0x00	; 0
    26d8:	69 f7       	brne	.-38     	; 0x26b4 <LCD_refresh+0xa8>
    26da:	14 c0       	rjmp	.+40     	; 0x2704 <LCD_refresh+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26dc:	6b a1       	ldd	r22, Y+35	; 0x23
    26de:	7c a1       	ldd	r23, Y+36	; 0x24
    26e0:	8d a1       	ldd	r24, Y+37	; 0x25
    26e2:	9e a1       	ldd	r25, Y+38	; 0x26
    26e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	9a a3       	std	Y+34, r25	; 0x22
    26ee:	89 a3       	std	Y+33, r24	; 0x21
    26f0:	89 a1       	ldd	r24, Y+33	; 0x21
    26f2:	9a a1       	ldd	r25, Y+34	; 0x22
    26f4:	9e 8f       	std	Y+30, r25	; 0x1e
    26f6:	8d 8f       	std	Y+29, r24	; 0x1d
    26f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	f1 f7       	brne	.-4      	; 0x26fc <LCD_refresh+0xf0>
    2700:	9e 8f       	std	Y+30, r25	; 0x1e
    2702:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,0);
    2704:	83 e4       	ldi	r24, 0x43	; 67
    2706:	62 e0       	ldi	r22, 0x02	; 2
    2708:	40 e0       	ldi	r20, 0x00	; 0
    270a:	0e 94 c3 0a 	call	0x1586	; 0x1586 <DIO_write_PIN>
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	a0 e8       	ldi	r26, 0x80	; 128
    2714:	bf e3       	ldi	r27, 0x3F	; 63
    2716:	89 8f       	std	Y+25, r24	; 0x19
    2718:	9a 8f       	std	Y+26, r25	; 0x1a
    271a:	ab 8f       	std	Y+27, r26	; 0x1b
    271c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    271e:	69 8d       	ldd	r22, Y+25	; 0x19
    2720:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2722:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2724:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	4a e7       	ldi	r20, 0x7A	; 122
    272c:	53 e4       	ldi	r21, 0x43	; 67
    272e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	8d 8b       	std	Y+21, r24	; 0x15
    2738:	9e 8b       	std	Y+22, r25	; 0x16
    273a:	af 8b       	std	Y+23, r26	; 0x17
    273c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    273e:	6d 89       	ldd	r22, Y+21	; 0x15
    2740:	7e 89       	ldd	r23, Y+22	; 0x16
    2742:	8f 89       	ldd	r24, Y+23	; 0x17
    2744:	98 8d       	ldd	r25, Y+24	; 0x18
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	40 e8       	ldi	r20, 0x80	; 128
    274c:	5f e3       	ldi	r21, 0x3F	; 63
    274e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2752:	88 23       	and	r24, r24
    2754:	2c f4       	brge	.+10     	; 0x2760 <LCD_refresh+0x154>
		__ticks = 1;
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	9c 8b       	std	Y+20, r25	; 0x14
    275c:	8b 8b       	std	Y+19, r24	; 0x13
    275e:	3f c0       	rjmp	.+126    	; 0x27de <LCD_refresh+0x1d2>
	else if (__tmp > 65535)
    2760:	6d 89       	ldd	r22, Y+21	; 0x15
    2762:	7e 89       	ldd	r23, Y+22	; 0x16
    2764:	8f 89       	ldd	r24, Y+23	; 0x17
    2766:	98 8d       	ldd	r25, Y+24	; 0x18
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	3f ef       	ldi	r19, 0xFF	; 255
    276c:	4f e7       	ldi	r20, 0x7F	; 127
    276e:	57 e4       	ldi	r21, 0x47	; 71
    2770:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2774:	18 16       	cp	r1, r24
    2776:	4c f5       	brge	.+82     	; 0x27ca <LCD_refresh+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2778:	69 8d       	ldd	r22, Y+25	; 0x19
    277a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    277c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    277e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	40 e2       	ldi	r20, 0x20	; 32
    2786:	51 e4       	ldi	r21, 0x41	; 65
    2788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	bc 01       	movw	r22, r24
    2792:	cd 01       	movw	r24, r26
    2794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	9c 8b       	std	Y+20, r25	; 0x14
    279e:	8b 8b       	std	Y+19, r24	; 0x13
    27a0:	0f c0       	rjmp	.+30     	; 0x27c0 <LCD_refresh+0x1b4>
    27a2:	89 e1       	ldi	r24, 0x19	; 25
    27a4:	90 e0       	ldi	r25, 0x00	; 0
    27a6:	9a 8b       	std	Y+18, r25	; 0x12
    27a8:	89 8b       	std	Y+17, r24	; 0x11
    27aa:	89 89       	ldd	r24, Y+17	; 0x11
    27ac:	9a 89       	ldd	r25, Y+18	; 0x12
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	f1 f7       	brne	.-4      	; 0x27ae <LCD_refresh+0x1a2>
    27b2:	9a 8b       	std	Y+18, r25	; 0x12
    27b4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b6:	8b 89       	ldd	r24, Y+19	; 0x13
    27b8:	9c 89       	ldd	r25, Y+20	; 0x14
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	9c 8b       	std	Y+20, r25	; 0x14
    27be:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c0:	8b 89       	ldd	r24, Y+19	; 0x13
    27c2:	9c 89       	ldd	r25, Y+20	; 0x14
    27c4:	00 97       	sbiw	r24, 0x00	; 0
    27c6:	69 f7       	brne	.-38     	; 0x27a2 <LCD_refresh+0x196>
    27c8:	14 c0       	rjmp	.+40     	; 0x27f2 <LCD_refresh+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ca:	6d 89       	ldd	r22, Y+21	; 0x15
    27cc:	7e 89       	ldd	r23, Y+22	; 0x16
    27ce:	8f 89       	ldd	r24, Y+23	; 0x17
    27d0:	98 8d       	ldd	r25, Y+24	; 0x18
    27d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	9c 8b       	std	Y+20, r25	; 0x14
    27dc:	8b 8b       	std	Y+19, r24	; 0x13
    27de:	8b 89       	ldd	r24, Y+19	; 0x13
    27e0:	9c 89       	ldd	r25, Y+20	; 0x14
    27e2:	98 8b       	std	Y+16, r25	; 0x10
    27e4:	8f 87       	std	Y+15, r24	; 0x0f
    27e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27e8:	98 89       	ldd	r25, Y+16	; 0x10
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	f1 f7       	brne	.-4      	; 0x27ea <LCD_refresh+0x1de>
    27ee:	98 8b       	std	Y+16, r25	; 0x10
    27f0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,1);
    27f2:	83 e4       	ldi	r24, 0x43	; 67
    27f4:	62 e0       	ldi	r22, 0x02	; 2
    27f6:	41 e0       	ldi	r20, 0x01	; 1
    27f8:	0e 94 c3 0a 	call	0x1586	; 0x1586 <DIO_write_PIN>
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	a0 e8       	ldi	r26, 0x80	; 128
    2802:	bf e3       	ldi	r27, 0x3F	; 63
    2804:	8b 87       	std	Y+11, r24	; 0x0b
    2806:	9c 87       	std	Y+12, r25	; 0x0c
    2808:	ad 87       	std	Y+13, r26	; 0x0d
    280a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    280c:	6b 85       	ldd	r22, Y+11	; 0x0b
    280e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2810:	8d 85       	ldd	r24, Y+13	; 0x0d
    2812:	9e 85       	ldd	r25, Y+14	; 0x0e
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	4a e7       	ldi	r20, 0x7A	; 122
    281a:	53 e4       	ldi	r21, 0x43	; 67
    281c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	8f 83       	std	Y+7, r24	; 0x07
    2826:	98 87       	std	Y+8, r25	; 0x08
    2828:	a9 87       	std	Y+9, r26	; 0x09
    282a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    282c:	6f 81       	ldd	r22, Y+7	; 0x07
    282e:	78 85       	ldd	r23, Y+8	; 0x08
    2830:	89 85       	ldd	r24, Y+9	; 0x09
    2832:	9a 85       	ldd	r25, Y+10	; 0x0a
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	40 e8       	ldi	r20, 0x80	; 128
    283a:	5f e3       	ldi	r21, 0x3F	; 63
    283c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2840:	88 23       	and	r24, r24
    2842:	2c f4       	brge	.+10     	; 0x284e <LCD_refresh+0x242>
		__ticks = 1;
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	9e 83       	std	Y+6, r25	; 0x06
    284a:	8d 83       	std	Y+5, r24	; 0x05
    284c:	3f c0       	rjmp	.+126    	; 0x28cc <LCD_refresh+0x2c0>
	else if (__tmp > 65535)
    284e:	6f 81       	ldd	r22, Y+7	; 0x07
    2850:	78 85       	ldd	r23, Y+8	; 0x08
    2852:	89 85       	ldd	r24, Y+9	; 0x09
    2854:	9a 85       	ldd	r25, Y+10	; 0x0a
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	3f ef       	ldi	r19, 0xFF	; 255
    285a:	4f e7       	ldi	r20, 0x7F	; 127
    285c:	57 e4       	ldi	r21, 0x47	; 71
    285e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2862:	18 16       	cp	r1, r24
    2864:	4c f5       	brge	.+82     	; 0x28b8 <LCD_refresh+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2866:	6b 85       	ldd	r22, Y+11	; 0x0b
    2868:	7c 85       	ldd	r23, Y+12	; 0x0c
    286a:	8d 85       	ldd	r24, Y+13	; 0x0d
    286c:	9e 85       	ldd	r25, Y+14	; 0x0e
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	40 e2       	ldi	r20, 0x20	; 32
    2874:	51 e4       	ldi	r21, 0x41	; 65
    2876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	bc 01       	movw	r22, r24
    2880:	cd 01       	movw	r24, r26
    2882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2886:	dc 01       	movw	r26, r24
    2888:	cb 01       	movw	r24, r22
    288a:	9e 83       	std	Y+6, r25	; 0x06
    288c:	8d 83       	std	Y+5, r24	; 0x05
    288e:	0f c0       	rjmp	.+30     	; 0x28ae <LCD_refresh+0x2a2>
    2890:	89 e1       	ldi	r24, 0x19	; 25
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	9c 83       	std	Y+4, r25	; 0x04
    2896:	8b 83       	std	Y+3, r24	; 0x03
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	9c 81       	ldd	r25, Y+4	; 0x04
    289c:	01 97       	sbiw	r24, 0x01	; 1
    289e:	f1 f7       	brne	.-4      	; 0x289c <LCD_refresh+0x290>
    28a0:	9c 83       	std	Y+4, r25	; 0x04
    28a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a4:	8d 81       	ldd	r24, Y+5	; 0x05
    28a6:	9e 81       	ldd	r25, Y+6	; 0x06
    28a8:	01 97       	sbiw	r24, 0x01	; 1
    28aa:	9e 83       	std	Y+6, r25	; 0x06
    28ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28ae:	8d 81       	ldd	r24, Y+5	; 0x05
    28b0:	9e 81       	ldd	r25, Y+6	; 0x06
    28b2:	00 97       	sbiw	r24, 0x00	; 0
    28b4:	69 f7       	brne	.-38     	; 0x2890 <LCD_refresh+0x284>
    28b6:	14 c0       	rjmp	.+40     	; 0x28e0 <LCD_refresh+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ba:	78 85       	ldd	r23, Y+8	; 0x08
    28bc:	89 85       	ldd	r24, Y+9	; 0x09
    28be:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c4:	dc 01       	movw	r26, r24
    28c6:	cb 01       	movw	r24, r22
    28c8:	9e 83       	std	Y+6, r25	; 0x06
    28ca:	8d 83       	std	Y+5, r24	; 0x05
    28cc:	8d 81       	ldd	r24, Y+5	; 0x05
    28ce:	9e 81       	ldd	r25, Y+6	; 0x06
    28d0:	9a 83       	std	Y+2, r25	; 0x02
    28d2:	89 83       	std	Y+1, r24	; 0x01
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	9a 81       	ldd	r25, Y+2	; 0x02
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	f1 f7       	brne	.-4      	; 0x28d8 <LCD_refresh+0x2cc>
    28dc:	9a 83       	std	Y+2, r25	; 0x02
    28de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    28e0:	aa 96       	adiw	r28, 0x2a	; 42
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	f8 94       	cli
    28e6:	de bf       	out	0x3e, r29	; 62
    28e8:	0f be       	out	0x3f, r0	; 63
    28ea:	cd bf       	out	0x3d, r28	; 61
    28ec:	cf 91       	pop	r28
    28ee:	df 91       	pop	r29
    28f0:	08 95       	ret

000028f2 <LCD_Command>:
void LCD_Command(uint8 cmd)
{
    28f2:	df 93       	push	r29
    28f4:	cf 93       	push	r28
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
    28fa:	e9 97       	sbiw	r28, 0x39	; 57
    28fc:	0f b6       	in	r0, 0x3f	; 63
    28fe:	f8 94       	cli
    2900:	de bf       	out	0x3e, r29	; 62
    2902:	0f be       	out	0x3f, r0	; 63
    2904:	cd bf       	out	0x3d, r28	; 61
    2906:	89 af       	std	Y+57, r24	; 0x39
	DIO_write_PIN(LCD_ctrl_port,RS,0);
    2908:	83 e4       	ldi	r24, 0x43	; 67
    290a:	60 e0       	ldi	r22, 0x00	; 0
    290c:	40 e0       	ldi	r20, 0x00	; 0
    290e:	0e 94 c3 0a 	call	0x1586	; 0x1586 <DIO_write_PIN>
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	a0 e8       	ldi	r26, 0x80	; 128
    2918:	bf e3       	ldi	r27, 0x3F	; 63
    291a:	8d ab       	std	Y+53, r24	; 0x35
    291c:	9e ab       	std	Y+54, r25	; 0x36
    291e:	af ab       	std	Y+55, r26	; 0x37
    2920:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2922:	6d a9       	ldd	r22, Y+53	; 0x35
    2924:	7e a9       	ldd	r23, Y+54	; 0x36
    2926:	8f a9       	ldd	r24, Y+55	; 0x37
    2928:	98 ad       	ldd	r25, Y+56	; 0x38
    292a:	20 e0       	ldi	r18, 0x00	; 0
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	4a e7       	ldi	r20, 0x7A	; 122
    2930:	53 e4       	ldi	r21, 0x43	; 67
    2932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2936:	dc 01       	movw	r26, r24
    2938:	cb 01       	movw	r24, r22
    293a:	89 ab       	std	Y+49, r24	; 0x31
    293c:	9a ab       	std	Y+50, r25	; 0x32
    293e:	ab ab       	std	Y+51, r26	; 0x33
    2940:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2942:	69 a9       	ldd	r22, Y+49	; 0x31
    2944:	7a a9       	ldd	r23, Y+50	; 0x32
    2946:	8b a9       	ldd	r24, Y+51	; 0x33
    2948:	9c a9       	ldd	r25, Y+52	; 0x34
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	40 e8       	ldi	r20, 0x80	; 128
    2950:	5f e3       	ldi	r21, 0x3F	; 63
    2952:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2956:	88 23       	and	r24, r24
    2958:	2c f4       	brge	.+10     	; 0x2964 <LCD_Command+0x72>
		__ticks = 1;
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	98 ab       	std	Y+48, r25	; 0x30
    2960:	8f a7       	std	Y+47, r24	; 0x2f
    2962:	3f c0       	rjmp	.+126    	; 0x29e2 <LCD_Command+0xf0>
	else if (__tmp > 65535)
    2964:	69 a9       	ldd	r22, Y+49	; 0x31
    2966:	7a a9       	ldd	r23, Y+50	; 0x32
    2968:	8b a9       	ldd	r24, Y+51	; 0x33
    296a:	9c a9       	ldd	r25, Y+52	; 0x34
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	3f ef       	ldi	r19, 0xFF	; 255
    2970:	4f e7       	ldi	r20, 0x7F	; 127
    2972:	57 e4       	ldi	r21, 0x47	; 71
    2974:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2978:	18 16       	cp	r1, r24
    297a:	4c f5       	brge	.+82     	; 0x29ce <LCD_Command+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    297c:	6d a9       	ldd	r22, Y+53	; 0x35
    297e:	7e a9       	ldd	r23, Y+54	; 0x36
    2980:	8f a9       	ldd	r24, Y+55	; 0x37
    2982:	98 ad       	ldd	r25, Y+56	; 0x38
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	40 e2       	ldi	r20, 0x20	; 32
    298a:	51 e4       	ldi	r21, 0x41	; 65
    298c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	bc 01       	movw	r22, r24
    2996:	cd 01       	movw	r24, r26
    2998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	98 ab       	std	Y+48, r25	; 0x30
    29a2:	8f a7       	std	Y+47, r24	; 0x2f
    29a4:	0f c0       	rjmp	.+30     	; 0x29c4 <LCD_Command+0xd2>
    29a6:	89 e1       	ldi	r24, 0x19	; 25
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	9e a7       	std	Y+46, r25	; 0x2e
    29ac:	8d a7       	std	Y+45, r24	; 0x2d
    29ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    29b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    29b2:	01 97       	sbiw	r24, 0x01	; 1
    29b4:	f1 f7       	brne	.-4      	; 0x29b2 <LCD_Command+0xc0>
    29b6:	9e a7       	std	Y+46, r25	; 0x2e
    29b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    29bc:	98 a9       	ldd	r25, Y+48	; 0x30
    29be:	01 97       	sbiw	r24, 0x01	; 1
    29c0:	98 ab       	std	Y+48, r25	; 0x30
    29c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    29c6:	98 a9       	ldd	r25, Y+48	; 0x30
    29c8:	00 97       	sbiw	r24, 0x00	; 0
    29ca:	69 f7       	brne	.-38     	; 0x29a6 <LCD_Command+0xb4>
    29cc:	14 c0       	rjmp	.+40     	; 0x29f6 <LCD_Command+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ce:	69 a9       	ldd	r22, Y+49	; 0x31
    29d0:	7a a9       	ldd	r23, Y+50	; 0x32
    29d2:	8b a9       	ldd	r24, Y+51	; 0x33
    29d4:	9c a9       	ldd	r25, Y+52	; 0x34
    29d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	98 ab       	std	Y+48, r25	; 0x30
    29e0:	8f a7       	std	Y+47, r24	; 0x2f
    29e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    29e4:	98 a9       	ldd	r25, Y+48	; 0x30
    29e6:	9c a7       	std	Y+44, r25	; 0x2c
    29e8:	8b a7       	std	Y+43, r24	; 0x2b
    29ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    29ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	f1 f7       	brne	.-4      	; 0x29ee <LCD_Command+0xfc>
    29f2:	9c a7       	std	Y+44, r25	; 0x2c
    29f4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,1);
    29f6:	83 e4       	ldi	r24, 0x43	; 67
    29f8:	62 e0       	ldi	r22, 0x02	; 2
    29fa:	41 e0       	ldi	r20, 0x01	; 1
    29fc:	0e 94 c3 0a 	call	0x1586	; 0x1586 <DIO_write_PIN>
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	a0 e8       	ldi	r26, 0x80	; 128
    2a06:	bf e3       	ldi	r27, 0x3F	; 63
    2a08:	8f a3       	std	Y+39, r24	; 0x27
    2a0a:	98 a7       	std	Y+40, r25	; 0x28
    2a0c:	a9 a7       	std	Y+41, r26	; 0x29
    2a0e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a10:	6f a1       	ldd	r22, Y+39	; 0x27
    2a12:	78 a5       	ldd	r23, Y+40	; 0x28
    2a14:	89 a5       	ldd	r24, Y+41	; 0x29
    2a16:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	4a e7       	ldi	r20, 0x7A	; 122
    2a1e:	53 e4       	ldi	r21, 0x43	; 67
    2a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	8b a3       	std	Y+35, r24	; 0x23
    2a2a:	9c a3       	std	Y+36, r25	; 0x24
    2a2c:	ad a3       	std	Y+37, r26	; 0x25
    2a2e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a30:	6b a1       	ldd	r22, Y+35	; 0x23
    2a32:	7c a1       	ldd	r23, Y+36	; 0x24
    2a34:	8d a1       	ldd	r24, Y+37	; 0x25
    2a36:	9e a1       	ldd	r25, Y+38	; 0x26
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e8       	ldi	r20, 0x80	; 128
    2a3e:	5f e3       	ldi	r21, 0x3F	; 63
    2a40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a44:	88 23       	and	r24, r24
    2a46:	2c f4       	brge	.+10     	; 0x2a52 <LCD_Command+0x160>
		__ticks = 1;
    2a48:	81 e0       	ldi	r24, 0x01	; 1
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	9a a3       	std	Y+34, r25	; 0x22
    2a4e:	89 a3       	std	Y+33, r24	; 0x21
    2a50:	3f c0       	rjmp	.+126    	; 0x2ad0 <LCD_Command+0x1de>
	else if (__tmp > 65535)
    2a52:	6b a1       	ldd	r22, Y+35	; 0x23
    2a54:	7c a1       	ldd	r23, Y+36	; 0x24
    2a56:	8d a1       	ldd	r24, Y+37	; 0x25
    2a58:	9e a1       	ldd	r25, Y+38	; 0x26
    2a5a:	20 e0       	ldi	r18, 0x00	; 0
    2a5c:	3f ef       	ldi	r19, 0xFF	; 255
    2a5e:	4f e7       	ldi	r20, 0x7F	; 127
    2a60:	57 e4       	ldi	r21, 0x47	; 71
    2a62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a66:	18 16       	cp	r1, r24
    2a68:	4c f5       	brge	.+82     	; 0x2abc <LCD_Command+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a6a:	6f a1       	ldd	r22, Y+39	; 0x27
    2a6c:	78 a5       	ldd	r23, Y+40	; 0x28
    2a6e:	89 a5       	ldd	r24, Y+41	; 0x29
    2a70:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	40 e2       	ldi	r20, 0x20	; 32
    2a78:	51 e4       	ldi	r21, 0x41	; 65
    2a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	bc 01       	movw	r22, r24
    2a84:	cd 01       	movw	r24, r26
    2a86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	9a a3       	std	Y+34, r25	; 0x22
    2a90:	89 a3       	std	Y+33, r24	; 0x21
    2a92:	0f c0       	rjmp	.+30     	; 0x2ab2 <LCD_Command+0x1c0>
    2a94:	89 e1       	ldi	r24, 0x19	; 25
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	98 a3       	std	Y+32, r25	; 0x20
    2a9a:	8f 8f       	std	Y+31, r24	; 0x1f
    2a9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a9e:	98 a1       	ldd	r25, Y+32	; 0x20
    2aa0:	01 97       	sbiw	r24, 0x01	; 1
    2aa2:	f1 f7       	brne	.-4      	; 0x2aa0 <LCD_Command+0x1ae>
    2aa4:	98 a3       	std	Y+32, r25	; 0x20
    2aa6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa8:	89 a1       	ldd	r24, Y+33	; 0x21
    2aaa:	9a a1       	ldd	r25, Y+34	; 0x22
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	9a a3       	std	Y+34, r25	; 0x22
    2ab0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ab4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ab6:	00 97       	sbiw	r24, 0x00	; 0
    2ab8:	69 f7       	brne	.-38     	; 0x2a94 <LCD_Command+0x1a2>
    2aba:	14 c0       	rjmp	.+40     	; 0x2ae4 <LCD_Command+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2abc:	6b a1       	ldd	r22, Y+35	; 0x23
    2abe:	7c a1       	ldd	r23, Y+36	; 0x24
    2ac0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ac2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ac4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	9a a3       	std	Y+34, r25	; 0x22
    2ace:	89 a3       	std	Y+33, r24	; 0x21
    2ad0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ad2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ad4:	9e 8f       	std	Y+30, r25	; 0x1e
    2ad6:	8d 8f       	std	Y+29, r24	; 0x1d
    2ad8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ada:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2adc:	01 97       	sbiw	r24, 0x01	; 1
    2ade:	f1 f7       	brne	.-4      	; 0x2adc <LCD_Command+0x1ea>
    2ae0:	9e 8f       	std	Y+30, r25	; 0x1e
    2ae2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_write_high_nibble(LCD_data_port,cmd>>4);
    2ae4:	89 ad       	ldd	r24, Y+57	; 0x39
    2ae6:	98 2f       	mov	r25, r24
    2ae8:	92 95       	swap	r25
    2aea:	9f 70       	andi	r25, 0x0F	; 15
    2aec:	84 e4       	ldi	r24, 0x44	; 68
    2aee:	69 2f       	mov	r22, r25
    2af0:	0e 94 07 10 	call	0x200e	; 0x200e <DIO_write_high_nibble>
	LCD_refresh();
    2af4:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_refresh>
	DIO_write_high_nibble(LCD_data_port,cmd);
    2af8:	84 e4       	ldi	r24, 0x44	; 68
    2afa:	69 ad       	ldd	r22, Y+57	; 0x39
    2afc:	0e 94 07 10 	call	0x200e	; 0x200e <DIO_write_high_nibble>
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	a0 e8       	ldi	r26, 0x80	; 128
    2b06:	bf e3       	ldi	r27, 0x3F	; 63
    2b08:	89 8f       	std	Y+25, r24	; 0x19
    2b0a:	9a 8f       	std	Y+26, r25	; 0x1a
    2b0c:	ab 8f       	std	Y+27, r26	; 0x1b
    2b0e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b10:	69 8d       	ldd	r22, Y+25	; 0x19
    2b12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	4a e7       	ldi	r20, 0x7A	; 122
    2b1e:	53 e4       	ldi	r21, 0x43	; 67
    2b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	8d 8b       	std	Y+21, r24	; 0x15
    2b2a:	9e 8b       	std	Y+22, r25	; 0x16
    2b2c:	af 8b       	std	Y+23, r26	; 0x17
    2b2e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b30:	6d 89       	ldd	r22, Y+21	; 0x15
    2b32:	7e 89       	ldd	r23, Y+22	; 0x16
    2b34:	8f 89       	ldd	r24, Y+23	; 0x17
    2b36:	98 8d       	ldd	r25, Y+24	; 0x18
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 e8       	ldi	r20, 0x80	; 128
    2b3e:	5f e3       	ldi	r21, 0x3F	; 63
    2b40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b44:	88 23       	and	r24, r24
    2b46:	2c f4       	brge	.+10     	; 0x2b52 <LCD_Command+0x260>
		__ticks = 1;
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	9c 8b       	std	Y+20, r25	; 0x14
    2b4e:	8b 8b       	std	Y+19, r24	; 0x13
    2b50:	3f c0       	rjmp	.+126    	; 0x2bd0 <LCD_Command+0x2de>
	else if (__tmp > 65535)
    2b52:	6d 89       	ldd	r22, Y+21	; 0x15
    2b54:	7e 89       	ldd	r23, Y+22	; 0x16
    2b56:	8f 89       	ldd	r24, Y+23	; 0x17
    2b58:	98 8d       	ldd	r25, Y+24	; 0x18
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	3f ef       	ldi	r19, 0xFF	; 255
    2b5e:	4f e7       	ldi	r20, 0x7F	; 127
    2b60:	57 e4       	ldi	r21, 0x47	; 71
    2b62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b66:	18 16       	cp	r1, r24
    2b68:	4c f5       	brge	.+82     	; 0x2bbc <LCD_Command+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b6a:	69 8d       	ldd	r22, Y+25	; 0x19
    2b6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	40 e2       	ldi	r20, 0x20	; 32
    2b78:	51 e4       	ldi	r21, 0x41	; 65
    2b7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	bc 01       	movw	r22, r24
    2b84:	cd 01       	movw	r24, r26
    2b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	9c 8b       	std	Y+20, r25	; 0x14
    2b90:	8b 8b       	std	Y+19, r24	; 0x13
    2b92:	0f c0       	rjmp	.+30     	; 0x2bb2 <LCD_Command+0x2c0>
    2b94:	89 e1       	ldi	r24, 0x19	; 25
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	9a 8b       	std	Y+18, r25	; 0x12
    2b9a:	89 8b       	std	Y+17, r24	; 0x11
    2b9c:	89 89       	ldd	r24, Y+17	; 0x11
    2b9e:	9a 89       	ldd	r25, Y+18	; 0x12
    2ba0:	01 97       	sbiw	r24, 0x01	; 1
    2ba2:	f1 f7       	brne	.-4      	; 0x2ba0 <LCD_Command+0x2ae>
    2ba4:	9a 8b       	std	Y+18, r25	; 0x12
    2ba6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba8:	8b 89       	ldd	r24, Y+19	; 0x13
    2baa:	9c 89       	ldd	r25, Y+20	; 0x14
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	9c 8b       	std	Y+20, r25	; 0x14
    2bb0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb2:	8b 89       	ldd	r24, Y+19	; 0x13
    2bb4:	9c 89       	ldd	r25, Y+20	; 0x14
    2bb6:	00 97       	sbiw	r24, 0x00	; 0
    2bb8:	69 f7       	brne	.-38     	; 0x2b94 <LCD_Command+0x2a2>
    2bba:	14 c0       	rjmp	.+40     	; 0x2be4 <LCD_Command+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bbc:	6d 89       	ldd	r22, Y+21	; 0x15
    2bbe:	7e 89       	ldd	r23, Y+22	; 0x16
    2bc0:	8f 89       	ldd	r24, Y+23	; 0x17
    2bc2:	98 8d       	ldd	r25, Y+24	; 0x18
    2bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	9c 8b       	std	Y+20, r25	; 0x14
    2bce:	8b 8b       	std	Y+19, r24	; 0x13
    2bd0:	8b 89       	ldd	r24, Y+19	; 0x13
    2bd2:	9c 89       	ldd	r25, Y+20	; 0x14
    2bd4:	98 8b       	std	Y+16, r25	; 0x10
    2bd6:	8f 87       	std	Y+15, r24	; 0x0f
    2bd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bda:	98 89       	ldd	r25, Y+16	; 0x10
    2bdc:	01 97       	sbiw	r24, 0x01	; 1
    2bde:	f1 f7       	brne	.-4      	; 0x2bdc <LCD_Command+0x2ea>
    2be0:	98 8b       	std	Y+16, r25	; 0x10
    2be2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,0);
    2be4:	83 e4       	ldi	r24, 0x43	; 67
    2be6:	62 e0       	ldi	r22, 0x02	; 2
    2be8:	40 e0       	ldi	r20, 0x00	; 0
    2bea:	0e 94 c3 0a 	call	0x1586	; 0x1586 <DIO_write_PIN>
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	a0 e8       	ldi	r26, 0x80	; 128
    2bf4:	bf e3       	ldi	r27, 0x3F	; 63
    2bf6:	8b 87       	std	Y+11, r24	; 0x0b
    2bf8:	9c 87       	std	Y+12, r25	; 0x0c
    2bfa:	ad 87       	std	Y+13, r26	; 0x0d
    2bfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	4a e7       	ldi	r20, 0x7A	; 122
    2c0c:	53 e4       	ldi	r21, 0x43	; 67
    2c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	8f 83       	std	Y+7, r24	; 0x07
    2c18:	98 87       	std	Y+8, r25	; 0x08
    2c1a:	a9 87       	std	Y+9, r26	; 0x09
    2c1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c20:	78 85       	ldd	r23, Y+8	; 0x08
    2c22:	89 85       	ldd	r24, Y+9	; 0x09
    2c24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	40 e8       	ldi	r20, 0x80	; 128
    2c2c:	5f e3       	ldi	r21, 0x3F	; 63
    2c2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c32:	88 23       	and	r24, r24
    2c34:	2c f4       	brge	.+10     	; 0x2c40 <LCD_Command+0x34e>
		__ticks = 1;
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	9e 83       	std	Y+6, r25	; 0x06
    2c3c:	8d 83       	std	Y+5, r24	; 0x05
    2c3e:	3f c0       	rjmp	.+126    	; 0x2cbe <LCD_Command+0x3cc>
	else if (__tmp > 65535)
    2c40:	6f 81       	ldd	r22, Y+7	; 0x07
    2c42:	78 85       	ldd	r23, Y+8	; 0x08
    2c44:	89 85       	ldd	r24, Y+9	; 0x09
    2c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	3f ef       	ldi	r19, 0xFF	; 255
    2c4c:	4f e7       	ldi	r20, 0x7F	; 127
    2c4e:	57 e4       	ldi	r21, 0x47	; 71
    2c50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c54:	18 16       	cp	r1, r24
    2c56:	4c f5       	brge	.+82     	; 0x2caa <LCD_Command+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	40 e2       	ldi	r20, 0x20	; 32
    2c66:	51 e4       	ldi	r21, 0x41	; 65
    2c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	bc 01       	movw	r22, r24
    2c72:	cd 01       	movw	r24, r26
    2c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	9e 83       	std	Y+6, r25	; 0x06
    2c7e:	8d 83       	std	Y+5, r24	; 0x05
    2c80:	0f c0       	rjmp	.+30     	; 0x2ca0 <LCD_Command+0x3ae>
    2c82:	89 e1       	ldi	r24, 0x19	; 25
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	9c 83       	std	Y+4, r25	; 0x04
    2c88:	8b 83       	std	Y+3, r24	; 0x03
    2c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	f1 f7       	brne	.-4      	; 0x2c8e <LCD_Command+0x39c>
    2c92:	9c 83       	std	Y+4, r25	; 0x04
    2c94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c96:	8d 81       	ldd	r24, Y+5	; 0x05
    2c98:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9a:	01 97       	sbiw	r24, 0x01	; 1
    2c9c:	9e 83       	std	Y+6, r25	; 0x06
    2c9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca4:	00 97       	sbiw	r24, 0x00	; 0
    2ca6:	69 f7       	brne	.-38     	; 0x2c82 <LCD_Command+0x390>
    2ca8:	14 c0       	rjmp	.+40     	; 0x2cd2 <LCD_Command+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2caa:	6f 81       	ldd	r22, Y+7	; 0x07
    2cac:	78 85       	ldd	r23, Y+8	; 0x08
    2cae:	89 85       	ldd	r24, Y+9	; 0x09
    2cb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	9e 83       	std	Y+6, r25	; 0x06
    2cbc:	8d 83       	std	Y+5, r24	; 0x05
    2cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc2:	9a 83       	std	Y+2, r25	; 0x02
    2cc4:	89 83       	std	Y+1, r24	; 0x01
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	f1 f7       	brne	.-4      	; 0x2cca <LCD_Command+0x3d8>
    2cce:	9a 83       	std	Y+2, r25	; 0x02
    2cd0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2cd2:	e9 96       	adiw	r28, 0x39	; 57
    2cd4:	0f b6       	in	r0, 0x3f	; 63
    2cd6:	f8 94       	cli
    2cd8:	de bf       	out	0x3e, r29	; 62
    2cda:	0f be       	out	0x3f, r0	; 63
    2cdc:	cd bf       	out	0x3d, r28	; 61
    2cde:	cf 91       	pop	r28
    2ce0:	df 91       	pop	r29
    2ce2:	08 95       	ret

00002ce4 <LCD_init>:
void LCD_init(void)
{
    2ce4:	df 93       	push	r29
    2ce6:	cf 93       	push	r28
    2ce8:	cd b7       	in	r28, 0x3d	; 61
    2cea:	de b7       	in	r29, 0x3e	; 62
    2cec:	2e 97       	sbiw	r28, 0x0e	; 14
    2cee:	0f b6       	in	r0, 0x3f	; 63
    2cf0:	f8 94       	cli
    2cf2:	de bf       	out	0x3e, r29	; 62
    2cf4:	0f be       	out	0x3f, r0	; 63
    2cf6:	cd bf       	out	0x3d, r28	; 61
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	a8 e4       	ldi	r26, 0x48	; 72
    2cfe:	b3 e4       	ldi	r27, 0x43	; 67
    2d00:	8b 87       	std	Y+11, r24	; 0x0b
    2d02:	9c 87       	std	Y+12, r25	; 0x0c
    2d04:	ad 87       	std	Y+13, r26	; 0x0d
    2d06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d10:	20 e0       	ldi	r18, 0x00	; 0
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	4a e7       	ldi	r20, 0x7A	; 122
    2d16:	53 e4       	ldi	r21, 0x43	; 67
    2d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	8f 83       	std	Y+7, r24	; 0x07
    2d22:	98 87       	std	Y+8, r25	; 0x08
    2d24:	a9 87       	std	Y+9, r26	; 0x09
    2d26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d28:	6f 81       	ldd	r22, Y+7	; 0x07
    2d2a:	78 85       	ldd	r23, Y+8	; 0x08
    2d2c:	89 85       	ldd	r24, Y+9	; 0x09
    2d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d30:	20 e0       	ldi	r18, 0x00	; 0
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	40 e8       	ldi	r20, 0x80	; 128
    2d36:	5f e3       	ldi	r21, 0x3F	; 63
    2d38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d3c:	88 23       	and	r24, r24
    2d3e:	2c f4       	brge	.+10     	; 0x2d4a <LCD_init+0x66>
		__ticks = 1;
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	9e 83       	std	Y+6, r25	; 0x06
    2d46:	8d 83       	std	Y+5, r24	; 0x05
    2d48:	3f c0       	rjmp	.+126    	; 0x2dc8 <LCD_init+0xe4>
	else if (__tmp > 65535)
    2d4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d4c:	78 85       	ldd	r23, Y+8	; 0x08
    2d4e:	89 85       	ldd	r24, Y+9	; 0x09
    2d50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	3f ef       	ldi	r19, 0xFF	; 255
    2d56:	4f e7       	ldi	r20, 0x7F	; 127
    2d58:	57 e4       	ldi	r21, 0x47	; 71
    2d5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d5e:	18 16       	cp	r1, r24
    2d60:	4c f5       	brge	.+82     	; 0x2db4 <LCD_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d62:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d64:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	40 e2       	ldi	r20, 0x20	; 32
    2d70:	51 e4       	ldi	r21, 0x41	; 65
    2d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	bc 01       	movw	r22, r24
    2d7c:	cd 01       	movw	r24, r26
    2d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d82:	dc 01       	movw	r26, r24
    2d84:	cb 01       	movw	r24, r22
    2d86:	9e 83       	std	Y+6, r25	; 0x06
    2d88:	8d 83       	std	Y+5, r24	; 0x05
    2d8a:	0f c0       	rjmp	.+30     	; 0x2daa <LCD_init+0xc6>
    2d8c:	89 e1       	ldi	r24, 0x19	; 25
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	9c 83       	std	Y+4, r25	; 0x04
    2d92:	8b 83       	std	Y+3, r24	; 0x03
    2d94:	8b 81       	ldd	r24, Y+3	; 0x03
    2d96:	9c 81       	ldd	r25, Y+4	; 0x04
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	f1 f7       	brne	.-4      	; 0x2d98 <LCD_init+0xb4>
    2d9c:	9c 83       	std	Y+4, r25	; 0x04
    2d9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da0:	8d 81       	ldd	r24, Y+5	; 0x05
    2da2:	9e 81       	ldd	r25, Y+6	; 0x06
    2da4:	01 97       	sbiw	r24, 0x01	; 1
    2da6:	9e 83       	std	Y+6, r25	; 0x06
    2da8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2daa:	8d 81       	ldd	r24, Y+5	; 0x05
    2dac:	9e 81       	ldd	r25, Y+6	; 0x06
    2dae:	00 97       	sbiw	r24, 0x00	; 0
    2db0:	69 f7       	brne	.-38     	; 0x2d8c <LCD_init+0xa8>
    2db2:	14 c0       	rjmp	.+40     	; 0x2ddc <LCD_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db4:	6f 81       	ldd	r22, Y+7	; 0x07
    2db6:	78 85       	ldd	r23, Y+8	; 0x08
    2db8:	89 85       	ldd	r24, Y+9	; 0x09
    2dba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	9e 83       	std	Y+6, r25	; 0x06
    2dc6:	8d 83       	std	Y+5, r24	; 0x05
    2dc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2dca:	9e 81       	ldd	r25, Y+6	; 0x06
    2dcc:	9a 83       	std	Y+2, r25	; 0x02
    2dce:	89 83       	std	Y+1, r24	; 0x01
    2dd0:	89 81       	ldd	r24, Y+1	; 0x01
    2dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2dd4:	01 97       	sbiw	r24, 0x01	; 1
    2dd6:	f1 f7       	brne	.-4      	; 0x2dd4 <LCD_init+0xf0>
    2dd8:	9a 83       	std	Y+2, r25	; 0x02
    2dda:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	DIO_setPINDir(LCD_ctrl_port,RS,out);
    2ddc:	83 e4       	ldi	r24, 0x43	; 67
    2dde:	60 e0       	ldi	r22, 0x00	; 0
    2de0:	41 e0       	ldi	r20, 0x01	; 1
    2de2:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_setPINDir>
	DIO_setPINDir(LCD_ctrl_port,RW,out);
    2de6:	83 e4       	ldi	r24, 0x43	; 67
    2de8:	61 e0       	ldi	r22, 0x01	; 1
    2dea:	41 e0       	ldi	r20, 0x01	; 1
    2dec:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_setPINDir>
	DIO_setPINDir(LCD_ctrl_port,EN,out);
    2df0:	83 e4       	ldi	r24, 0x43	; 67
    2df2:	62 e0       	ldi	r22, 0x02	; 2
    2df4:	41 e0       	ldi	r20, 0x01	; 1
    2df6:	0e 94 df 09 	call	0x13be	; 0x13be <DIO_setPINDir>
	DIO_write_high_nibbleDir(LCD_data_port,out);
    2dfa:	84 e4       	ldi	r24, 0x44	; 68
    2dfc:	61 e0       	ldi	r22, 0x01	; 1
    2dfe:	0e 94 79 10 	call	0x20f2	; 0x20f2 <DIO_write_high_nibbleDir>
	LCD_Command(LCD_Cursor_reset);
    2e02:	82 e0       	ldi	r24, 0x02	; 2
    2e04:	0e 94 79 14 	call	0x28f2	; 0x28f2 <LCD_Command>
	LCD_Command(LCD_4bit_2line);
    2e08:	88 e2       	ldi	r24, 0x28	; 40
    2e0a:	0e 94 79 14 	call	0x28f2	; 0x28f2 <LCD_Command>
	LCD_Command(LCD_displayOn_cursorOn);
    2e0e:	8e e0       	ldi	r24, 0x0E	; 14
    2e10:	0e 94 79 14 	call	0x28f2	; 0x28f2 <LCD_Command>
	LCD_Command(LCD_clear_cmd);
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	0e 94 79 14 	call	0x28f2	; 0x28f2 <LCD_Command>
}
    2e1a:	2e 96       	adiw	r28, 0x0e	; 14
    2e1c:	0f b6       	in	r0, 0x3f	; 63
    2e1e:	f8 94       	cli
    2e20:	de bf       	out	0x3e, r29	; 62
    2e22:	0f be       	out	0x3f, r0	; 63
    2e24:	cd bf       	out	0x3d, r28	; 61
    2e26:	cf 91       	pop	r28
    2e28:	df 91       	pop	r29
    2e2a:	08 95       	ret

00002e2c <LCD_displayChar>:

void LCD_displayChar(uint8 data)
{
    2e2c:	df 93       	push	r29
    2e2e:	cf 93       	push	r28
    2e30:	cd b7       	in	r28, 0x3d	; 61
    2e32:	de b7       	in	r29, 0x3e	; 62
    2e34:	e9 97       	sbiw	r28, 0x39	; 57
    2e36:	0f b6       	in	r0, 0x3f	; 63
    2e38:	f8 94       	cli
    2e3a:	de bf       	out	0x3e, r29	; 62
    2e3c:	0f be       	out	0x3f, r0	; 63
    2e3e:	cd bf       	out	0x3d, r28	; 61
    2e40:	89 af       	std	Y+57, r24	; 0x39
	DIO_write_PIN(LCD_ctrl_port,RS,1);
    2e42:	83 e4       	ldi	r24, 0x43	; 67
    2e44:	60 e0       	ldi	r22, 0x00	; 0
    2e46:	41 e0       	ldi	r20, 0x01	; 1
    2e48:	0e 94 c3 0a 	call	0x1586	; 0x1586 <DIO_write_PIN>
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	a0 e8       	ldi	r26, 0x80	; 128
    2e52:	bf e3       	ldi	r27, 0x3F	; 63
    2e54:	8d ab       	std	Y+53, r24	; 0x35
    2e56:	9e ab       	std	Y+54, r25	; 0x36
    2e58:	af ab       	std	Y+55, r26	; 0x37
    2e5a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5c:	6d a9       	ldd	r22, Y+53	; 0x35
    2e5e:	7e a9       	ldd	r23, Y+54	; 0x36
    2e60:	8f a9       	ldd	r24, Y+55	; 0x37
    2e62:	98 ad       	ldd	r25, Y+56	; 0x38
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	4a e7       	ldi	r20, 0x7A	; 122
    2e6a:	53 e4       	ldi	r21, 0x43	; 67
    2e6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	89 ab       	std	Y+49, r24	; 0x31
    2e76:	9a ab       	std	Y+50, r25	; 0x32
    2e78:	ab ab       	std	Y+51, r26	; 0x33
    2e7a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e7c:	69 a9       	ldd	r22, Y+49	; 0x31
    2e7e:	7a a9       	ldd	r23, Y+50	; 0x32
    2e80:	8b a9       	ldd	r24, Y+51	; 0x33
    2e82:	9c a9       	ldd	r25, Y+52	; 0x34
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	40 e8       	ldi	r20, 0x80	; 128
    2e8a:	5f e3       	ldi	r21, 0x3F	; 63
    2e8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e90:	88 23       	and	r24, r24
    2e92:	2c f4       	brge	.+10     	; 0x2e9e <LCD_displayChar+0x72>
		__ticks = 1;
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	98 ab       	std	Y+48, r25	; 0x30
    2e9a:	8f a7       	std	Y+47, r24	; 0x2f
    2e9c:	3f c0       	rjmp	.+126    	; 0x2f1c <LCD_displayChar+0xf0>
	else if (__tmp > 65535)
    2e9e:	69 a9       	ldd	r22, Y+49	; 0x31
    2ea0:	7a a9       	ldd	r23, Y+50	; 0x32
    2ea2:	8b a9       	ldd	r24, Y+51	; 0x33
    2ea4:	9c a9       	ldd	r25, Y+52	; 0x34
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	3f ef       	ldi	r19, 0xFF	; 255
    2eaa:	4f e7       	ldi	r20, 0x7F	; 127
    2eac:	57 e4       	ldi	r21, 0x47	; 71
    2eae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eb2:	18 16       	cp	r1, r24
    2eb4:	4c f5       	brge	.+82     	; 0x2f08 <LCD_displayChar+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb6:	6d a9       	ldd	r22, Y+53	; 0x35
    2eb8:	7e a9       	ldd	r23, Y+54	; 0x36
    2eba:	8f a9       	ldd	r24, Y+55	; 0x37
    2ebc:	98 ad       	ldd	r25, Y+56	; 0x38
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	40 e2       	ldi	r20, 0x20	; 32
    2ec4:	51 e4       	ldi	r21, 0x41	; 65
    2ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	bc 01       	movw	r22, r24
    2ed0:	cd 01       	movw	r24, r26
    2ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	98 ab       	std	Y+48, r25	; 0x30
    2edc:	8f a7       	std	Y+47, r24	; 0x2f
    2ede:	0f c0       	rjmp	.+30     	; 0x2efe <LCD_displayChar+0xd2>
    2ee0:	89 e1       	ldi	r24, 0x19	; 25
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	9e a7       	std	Y+46, r25	; 0x2e
    2ee6:	8d a7       	std	Y+45, r24	; 0x2d
    2ee8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2eea:	9e a5       	ldd	r25, Y+46	; 0x2e
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	f1 f7       	brne	.-4      	; 0x2eec <LCD_displayChar+0xc0>
    2ef0:	9e a7       	std	Y+46, r25	; 0x2e
    2ef2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ef6:	98 a9       	ldd	r25, Y+48	; 0x30
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	98 ab       	std	Y+48, r25	; 0x30
    2efc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f00:	98 a9       	ldd	r25, Y+48	; 0x30
    2f02:	00 97       	sbiw	r24, 0x00	; 0
    2f04:	69 f7       	brne	.-38     	; 0x2ee0 <LCD_displayChar+0xb4>
    2f06:	14 c0       	rjmp	.+40     	; 0x2f30 <LCD_displayChar+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f08:	69 a9       	ldd	r22, Y+49	; 0x31
    2f0a:	7a a9       	ldd	r23, Y+50	; 0x32
    2f0c:	8b a9       	ldd	r24, Y+51	; 0x33
    2f0e:	9c a9       	ldd	r25, Y+52	; 0x34
    2f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	98 ab       	std	Y+48, r25	; 0x30
    2f1a:	8f a7       	std	Y+47, r24	; 0x2f
    2f1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f1e:	98 a9       	ldd	r25, Y+48	; 0x30
    2f20:	9c a7       	std	Y+44, r25	; 0x2c
    2f22:	8b a7       	std	Y+43, r24	; 0x2b
    2f24:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f26:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	f1 f7       	brne	.-4      	; 0x2f28 <LCD_displayChar+0xfc>
    2f2c:	9c a7       	std	Y+44, r25	; 0x2c
    2f2e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,1);
    2f30:	83 e4       	ldi	r24, 0x43	; 67
    2f32:	62 e0       	ldi	r22, 0x02	; 2
    2f34:	41 e0       	ldi	r20, 0x01	; 1
    2f36:	0e 94 c3 0a 	call	0x1586	; 0x1586 <DIO_write_PIN>
    2f3a:	80 e0       	ldi	r24, 0x00	; 0
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	a0 e8       	ldi	r26, 0x80	; 128
    2f40:	bf e3       	ldi	r27, 0x3F	; 63
    2f42:	8f a3       	std	Y+39, r24	; 0x27
    2f44:	98 a7       	std	Y+40, r25	; 0x28
    2f46:	a9 a7       	std	Y+41, r26	; 0x29
    2f48:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f4a:	6f a1       	ldd	r22, Y+39	; 0x27
    2f4c:	78 a5       	ldd	r23, Y+40	; 0x28
    2f4e:	89 a5       	ldd	r24, Y+41	; 0x29
    2f50:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	4a e7       	ldi	r20, 0x7A	; 122
    2f58:	53 e4       	ldi	r21, 0x43	; 67
    2f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5e:	dc 01       	movw	r26, r24
    2f60:	cb 01       	movw	r24, r22
    2f62:	8b a3       	std	Y+35, r24	; 0x23
    2f64:	9c a3       	std	Y+36, r25	; 0x24
    2f66:	ad a3       	std	Y+37, r26	; 0x25
    2f68:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f6a:	6b a1       	ldd	r22, Y+35	; 0x23
    2f6c:	7c a1       	ldd	r23, Y+36	; 0x24
    2f6e:	8d a1       	ldd	r24, Y+37	; 0x25
    2f70:	9e a1       	ldd	r25, Y+38	; 0x26
    2f72:	20 e0       	ldi	r18, 0x00	; 0
    2f74:	30 e0       	ldi	r19, 0x00	; 0
    2f76:	40 e8       	ldi	r20, 0x80	; 128
    2f78:	5f e3       	ldi	r21, 0x3F	; 63
    2f7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f7e:	88 23       	and	r24, r24
    2f80:	2c f4       	brge	.+10     	; 0x2f8c <LCD_displayChar+0x160>
		__ticks = 1;
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	9a a3       	std	Y+34, r25	; 0x22
    2f88:	89 a3       	std	Y+33, r24	; 0x21
    2f8a:	3f c0       	rjmp	.+126    	; 0x300a <LCD_displayChar+0x1de>
	else if (__tmp > 65535)
    2f8c:	6b a1       	ldd	r22, Y+35	; 0x23
    2f8e:	7c a1       	ldd	r23, Y+36	; 0x24
    2f90:	8d a1       	ldd	r24, Y+37	; 0x25
    2f92:	9e a1       	ldd	r25, Y+38	; 0x26
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	3f ef       	ldi	r19, 0xFF	; 255
    2f98:	4f e7       	ldi	r20, 0x7F	; 127
    2f9a:	57 e4       	ldi	r21, 0x47	; 71
    2f9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fa0:	18 16       	cp	r1, r24
    2fa2:	4c f5       	brge	.+82     	; 0x2ff6 <LCD_displayChar+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa4:	6f a1       	ldd	r22, Y+39	; 0x27
    2fa6:	78 a5       	ldd	r23, Y+40	; 0x28
    2fa8:	89 a5       	ldd	r24, Y+41	; 0x29
    2faa:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	40 e2       	ldi	r20, 0x20	; 32
    2fb2:	51 e4       	ldi	r21, 0x41	; 65
    2fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	cb 01       	movw	r24, r22
    2fbc:	bc 01       	movw	r22, r24
    2fbe:	cd 01       	movw	r24, r26
    2fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	cb 01       	movw	r24, r22
    2fc8:	9a a3       	std	Y+34, r25	; 0x22
    2fca:	89 a3       	std	Y+33, r24	; 0x21
    2fcc:	0f c0       	rjmp	.+30     	; 0x2fec <LCD_displayChar+0x1c0>
    2fce:	89 e1       	ldi	r24, 0x19	; 25
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	98 a3       	std	Y+32, r25	; 0x20
    2fd4:	8f 8f       	std	Y+31, r24	; 0x1f
    2fd6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fd8:	98 a1       	ldd	r25, Y+32	; 0x20
    2fda:	01 97       	sbiw	r24, 0x01	; 1
    2fdc:	f1 f7       	brne	.-4      	; 0x2fda <LCD_displayChar+0x1ae>
    2fde:	98 a3       	std	Y+32, r25	; 0x20
    2fe0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe2:	89 a1       	ldd	r24, Y+33	; 0x21
    2fe4:	9a a1       	ldd	r25, Y+34	; 0x22
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	9a a3       	std	Y+34, r25	; 0x22
    2fea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fec:	89 a1       	ldd	r24, Y+33	; 0x21
    2fee:	9a a1       	ldd	r25, Y+34	; 0x22
    2ff0:	00 97       	sbiw	r24, 0x00	; 0
    2ff2:	69 f7       	brne	.-38     	; 0x2fce <LCD_displayChar+0x1a2>
    2ff4:	14 c0       	rjmp	.+40     	; 0x301e <LCD_displayChar+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ff8:	7c a1       	ldd	r23, Y+36	; 0x24
    2ffa:	8d a1       	ldd	r24, Y+37	; 0x25
    2ffc:	9e a1       	ldd	r25, Y+38	; 0x26
    2ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3002:	dc 01       	movw	r26, r24
    3004:	cb 01       	movw	r24, r22
    3006:	9a a3       	std	Y+34, r25	; 0x22
    3008:	89 a3       	std	Y+33, r24	; 0x21
    300a:	89 a1       	ldd	r24, Y+33	; 0x21
    300c:	9a a1       	ldd	r25, Y+34	; 0x22
    300e:	9e 8f       	std	Y+30, r25	; 0x1e
    3010:	8d 8f       	std	Y+29, r24	; 0x1d
    3012:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3014:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3016:	01 97       	sbiw	r24, 0x01	; 1
    3018:	f1 f7       	brne	.-4      	; 0x3016 <LCD_displayChar+0x1ea>
    301a:	9e 8f       	std	Y+30, r25	; 0x1e
    301c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_write_high_nibble(LCD_data_port,HIGH_NIBBLE_OF(data));
    301e:	89 ad       	ldd	r24, Y+57	; 0x39
    3020:	98 2f       	mov	r25, r24
    3022:	92 95       	swap	r25
    3024:	9f 70       	andi	r25, 0x0F	; 15
    3026:	84 e4       	ldi	r24, 0x44	; 68
    3028:	69 2f       	mov	r22, r25
    302a:	0e 94 07 10 	call	0x200e	; 0x200e <DIO_write_high_nibble>
	LCD_refresh();
    302e:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_refresh>
	DIO_write_high_nibble(LCD_data_port,data);
    3032:	84 e4       	ldi	r24, 0x44	; 68
    3034:	69 ad       	ldd	r22, Y+57	; 0x39
    3036:	0e 94 07 10 	call	0x200e	; 0x200e <DIO_write_high_nibble>
    303a:	80 e0       	ldi	r24, 0x00	; 0
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	a0 e8       	ldi	r26, 0x80	; 128
    3040:	bf e3       	ldi	r27, 0x3F	; 63
    3042:	89 8f       	std	Y+25, r24	; 0x19
    3044:	9a 8f       	std	Y+26, r25	; 0x1a
    3046:	ab 8f       	std	Y+27, r26	; 0x1b
    3048:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    304a:	69 8d       	ldd	r22, Y+25	; 0x19
    304c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    304e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3050:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	4a e7       	ldi	r20, 0x7A	; 122
    3058:	53 e4       	ldi	r21, 0x43	; 67
    305a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305e:	dc 01       	movw	r26, r24
    3060:	cb 01       	movw	r24, r22
    3062:	8d 8b       	std	Y+21, r24	; 0x15
    3064:	9e 8b       	std	Y+22, r25	; 0x16
    3066:	af 8b       	std	Y+23, r26	; 0x17
    3068:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    306a:	6d 89       	ldd	r22, Y+21	; 0x15
    306c:	7e 89       	ldd	r23, Y+22	; 0x16
    306e:	8f 89       	ldd	r24, Y+23	; 0x17
    3070:	98 8d       	ldd	r25, Y+24	; 0x18
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	40 e8       	ldi	r20, 0x80	; 128
    3078:	5f e3       	ldi	r21, 0x3F	; 63
    307a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    307e:	88 23       	and	r24, r24
    3080:	2c f4       	brge	.+10     	; 0x308c <LCD_displayChar+0x260>
		__ticks = 1;
    3082:	81 e0       	ldi	r24, 0x01	; 1
    3084:	90 e0       	ldi	r25, 0x00	; 0
    3086:	9c 8b       	std	Y+20, r25	; 0x14
    3088:	8b 8b       	std	Y+19, r24	; 0x13
    308a:	3f c0       	rjmp	.+126    	; 0x310a <LCD_displayChar+0x2de>
	else if (__tmp > 65535)
    308c:	6d 89       	ldd	r22, Y+21	; 0x15
    308e:	7e 89       	ldd	r23, Y+22	; 0x16
    3090:	8f 89       	ldd	r24, Y+23	; 0x17
    3092:	98 8d       	ldd	r25, Y+24	; 0x18
    3094:	20 e0       	ldi	r18, 0x00	; 0
    3096:	3f ef       	ldi	r19, 0xFF	; 255
    3098:	4f e7       	ldi	r20, 0x7F	; 127
    309a:	57 e4       	ldi	r21, 0x47	; 71
    309c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30a0:	18 16       	cp	r1, r24
    30a2:	4c f5       	brge	.+82     	; 0x30f6 <LCD_displayChar+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a4:	69 8d       	ldd	r22, Y+25	; 0x19
    30a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	40 e2       	ldi	r20, 0x20	; 32
    30b2:	51 e4       	ldi	r21, 0x41	; 65
    30b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b8:	dc 01       	movw	r26, r24
    30ba:	cb 01       	movw	r24, r22
    30bc:	bc 01       	movw	r22, r24
    30be:	cd 01       	movw	r24, r26
    30c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c4:	dc 01       	movw	r26, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	9c 8b       	std	Y+20, r25	; 0x14
    30ca:	8b 8b       	std	Y+19, r24	; 0x13
    30cc:	0f c0       	rjmp	.+30     	; 0x30ec <LCD_displayChar+0x2c0>
    30ce:	89 e1       	ldi	r24, 0x19	; 25
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	9a 8b       	std	Y+18, r25	; 0x12
    30d4:	89 8b       	std	Y+17, r24	; 0x11
    30d6:	89 89       	ldd	r24, Y+17	; 0x11
    30d8:	9a 89       	ldd	r25, Y+18	; 0x12
    30da:	01 97       	sbiw	r24, 0x01	; 1
    30dc:	f1 f7       	brne	.-4      	; 0x30da <LCD_displayChar+0x2ae>
    30de:	9a 8b       	std	Y+18, r25	; 0x12
    30e0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e2:	8b 89       	ldd	r24, Y+19	; 0x13
    30e4:	9c 89       	ldd	r25, Y+20	; 0x14
    30e6:	01 97       	sbiw	r24, 0x01	; 1
    30e8:	9c 8b       	std	Y+20, r25	; 0x14
    30ea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ec:	8b 89       	ldd	r24, Y+19	; 0x13
    30ee:	9c 89       	ldd	r25, Y+20	; 0x14
    30f0:	00 97       	sbiw	r24, 0x00	; 0
    30f2:	69 f7       	brne	.-38     	; 0x30ce <LCD_displayChar+0x2a2>
    30f4:	14 c0       	rjmp	.+40     	; 0x311e <LCD_displayChar+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f6:	6d 89       	ldd	r22, Y+21	; 0x15
    30f8:	7e 89       	ldd	r23, Y+22	; 0x16
    30fa:	8f 89       	ldd	r24, Y+23	; 0x17
    30fc:	98 8d       	ldd	r25, Y+24	; 0x18
    30fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	9c 8b       	std	Y+20, r25	; 0x14
    3108:	8b 8b       	std	Y+19, r24	; 0x13
    310a:	8b 89       	ldd	r24, Y+19	; 0x13
    310c:	9c 89       	ldd	r25, Y+20	; 0x14
    310e:	98 8b       	std	Y+16, r25	; 0x10
    3110:	8f 87       	std	Y+15, r24	; 0x0f
    3112:	8f 85       	ldd	r24, Y+15	; 0x0f
    3114:	98 89       	ldd	r25, Y+16	; 0x10
    3116:	01 97       	sbiw	r24, 0x01	; 1
    3118:	f1 f7       	brne	.-4      	; 0x3116 <LCD_displayChar+0x2ea>
    311a:	98 8b       	std	Y+16, r25	; 0x10
    311c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,0);
    311e:	83 e4       	ldi	r24, 0x43	; 67
    3120:	62 e0       	ldi	r22, 0x02	; 2
    3122:	40 e0       	ldi	r20, 0x00	; 0
    3124:	0e 94 c3 0a 	call	0x1586	; 0x1586 <DIO_write_PIN>
    3128:	80 e0       	ldi	r24, 0x00	; 0
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	a0 e8       	ldi	r26, 0x80	; 128
    312e:	bf e3       	ldi	r27, 0x3F	; 63
    3130:	8b 87       	std	Y+11, r24	; 0x0b
    3132:	9c 87       	std	Y+12, r25	; 0x0c
    3134:	ad 87       	std	Y+13, r26	; 0x0d
    3136:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3138:	6b 85       	ldd	r22, Y+11	; 0x0b
    313a:	7c 85       	ldd	r23, Y+12	; 0x0c
    313c:	8d 85       	ldd	r24, Y+13	; 0x0d
    313e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3140:	20 e0       	ldi	r18, 0x00	; 0
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	4a e7       	ldi	r20, 0x7A	; 122
    3146:	53 e4       	ldi	r21, 0x43	; 67
    3148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	8f 83       	std	Y+7, r24	; 0x07
    3152:	98 87       	std	Y+8, r25	; 0x08
    3154:	a9 87       	std	Y+9, r26	; 0x09
    3156:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3158:	6f 81       	ldd	r22, Y+7	; 0x07
    315a:	78 85       	ldd	r23, Y+8	; 0x08
    315c:	89 85       	ldd	r24, Y+9	; 0x09
    315e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3160:	20 e0       	ldi	r18, 0x00	; 0
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	40 e8       	ldi	r20, 0x80	; 128
    3166:	5f e3       	ldi	r21, 0x3F	; 63
    3168:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    316c:	88 23       	and	r24, r24
    316e:	2c f4       	brge	.+10     	; 0x317a <LCD_displayChar+0x34e>
		__ticks = 1;
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	9e 83       	std	Y+6, r25	; 0x06
    3176:	8d 83       	std	Y+5, r24	; 0x05
    3178:	3f c0       	rjmp	.+126    	; 0x31f8 <LCD_displayChar+0x3cc>
	else if (__tmp > 65535)
    317a:	6f 81       	ldd	r22, Y+7	; 0x07
    317c:	78 85       	ldd	r23, Y+8	; 0x08
    317e:	89 85       	ldd	r24, Y+9	; 0x09
    3180:	9a 85       	ldd	r25, Y+10	; 0x0a
    3182:	20 e0       	ldi	r18, 0x00	; 0
    3184:	3f ef       	ldi	r19, 0xFF	; 255
    3186:	4f e7       	ldi	r20, 0x7F	; 127
    3188:	57 e4       	ldi	r21, 0x47	; 71
    318a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    318e:	18 16       	cp	r1, r24
    3190:	4c f5       	brge	.+82     	; 0x31e4 <LCD_displayChar+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3192:	6b 85       	ldd	r22, Y+11	; 0x0b
    3194:	7c 85       	ldd	r23, Y+12	; 0x0c
    3196:	8d 85       	ldd	r24, Y+13	; 0x0d
    3198:	9e 85       	ldd	r25, Y+14	; 0x0e
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	40 e2       	ldi	r20, 0x20	; 32
    31a0:	51 e4       	ldi	r21, 0x41	; 65
    31a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a6:	dc 01       	movw	r26, r24
    31a8:	cb 01       	movw	r24, r22
    31aa:	bc 01       	movw	r22, r24
    31ac:	cd 01       	movw	r24, r26
    31ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b2:	dc 01       	movw	r26, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	9e 83       	std	Y+6, r25	; 0x06
    31b8:	8d 83       	std	Y+5, r24	; 0x05
    31ba:	0f c0       	rjmp	.+30     	; 0x31da <LCD_displayChar+0x3ae>
    31bc:	89 e1       	ldi	r24, 0x19	; 25
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	9c 83       	std	Y+4, r25	; 0x04
    31c2:	8b 83       	std	Y+3, r24	; 0x03
    31c4:	8b 81       	ldd	r24, Y+3	; 0x03
    31c6:	9c 81       	ldd	r25, Y+4	; 0x04
    31c8:	01 97       	sbiw	r24, 0x01	; 1
    31ca:	f1 f7       	brne	.-4      	; 0x31c8 <LCD_displayChar+0x39c>
    31cc:	9c 83       	std	Y+4, r25	; 0x04
    31ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d0:	8d 81       	ldd	r24, Y+5	; 0x05
    31d2:	9e 81       	ldd	r25, Y+6	; 0x06
    31d4:	01 97       	sbiw	r24, 0x01	; 1
    31d6:	9e 83       	std	Y+6, r25	; 0x06
    31d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31da:	8d 81       	ldd	r24, Y+5	; 0x05
    31dc:	9e 81       	ldd	r25, Y+6	; 0x06
    31de:	00 97       	sbiw	r24, 0x00	; 0
    31e0:	69 f7       	brne	.-38     	; 0x31bc <LCD_displayChar+0x390>
    31e2:	14 c0       	rjmp	.+40     	; 0x320c <LCD_displayChar+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e4:	6f 81       	ldd	r22, Y+7	; 0x07
    31e6:	78 85       	ldd	r23, Y+8	; 0x08
    31e8:	89 85       	ldd	r24, Y+9	; 0x09
    31ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	9e 83       	std	Y+6, r25	; 0x06
    31f6:	8d 83       	std	Y+5, r24	; 0x05
    31f8:	8d 81       	ldd	r24, Y+5	; 0x05
    31fa:	9e 81       	ldd	r25, Y+6	; 0x06
    31fc:	9a 83       	std	Y+2, r25	; 0x02
    31fe:	89 83       	std	Y+1, r24	; 0x01
    3200:	89 81       	ldd	r24, Y+1	; 0x01
    3202:	9a 81       	ldd	r25, Y+2	; 0x02
    3204:	01 97       	sbiw	r24, 0x01	; 1
    3206:	f1 f7       	brne	.-4      	; 0x3204 <LCD_displayChar+0x3d8>
    3208:	9a 83       	std	Y+2, r25	; 0x02
    320a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    320c:	e9 96       	adiw	r28, 0x39	; 57
    320e:	0f b6       	in	r0, 0x3f	; 63
    3210:	f8 94       	cli
    3212:	de bf       	out	0x3e, r29	; 62
    3214:	0f be       	out	0x3f, r0	; 63
    3216:	cd bf       	out	0x3d, r28	; 61
    3218:	cf 91       	pop	r28
    321a:	df 91       	pop	r29
    321c:	08 95       	ret

0000321e <LCD_displayString>:


void LCD_displayString(const char *str)
{
    321e:	df 93       	push	r29
    3220:	cf 93       	push	r28
    3222:	00 d0       	rcall	.+0      	; 0x3224 <LCD_displayString+0x6>
    3224:	0f 92       	push	r0
    3226:	cd b7       	in	r28, 0x3d	; 61
    3228:	de b7       	in	r29, 0x3e	; 62
    322a:	9b 83       	std	Y+3, r25	; 0x03
    322c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    322e:	19 82       	std	Y+1, r1	; 0x01
    3230:	0e c0       	rjmp	.+28     	; 0x324e <LCD_displayString+0x30>
	while(str[i]!='\0')
	{
		LCD_displayChar(str[i]);
    3232:	89 81       	ldd	r24, Y+1	; 0x01
    3234:	28 2f       	mov	r18, r24
    3236:	30 e0       	ldi	r19, 0x00	; 0
    3238:	8a 81       	ldd	r24, Y+2	; 0x02
    323a:	9b 81       	ldd	r25, Y+3	; 0x03
    323c:	fc 01       	movw	r30, r24
    323e:	e2 0f       	add	r30, r18
    3240:	f3 1f       	adc	r31, r19
    3242:	80 81       	ld	r24, Z
    3244:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <LCD_displayChar>
		i++;
    3248:	89 81       	ldd	r24, Y+1	; 0x01
    324a:	8f 5f       	subi	r24, 0xFF	; 255
    324c:	89 83       	std	Y+1, r24	; 0x01


void LCD_displayString(const char *str)
{
	uint8 i=0;
	while(str[i]!='\0')
    324e:	89 81       	ldd	r24, Y+1	; 0x01
    3250:	28 2f       	mov	r18, r24
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	8a 81       	ldd	r24, Y+2	; 0x02
    3256:	9b 81       	ldd	r25, Y+3	; 0x03
    3258:	fc 01       	movw	r30, r24
    325a:	e2 0f       	add	r30, r18
    325c:	f3 1f       	adc	r31, r19
    325e:	80 81       	ld	r24, Z
    3260:	88 23       	and	r24, r24
    3262:	39 f7       	brne	.-50     	; 0x3232 <LCD_displayString+0x14>
	{
		LCD_displayChar(str[i]);
		i++;
	}

}
    3264:	0f 90       	pop	r0
    3266:	0f 90       	pop	r0
    3268:	0f 90       	pop	r0
    326a:	cf 91       	pop	r28
    326c:	df 91       	pop	r29
    326e:	08 95       	ret

00003270 <LCD_MoveTo_Row_Column>:


void LCD_MoveTo_Row_Column(uint8 row, uint8 col)
{
    3270:	df 93       	push	r29
    3272:	cf 93       	push	r28
    3274:	00 d0       	rcall	.+0      	; 0x3276 <LCD_MoveTo_Row_Column+0x6>
    3276:	00 d0       	rcall	.+0      	; 0x3278 <LCD_MoveTo_Row_Column+0x8>
    3278:	0f 92       	push	r0
    327a:	cd b7       	in	r28, 0x3d	; 61
    327c:	de b7       	in	r29, 0x3e	; 62
    327e:	8a 83       	std	Y+2, r24	; 0x02
    3280:	6b 83       	std	Y+3, r22	; 0x03
	// The position is COL+ROW
	uint8 position;

	switch(row)
    3282:	8a 81       	ldd	r24, Y+2	; 0x02
    3284:	28 2f       	mov	r18, r24
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	3d 83       	std	Y+5, r19	; 0x05
    328a:	2c 83       	std	Y+4, r18	; 0x04
    328c:	8c 81       	ldd	r24, Y+4	; 0x04
    328e:	9d 81       	ldd	r25, Y+5	; 0x05
    3290:	00 97       	sbiw	r24, 0x00	; 0
    3292:	31 f0       	breq	.+12     	; 0x32a0 <LCD_MoveTo_Row_Column+0x30>
    3294:	2c 81       	ldd	r18, Y+4	; 0x04
    3296:	3d 81       	ldd	r19, Y+5	; 0x05
    3298:	21 30       	cpi	r18, 0x01	; 1
    329a:	31 05       	cpc	r19, r1
    329c:	21 f0       	breq	.+8      	; 0x32a6 <LCD_MoveTo_Row_Column+0x36>
    329e:	06 c0       	rjmp	.+12     	; 0x32ac <LCD_MoveTo_Row_Column+0x3c>
	{
		case 0:
			position=col;
    32a0:	8b 81       	ldd	r24, Y+3	; 0x03
    32a2:	89 83       	std	Y+1, r24	; 0x01
    32a4:	03 c0       	rjmp	.+6      	; 0x32ac <LCD_MoveTo_Row_Column+0x3c>
			break;
		case 1:
			position=col+0x40;
    32a6:	8b 81       	ldd	r24, Y+3	; 0x03
    32a8:	80 5c       	subi	r24, 0xC0	; 192
    32aa:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	LCD_Command(position|LCD_Cursor_move_to);
    32ac:	89 81       	ldd	r24, Y+1	; 0x01
    32ae:	80 68       	ori	r24, 0x80	; 128
    32b0:	0e 94 79 14 	call	0x28f2	; 0x28f2 <LCD_Command>
}
    32b4:	0f 90       	pop	r0
    32b6:	0f 90       	pop	r0
    32b8:	0f 90       	pop	r0
    32ba:	0f 90       	pop	r0
    32bc:	0f 90       	pop	r0
    32be:	cf 91       	pop	r28
    32c0:	df 91       	pop	r29
    32c2:	08 95       	ret

000032c4 <LCD_display_String_Row_Column>:


void LCD_display_String_Row_Column(uint8 row,uint8 col, const char *str)
{
    32c4:	df 93       	push	r29
    32c6:	cf 93       	push	r28
    32c8:	00 d0       	rcall	.+0      	; 0x32ca <LCD_display_String_Row_Column+0x6>
    32ca:	00 d0       	rcall	.+0      	; 0x32cc <LCD_display_String_Row_Column+0x8>
    32cc:	cd b7       	in	r28, 0x3d	; 61
    32ce:	de b7       	in	r29, 0x3e	; 62
    32d0:	89 83       	std	Y+1, r24	; 0x01
    32d2:	6a 83       	std	Y+2, r22	; 0x02
    32d4:	5c 83       	std	Y+4, r21	; 0x04
    32d6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_MoveTo_Row_Column(row,col);
    32d8:	89 81       	ldd	r24, Y+1	; 0x01
    32da:	6a 81       	ldd	r22, Y+2	; 0x02
    32dc:	0e 94 38 19 	call	0x3270	; 0x3270 <LCD_MoveTo_Row_Column>
	LCD_displayString(str);
    32e0:	8b 81       	ldd	r24, Y+3	; 0x03
    32e2:	9c 81       	ldd	r25, Y+4	; 0x04
    32e4:	0e 94 0f 19 	call	0x321e	; 0x321e <LCD_displayString>

}
    32e8:	0f 90       	pop	r0
    32ea:	0f 90       	pop	r0
    32ec:	0f 90       	pop	r0
    32ee:	0f 90       	pop	r0
    32f0:	cf 91       	pop	r28
    32f2:	df 91       	pop	r29
    32f4:	08 95       	ret

000032f6 <LCD_Clear>:



void LCD_Clear(void)
{
    32f6:	df 93       	push	r29
    32f8:	cf 93       	push	r28
    32fa:	cd b7       	in	r28, 0x3d	; 61
    32fc:	de b7       	in	r29, 0x3e	; 62
	LCD_Command(LCD_clear_cmd);
    32fe:	81 e0       	ldi	r24, 0x01	; 1
    3300:	0e 94 79 14 	call	0x28f2	; 0x28f2 <LCD_Command>
}
    3304:	cf 91       	pop	r28
    3306:	df 91       	pop	r29
    3308:	08 95       	ret

0000330a <LCD_integerToString>:



void LCD_integerToString(uint8 data)
{
    330a:	df 93       	push	r29
    330c:	cf 93       	push	r28
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
    3312:	61 97       	sbiw	r28, 0x11	; 17
    3314:	0f b6       	in	r0, 0x3f	; 63
    3316:	f8 94       	cli
    3318:	de bf       	out	0x3e, r29	; 62
    331a:	0f be       	out	0x3f, r0	; 63
    331c:	cd bf       	out	0x3d, r28	; 61
    331e:	89 8b       	std	Y+17, r24	; 0x11

	char buff[16];
	itoa(data,buff,10);
    3320:	89 89       	ldd	r24, Y+17	; 0x11
    3322:	88 2f       	mov	r24, r24
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	9e 01       	movw	r18, r28
    3328:	2f 5f       	subi	r18, 0xFF	; 255
    332a:	3f 4f       	sbci	r19, 0xFF	; 255
    332c:	b9 01       	movw	r22, r18
    332e:	4a e0       	ldi	r20, 0x0A	; 10
    3330:	50 e0       	ldi	r21, 0x00	; 0
    3332:	0e 94 c4 1a 	call	0x3588	; 0x3588 <itoa>
	LCD_displayString( buff );
    3336:	ce 01       	movw	r24, r28
    3338:	01 96       	adiw	r24, 0x01	; 1
    333a:	0e 94 0f 19 	call	0x321e	; 0x321e <LCD_displayString>
}
    333e:	61 96       	adiw	r28, 0x11	; 17
    3340:	0f b6       	in	r0, 0x3f	; 63
    3342:	f8 94       	cli
    3344:	de bf       	out	0x3e, r29	; 62
    3346:	0f be       	out	0x3f, r0	; 63
    3348:	cd bf       	out	0x3d, r28	; 61
    334a:	cf 91       	pop	r28
    334c:	df 91       	pop	r29
    334e:	08 95       	ret

00003350 <LCD_display_int>:


void LCD_display_int(uint8 data)
{
    3350:	df 93       	push	r29
    3352:	cf 93       	push	r28
    3354:	cd b7       	in	r28, 0x3d	; 61
    3356:	de b7       	in	r29, 0x3e	; 62
    3358:	2f 97       	sbiw	r28, 0x0f	; 15
    335a:	0f b6       	in	r0, 0x3f	; 63
    335c:	f8 94       	cli
    335e:	de bf       	out	0x3e, r29	; 62
    3360:	0f be       	out	0x3f, r0	; 63
    3362:	cd bf       	out	0x3d, r28	; 61
    3364:	8f 87       	std	Y+15, r24	; 0x0f
	/* if any switch pressed for more than 500 ms it counts more than one press */
	if((data <= 9) && (data >= 0))
    3366:	8f 85       	ldd	r24, Y+15	; 0x0f
    3368:	8a 30       	cpi	r24, 0x0A	; 10
    336a:	20 f4       	brcc	.+8      	; 0x3374 <LCD_display_int+0x24>
	{
		LCD_integerToString(data); /* display the pressed keypad switch */
    336c:	8f 85       	ldd	r24, Y+15	; 0x0f
    336e:	0e 94 85 19 	call	0x330a	; 0x330a <LCD_integerToString>
    3372:	03 c0       	rjmp	.+6      	; 0x337a <LCD_display_int+0x2a>
	}
	else
	{
		LCD_displayChar(data); /* display the pressed keypad switch */
    3374:	8f 85       	ldd	r24, Y+15	; 0x0f
    3376:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <LCD_displayChar>
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	af ea       	ldi	r26, 0xAF	; 175
    3380:	b3 e4       	ldi	r27, 0x43	; 67
    3382:	8b 87       	std	Y+11, r24	; 0x0b
    3384:	9c 87       	std	Y+12, r25	; 0x0c
    3386:	ad 87       	std	Y+13, r26	; 0x0d
    3388:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    338a:	6b 85       	ldd	r22, Y+11	; 0x0b
    338c:	7c 85       	ldd	r23, Y+12	; 0x0c
    338e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3390:	9e 85       	ldd	r25, Y+14	; 0x0e
    3392:	20 e0       	ldi	r18, 0x00	; 0
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	4a e7       	ldi	r20, 0x7A	; 122
    3398:	53 e4       	ldi	r21, 0x43	; 67
    339a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	8f 83       	std	Y+7, r24	; 0x07
    33a4:	98 87       	std	Y+8, r25	; 0x08
    33a6:	a9 87       	std	Y+9, r26	; 0x09
    33a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33aa:	6f 81       	ldd	r22, Y+7	; 0x07
    33ac:	78 85       	ldd	r23, Y+8	; 0x08
    33ae:	89 85       	ldd	r24, Y+9	; 0x09
    33b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33b2:	20 e0       	ldi	r18, 0x00	; 0
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	40 e8       	ldi	r20, 0x80	; 128
    33b8:	5f e3       	ldi	r21, 0x3F	; 63
    33ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33be:	88 23       	and	r24, r24
    33c0:	2c f4       	brge	.+10     	; 0x33cc <LCD_display_int+0x7c>
		__ticks = 1;
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	9e 83       	std	Y+6, r25	; 0x06
    33c8:	8d 83       	std	Y+5, r24	; 0x05
    33ca:	3f c0       	rjmp	.+126    	; 0x344a <LCD_display_int+0xfa>
	else if (__tmp > 65535)
    33cc:	6f 81       	ldd	r22, Y+7	; 0x07
    33ce:	78 85       	ldd	r23, Y+8	; 0x08
    33d0:	89 85       	ldd	r24, Y+9	; 0x09
    33d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	3f ef       	ldi	r19, 0xFF	; 255
    33d8:	4f e7       	ldi	r20, 0x7F	; 127
    33da:	57 e4       	ldi	r21, 0x47	; 71
    33dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33e0:	18 16       	cp	r1, r24
    33e2:	4c f5       	brge	.+82     	; 0x3436 <LCD_display_int+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    33e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    33e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ec:	20 e0       	ldi	r18, 0x00	; 0
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	40 e2       	ldi	r20, 0x20	; 32
    33f2:	51 e4       	ldi	r21, 0x41	; 65
    33f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f8:	dc 01       	movw	r26, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	bc 01       	movw	r22, r24
    33fe:	cd 01       	movw	r24, r26
    3400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	9e 83       	std	Y+6, r25	; 0x06
    340a:	8d 83       	std	Y+5, r24	; 0x05
    340c:	0f c0       	rjmp	.+30     	; 0x342c <LCD_display_int+0xdc>
    340e:	89 e1       	ldi	r24, 0x19	; 25
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	9c 83       	std	Y+4, r25	; 0x04
    3414:	8b 83       	std	Y+3, r24	; 0x03
    3416:	8b 81       	ldd	r24, Y+3	; 0x03
    3418:	9c 81       	ldd	r25, Y+4	; 0x04
    341a:	01 97       	sbiw	r24, 0x01	; 1
    341c:	f1 f7       	brne	.-4      	; 0x341a <LCD_display_int+0xca>
    341e:	9c 83       	std	Y+4, r25	; 0x04
    3420:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3422:	8d 81       	ldd	r24, Y+5	; 0x05
    3424:	9e 81       	ldd	r25, Y+6	; 0x06
    3426:	01 97       	sbiw	r24, 0x01	; 1
    3428:	9e 83       	std	Y+6, r25	; 0x06
    342a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    342c:	8d 81       	ldd	r24, Y+5	; 0x05
    342e:	9e 81       	ldd	r25, Y+6	; 0x06
    3430:	00 97       	sbiw	r24, 0x00	; 0
    3432:	69 f7       	brne	.-38     	; 0x340e <LCD_display_int+0xbe>
    3434:	14 c0       	rjmp	.+40     	; 0x345e <LCD_display_int+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3436:	6f 81       	ldd	r22, Y+7	; 0x07
    3438:	78 85       	ldd	r23, Y+8	; 0x08
    343a:	89 85       	ldd	r24, Y+9	; 0x09
    343c:	9a 85       	ldd	r25, Y+10	; 0x0a
    343e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3442:	dc 01       	movw	r26, r24
    3444:	cb 01       	movw	r24, r22
    3446:	9e 83       	std	Y+6, r25	; 0x06
    3448:	8d 83       	std	Y+5, r24	; 0x05
    344a:	8d 81       	ldd	r24, Y+5	; 0x05
    344c:	9e 81       	ldd	r25, Y+6	; 0x06
    344e:	9a 83       	std	Y+2, r25	; 0x02
    3450:	89 83       	std	Y+1, r24	; 0x01
    3452:	89 81       	ldd	r24, Y+1	; 0x01
    3454:	9a 81       	ldd	r25, Y+2	; 0x02
    3456:	01 97       	sbiw	r24, 0x01	; 1
    3458:	f1 f7       	brne	.-4      	; 0x3456 <LCD_display_int+0x106>
    345a:	9a 83       	std	Y+2, r25	; 0x02
    345c:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(350); /* Press time */

}
    345e:	2f 96       	adiw	r28, 0x0f	; 15
    3460:	0f b6       	in	r0, 0x3f	; 63
    3462:	f8 94       	cli
    3464:	de bf       	out	0x3e, r29	; 62
    3466:	0f be       	out	0x3f, r0	; 63
    3468:	cd bf       	out	0x3d, r28	; 61
    346a:	cf 91       	pop	r28
    346c:	df 91       	pop	r29
    346e:	08 95       	ret

00003470 <LCD_display_int_nodelay>:

void LCD_display_int_nodelay(uint8 data)
{
    3470:	df 93       	push	r29
    3472:	cf 93       	push	r28
    3474:	0f 92       	push	r0
    3476:	cd b7       	in	r28, 0x3d	; 61
    3478:	de b7       	in	r29, 0x3e	; 62
    347a:	89 83       	std	Y+1, r24	; 0x01
	/* if any switch pressed for more than 500 ms it counts more than one press */
	if((data <= 9) && (data >= 0))
    347c:	89 81       	ldd	r24, Y+1	; 0x01
    347e:	8a 30       	cpi	r24, 0x0A	; 10
    3480:	20 f4       	brcc	.+8      	; 0x348a <LCD_display_int_nodelay+0x1a>
	{
		LCD_integerToString(data); /* display the pressed keypad switch */
    3482:	89 81       	ldd	r24, Y+1	; 0x01
    3484:	0e 94 85 19 	call	0x330a	; 0x330a <LCD_integerToString>
    3488:	03 c0       	rjmp	.+6      	; 0x3490 <LCD_display_int_nodelay+0x20>
	}
	else
	{
		LCD_displayChar(data); /* display the pressed keypad switch */
    348a:	89 81       	ldd	r24, Y+1	; 0x01
    348c:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <LCD_displayChar>
	}

}
    3490:	0f 90       	pop	r0
    3492:	cf 91       	pop	r28
    3494:	df 91       	pop	r29
    3496:	08 95       	ret

00003498 <__mulsi3>:
    3498:	62 9f       	mul	r22, r18
    349a:	d0 01       	movw	r26, r0
    349c:	73 9f       	mul	r23, r19
    349e:	f0 01       	movw	r30, r0
    34a0:	82 9f       	mul	r24, r18
    34a2:	e0 0d       	add	r30, r0
    34a4:	f1 1d       	adc	r31, r1
    34a6:	64 9f       	mul	r22, r20
    34a8:	e0 0d       	add	r30, r0
    34aa:	f1 1d       	adc	r31, r1
    34ac:	92 9f       	mul	r25, r18
    34ae:	f0 0d       	add	r31, r0
    34b0:	83 9f       	mul	r24, r19
    34b2:	f0 0d       	add	r31, r0
    34b4:	74 9f       	mul	r23, r20
    34b6:	f0 0d       	add	r31, r0
    34b8:	65 9f       	mul	r22, r21
    34ba:	f0 0d       	add	r31, r0
    34bc:	99 27       	eor	r25, r25
    34be:	72 9f       	mul	r23, r18
    34c0:	b0 0d       	add	r27, r0
    34c2:	e1 1d       	adc	r30, r1
    34c4:	f9 1f       	adc	r31, r25
    34c6:	63 9f       	mul	r22, r19
    34c8:	b0 0d       	add	r27, r0
    34ca:	e1 1d       	adc	r30, r1
    34cc:	f9 1f       	adc	r31, r25
    34ce:	bd 01       	movw	r22, r26
    34d0:	cf 01       	movw	r24, r30
    34d2:	11 24       	eor	r1, r1
    34d4:	08 95       	ret

000034d6 <__udivmodsi4>:
    34d6:	a1 e2       	ldi	r26, 0x21	; 33
    34d8:	1a 2e       	mov	r1, r26
    34da:	aa 1b       	sub	r26, r26
    34dc:	bb 1b       	sub	r27, r27
    34de:	fd 01       	movw	r30, r26
    34e0:	0d c0       	rjmp	.+26     	; 0x34fc <__udivmodsi4_ep>

000034e2 <__udivmodsi4_loop>:
    34e2:	aa 1f       	adc	r26, r26
    34e4:	bb 1f       	adc	r27, r27
    34e6:	ee 1f       	adc	r30, r30
    34e8:	ff 1f       	adc	r31, r31
    34ea:	a2 17       	cp	r26, r18
    34ec:	b3 07       	cpc	r27, r19
    34ee:	e4 07       	cpc	r30, r20
    34f0:	f5 07       	cpc	r31, r21
    34f2:	20 f0       	brcs	.+8      	; 0x34fc <__udivmodsi4_ep>
    34f4:	a2 1b       	sub	r26, r18
    34f6:	b3 0b       	sbc	r27, r19
    34f8:	e4 0b       	sbc	r30, r20
    34fa:	f5 0b       	sbc	r31, r21

000034fc <__udivmodsi4_ep>:
    34fc:	66 1f       	adc	r22, r22
    34fe:	77 1f       	adc	r23, r23
    3500:	88 1f       	adc	r24, r24
    3502:	99 1f       	adc	r25, r25
    3504:	1a 94       	dec	r1
    3506:	69 f7       	brne	.-38     	; 0x34e2 <__udivmodsi4_loop>
    3508:	60 95       	com	r22
    350a:	70 95       	com	r23
    350c:	80 95       	com	r24
    350e:	90 95       	com	r25
    3510:	9b 01       	movw	r18, r22
    3512:	ac 01       	movw	r20, r24
    3514:	bd 01       	movw	r22, r26
    3516:	cf 01       	movw	r24, r30
    3518:	08 95       	ret

0000351a <__prologue_saves__>:
    351a:	2f 92       	push	r2
    351c:	3f 92       	push	r3
    351e:	4f 92       	push	r4
    3520:	5f 92       	push	r5
    3522:	6f 92       	push	r6
    3524:	7f 92       	push	r7
    3526:	8f 92       	push	r8
    3528:	9f 92       	push	r9
    352a:	af 92       	push	r10
    352c:	bf 92       	push	r11
    352e:	cf 92       	push	r12
    3530:	df 92       	push	r13
    3532:	ef 92       	push	r14
    3534:	ff 92       	push	r15
    3536:	0f 93       	push	r16
    3538:	1f 93       	push	r17
    353a:	cf 93       	push	r28
    353c:	df 93       	push	r29
    353e:	cd b7       	in	r28, 0x3d	; 61
    3540:	de b7       	in	r29, 0x3e	; 62
    3542:	ca 1b       	sub	r28, r26
    3544:	db 0b       	sbc	r29, r27
    3546:	0f b6       	in	r0, 0x3f	; 63
    3548:	f8 94       	cli
    354a:	de bf       	out	0x3e, r29	; 62
    354c:	0f be       	out	0x3f, r0	; 63
    354e:	cd bf       	out	0x3d, r28	; 61
    3550:	09 94       	ijmp

00003552 <__epilogue_restores__>:
    3552:	2a 88       	ldd	r2, Y+18	; 0x12
    3554:	39 88       	ldd	r3, Y+17	; 0x11
    3556:	48 88       	ldd	r4, Y+16	; 0x10
    3558:	5f 84       	ldd	r5, Y+15	; 0x0f
    355a:	6e 84       	ldd	r6, Y+14	; 0x0e
    355c:	7d 84       	ldd	r7, Y+13	; 0x0d
    355e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3560:	9b 84       	ldd	r9, Y+11	; 0x0b
    3562:	aa 84       	ldd	r10, Y+10	; 0x0a
    3564:	b9 84       	ldd	r11, Y+9	; 0x09
    3566:	c8 84       	ldd	r12, Y+8	; 0x08
    3568:	df 80       	ldd	r13, Y+7	; 0x07
    356a:	ee 80       	ldd	r14, Y+6	; 0x06
    356c:	fd 80       	ldd	r15, Y+5	; 0x05
    356e:	0c 81       	ldd	r16, Y+4	; 0x04
    3570:	1b 81       	ldd	r17, Y+3	; 0x03
    3572:	aa 81       	ldd	r26, Y+2	; 0x02
    3574:	b9 81       	ldd	r27, Y+1	; 0x01
    3576:	ce 0f       	add	r28, r30
    3578:	d1 1d       	adc	r29, r1
    357a:	0f b6       	in	r0, 0x3f	; 63
    357c:	f8 94       	cli
    357e:	de bf       	out	0x3e, r29	; 62
    3580:	0f be       	out	0x3f, r0	; 63
    3582:	cd bf       	out	0x3d, r28	; 61
    3584:	ed 01       	movw	r28, r26
    3586:	08 95       	ret

00003588 <itoa>:
    3588:	fb 01       	movw	r30, r22
    358a:	9f 01       	movw	r18, r30
    358c:	e8 94       	clt
    358e:	42 30       	cpi	r20, 0x02	; 2
    3590:	c4 f0       	brlt	.+48     	; 0x35c2 <itoa+0x3a>
    3592:	45 32       	cpi	r20, 0x25	; 37
    3594:	b4 f4       	brge	.+44     	; 0x35c2 <itoa+0x3a>
    3596:	4a 30       	cpi	r20, 0x0A	; 10
    3598:	29 f4       	brne	.+10     	; 0x35a4 <itoa+0x1c>
    359a:	97 fb       	bst	r25, 7
    359c:	1e f4       	brtc	.+6      	; 0x35a4 <itoa+0x1c>
    359e:	90 95       	com	r25
    35a0:	81 95       	neg	r24
    35a2:	9f 4f       	sbci	r25, 0xFF	; 255
    35a4:	64 2f       	mov	r22, r20
    35a6:	77 27       	eor	r23, r23
    35a8:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <__udivmodhi4>
    35ac:	80 5d       	subi	r24, 0xD0	; 208
    35ae:	8a 33       	cpi	r24, 0x3A	; 58
    35b0:	0c f0       	brlt	.+2      	; 0x35b4 <itoa+0x2c>
    35b2:	89 5d       	subi	r24, 0xD9	; 217
    35b4:	81 93       	st	Z+, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	00 97       	sbiw	r24, 0x00	; 0
    35ba:	a1 f7       	brne	.-24     	; 0x35a4 <itoa+0x1c>
    35bc:	16 f4       	brtc	.+4      	; 0x35c2 <itoa+0x3a>
    35be:	5d e2       	ldi	r21, 0x2D	; 45
    35c0:	51 93       	st	Z+, r21
    35c2:	10 82       	st	Z, r1
    35c4:	c9 01       	movw	r24, r18
    35c6:	0c 94 e5 1a 	jmp	0x35ca	; 0x35ca <strrev>

000035ca <strrev>:
    35ca:	dc 01       	movw	r26, r24
    35cc:	fc 01       	movw	r30, r24
    35ce:	67 2f       	mov	r22, r23
    35d0:	71 91       	ld	r23, Z+
    35d2:	77 23       	and	r23, r23
    35d4:	e1 f7       	brne	.-8      	; 0x35ce <strrev+0x4>
    35d6:	32 97       	sbiw	r30, 0x02	; 2
    35d8:	04 c0       	rjmp	.+8      	; 0x35e2 <strrev+0x18>
    35da:	7c 91       	ld	r23, X
    35dc:	6d 93       	st	X+, r22
    35de:	70 83       	st	Z, r23
    35e0:	62 91       	ld	r22, -Z
    35e2:	ae 17       	cp	r26, r30
    35e4:	bf 07       	cpc	r27, r31
    35e6:	c8 f3       	brcs	.-14     	; 0x35da <strrev+0x10>
    35e8:	08 95       	ret

000035ea <__udivmodhi4>:
    35ea:	aa 1b       	sub	r26, r26
    35ec:	bb 1b       	sub	r27, r27
    35ee:	51 e1       	ldi	r21, 0x11	; 17
    35f0:	07 c0       	rjmp	.+14     	; 0x3600 <__udivmodhi4_ep>

000035f2 <__udivmodhi4_loop>:
    35f2:	aa 1f       	adc	r26, r26
    35f4:	bb 1f       	adc	r27, r27
    35f6:	a6 17       	cp	r26, r22
    35f8:	b7 07       	cpc	r27, r23
    35fa:	10 f0       	brcs	.+4      	; 0x3600 <__udivmodhi4_ep>
    35fc:	a6 1b       	sub	r26, r22
    35fe:	b7 0b       	sbc	r27, r23

00003600 <__udivmodhi4_ep>:
    3600:	88 1f       	adc	r24, r24
    3602:	99 1f       	adc	r25, r25
    3604:	5a 95       	dec	r21
    3606:	a9 f7       	brne	.-22     	; 0x35f2 <__udivmodhi4_loop>
    3608:	80 95       	com	r24
    360a:	90 95       	com	r25
    360c:	bc 01       	movw	r22, r24
    360e:	cd 01       	movw	r24, r26
    3610:	08 95       	ret

00003612 <_exit>:
    3612:	f8 94       	cli

00003614 <__stop_program>:
    3614:	ff cf       	rjmp	.-2      	; 0x3614 <__stop_program>
