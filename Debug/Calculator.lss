
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003274  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00003274  00003308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800068  00800068  00003310  2**0
                  ALLOC
  3 .stab         0000282c  00000000  00000000  00003310  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cfb  00000000  00000000  00005b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006837  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006977  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008730  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000961b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a3c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a528  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a7b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ad 36       	cpi	r26, 0x6D	; 109
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e4 e7       	ldi	r30, 0x74	; 116
      78:	f2 e3       	ldi	r31, 0x32	; 50
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 38 19 	jmp	0x3270	; 0x3270 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bc 18 	jmp	0x3178	; 0x3178 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e4 18 	jmp	0x31c8	; 0x31c8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e4 18 	jmp	0x31c8	; 0x31c8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bc 18 	jmp	0x3178	; 0x3178 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e4 18 	jmp	0x31c8	; 0x31c8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e4 18 	jmp	0x31c8	; 0x31c8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c8 18 	jmp	0x3190	; 0x3190 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e4 18 	jmp	0x31c8	; 0x31c8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
volatile uint8 operator=0;
volatile uint8 result=0;
volatile uint8 check=0;

int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	6e 97       	sbiw	r28, 0x1e	; 30
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
 	LCD_init();
     b5a:	0e 94 86 15 	call	0x2b0c	; 0x2b0c <LCD_init>
	KeyPad_init();
     b5e:	0e 94 83 10 	call	0x2106	; 0x2106 <KeyPad_init>
	get_OP1();
     b62:	0e 94 bd 06 	call	0xd7a	; 0xd7a <get_OP1>
	if(operand1==-1)
     b66:	80 91 68 00 	lds	r24, 0x0068
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	aa ef       	ldi	r26, 0xFA	; 250
     b70:	b3 e4       	ldi	r27, 0x43	; 67
     b72:	89 8f       	std	Y+25, r24	; 0x19
     b74:	9a 8f       	std	Y+26, r25	; 0x1a
     b76:	ab 8f       	std	Y+27, r26	; 0x1b
     b78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b7a:	69 8d       	ldd	r22, Y+25	; 0x19
     b7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b80:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	4a e7       	ldi	r20, 0x7A	; 122
     b88:	53 e4       	ldi	r21, 0x43	; 67
     b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b8e:	dc 01       	movw	r26, r24
     b90:	cb 01       	movw	r24, r22
     b92:	8d 8b       	std	Y+21, r24	; 0x15
     b94:	9e 8b       	std	Y+22, r25	; 0x16
     b96:	af 8b       	std	Y+23, r26	; 0x17
     b98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     b9a:	6d 89       	ldd	r22, Y+21	; 0x15
     b9c:	7e 89       	ldd	r23, Y+22	; 0x16
     b9e:	8f 89       	ldd	r24, Y+23	; 0x17
     ba0:	98 8d       	ldd	r25, Y+24	; 0x18
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e8       	ldi	r20, 0x80	; 128
     ba8:	5f e3       	ldi	r21, 0x3F	; 63
     baa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bae:	88 23       	and	r24, r24
     bb0:	2c f4       	brge	.+10     	; 0xbbc <main+0x76>
		__ticks = 1;
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	9c 8b       	std	Y+20, r25	; 0x14
     bb8:	8b 8b       	std	Y+19, r24	; 0x13
     bba:	3f c0       	rjmp	.+126    	; 0xc3a <main+0xf4>
	else if (__tmp > 65535)
     bbc:	6d 89       	ldd	r22, Y+21	; 0x15
     bbe:	7e 89       	ldd	r23, Y+22	; 0x16
     bc0:	8f 89       	ldd	r24, Y+23	; 0x17
     bc2:	98 8d       	ldd	r25, Y+24	; 0x18
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	3f ef       	ldi	r19, 0xFF	; 255
     bc8:	4f e7       	ldi	r20, 0x7F	; 127
     bca:	57 e4       	ldi	r21, 0x47	; 71
     bcc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bd0:	18 16       	cp	r1, r24
     bd2:	4c f5       	brge	.+82     	; 0xc26 <main+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd4:	69 8d       	ldd	r22, Y+25	; 0x19
     bd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bda:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	40 e2       	ldi	r20, 0x20	; 32
     be2:	51 e4       	ldi	r21, 0x41	; 65
     be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	bc 01       	movw	r22, r24
     bee:	cd 01       	movw	r24, r26
     bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bf4:	dc 01       	movw	r26, r24
     bf6:	cb 01       	movw	r24, r22
     bf8:	9c 8b       	std	Y+20, r25	; 0x14
     bfa:	8b 8b       	std	Y+19, r24	; 0x13
     bfc:	0f c0       	rjmp	.+30     	; 0xc1c <main+0xd6>
     bfe:	89 e1       	ldi	r24, 0x19	; 25
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	9a 8b       	std	Y+18, r25	; 0x12
     c04:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c06:	89 89       	ldd	r24, Y+17	; 0x11
     c08:	9a 89       	ldd	r25, Y+18	; 0x12
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	f1 f7       	brne	.-4      	; 0xc0a <main+0xc4>
     c0e:	9a 8b       	std	Y+18, r25	; 0x12
     c10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c12:	8b 89       	ldd	r24, Y+19	; 0x13
     c14:	9c 89       	ldd	r25, Y+20	; 0x14
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	9c 8b       	std	Y+20, r25	; 0x14
     c1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c1c:	8b 89       	ldd	r24, Y+19	; 0x13
     c1e:	9c 89       	ldd	r25, Y+20	; 0x14
     c20:	00 97       	sbiw	r24, 0x00	; 0
     c22:	69 f7       	brne	.-38     	; 0xbfe <main+0xb8>
     c24:	14 c0       	rjmp	.+40     	; 0xc4e <main+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c26:	6d 89       	ldd	r22, Y+21	; 0x15
     c28:	7e 89       	ldd	r23, Y+22	; 0x16
     c2a:	8f 89       	ldd	r24, Y+23	; 0x17
     c2c:	98 8d       	ldd	r25, Y+24	; 0x18
     c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	9c 8b       	std	Y+20, r25	; 0x14
     c38:	8b 8b       	std	Y+19, r24	; 0x13
     c3a:	8b 89       	ldd	r24, Y+19	; 0x13
     c3c:	9c 89       	ldd	r25, Y+20	; 0x14
     c3e:	98 8b       	std	Y+16, r25	; 0x10
     c40:	8f 87       	std	Y+15, r24	; 0x0f
     c42:	8f 85       	ldd	r24, Y+15	; 0x0f
     c44:	98 89       	ldd	r25, Y+16	; 0x10
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	f1 f7       	brne	.-4      	; 0xc46 <main+0x100>
     c4a:	98 8b       	std	Y+16, r25	; 0x10
     c4c:	8f 87       	std	Y+15, r24	; 0x0f
	{
		LCD_Clear();
		main();
	}
	_delay_ms(500);
	get_OP2();
     c4e:	0e 94 8c 08 	call	0x1118	; 0x1118 <get_OP2>
	if(operand2==-1)
     c52:	80 91 69 00 	lds	r24, 0x0069
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	aa ef       	ldi	r26, 0xFA	; 250
     c5c:	b3 e4       	ldi	r27, 0x43	; 67
     c5e:	8b 87       	std	Y+11, r24	; 0x0b
     c60:	9c 87       	std	Y+12, r25	; 0x0c
     c62:	ad 87       	std	Y+13, r26	; 0x0d
     c64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c66:	6b 85       	ldd	r22, Y+11	; 0x0b
     c68:	7c 85       	ldd	r23, Y+12	; 0x0c
     c6a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c6c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	4a e7       	ldi	r20, 0x7A	; 122
     c74:	53 e4       	ldi	r21, 0x43	; 67
     c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c7a:	dc 01       	movw	r26, r24
     c7c:	cb 01       	movw	r24, r22
     c7e:	8f 83       	std	Y+7, r24	; 0x07
     c80:	98 87       	std	Y+8, r25	; 0x08
     c82:	a9 87       	std	Y+9, r26	; 0x09
     c84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c86:	6f 81       	ldd	r22, Y+7	; 0x07
     c88:	78 85       	ldd	r23, Y+8	; 0x08
     c8a:	89 85       	ldd	r24, Y+9	; 0x09
     c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	40 e8       	ldi	r20, 0x80	; 128
     c94:	5f e3       	ldi	r21, 0x3F	; 63
     c96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c9a:	88 23       	and	r24, r24
     c9c:	2c f4       	brge	.+10     	; 0xca8 <main+0x162>
		__ticks = 1;
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	9e 83       	std	Y+6, r25	; 0x06
     ca4:	8d 83       	std	Y+5, r24	; 0x05
     ca6:	3f c0       	rjmp	.+126    	; 0xd26 <main+0x1e0>
	else if (__tmp > 65535)
     ca8:	6f 81       	ldd	r22, Y+7	; 0x07
     caa:	78 85       	ldd	r23, Y+8	; 0x08
     cac:	89 85       	ldd	r24, Y+9	; 0x09
     cae:	9a 85       	ldd	r25, Y+10	; 0x0a
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	3f ef       	ldi	r19, 0xFF	; 255
     cb4:	4f e7       	ldi	r20, 0x7F	; 127
     cb6:	57 e4       	ldi	r21, 0x47	; 71
     cb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cbc:	18 16       	cp	r1, r24
     cbe:	4c f5       	brge	.+82     	; 0xd12 <main+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cc0:	6b 85       	ldd	r22, Y+11	; 0x0b
     cc2:	7c 85       	ldd	r23, Y+12	; 0x0c
     cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
     cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	40 e2       	ldi	r20, 0x20	; 32
     cce:	51 e4       	ldi	r21, 0x41	; 65
     cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd4:	dc 01       	movw	r26, r24
     cd6:	cb 01       	movw	r24, r22
     cd8:	bc 01       	movw	r22, r24
     cda:	cd 01       	movw	r24, r26
     cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ce0:	dc 01       	movw	r26, r24
     ce2:	cb 01       	movw	r24, r22
     ce4:	9e 83       	std	Y+6, r25	; 0x06
     ce6:	8d 83       	std	Y+5, r24	; 0x05
     ce8:	0f c0       	rjmp	.+30     	; 0xd08 <main+0x1c2>
     cea:	89 e1       	ldi	r24, 0x19	; 25
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	9c 83       	std	Y+4, r25	; 0x04
     cf0:	8b 83       	std	Y+3, r24	; 0x03
     cf2:	8b 81       	ldd	r24, Y+3	; 0x03
     cf4:	9c 81       	ldd	r25, Y+4	; 0x04
     cf6:	01 97       	sbiw	r24, 0x01	; 1
     cf8:	f1 f7       	brne	.-4      	; 0xcf6 <main+0x1b0>
     cfa:	9c 83       	std	Y+4, r25	; 0x04
     cfc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cfe:	8d 81       	ldd	r24, Y+5	; 0x05
     d00:	9e 81       	ldd	r25, Y+6	; 0x06
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	9e 83       	std	Y+6, r25	; 0x06
     d06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d08:	8d 81       	ldd	r24, Y+5	; 0x05
     d0a:	9e 81       	ldd	r25, Y+6	; 0x06
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	69 f7       	brne	.-38     	; 0xcea <main+0x1a4>
     d10:	14 c0       	rjmp	.+40     	; 0xd3a <main+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d12:	6f 81       	ldd	r22, Y+7	; 0x07
     d14:	78 85       	ldd	r23, Y+8	; 0x08
     d16:	89 85       	ldd	r24, Y+9	; 0x09
     d18:	9a 85       	ldd	r25, Y+10	; 0x0a
     d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d1e:	dc 01       	movw	r26, r24
     d20:	cb 01       	movw	r24, r22
     d22:	9e 83       	std	Y+6, r25	; 0x06
     d24:	8d 83       	std	Y+5, r24	; 0x05
     d26:	8d 81       	ldd	r24, Y+5	; 0x05
     d28:	9e 81       	ldd	r25, Y+6	; 0x06
     d2a:	9a 83       	std	Y+2, r25	; 0x02
     d2c:	89 83       	std	Y+1, r24	; 0x01
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	9a 81       	ldd	r25, Y+2	; 0x02
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	f1 f7       	brne	.-4      	; 0xd32 <main+0x1ec>
     d36:	9a 83       	std	Y+2, r25	; 0x02
     d38:	89 83       	std	Y+1, r24	; 0x01
		LCD_Clear();
		main();
	}
	_delay_ms(500);

	switch(operator)
     d3a:	80 91 6a 00 	lds	r24, 0x006A
     d3e:	88 2f       	mov	r24, r24
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	8b 32       	cpi	r24, 0x2B	; 43
     d44:	91 05       	cpc	r25, r1
     d46:	41 f4       	brne	.+16     	; 0xd58 <main+0x212>
	{
	case '+':
		result=operand2+operand1+48;
     d48:	90 91 69 00 	lds	r25, 0x0069
     d4c:	80 91 68 00 	lds	r24, 0x0068
     d50:	89 0f       	add	r24, r25
     d52:	80 5d       	subi	r24, 0xD0	; 208
     d54:	80 93 6b 00 	sts	0x006B, r24
		break;
	}
	LCD_Clear();
     d58:	0e 94 8f 18 	call	0x311e	; 0x311e <LCD_Clear>
	LCD_displayChar(result);
     d5c:	80 91 6b 00 	lds	r24, 0x006B
     d60:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <LCD_displayChar>
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	90 e0       	ldi	r25, 0x00	; 0


}
     d68:	6e 96       	adiw	r28, 0x1e	; 30
     d6a:	0f b6       	in	r0, 0x3f	; 63
     d6c:	f8 94       	cli
     d6e:	de bf       	out	0x3e, r29	; 62
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	cd bf       	out	0x3d, r28	; 61
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	08 95       	ret

00000d7a <get_OP1>:


void get_OP1(void)
{
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	ab 97       	sbiw	r28, 0x2b	; 43
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	f8 94       	cli
     d88:	de bf       	out	0x3e, r29	; 62
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	cd bf       	out	0x3d, r28	; 61
	volatile uint8 temp;

	//get first digit

	temp=KeyPad_getPressedKey();
     d8e:	0e 94 c6 10 	call	0x218c	; 0x218c <KeyPad_getPressedKey>
     d92:	8b a7       	std	Y+43, r24	; 0x2b
	if(temp=='+'||temp=='-'||temp=='='||temp=='*'||temp=='/'||temp=='A')  //if first digit is number restart
     d94:	8b a5       	ldd	r24, Y+43	; 0x2b
     d96:	8b 32       	cpi	r24, 0x2B	; 43
     d98:	79 f0       	breq	.+30     	; 0xdb8 <get_OP1+0x3e>
     d9a:	8b a5       	ldd	r24, Y+43	; 0x2b
     d9c:	8d 32       	cpi	r24, 0x2D	; 45
     d9e:	61 f0       	breq	.+24     	; 0xdb8 <get_OP1+0x3e>
     da0:	8b a5       	ldd	r24, Y+43	; 0x2b
     da2:	8d 33       	cpi	r24, 0x3D	; 61
     da4:	49 f0       	breq	.+18     	; 0xdb8 <get_OP1+0x3e>
     da6:	8b a5       	ldd	r24, Y+43	; 0x2b
     da8:	8a 32       	cpi	r24, 0x2A	; 42
     daa:	31 f0       	breq	.+12     	; 0xdb8 <get_OP1+0x3e>
     dac:	8b a5       	ldd	r24, Y+43	; 0x2b
     dae:	8f 32       	cpi	r24, 0x2F	; 47
     db0:	19 f0       	breq	.+6      	; 0xdb8 <get_OP1+0x3e>
     db2:	8b a5       	ldd	r24, Y+43	; 0x2b
     db4:	81 34       	cpi	r24, 0x41	; 65
     db6:	21 f4       	brne	.+8      	; 0xdc0 <get_OP1+0x46>
		{
		operand1=-1;
     db8:	8f ef       	ldi	r24, 0xFF	; 255
     dba:	80 93 68 00 	sts	0x0068, r24
     dbe:	a3 c1       	rjmp	.+838    	; 0x1106 <get_OP1+0x38c>
		return ;
		}
	else
	{
		LCD_displayChar(temp);               //display the first digit
     dc0:	8b a5       	ldd	r24, Y+43	; 0x2b
     dc2:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <LCD_displayChar>
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	aa ef       	ldi	r26, 0xFA	; 250
     dcc:	b3 e4       	ldi	r27, 0x43	; 67
     dce:	8f a3       	std	Y+39, r24	; 0x27
     dd0:	98 a7       	std	Y+40, r25	; 0x28
     dd2:	a9 a7       	std	Y+41, r26	; 0x29
     dd4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd6:	6f a1       	ldd	r22, Y+39	; 0x27
     dd8:	78 a5       	ldd	r23, Y+40	; 0x28
     dda:	89 a5       	ldd	r24, Y+41	; 0x29
     ddc:	9a a5       	ldd	r25, Y+42	; 0x2a
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	4a e7       	ldi	r20, 0x7A	; 122
     de4:	53 e4       	ldi	r21, 0x43	; 67
     de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	8b a3       	std	Y+35, r24	; 0x23
     df0:	9c a3       	std	Y+36, r25	; 0x24
     df2:	ad a3       	std	Y+37, r26	; 0x25
     df4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     df6:	6b a1       	ldd	r22, Y+35	; 0x23
     df8:	7c a1       	ldd	r23, Y+36	; 0x24
     dfa:	8d a1       	ldd	r24, Y+37	; 0x25
     dfc:	9e a1       	ldd	r25, Y+38	; 0x26
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	40 e8       	ldi	r20, 0x80	; 128
     e04:	5f e3       	ldi	r21, 0x3F	; 63
     e06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e0a:	88 23       	and	r24, r24
     e0c:	2c f4       	brge	.+10     	; 0xe18 <get_OP1+0x9e>
		__ticks = 1;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	9a a3       	std	Y+34, r25	; 0x22
     e14:	89 a3       	std	Y+33, r24	; 0x21
     e16:	3f c0       	rjmp	.+126    	; 0xe96 <get_OP1+0x11c>
	else if (__tmp > 65535)
     e18:	6b a1       	ldd	r22, Y+35	; 0x23
     e1a:	7c a1       	ldd	r23, Y+36	; 0x24
     e1c:	8d a1       	ldd	r24, Y+37	; 0x25
     e1e:	9e a1       	ldd	r25, Y+38	; 0x26
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	3f ef       	ldi	r19, 0xFF	; 255
     e24:	4f e7       	ldi	r20, 0x7F	; 127
     e26:	57 e4       	ldi	r21, 0x47	; 71
     e28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e2c:	18 16       	cp	r1, r24
     e2e:	4c f5       	brge	.+82     	; 0xe82 <get_OP1+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e30:	6f a1       	ldd	r22, Y+39	; 0x27
     e32:	78 a5       	ldd	r23, Y+40	; 0x28
     e34:	89 a5       	ldd	r24, Y+41	; 0x29
     e36:	9a a5       	ldd	r25, Y+42	; 0x2a
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e2       	ldi	r20, 0x20	; 32
     e3e:	51 e4       	ldi	r21, 0x41	; 65
     e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	bc 01       	movw	r22, r24
     e4a:	cd 01       	movw	r24, r26
     e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	9a a3       	std	Y+34, r25	; 0x22
     e56:	89 a3       	std	Y+33, r24	; 0x21
     e58:	0f c0       	rjmp	.+30     	; 0xe78 <get_OP1+0xfe>
     e5a:	89 e1       	ldi	r24, 0x19	; 25
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	98 a3       	std	Y+32, r25	; 0x20
     e60:	8f 8f       	std	Y+31, r24	; 0x1f
     e62:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e64:	98 a1       	ldd	r25, Y+32	; 0x20
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	f1 f7       	brne	.-4      	; 0xe66 <get_OP1+0xec>
     e6a:	98 a3       	std	Y+32, r25	; 0x20
     e6c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e6e:	89 a1       	ldd	r24, Y+33	; 0x21
     e70:	9a a1       	ldd	r25, Y+34	; 0x22
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	9a a3       	std	Y+34, r25	; 0x22
     e76:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e78:	89 a1       	ldd	r24, Y+33	; 0x21
     e7a:	9a a1       	ldd	r25, Y+34	; 0x22
     e7c:	00 97       	sbiw	r24, 0x00	; 0
     e7e:	69 f7       	brne	.-38     	; 0xe5a <get_OP1+0xe0>
     e80:	14 c0       	rjmp	.+40     	; 0xeaa <get_OP1+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e82:	6b a1       	ldd	r22, Y+35	; 0x23
     e84:	7c a1       	ldd	r23, Y+36	; 0x24
     e86:	8d a1       	ldd	r24, Y+37	; 0x25
     e88:	9e a1       	ldd	r25, Y+38	; 0x26
     e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	9a a3       	std	Y+34, r25	; 0x22
     e94:	89 a3       	std	Y+33, r24	; 0x21
     e96:	89 a1       	ldd	r24, Y+33	; 0x21
     e98:	9a a1       	ldd	r25, Y+34	; 0x22
     e9a:	9e 8f       	std	Y+30, r25	; 0x1e
     e9c:	8d 8f       	std	Y+29, r24	; 0x1d
     e9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ea0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	f1 f7       	brne	.-4      	; 0xea2 <get_OP1+0x128>
     ea6:	9e 8f       	std	Y+30, r25	; 0x1e
     ea8:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		operand1=temp-48;
     eaa:	8b a5       	ldd	r24, Y+43	; 0x2b
     eac:	80 53       	subi	r24, 0x30	; 48
     eae:	80 93 68 00 	sts	0x0068, r24
		temp=KeyPad_getPressedKey();         //take second digit
     eb2:	0e 94 c6 10 	call	0x218c	; 0x218c <KeyPad_getPressedKey>
     eb6:	8b a7       	std	Y+43, r24	; 0x2b
		LCD_displayChar(temp);               //display second digit
     eb8:	8b a5       	ldd	r24, Y+43	; 0x2b
     eba:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <LCD_displayChar>
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	aa ef       	ldi	r26, 0xFA	; 250
     ec4:	b3 e4       	ldi	r27, 0x43	; 67
     ec6:	89 8f       	std	Y+25, r24	; 0x19
     ec8:	9a 8f       	std	Y+26, r25	; 0x1a
     eca:	ab 8f       	std	Y+27, r26	; 0x1b
     ecc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ece:	69 8d       	ldd	r22, Y+25	; 0x19
     ed0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ed2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ed4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	4a e7       	ldi	r20, 0x7A	; 122
     edc:	53 e4       	ldi	r21, 0x43	; 67
     ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee2:	dc 01       	movw	r26, r24
     ee4:	cb 01       	movw	r24, r22
     ee6:	8d 8b       	std	Y+21, r24	; 0x15
     ee8:	9e 8b       	std	Y+22, r25	; 0x16
     eea:	af 8b       	std	Y+23, r26	; 0x17
     eec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     eee:	6d 89       	ldd	r22, Y+21	; 0x15
     ef0:	7e 89       	ldd	r23, Y+22	; 0x16
     ef2:	8f 89       	ldd	r24, Y+23	; 0x17
     ef4:	98 8d       	ldd	r25, Y+24	; 0x18
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 e8       	ldi	r20, 0x80	; 128
     efc:	5f e3       	ldi	r21, 0x3F	; 63
     efe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f02:	88 23       	and	r24, r24
     f04:	2c f4       	brge	.+10     	; 0xf10 <get_OP1+0x196>
		__ticks = 1;
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	9c 8b       	std	Y+20, r25	; 0x14
     f0c:	8b 8b       	std	Y+19, r24	; 0x13
     f0e:	3f c0       	rjmp	.+126    	; 0xf8e <get_OP1+0x214>
	else if (__tmp > 65535)
     f10:	6d 89       	ldd	r22, Y+21	; 0x15
     f12:	7e 89       	ldd	r23, Y+22	; 0x16
     f14:	8f 89       	ldd	r24, Y+23	; 0x17
     f16:	98 8d       	ldd	r25, Y+24	; 0x18
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	3f ef       	ldi	r19, 0xFF	; 255
     f1c:	4f e7       	ldi	r20, 0x7F	; 127
     f1e:	57 e4       	ldi	r21, 0x47	; 71
     f20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f24:	18 16       	cp	r1, r24
     f26:	4c f5       	brge	.+82     	; 0xf7a <get_OP1+0x200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f28:	69 8d       	ldd	r22, Y+25	; 0x19
     f2a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f2c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f2e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	40 e2       	ldi	r20, 0x20	; 32
     f36:	51 e4       	ldi	r21, 0x41	; 65
     f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	bc 01       	movw	r22, r24
     f42:	cd 01       	movw	r24, r26
     f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	9c 8b       	std	Y+20, r25	; 0x14
     f4e:	8b 8b       	std	Y+19, r24	; 0x13
     f50:	0f c0       	rjmp	.+30     	; 0xf70 <get_OP1+0x1f6>
     f52:	89 e1       	ldi	r24, 0x19	; 25
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	9a 8b       	std	Y+18, r25	; 0x12
     f58:	89 8b       	std	Y+17, r24	; 0x11
     f5a:	89 89       	ldd	r24, Y+17	; 0x11
     f5c:	9a 89       	ldd	r25, Y+18	; 0x12
     f5e:	01 97       	sbiw	r24, 0x01	; 1
     f60:	f1 f7       	brne	.-4      	; 0xf5e <get_OP1+0x1e4>
     f62:	9a 8b       	std	Y+18, r25	; 0x12
     f64:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f66:	8b 89       	ldd	r24, Y+19	; 0x13
     f68:	9c 89       	ldd	r25, Y+20	; 0x14
     f6a:	01 97       	sbiw	r24, 0x01	; 1
     f6c:	9c 8b       	std	Y+20, r25	; 0x14
     f6e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f70:	8b 89       	ldd	r24, Y+19	; 0x13
     f72:	9c 89       	ldd	r25, Y+20	; 0x14
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	69 f7       	brne	.-38     	; 0xf52 <get_OP1+0x1d8>
     f78:	14 c0       	rjmp	.+40     	; 0xfa2 <get_OP1+0x228>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f7a:	6d 89       	ldd	r22, Y+21	; 0x15
     f7c:	7e 89       	ldd	r23, Y+22	; 0x16
     f7e:	8f 89       	ldd	r24, Y+23	; 0x17
     f80:	98 8d       	ldd	r25, Y+24	; 0x18
     f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	9c 8b       	std	Y+20, r25	; 0x14
     f8c:	8b 8b       	std	Y+19, r24	; 0x13
     f8e:	8b 89       	ldd	r24, Y+19	; 0x13
     f90:	9c 89       	ldd	r25, Y+20	; 0x14
     f92:	98 8b       	std	Y+16, r25	; 0x10
     f94:	8f 87       	std	Y+15, r24	; 0x0f
     f96:	8f 85       	ldd	r24, Y+15	; 0x0f
     f98:	98 89       	ldd	r25, Y+16	; 0x10
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	f1 f7       	brne	.-4      	; 0xf9a <get_OP1+0x220>
     f9e:	98 8b       	std	Y+16, r25	; 0x10
     fa0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		if(temp=='+'||temp=='-'||temp=='*'||temp=='/'||temp=='A')        //if it is an arthimetic operator assign it to global variable and return
     fa2:	8b a5       	ldd	r24, Y+43	; 0x2b
     fa4:	8b 32       	cpi	r24, 0x2B	; 43
     fa6:	61 f0       	breq	.+24     	; 0xfc0 <get_OP1+0x246>
     fa8:	8b a5       	ldd	r24, Y+43	; 0x2b
     faa:	8d 32       	cpi	r24, 0x2D	; 45
     fac:	49 f0       	breq	.+18     	; 0xfc0 <get_OP1+0x246>
     fae:	8b a5       	ldd	r24, Y+43	; 0x2b
     fb0:	8a 32       	cpi	r24, 0x2A	; 42
     fb2:	31 f0       	breq	.+12     	; 0xfc0 <get_OP1+0x246>
     fb4:	8b a5       	ldd	r24, Y+43	; 0x2b
     fb6:	8f 32       	cpi	r24, 0x2F	; 47
     fb8:	19 f0       	breq	.+6      	; 0xfc0 <get_OP1+0x246>
     fba:	8b a5       	ldd	r24, Y+43	; 0x2b
     fbc:	81 34       	cpi	r24, 0x41	; 65
     fbe:	21 f4       	brne	.+8      	; 0xfc8 <get_OP1+0x24e>
		{
			operator=temp;
     fc0:	8b a5       	ldd	r24, Y+43	; 0x2b
     fc2:	80 93 6a 00 	sts	0x006A, r24
     fc6:	9f c0       	rjmp	.+318    	; 0x1106 <get_OP1+0x38c>
			return;
		}
		else                            //else add it to the existing number
		{
			operand1=(operand1*10)+temp-48;
     fc8:	80 91 68 00 	lds	r24, 0x0068
     fcc:	88 2f       	mov	r24, r24
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	9c 01       	movw	r18, r24
     fd2:	22 0f       	add	r18, r18
     fd4:	33 1f       	adc	r19, r19
     fd6:	c9 01       	movw	r24, r18
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	82 0f       	add	r24, r18
     fe2:	93 1f       	adc	r25, r19
     fe4:	98 2f       	mov	r25, r24
     fe6:	8b a5       	ldd	r24, Y+43	; 0x2b
     fe8:	89 0f       	add	r24, r25
     fea:	80 53       	subi	r24, 0x30	; 48
     fec:	80 93 68 00 	sts	0x0068, r24

			temp=KeyPad_getPressedKey();           //only 2 digits in this calculator so the third must be the operator
     ff0:	0e 94 c6 10 	call	0x218c	; 0x218c <KeyPad_getPressedKey>
     ff4:	8b a7       	std	Y+43, r24	; 0x2b
			if(temp!='+'||temp!='-'||temp!='*'||temp!='/')    //if last input isnot arthimetic operator then restart
     ff6:	8b a5       	ldd	r24, Y+43	; 0x2b
     ff8:	8b 32       	cpi	r24, 0x2B	; 43
     ffa:	49 f4       	brne	.+18     	; 0x100e <get_OP1+0x294>
     ffc:	8b a5       	ldd	r24, Y+43	; 0x2b
     ffe:	8d 32       	cpi	r24, 0x2D	; 45
    1000:	31 f4       	brne	.+12     	; 0x100e <get_OP1+0x294>
    1002:	8b a5       	ldd	r24, Y+43	; 0x2b
    1004:	8a 32       	cpi	r24, 0x2A	; 42
    1006:	19 f4       	brne	.+6      	; 0x100e <get_OP1+0x294>
    1008:	8b a5       	ldd	r24, Y+43	; 0x2b
    100a:	8f 32       	cpi	r24, 0x2F	; 47
    100c:	21 f0       	breq	.+8      	; 0x1016 <get_OP1+0x29c>
			{
				operand1=-1;
    100e:	8f ef       	ldi	r24, 0xFF	; 255
    1010:	80 93 68 00 	sts	0x0068, r24
    1014:	78 c0       	rjmp	.+240    	; 0x1106 <get_OP1+0x38c>
				return;                     //RESTART
			}
			else
			{
				LCD_displayChar(temp);
    1016:	8b a5       	ldd	r24, Y+43	; 0x2b
    1018:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <LCD_displayChar>
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	aa ef       	ldi	r26, 0xFA	; 250
    1022:	b3 e4       	ldi	r27, 0x43	; 67
    1024:	8b 87       	std	Y+11, r24	; 0x0b
    1026:	9c 87       	std	Y+12, r25	; 0x0c
    1028:	ad 87       	std	Y+13, r26	; 0x0d
    102a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    102c:	6b 85       	ldd	r22, Y+11	; 0x0b
    102e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1030:	8d 85       	ldd	r24, Y+13	; 0x0d
    1032:	9e 85       	ldd	r25, Y+14	; 0x0e
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	4a e7       	ldi	r20, 0x7A	; 122
    103a:	53 e4       	ldi	r21, 0x43	; 67
    103c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	8f 83       	std	Y+7, r24	; 0x07
    1046:	98 87       	std	Y+8, r25	; 0x08
    1048:	a9 87       	std	Y+9, r26	; 0x09
    104a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    104c:	6f 81       	ldd	r22, Y+7	; 0x07
    104e:	78 85       	ldd	r23, Y+8	; 0x08
    1050:	89 85       	ldd	r24, Y+9	; 0x09
    1052:	9a 85       	ldd	r25, Y+10	; 0x0a
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e8       	ldi	r20, 0x80	; 128
    105a:	5f e3       	ldi	r21, 0x3F	; 63
    105c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1060:	88 23       	and	r24, r24
    1062:	2c f4       	brge	.+10     	; 0x106e <get_OP1+0x2f4>
		__ticks = 1;
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	9e 83       	std	Y+6, r25	; 0x06
    106a:	8d 83       	std	Y+5, r24	; 0x05
    106c:	3f c0       	rjmp	.+126    	; 0x10ec <get_OP1+0x372>
	else if (__tmp > 65535)
    106e:	6f 81       	ldd	r22, Y+7	; 0x07
    1070:	78 85       	ldd	r23, Y+8	; 0x08
    1072:	89 85       	ldd	r24, Y+9	; 0x09
    1074:	9a 85       	ldd	r25, Y+10	; 0x0a
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	3f ef       	ldi	r19, 0xFF	; 255
    107a:	4f e7       	ldi	r20, 0x7F	; 127
    107c:	57 e4       	ldi	r21, 0x47	; 71
    107e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1082:	18 16       	cp	r1, r24
    1084:	4c f5       	brge	.+82     	; 0x10d8 <get_OP1+0x35e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1086:	6b 85       	ldd	r22, Y+11	; 0x0b
    1088:	7c 85       	ldd	r23, Y+12	; 0x0c
    108a:	8d 85       	ldd	r24, Y+13	; 0x0d
    108c:	9e 85       	ldd	r25, Y+14	; 0x0e
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	40 e2       	ldi	r20, 0x20	; 32
    1094:	51 e4       	ldi	r21, 0x41	; 65
    1096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	bc 01       	movw	r22, r24
    10a0:	cd 01       	movw	r24, r26
    10a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	9e 83       	std	Y+6, r25	; 0x06
    10ac:	8d 83       	std	Y+5, r24	; 0x05
    10ae:	0f c0       	rjmp	.+30     	; 0x10ce <get_OP1+0x354>
    10b0:	89 e1       	ldi	r24, 0x19	; 25
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	9c 83       	std	Y+4, r25	; 0x04
    10b6:	8b 83       	std	Y+3, r24	; 0x03
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	9c 81       	ldd	r25, Y+4	; 0x04
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	f1 f7       	brne	.-4      	; 0x10bc <get_OP1+0x342>
    10c0:	9c 83       	std	Y+4, r25	; 0x04
    10c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c4:	8d 81       	ldd	r24, Y+5	; 0x05
    10c6:	9e 81       	ldd	r25, Y+6	; 0x06
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	9e 83       	std	Y+6, r25	; 0x06
    10cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ce:	8d 81       	ldd	r24, Y+5	; 0x05
    10d0:	9e 81       	ldd	r25, Y+6	; 0x06
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	69 f7       	brne	.-38     	; 0x10b0 <get_OP1+0x336>
    10d6:	14 c0       	rjmp	.+40     	; 0x1100 <get_OP1+0x386>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10d8:	6f 81       	ldd	r22, Y+7	; 0x07
    10da:	78 85       	ldd	r23, Y+8	; 0x08
    10dc:	89 85       	ldd	r24, Y+9	; 0x09
    10de:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	9e 83       	std	Y+6, r25	; 0x06
    10ea:	8d 83       	std	Y+5, r24	; 0x05
    10ec:	8d 81       	ldd	r24, Y+5	; 0x05
    10ee:	9e 81       	ldd	r25, Y+6	; 0x06
    10f0:	9a 83       	std	Y+2, r25	; 0x02
    10f2:	89 83       	std	Y+1, r24	; 0x01
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
    10f6:	9a 81       	ldd	r25, Y+2	; 0x02
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <get_OP1+0x37e>
    10fc:	9a 83       	std	Y+2, r25	; 0x02
    10fe:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);
				operator=temp;
    1100:	8b a5       	ldd	r24, Y+43	; 0x2b
    1102:	80 93 6a 00 	sts	0x006A, r24
			}
		}

	}
}
    1106:	ab 96       	adiw	r28, 0x2b	; 43
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	de bf       	out	0x3e, r29	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	cd bf       	out	0x3d, r28	; 61
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	08 95       	ret

00001118 <get_OP2>:



void get_OP2(void)
{
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	0f 92       	push	r0
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
	volatile uint8 temp;

		//get first digit

		temp=KeyPad_getPressedKey();
    1122:	0e 94 c6 10 	call	0x218c	; 0x218c <KeyPad_getPressedKey>
    1126:	89 83       	std	Y+1, r24	; 0x01
		if(temp=='+'||temp=='-'||temp=='='||temp=='*'||temp=='/'||temp=='A')  //if first digit is number restart
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	8b 32       	cpi	r24, 0x2B	; 43
    112c:	79 f0       	breq	.+30     	; 0x114c <get_OP2+0x34>
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	8d 32       	cpi	r24, 0x2D	; 45
    1132:	61 f0       	breq	.+24     	; 0x114c <get_OP2+0x34>
    1134:	89 81       	ldd	r24, Y+1	; 0x01
    1136:	8d 33       	cpi	r24, 0x3D	; 61
    1138:	49 f0       	breq	.+18     	; 0x114c <get_OP2+0x34>
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	8a 32       	cpi	r24, 0x2A	; 42
    113e:	31 f0       	breq	.+12     	; 0x114c <get_OP2+0x34>
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	8f 32       	cpi	r24, 0x2F	; 47
    1144:	19 f0       	breq	.+6      	; 0x114c <get_OP2+0x34>
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	81 34       	cpi	r24, 0x41	; 65
    114a:	21 f4       	brne	.+8      	; 0x1154 <get_OP2+0x3c>
			{
			operand2=-1;
    114c:	8f ef       	ldi	r24, 0xFF	; 255
    114e:	80 93 69 00 	sts	0x0069, r24
    1152:	47 c0       	rjmp	.+142    	; 0x11e2 <get_OP2+0xca>
			return ;
			}
		else
		{
			LCD_displayChar(temp);
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <LCD_displayChar>
			operand2=temp-48;
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	80 53       	subi	r24, 0x30	; 48
    115e:	80 93 69 00 	sts	0x0069, r24
			temp=KeyPad_getPressedKey();
    1162:	0e 94 c6 10 	call	0x218c	; 0x218c <KeyPad_getPressedKey>
    1166:	89 83       	std	Y+1, r24	; 0x01
			if(temp=='+'||temp=='-'||temp=='*'||temp=='/'||temp=='A')
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	8b 32       	cpi	r24, 0x2B	; 43
    116c:	61 f0       	breq	.+24     	; 0x1186 <get_OP2+0x6e>
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	8d 32       	cpi	r24, 0x2D	; 45
    1172:	49 f0       	breq	.+18     	; 0x1186 <get_OP2+0x6e>
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	8a 32       	cpi	r24, 0x2A	; 42
    1178:	31 f0       	breq	.+12     	; 0x1186 <get_OP2+0x6e>
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	8f 32       	cpi	r24, 0x2F	; 47
    117e:	19 f0       	breq	.+6      	; 0x1186 <get_OP2+0x6e>
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	81 34       	cpi	r24, 0x41	; 65
    1184:	21 f4       	brne	.+8      	; 0x118e <get_OP2+0x76>
			{
				operand2=-1;
    1186:	8f ef       	ldi	r24, 0xFF	; 255
    1188:	80 93 69 00 	sts	0x0069, r24
    118c:	2a c0       	rjmp	.+84     	; 0x11e2 <get_OP2+0xca>
				return;
			}
			else if(temp=='=')
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	8d 33       	cpi	r24, 0x3D	; 61
    1192:	39 f1       	breq	.+78     	; 0x11e2 <get_OP2+0xca>
			{
				return;
			}
			else
			{
				LCD_displayChar(temp);
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <LCD_displayChar>
				operand2=(operand2*10)+temp-48;
    119a:	80 91 69 00 	lds	r24, 0x0069
    119e:	88 2f       	mov	r24, r24
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	9c 01       	movw	r18, r24
    11a4:	22 0f       	add	r18, r18
    11a6:	33 1f       	adc	r19, r19
    11a8:	c9 01       	movw	r24, r18
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	82 0f       	add	r24, r18
    11b4:	93 1f       	adc	r25, r19
    11b6:	98 2f       	mov	r25, r24
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	89 0f       	add	r24, r25
    11bc:	80 53       	subi	r24, 0x30	; 48
    11be:	80 93 69 00 	sts	0x0069, r24
				temp=KeyPad_getPressedKey();
    11c2:	0e 94 c6 10 	call	0x218c	; 0x218c <KeyPad_getPressedKey>
    11c6:	89 83       	std	Y+1, r24	; 0x01
				if(temp!='=')
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	8d 33       	cpi	r24, 0x3D	; 61
    11cc:	21 f0       	breq	.+8      	; 0x11d6 <get_OP2+0xbe>
				{
					operand2=-1;
    11ce:	8f ef       	ldi	r24, 0xFF	; 255
    11d0:	80 93 69 00 	sts	0x0069, r24
    11d4:	06 c0       	rjmp	.+12     	; 0x11e2 <get_OP2+0xca>
					return;
				}
				else
				{
					LCD_displayChar(temp);
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <LCD_displayChar>
					operator=temp;
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	80 93 6a 00 	sts	0x006A, r24
				}
			}

		}

}
    11e2:	0f 90       	pop	r0
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <DIO_setPINDir>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void DIO_setPINDir(uint8 portname,uint8 pin,uint8 direction)
{
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <DIO_setPINDir+0x6>
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <DIO_setPINDir+0x8>
    11f2:	0f 92       	push	r0
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	6a 83       	std	Y+2, r22	; 0x02
    11fc:	4b 83       	std	Y+3, r20	; 0x03

	switch(portname)
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	3d 83       	std	Y+5, r19	; 0x05
    1206:	2c 83       	std	Y+4, r18	; 0x04
    1208:	8c 81       	ldd	r24, Y+4	; 0x04
    120a:	9d 81       	ldd	r25, Y+5	; 0x05
    120c:	82 34       	cpi	r24, 0x42	; 66
    120e:	91 05       	cpc	r25, r1
    1210:	09 f4       	brne	.+2      	; 0x1214 <DIO_setPINDir+0x2a>
    1212:	44 c0       	rjmp	.+136    	; 0x129c <DIO_setPINDir+0xb2>
    1214:	2c 81       	ldd	r18, Y+4	; 0x04
    1216:	3d 81       	ldd	r19, Y+5	; 0x05
    1218:	23 34       	cpi	r18, 0x43	; 67
    121a:	31 05       	cpc	r19, r1
    121c:	34 f4       	brge	.+12     	; 0x122a <DIO_setPINDir+0x40>
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	9d 81       	ldd	r25, Y+5	; 0x05
    1222:	81 34       	cpi	r24, 0x41	; 65
    1224:	91 05       	cpc	r25, r1
    1226:	71 f0       	breq	.+28     	; 0x1244 <DIO_setPINDir+0x5a>
    1228:	bc c0       	rjmp	.+376    	; 0x13a2 <DIO_setPINDir+0x1b8>
    122a:	2c 81       	ldd	r18, Y+4	; 0x04
    122c:	3d 81       	ldd	r19, Y+5	; 0x05
    122e:	23 34       	cpi	r18, 0x43	; 67
    1230:	31 05       	cpc	r19, r1
    1232:	09 f4       	brne	.+2      	; 0x1236 <DIO_setPINDir+0x4c>
    1234:	5f c0       	rjmp	.+190    	; 0x12f4 <DIO_setPINDir+0x10a>
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	9d 81       	ldd	r25, Y+5	; 0x05
    123a:	84 34       	cpi	r24, 0x44	; 68
    123c:	91 05       	cpc	r25, r1
    123e:	09 f4       	brne	.+2      	; 0x1242 <DIO_setPINDir+0x58>
    1240:	85 c0       	rjmp	.+266    	; 0x134c <DIO_setPINDir+0x162>
    1242:	af c0       	rjmp	.+350    	; 0x13a2 <DIO_setPINDir+0x1b8>
	{

	case 'A':
		if( direction==1 )
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	a1 f4       	brne	.+40     	; 0x1272 <DIO_setPINDir+0x88>
		{
			SET_BIT(DDRA,pin);
    124a:	aa e3       	ldi	r26, 0x3A	; 58
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	ea e3       	ldi	r30, 0x3A	; 58
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_setPINDir+0x7e>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_setPINDir+0x7a>
    126c:	84 2b       	or	r24, r20
    126e:	8c 93       	st	X, r24
    1270:	98 c0       	rjmp	.+304    	; 0x13a2 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRA,pin);
    1272:	aa e3       	ldi	r26, 0x3A	; 58
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	ea e3       	ldi	r30, 0x3A	; 58
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	48 2f       	mov	r20, r24
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	02 2e       	mov	r0, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <DIO_setPINDir+0xa6>
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	0a 94       	dec	r0
    1292:	e2 f7       	brpl	.-8      	; 0x128c <DIO_setPINDir+0xa2>
    1294:	80 95       	com	r24
    1296:	84 23       	and	r24, r20
    1298:	8c 93       	st	X, r24
    129a:	83 c0       	rjmp	.+262    	; 0x13a2 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'B':
		if( direction==1 )
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	a1 f4       	brne	.+40     	; 0x12ca <DIO_setPINDir+0xe0>
		{
			SET_BIT(DDRB,pin);
    12a2:	a7 e3       	ldi	r26, 0x37	; 55
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e7 e3       	ldi	r30, 0x37	; 55
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	48 2f       	mov	r20, r24
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 2e       	mov	r0, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <DIO_setPINDir+0xd6>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <DIO_setPINDir+0xd2>
    12c4:	84 2b       	or	r24, r20
    12c6:	8c 93       	st	X, r24
    12c8:	6c c0       	rjmp	.+216    	; 0x13a2 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRB,pin);
    12ca:	a7 e3       	ldi	r26, 0x37	; 55
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e7 e3       	ldi	r30, 0x37	; 55
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 2e       	mov	r0, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <DIO_setPINDir+0xfe>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <DIO_setPINDir+0xfa>
    12ec:	80 95       	com	r24
    12ee:	84 23       	and	r24, r20
    12f0:	8c 93       	st	X, r24
    12f2:	57 c0       	rjmp	.+174    	; 0x13a2 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'C':
		if( direction==1 )
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	81 30       	cpi	r24, 0x01	; 1
    12f8:	a1 f4       	brne	.+40     	; 0x1322 <DIO_setPINDir+0x138>
		{
			SET_BIT(DDRC,pin);
    12fa:	a4 e3       	ldi	r26, 0x34	; 52
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e4 e3       	ldi	r30, 0x34	; 52
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_setPINDir+0x12e>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <DIO_setPINDir+0x12a>
    131c:	84 2b       	or	r24, r20
    131e:	8c 93       	st	X, r24
    1320:	40 c0       	rjmp	.+128    	; 0x13a2 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRC,pin);
    1322:	a4 e3       	ldi	r26, 0x34	; 52
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e4 e3       	ldi	r30, 0x34	; 52
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	48 2f       	mov	r20, r24
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	02 2e       	mov	r0, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_setPINDir+0x156>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	0a 94       	dec	r0
    1342:	e2 f7       	brpl	.-8      	; 0x133c <DIO_setPINDir+0x152>
    1344:	80 95       	com	r24
    1346:	84 23       	and	r24, r20
    1348:	8c 93       	st	X, r24
    134a:	2b c0       	rjmp	.+86     	; 0x13a2 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'D':
		if( direction==1)
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	a1 f4       	brne	.+40     	; 0x137a <DIO_setPINDir+0x190>
		{
			SET_BIT(DDRD,pin);
    1352:	a1 e3       	ldi	r26, 0x31	; 49
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e1 e3       	ldi	r30, 0x31	; 49
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	48 2f       	mov	r20, r24
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	02 2e       	mov	r0, r18
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <DIO_setPINDir+0x186>
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	0a 94       	dec	r0
    1372:	e2 f7       	brpl	.-8      	; 0x136c <DIO_setPINDir+0x182>
    1374:	84 2b       	or	r24, r20
    1376:	8c 93       	st	X, r24
    1378:	14 c0       	rjmp	.+40     	; 0x13a2 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRD,pin);
    137a:	a1 e3       	ldi	r26, 0x31	; 49
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e1 e3       	ldi	r30, 0x31	; 49
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	48 2f       	mov	r20, r24
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	02 2e       	mov	r0, r18
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <DIO_setPINDir+0x1ae>
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	0a 94       	dec	r0
    139a:	e2 f7       	brpl	.-8      	; 0x1394 <DIO_setPINDir+0x1aa>
    139c:	80 95       	com	r24
    139e:	84 23       	and	r24, r20
    13a0:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <DIO_write_PIN>:


void DIO_write_PIN(uint8 portname,uint8 pin,uint8 pinvalue)
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <DIO_write_PIN+0x6>
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <DIO_write_PIN+0x8>
    13ba:	0f 92       	push	r0
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	89 83       	std	Y+1, r24	; 0x01
    13c2:	6a 83       	std	Y+2, r22	; 0x02
    13c4:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	3d 83       	std	Y+5, r19	; 0x05
    13ce:	2c 83       	std	Y+4, r18	; 0x04
    13d0:	8c 81       	ldd	r24, Y+4	; 0x04
    13d2:	9d 81       	ldd	r25, Y+5	; 0x05
    13d4:	82 34       	cpi	r24, 0x42	; 66
    13d6:	91 05       	cpc	r25, r1
    13d8:	09 f4       	brne	.+2      	; 0x13dc <DIO_write_PIN+0x2a>
    13da:	44 c0       	rjmp	.+136    	; 0x1464 <DIO_write_PIN+0xb2>
    13dc:	2c 81       	ldd	r18, Y+4	; 0x04
    13de:	3d 81       	ldd	r19, Y+5	; 0x05
    13e0:	23 34       	cpi	r18, 0x43	; 67
    13e2:	31 05       	cpc	r19, r1
    13e4:	34 f4       	brge	.+12     	; 0x13f2 <DIO_write_PIN+0x40>
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	81 34       	cpi	r24, 0x41	; 65
    13ec:	91 05       	cpc	r25, r1
    13ee:	71 f0       	breq	.+28     	; 0x140c <DIO_write_PIN+0x5a>
    13f0:	bc c0       	rjmp	.+376    	; 0x156a <DIO_write_PIN+0x1b8>
    13f2:	2c 81       	ldd	r18, Y+4	; 0x04
    13f4:	3d 81       	ldd	r19, Y+5	; 0x05
    13f6:	23 34       	cpi	r18, 0x43	; 67
    13f8:	31 05       	cpc	r19, r1
    13fa:	09 f4       	brne	.+2      	; 0x13fe <DIO_write_PIN+0x4c>
    13fc:	5f c0       	rjmp	.+190    	; 0x14bc <DIO_write_PIN+0x10a>
    13fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1400:	9d 81       	ldd	r25, Y+5	; 0x05
    1402:	84 34       	cpi	r24, 0x44	; 68
    1404:	91 05       	cpc	r25, r1
    1406:	09 f4       	brne	.+2      	; 0x140a <DIO_write_PIN+0x58>
    1408:	85 c0       	rjmp	.+266    	; 0x1514 <DIO_write_PIN+0x162>
    140a:	af c0       	rjmp	.+350    	; 0x156a <DIO_write_PIN+0x1b8>
	{

	case 'A':
		if( pinvalue==1 )
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	a1 f4       	brne	.+40     	; 0x143a <DIO_write_PIN+0x88>
		{
			SET_BIT(PORTA,pin);
    1412:	ab e3       	ldi	r26, 0x3B	; 59
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	eb e3       	ldi	r30, 0x3B	; 59
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	48 2f       	mov	r20, r24
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	02 2e       	mov	r0, r18
    142a:	02 c0       	rjmp	.+4      	; 0x1430 <DIO_write_PIN+0x7e>
    142c:	88 0f       	add	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	0a 94       	dec	r0
    1432:	e2 f7       	brpl	.-8      	; 0x142c <DIO_write_PIN+0x7a>
    1434:	84 2b       	or	r24, r20
    1436:	8c 93       	st	X, r24
    1438:	98 c0       	rjmp	.+304    	; 0x156a <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
    143a:	ab e3       	ldi	r26, 0x3B	; 59
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	eb e3       	ldi	r30, 0x3B	; 59
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	80 81       	ld	r24, Z
    1444:	48 2f       	mov	r20, r24
    1446:	8a 81       	ldd	r24, Y+2	; 0x02
    1448:	28 2f       	mov	r18, r24
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	02 2e       	mov	r0, r18
    1452:	02 c0       	rjmp	.+4      	; 0x1458 <DIO_write_PIN+0xa6>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	0a 94       	dec	r0
    145a:	e2 f7       	brpl	.-8      	; 0x1454 <DIO_write_PIN+0xa2>
    145c:	80 95       	com	r24
    145e:	84 23       	and	r24, r20
    1460:	8c 93       	st	X, r24
    1462:	83 c0       	rjmp	.+262    	; 0x156a <DIO_write_PIN+0x1b8>
		}
		break;
	case 'B':
		if( pinvalue==1 )
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	81 30       	cpi	r24, 0x01	; 1
    1468:	a1 f4       	brne	.+40     	; 0x1492 <DIO_write_PIN+0xe0>
		{
			SET_BIT(PORTB,pin);
    146a:	a8 e3       	ldi	r26, 0x38	; 56
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e8 e3       	ldi	r30, 0x38	; 56
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	48 2f       	mov	r20, r24
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	02 2e       	mov	r0, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <DIO_write_PIN+0xd6>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	0a 94       	dec	r0
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <DIO_write_PIN+0xd2>
    148c:	84 2b       	or	r24, r20
    148e:	8c 93       	st	X, r24
    1490:	6c c0       	rjmp	.+216    	; 0x156a <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTB,pin);
    1492:	a8 e3       	ldi	r26, 0x38	; 56
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e8 e3       	ldi	r30, 0x38	; 56
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	02 2e       	mov	r0, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <DIO_write_PIN+0xfe>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	0a 94       	dec	r0
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <DIO_write_PIN+0xfa>
    14b4:	80 95       	com	r24
    14b6:	84 23       	and	r24, r20
    14b8:	8c 93       	st	X, r24
    14ba:	57 c0       	rjmp	.+174    	; 0x156a <DIO_write_PIN+0x1b8>
		}
		break;
	case 'C':
		if( pinvalue==1 )
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	a1 f4       	brne	.+40     	; 0x14ea <DIO_write_PIN+0x138>
		{
			SET_BIT(PORTC,pin);
    14c2:	a5 e3       	ldi	r26, 0x35	; 53
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e5 e3       	ldi	r30, 0x35	; 53
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	48 2f       	mov	r20, r24
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	28 2f       	mov	r18, r24
    14d2:	30 e0       	ldi	r19, 0x00	; 0
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	02 2e       	mov	r0, r18
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <DIO_write_PIN+0x12e>
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	0a 94       	dec	r0
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <DIO_write_PIN+0x12a>
    14e4:	84 2b       	or	r24, r20
    14e6:	8c 93       	st	X, r24
    14e8:	40 c0       	rjmp	.+128    	; 0x156a <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTC,pin);
    14ea:	a5 e3       	ldi	r26, 0x35	; 53
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e5 e3       	ldi	r30, 0x35	; 53
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	48 2f       	mov	r20, r24
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	02 2e       	mov	r0, r18
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <DIO_write_PIN+0x156>
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	0a 94       	dec	r0
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <DIO_write_PIN+0x152>
    150c:	80 95       	com	r24
    150e:	84 23       	and	r24, r20
    1510:	8c 93       	st	X, r24
    1512:	2b c0       	rjmp	.+86     	; 0x156a <DIO_write_PIN+0x1b8>
		}
		break;
	case 'D':
		if( pinvalue==1)
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	a1 f4       	brne	.+40     	; 0x1542 <DIO_write_PIN+0x190>
		{
			SET_BIT(PORTD,pin);
    151a:	a2 e3       	ldi	r26, 0x32	; 50
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e2 e3       	ldi	r30, 0x32	; 50
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	02 2e       	mov	r0, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <DIO_write_PIN+0x186>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	0a 94       	dec	r0
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <DIO_write_PIN+0x182>
    153c:	84 2b       	or	r24, r20
    153e:	8c 93       	st	X, r24
    1540:	14 c0       	rjmp	.+40     	; 0x156a <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTD,pin);
    1542:	a2 e3       	ldi	r26, 0x32	; 50
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e2 e3       	ldi	r30, 0x32	; 50
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	48 2f       	mov	r20, r24
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 2e       	mov	r0, r18
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <DIO_write_PIN+0x1ae>
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	0a 94       	dec	r0
    1562:	e2 f7       	brpl	.-8      	; 0x155c <DIO_write_PIN+0x1aa>
    1564:	80 95       	com	r24
    1566:	84 23       	and	r24, r20
    1568:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <DIO_read_PIN>:

uint8 DIO_read_PIN(uint8 portname,uint8 pin)
{
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	00 d0       	rcall	.+0      	; 0x1580 <DIO_read_PIN+0x6>
    1580:	00 d0       	rcall	.+0      	; 0x1582 <DIO_read_PIN+0x8>
    1582:	0f 92       	push	r0
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	8a 83       	std	Y+2, r24	; 0x02
    158a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_val=0;
    158c:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	3d 83       	std	Y+5, r19	; 0x05
    1596:	2c 83       	std	Y+4, r18	; 0x04
    1598:	8c 81       	ldd	r24, Y+4	; 0x04
    159a:	9d 81       	ldd	r25, Y+5	; 0x05
    159c:	82 34       	cpi	r24, 0x42	; 66
    159e:	91 05       	cpc	r25, r1
    15a0:	41 f1       	breq	.+80     	; 0x15f2 <DIO_read_PIN+0x78>
    15a2:	2c 81       	ldd	r18, Y+4	; 0x04
    15a4:	3d 81       	ldd	r19, Y+5	; 0x05
    15a6:	23 34       	cpi	r18, 0x43	; 67
    15a8:	31 05       	cpc	r19, r1
    15aa:	34 f4       	brge	.+12     	; 0x15b8 <DIO_read_PIN+0x3e>
    15ac:	8c 81       	ldd	r24, Y+4	; 0x04
    15ae:	9d 81       	ldd	r25, Y+5	; 0x05
    15b0:	81 34       	cpi	r24, 0x41	; 65
    15b2:	91 05       	cpc	r25, r1
    15b4:	61 f0       	breq	.+24     	; 0x15ce <DIO_read_PIN+0x54>
    15b6:	52 c0       	rjmp	.+164    	; 0x165c <DIO_read_PIN+0xe2>
    15b8:	2c 81       	ldd	r18, Y+4	; 0x04
    15ba:	3d 81       	ldd	r19, Y+5	; 0x05
    15bc:	23 34       	cpi	r18, 0x43	; 67
    15be:	31 05       	cpc	r19, r1
    15c0:	51 f1       	breq	.+84     	; 0x1616 <DIO_read_PIN+0x9c>
    15c2:	8c 81       	ldd	r24, Y+4	; 0x04
    15c4:	9d 81       	ldd	r25, Y+5	; 0x05
    15c6:	84 34       	cpi	r24, 0x44	; 68
    15c8:	91 05       	cpc	r25, r1
    15ca:	b9 f1       	breq	.+110    	; 0x163a <DIO_read_PIN+0xc0>
    15cc:	47 c0       	rjmp	.+142    	; 0x165c <DIO_read_PIN+0xe2>
	{

	case 'A':
		pin_val=READ_BIT(PINA,pin);
    15ce:	e9 e3       	ldi	r30, 0x39	; 57
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	48 2f       	mov	r20, r24
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	02 2e       	mov	r0, r18
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <DIO_read_PIN+0x6e>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	0a 94       	dec	r0
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <DIO_read_PIN+0x6a>
    15ec:	84 23       	and	r24, r20
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	35 c0       	rjmp	.+106    	; 0x165c <DIO_read_PIN+0xe2>
		break;
	case 'B':
		pin_val=READ_BIT(PINB,pin);
    15f2:	e6 e3       	ldi	r30, 0x36	; 54
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	48 2f       	mov	r20, r24
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	02 2e       	mov	r0, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <DIO_read_PIN+0x92>
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	0a 94       	dec	r0
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <DIO_read_PIN+0x8e>
    1610:	84 23       	and	r24, r20
    1612:	89 83       	std	Y+1, r24	; 0x01
    1614:	23 c0       	rjmp	.+70     	; 0x165c <DIO_read_PIN+0xe2>
		break;
	case 'C':
		pin_val=READ_BIT(PINC,pin);
    1616:	e3 e3       	ldi	r30, 0x33	; 51
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	48 2f       	mov	r20, r24
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	02 2e       	mov	r0, r18
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <DIO_read_PIN+0xb6>
    162c:	88 0f       	add	r24, r24
    162e:	99 1f       	adc	r25, r25
    1630:	0a 94       	dec	r0
    1632:	e2 f7       	brpl	.-8      	; 0x162c <DIO_read_PIN+0xb2>
    1634:	84 23       	and	r24, r20
    1636:	89 83       	std	Y+1, r24	; 0x01
    1638:	11 c0       	rjmp	.+34     	; 0x165c <DIO_read_PIN+0xe2>
		break;
	case 'D':
		pin_val=READ_BIT(PIND,pin);
    163a:	e0 e3       	ldi	r30, 0x30	; 48
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	48 2f       	mov	r20, r24
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	02 2e       	mov	r0, r18
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <DIO_read_PIN+0xda>
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	0a 94       	dec	r0
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <DIO_read_PIN+0xd6>
    1658:	84 23       	and	r24, r20
    165a:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	return pin_val;
    165c:	89 81       	ldd	r24, Y+1	; 0x01
}
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	08 95       	ret

0000166e <DIO_BIT_TOGGLE>:

void DIO_BIT_TOGGLE(uint8 portname,uint8 pin)
{
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	00 d0       	rcall	.+0      	; 0x1674 <DIO_BIT_TOGGLE+0x6>
    1674:	00 d0       	rcall	.+0      	; 0x1676 <DIO_BIT_TOGGLE+0x8>
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	89 83       	std	Y+1, r24	; 0x01
    167c:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    167e:	89 81       	ldd	r24, Y+1	; 0x01
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	3c 83       	std	Y+4, r19	; 0x04
    1686:	2b 83       	std	Y+3, r18	; 0x03
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	9c 81       	ldd	r25, Y+4	; 0x04
    168c:	82 34       	cpi	r24, 0x42	; 66
    168e:	91 05       	cpc	r25, r1
    1690:	51 f1       	breq	.+84     	; 0x16e6 <DIO_BIT_TOGGLE+0x78>
    1692:	2b 81       	ldd	r18, Y+3	; 0x03
    1694:	3c 81       	ldd	r19, Y+4	; 0x04
    1696:	23 34       	cpi	r18, 0x43	; 67
    1698:	31 05       	cpc	r19, r1
    169a:	34 f4       	brge	.+12     	; 0x16a8 <DIO_BIT_TOGGLE+0x3a>
    169c:	8b 81       	ldd	r24, Y+3	; 0x03
    169e:	9c 81       	ldd	r25, Y+4	; 0x04
    16a0:	81 34       	cpi	r24, 0x41	; 65
    16a2:	91 05       	cpc	r25, r1
    16a4:	61 f0       	breq	.+24     	; 0x16be <DIO_BIT_TOGGLE+0x50>
    16a6:	5a c0       	rjmp	.+180    	; 0x175c <DIO_BIT_TOGGLE+0xee>
    16a8:	2b 81       	ldd	r18, Y+3	; 0x03
    16aa:	3c 81       	ldd	r19, Y+4	; 0x04
    16ac:	23 34       	cpi	r18, 0x43	; 67
    16ae:	31 05       	cpc	r19, r1
    16b0:	71 f1       	breq	.+92     	; 0x170e <DIO_BIT_TOGGLE+0xa0>
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	9c 81       	ldd	r25, Y+4	; 0x04
    16b6:	84 34       	cpi	r24, 0x44	; 68
    16b8:	91 05       	cpc	r25, r1
    16ba:	e9 f1       	breq	.+122    	; 0x1736 <DIO_BIT_TOGGLE+0xc8>
    16bc:	4f c0       	rjmp	.+158    	; 0x175c <DIO_BIT_TOGGLE+0xee>
	{

	case 'A':
		TOGGLE_BIT(PORTA,pin);
    16be:	ab e3       	ldi	r26, 0x3B	; 59
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	eb e3       	ldi	r30, 0x3B	; 59
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	48 2f       	mov	r20, r24
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	02 2e       	mov	r0, r18
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <DIO_BIT_TOGGLE+0x6e>
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	0a 94       	dec	r0
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <DIO_BIT_TOGGLE+0x6a>
    16e0:	84 27       	eor	r24, r20
    16e2:	8c 93       	st	X, r24
    16e4:	3b c0       	rjmp	.+118    	; 0x175c <DIO_BIT_TOGGLE+0xee>
		break;
	case 'B':
		TOGGLE_BIT(PORTB,pin);
    16e6:	a8 e3       	ldi	r26, 0x38	; 56
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e8 e3       	ldi	r30, 0x38	; 56
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	48 2f       	mov	r20, r24
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	02 2e       	mov	r0, r18
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <DIO_BIT_TOGGLE+0x96>
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	0a 94       	dec	r0
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <DIO_BIT_TOGGLE+0x92>
    1708:	84 27       	eor	r24, r20
    170a:	8c 93       	st	X, r24
    170c:	27 c0       	rjmp	.+78     	; 0x175c <DIO_BIT_TOGGLE+0xee>
		break;
	case 'C':
		TOGGLE_BIT(PORTC,pin);
    170e:	a5 e3       	ldi	r26, 0x35	; 53
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e5 e3       	ldi	r30, 0x35	; 53
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	48 2f       	mov	r20, r24
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	02 2e       	mov	r0, r18
    1726:	02 c0       	rjmp	.+4      	; 0x172c <DIO_BIT_TOGGLE+0xbe>
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	0a 94       	dec	r0
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <DIO_BIT_TOGGLE+0xba>
    1730:	84 27       	eor	r24, r20
    1732:	8c 93       	st	X, r24
    1734:	13 c0       	rjmp	.+38     	; 0x175c <DIO_BIT_TOGGLE+0xee>
		break;
	case 'D':
		TOGGLE_BIT(PORTD,pin);
    1736:	a2 e3       	ldi	r26, 0x32	; 50
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	e2 e3       	ldi	r30, 0x32	; 50
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	48 2f       	mov	r20, r24
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	02 2e       	mov	r0, r18
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <DIO_BIT_TOGGLE+0xe6>
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	0a 94       	dec	r0
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <DIO_BIT_TOGGLE+0xe2>
    1758:	84 27       	eor	r24, r20
    175a:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <DIO_set_port_Dir>:

void DIO_set_port_Dir(uint8 portname,uint8 direction)
{
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	00 d0       	rcall	.+0      	; 0x1770 <DIO_set_port_Dir+0x6>
    1770:	00 d0       	rcall	.+0      	; 0x1772 <DIO_set_port_Dir+0x8>
    1772:	cd b7       	in	r28, 0x3d	; 61
    1774:	de b7       	in	r29, 0x3e	; 62
    1776:	89 83       	std	Y+1, r24	; 0x01
    1778:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	3c 83       	std	Y+4, r19	; 0x04
    1782:	2b 83       	std	Y+3, r18	; 0x03
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	9c 81       	ldd	r25, Y+4	; 0x04
    1788:	82 34       	cpi	r24, 0x42	; 66
    178a:	91 05       	cpc	r25, r1
    178c:	11 f1       	breq	.+68     	; 0x17d2 <DIO_set_port_Dir+0x68>
    178e:	2b 81       	ldd	r18, Y+3	; 0x03
    1790:	3c 81       	ldd	r19, Y+4	; 0x04
    1792:	23 34       	cpi	r18, 0x43	; 67
    1794:	31 05       	cpc	r19, r1
    1796:	34 f4       	brge	.+12     	; 0x17a4 <DIO_set_port_Dir+0x3a>
    1798:	8b 81       	ldd	r24, Y+3	; 0x03
    179a:	9c 81       	ldd	r25, Y+4	; 0x04
    179c:	81 34       	cpi	r24, 0x41	; 65
    179e:	91 05       	cpc	r25, r1
    17a0:	61 f0       	breq	.+24     	; 0x17ba <DIO_set_port_Dir+0x50>
    17a2:	3a c0       	rjmp	.+116    	; 0x1818 <DIO_set_port_Dir+0xae>
    17a4:	2b 81       	ldd	r18, Y+3	; 0x03
    17a6:	3c 81       	ldd	r19, Y+4	; 0x04
    17a8:	23 34       	cpi	r18, 0x43	; 67
    17aa:	31 05       	cpc	r19, r1
    17ac:	f1 f0       	breq	.+60     	; 0x17ea <DIO_set_port_Dir+0x80>
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	9c 81       	ldd	r25, Y+4	; 0x04
    17b2:	84 34       	cpi	r24, 0x44	; 68
    17b4:	91 05       	cpc	r25, r1
    17b6:	29 f1       	breq	.+74     	; 0x1802 <DIO_set_port_Dir+0x98>
    17b8:	2f c0       	rjmp	.+94     	; 0x1818 <DIO_set_port_Dir+0xae>
	{
	case 'A':
		if(direction==1)
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	81 30       	cpi	r24, 0x01	; 1
    17be:	29 f4       	brne	.+10     	; 0x17ca <DIO_set_port_Dir+0x60>
		{
			DDRA=0xFF;
    17c0:	ea e3       	ldi	r30, 0x3A	; 58
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	8f ef       	ldi	r24, 0xFF	; 255
    17c6:	80 83       	st	Z, r24
    17c8:	27 c0       	rjmp	.+78     	; 0x1818 <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRA=0;
    17ca:	ea e3       	ldi	r30, 0x3A	; 58
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	10 82       	st	Z, r1
    17d0:	23 c0       	rjmp	.+70     	; 0x1818 <DIO_set_port_Dir+0xae>
		}
		break;
	case 'B':
		if(direction==1)
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	81 30       	cpi	r24, 0x01	; 1
    17d6:	29 f4       	brne	.+10     	; 0x17e2 <DIO_set_port_Dir+0x78>
		{
			DDRB=0xFF;
    17d8:	e7 e3       	ldi	r30, 0x37	; 55
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	8f ef       	ldi	r24, 0xFF	; 255
    17de:	80 83       	st	Z, r24
    17e0:	1b c0       	rjmp	.+54     	; 0x1818 <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRB=0;
    17e2:	e7 e3       	ldi	r30, 0x37	; 55
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	10 82       	st	Z, r1
    17e8:	17 c0       	rjmp	.+46     	; 0x1818 <DIO_set_port_Dir+0xae>
		}
		break;
	case 'C':
		if(direction==1)
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	81 30       	cpi	r24, 0x01	; 1
    17ee:	29 f4       	brne	.+10     	; 0x17fa <DIO_set_port_Dir+0x90>
		{
			DDRC=0XFF;
    17f0:	e4 e3       	ldi	r30, 0x34	; 52
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	8f ef       	ldi	r24, 0xFF	; 255
    17f6:	80 83       	st	Z, r24
    17f8:	0f c0       	rjmp	.+30     	; 0x1818 <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRC=0;
    17fa:	e4 e3       	ldi	r30, 0x34	; 52
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	10 82       	st	Z, r1
    1800:	0b c0       	rjmp	.+22     	; 0x1818 <DIO_set_port_Dir+0xae>
		}
		break;
	case 'D':
		if(direction==1)
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	81 30       	cpi	r24, 0x01	; 1
    1806:	29 f4       	brne	.+10     	; 0x1812 <DIO_set_port_Dir+0xa8>
		{
			DDRD=0XFF;
    1808:	e1 e3       	ldi	r30, 0x31	; 49
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	8f ef       	ldi	r24, 0xFF	; 255
    180e:	80 83       	st	Z, r24
    1810:	03 c0       	rjmp	.+6      	; 0x1818 <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRD=0;
    1812:	e1 e3       	ldi	r30, 0x31	; 49
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	10 82       	st	Z, r1
		}
		break;
	default:
		break;
	}
}
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <DIO_write_port>:

void DIO_write_port(uint8 portname,uint8 portvalue)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	00 d0       	rcall	.+0      	; 0x182c <DIO_write_port+0x6>
    182c:	00 d0       	rcall	.+0      	; 0x182e <DIO_write_port+0x8>
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	89 83       	std	Y+1, r24	; 0x01
    1834:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	3c 83       	std	Y+4, r19	; 0x04
    183e:	2b 83       	std	Y+3, r18	; 0x03
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	9c 81       	ldd	r25, Y+4	; 0x04
    1844:	82 34       	cpi	r24, 0x42	; 66
    1846:	91 05       	cpc	r25, r1
    1848:	d9 f0       	breq	.+54     	; 0x1880 <DIO_write_port+0x5a>
    184a:	2b 81       	ldd	r18, Y+3	; 0x03
    184c:	3c 81       	ldd	r19, Y+4	; 0x04
    184e:	23 34       	cpi	r18, 0x43	; 67
    1850:	31 05       	cpc	r19, r1
    1852:	34 f4       	brge	.+12     	; 0x1860 <DIO_write_port+0x3a>
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	9c 81       	ldd	r25, Y+4	; 0x04
    1858:	81 34       	cpi	r24, 0x41	; 65
    185a:	91 05       	cpc	r25, r1
    185c:	61 f0       	breq	.+24     	; 0x1876 <DIO_write_port+0x50>
    185e:	1e c0       	rjmp	.+60     	; 0x189c <DIO_write_port+0x76>
    1860:	2b 81       	ldd	r18, Y+3	; 0x03
    1862:	3c 81       	ldd	r19, Y+4	; 0x04
    1864:	23 34       	cpi	r18, 0x43	; 67
    1866:	31 05       	cpc	r19, r1
    1868:	81 f0       	breq	.+32     	; 0x188a <DIO_write_port+0x64>
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	9c 81       	ldd	r25, Y+4	; 0x04
    186e:	84 34       	cpi	r24, 0x44	; 68
    1870:	91 05       	cpc	r25, r1
    1872:	81 f0       	breq	.+32     	; 0x1894 <DIO_write_port+0x6e>
    1874:	13 c0       	rjmp	.+38     	; 0x189c <DIO_write_port+0x76>
	{
	case 'A':
		PORTA=portvalue;
    1876:	eb e3       	ldi	r30, 0x3B	; 59
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	80 83       	st	Z, r24
    187e:	0e c0       	rjmp	.+28     	; 0x189c <DIO_write_port+0x76>
		break;
	case 'B':
		PORTB=portvalue;
    1880:	e8 e3       	ldi	r30, 0x38	; 56
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	80 83       	st	Z, r24
    1888:	09 c0       	rjmp	.+18     	; 0x189c <DIO_write_port+0x76>
		break;
	case 'C':
		PORTC=portvalue;
    188a:	e5 e3       	ldi	r30, 0x35	; 53
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	80 83       	st	Z, r24
    1892:	04 c0       	rjmp	.+8      	; 0x189c <DIO_write_port+0x76>
		break;
	case 'D':
		PORTD=portvalue;
    1894:	e2 e3       	ldi	r30, 0x32	; 50
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	80 83       	st	Z, r24
	}
}
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	cf 91       	pop	r28
    18a6:	df 91       	pop	r29
    18a8:	08 95       	ret

000018aa <DIO_read_port>:

uint8 DIO_read_port(uint8 portname)
{
    18aa:	df 93       	push	r29
    18ac:	cf 93       	push	r28
    18ae:	00 d0       	rcall	.+0      	; 0x18b0 <DIO_read_port+0x6>
    18b0:	00 d0       	rcall	.+0      	; 0x18b2 <DIO_read_port+0x8>
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_val=0;
    18b8:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	28 2f       	mov	r18, r24
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	3c 83       	std	Y+4, r19	; 0x04
    18c2:	2b 83       	std	Y+3, r18	; 0x03
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	9c 81       	ldd	r25, Y+4	; 0x04
    18c8:	82 34       	cpi	r24, 0x42	; 66
    18ca:	91 05       	cpc	r25, r1
    18cc:	d9 f0       	breq	.+54     	; 0x1904 <DIO_read_port+0x5a>
    18ce:	2b 81       	ldd	r18, Y+3	; 0x03
    18d0:	3c 81       	ldd	r19, Y+4	; 0x04
    18d2:	23 34       	cpi	r18, 0x43	; 67
    18d4:	31 05       	cpc	r19, r1
    18d6:	34 f4       	brge	.+12     	; 0x18e4 <DIO_read_port+0x3a>
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	9c 81       	ldd	r25, Y+4	; 0x04
    18dc:	81 34       	cpi	r24, 0x41	; 65
    18de:	91 05       	cpc	r25, r1
    18e0:	61 f0       	breq	.+24     	; 0x18fa <DIO_read_port+0x50>
    18e2:	1e c0       	rjmp	.+60     	; 0x1920 <DIO_read_port+0x76>
    18e4:	2b 81       	ldd	r18, Y+3	; 0x03
    18e6:	3c 81       	ldd	r19, Y+4	; 0x04
    18e8:	23 34       	cpi	r18, 0x43	; 67
    18ea:	31 05       	cpc	r19, r1
    18ec:	81 f0       	breq	.+32     	; 0x190e <DIO_read_port+0x64>
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	9c 81       	ldd	r25, Y+4	; 0x04
    18f2:	84 34       	cpi	r24, 0x44	; 68
    18f4:	91 05       	cpc	r25, r1
    18f6:	81 f0       	breq	.+32     	; 0x1918 <DIO_read_port+0x6e>
    18f8:	13 c0       	rjmp	.+38     	; 0x1920 <DIO_read_port+0x76>
	{

	case 'A':
		port_val=PINA;
    18fa:	e9 e3       	ldi	r30, 0x39	; 57
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	89 83       	std	Y+1, r24	; 0x01
    1902:	0e c0       	rjmp	.+28     	; 0x1920 <DIO_read_port+0x76>
		break;
	case 'B':
		port_val=PINB;
    1904:	e6 e3       	ldi	r30, 0x36	; 54
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	89 83       	std	Y+1, r24	; 0x01
    190c:	09 c0       	rjmp	.+18     	; 0x1920 <DIO_read_port+0x76>
		break;
	case 'C':
		port_val=PINC;
    190e:	e3 e3       	ldi	r30, 0x33	; 51
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	04 c0       	rjmp	.+8      	; 0x1920 <DIO_read_port+0x76>
		break;
	case 'D':
		port_val=PIND;
    1918:	e0 e3       	ldi	r30, 0x30	; 48
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	return port_val;
    1920:	89 81       	ldd	r24, Y+1	; 0x01
}
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <DIO_enablePullup_pin>:

void DIO_enablePullup_pin(uint8 portname,uint8 pin,uint8 status)
{
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	00 d0       	rcall	.+0      	; 0x1936 <DIO_enablePullup_pin+0x6>
    1936:	00 d0       	rcall	.+0      	; 0x1938 <DIO_enablePullup_pin+0x8>
    1938:	0f 92       	push	r0
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	6a 83       	std	Y+2, r22	; 0x02
    1942:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	3d 83       	std	Y+5, r19	; 0x05
    194c:	2c 83       	std	Y+4, r18	; 0x04
    194e:	8c 81       	ldd	r24, Y+4	; 0x04
    1950:	9d 81       	ldd	r25, Y+5	; 0x05
    1952:	82 34       	cpi	r24, 0x42	; 66
    1954:	91 05       	cpc	r25, r1
    1956:	09 f4       	brne	.+2      	; 0x195a <DIO_enablePullup_pin+0x2a>
    1958:	44 c0       	rjmp	.+136    	; 0x19e2 <DIO_enablePullup_pin+0xb2>
    195a:	2c 81       	ldd	r18, Y+4	; 0x04
    195c:	3d 81       	ldd	r19, Y+5	; 0x05
    195e:	23 34       	cpi	r18, 0x43	; 67
    1960:	31 05       	cpc	r19, r1
    1962:	34 f4       	brge	.+12     	; 0x1970 <DIO_enablePullup_pin+0x40>
    1964:	8c 81       	ldd	r24, Y+4	; 0x04
    1966:	9d 81       	ldd	r25, Y+5	; 0x05
    1968:	81 34       	cpi	r24, 0x41	; 65
    196a:	91 05       	cpc	r25, r1
    196c:	71 f0       	breq	.+28     	; 0x198a <DIO_enablePullup_pin+0x5a>
    196e:	bc c0       	rjmp	.+376    	; 0x1ae8 <DIO_enablePullup_pin+0x1b8>
    1970:	2c 81       	ldd	r18, Y+4	; 0x04
    1972:	3d 81       	ldd	r19, Y+5	; 0x05
    1974:	23 34       	cpi	r18, 0x43	; 67
    1976:	31 05       	cpc	r19, r1
    1978:	09 f4       	brne	.+2      	; 0x197c <DIO_enablePullup_pin+0x4c>
    197a:	5f c0       	rjmp	.+190    	; 0x1a3a <DIO_enablePullup_pin+0x10a>
    197c:	8c 81       	ldd	r24, Y+4	; 0x04
    197e:	9d 81       	ldd	r25, Y+5	; 0x05
    1980:	84 34       	cpi	r24, 0x44	; 68
    1982:	91 05       	cpc	r25, r1
    1984:	09 f4       	brne	.+2      	; 0x1988 <DIO_enablePullup_pin+0x58>
    1986:	85 c0       	rjmp	.+266    	; 0x1a92 <DIO_enablePullup_pin+0x162>
    1988:	af c0       	rjmp	.+350    	; 0x1ae8 <DIO_enablePullup_pin+0x1b8>
	{
	case 'A':
		if(status==1)
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	81 30       	cpi	r24, 0x01	; 1
    198e:	a1 f4       	brne	.+40     	; 0x19b8 <DIO_enablePullup_pin+0x88>
		{
			SET_BIT(PORTA,pin);
    1990:	ab e3       	ldi	r26, 0x3B	; 59
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	eb e3       	ldi	r30, 0x3B	; 59
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	48 2f       	mov	r20, r24
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	02 2e       	mov	r0, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <DIO_enablePullup_pin+0x7e>
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	0a 94       	dec	r0
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <DIO_enablePullup_pin+0x7a>
    19b2:	84 2b       	or	r24, r20
    19b4:	8c 93       	st	X, r24
    19b6:	98 c0       	rjmp	.+304    	; 0x1ae8 <DIO_enablePullup_pin+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
    19b8:	ab e3       	ldi	r26, 0x3B	; 59
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	eb e3       	ldi	r30, 0x3B	; 59
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	48 2f       	mov	r20, r24
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	28 2f       	mov	r18, r24
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	02 2e       	mov	r0, r18
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <DIO_enablePullup_pin+0xa6>
    19d2:	88 0f       	add	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	0a 94       	dec	r0
    19d8:	e2 f7       	brpl	.-8      	; 0x19d2 <DIO_enablePullup_pin+0xa2>
    19da:	80 95       	com	r24
    19dc:	84 23       	and	r24, r20
    19de:	8c 93       	st	X, r24
    19e0:	83 c0       	rjmp	.+262    	; 0x1ae8 <DIO_enablePullup_pin+0x1b8>
		}
		break;
	case 'B':
		if(status==1)
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	a1 f4       	brne	.+40     	; 0x1a10 <DIO_enablePullup_pin+0xe0>
				{
					SET_BIT(PORTB,pin);
    19e8:	a8 e3       	ldi	r26, 0x38	; 56
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e8 e3       	ldi	r30, 0x38	; 56
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	48 2f       	mov	r20, r24
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	02 2e       	mov	r0, r18
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <DIO_enablePullup_pin+0xd6>
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	0a 94       	dec	r0
    1a08:	e2 f7       	brpl	.-8      	; 0x1a02 <DIO_enablePullup_pin+0xd2>
    1a0a:	84 2b       	or	r24, r20
    1a0c:	8c 93       	st	X, r24
    1a0e:	6c c0       	rjmp	.+216    	; 0x1ae8 <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTB,pin);
    1a10:	a8 e3       	ldi	r26, 0x38	; 56
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e8 e3       	ldi	r30, 0x38	; 56
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	48 2f       	mov	r20, r24
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	02 2e       	mov	r0, r18
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <DIO_enablePullup_pin+0xfe>
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	0a 94       	dec	r0
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <DIO_enablePullup_pin+0xfa>
    1a32:	80 95       	com	r24
    1a34:	84 23       	and	r24, r20
    1a36:	8c 93       	st	X, r24
    1a38:	57 c0       	rjmp	.+174    	; 0x1ae8 <DIO_enablePullup_pin+0x1b8>
				}
				break;
	case 'C':
		if(status==1)
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	81 30       	cpi	r24, 0x01	; 1
    1a3e:	a1 f4       	brne	.+40     	; 0x1a68 <DIO_enablePullup_pin+0x138>
				{
					SET_BIT(PORTC,pin);
    1a40:	a5 e3       	ldi	r26, 0x35	; 53
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e5 e3       	ldi	r30, 0x35	; 53
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	48 2f       	mov	r20, r24
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	02 2e       	mov	r0, r18
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <DIO_enablePullup_pin+0x12e>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	0a 94       	dec	r0
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <DIO_enablePullup_pin+0x12a>
    1a62:	84 2b       	or	r24, r20
    1a64:	8c 93       	st	X, r24
    1a66:	40 c0       	rjmp	.+128    	; 0x1ae8 <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTC,pin);
    1a68:	a5 e3       	ldi	r26, 0x35	; 53
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e5 e3       	ldi	r30, 0x35	; 53
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	48 2f       	mov	r20, r24
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	02 2e       	mov	r0, r18
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <DIO_enablePullup_pin+0x156>
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	0a 94       	dec	r0
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <DIO_enablePullup_pin+0x152>
    1a8a:	80 95       	com	r24
    1a8c:	84 23       	and	r24, r20
    1a8e:	8c 93       	st	X, r24
    1a90:	2b c0       	rjmp	.+86     	; 0x1ae8 <DIO_enablePullup_pin+0x1b8>
				}
				break;
	case 'D':
		if(status==1)
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	a1 f4       	brne	.+40     	; 0x1ac0 <DIO_enablePullup_pin+0x190>
				{
					SET_BIT(PORTD,pin);
    1a98:	a2 e3       	ldi	r26, 0x32	; 50
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e2 e3       	ldi	r30, 0x32	; 50
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	48 2f       	mov	r20, r24
    1aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	02 2e       	mov	r0, r18
    1ab0:	02 c0       	rjmp	.+4      	; 0x1ab6 <DIO_enablePullup_pin+0x186>
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	0a 94       	dec	r0
    1ab8:	e2 f7       	brpl	.-8      	; 0x1ab2 <DIO_enablePullup_pin+0x182>
    1aba:	84 2b       	or	r24, r20
    1abc:	8c 93       	st	X, r24
    1abe:	14 c0       	rjmp	.+40     	; 0x1ae8 <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTD,pin);
    1ac0:	a2 e3       	ldi	r26, 0x32	; 50
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e2 e3       	ldi	r30, 0x32	; 50
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	48 2f       	mov	r20, r24
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	02 2e       	mov	r0, r18
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <DIO_enablePullup_pin+0x1ae>
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	0a 94       	dec	r0
    1ae0:	e2 f7       	brpl	.-8      	; 0x1ada <DIO_enablePullup_pin+0x1aa>
    1ae2:	80 95       	com	r24
    1ae4:	84 23       	and	r24, r20
    1ae6:	8c 93       	st	X, r24
				}
				break;
	}
}
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <DIO_write_low_nibble>:

void DIO_write_low_nibble(uint8 portname,uint8 value)
{
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	00 d0       	rcall	.+0      	; 0x1afe <DIO_write_low_nibble+0x6>
    1afe:	00 d0       	rcall	.+0      	; 0x1b00 <DIO_write_low_nibble+0x8>
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	89 83       	std	Y+1, r24	; 0x01
    1b06:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	8f 70       	andi	r24, 0x0F	; 15
    1b0c:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	3c 83       	std	Y+4, r19	; 0x04
    1b16:	2b 83       	std	Y+3, r18	; 0x03
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1c:	82 34       	cpi	r24, 0x42	; 66
    1b1e:	91 05       	cpc	r25, r1
    1b20:	31 f1       	breq	.+76     	; 0x1b6e <DIO_write_low_nibble+0x76>
    1b22:	2b 81       	ldd	r18, Y+3	; 0x03
    1b24:	3c 81       	ldd	r19, Y+4	; 0x04
    1b26:	23 34       	cpi	r18, 0x43	; 67
    1b28:	31 05       	cpc	r19, r1
    1b2a:	34 f4       	brge	.+12     	; 0x1b38 <DIO_write_low_nibble+0x40>
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b30:	81 34       	cpi	r24, 0x41	; 65
    1b32:	91 05       	cpc	r25, r1
    1b34:	61 f0       	breq	.+24     	; 0x1b4e <DIO_write_low_nibble+0x56>
    1b36:	4a c0       	rjmp	.+148    	; 0x1bcc <DIO_write_low_nibble+0xd4>
    1b38:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3c:	23 34       	cpi	r18, 0x43	; 67
    1b3e:	31 05       	cpc	r19, r1
    1b40:	31 f1       	breq	.+76     	; 0x1b8e <DIO_write_low_nibble+0x96>
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	9c 81       	ldd	r25, Y+4	; 0x04
    1b46:	84 34       	cpi	r24, 0x44	; 68
    1b48:	91 05       	cpc	r25, r1
    1b4a:	89 f1       	breq	.+98     	; 0x1bae <DIO_write_low_nibble+0xb6>
    1b4c:	3f c0       	rjmp	.+126    	; 0x1bcc <DIO_write_low_nibble+0xd4>
	{
	case 'A':
		PORTA&=0xf0;
    1b4e:	ab e3       	ldi	r26, 0x3B	; 59
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	eb e3       	ldi	r30, 0x3B	; 59
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	80 7f       	andi	r24, 0xF0	; 240
    1b5a:	8c 93       	st	X, r24
		PORTA|=value;
    1b5c:	ab e3       	ldi	r26, 0x3B	; 59
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	eb e3       	ldi	r30, 0x3B	; 59
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	90 81       	ld	r25, Z
    1b66:	8a 81       	ldd	r24, Y+2	; 0x02
    1b68:	89 2b       	or	r24, r25
    1b6a:	8c 93       	st	X, r24
    1b6c:	2f c0       	rjmp	.+94     	; 0x1bcc <DIO_write_low_nibble+0xd4>
		break;
	case 'B':
		PORTB&=0xf0;
    1b6e:	a8 e3       	ldi	r26, 0x38	; 56
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	e8 e3       	ldi	r30, 0x38	; 56
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	80 7f       	andi	r24, 0xF0	; 240
    1b7a:	8c 93       	st	X, r24
		PORTA|=value;
    1b7c:	ab e3       	ldi	r26, 0x3B	; 59
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	eb e3       	ldi	r30, 0x3B	; 59
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	90 81       	ld	r25, Z
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	89 2b       	or	r24, r25
    1b8a:	8c 93       	st	X, r24
    1b8c:	1f c0       	rjmp	.+62     	; 0x1bcc <DIO_write_low_nibble+0xd4>
		break;
	case 'C':
		PORTC&=0xf0;
    1b8e:	a5 e3       	ldi	r26, 0x35	; 53
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	e5 e3       	ldi	r30, 0x35	; 53
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	80 7f       	andi	r24, 0xF0	; 240
    1b9a:	8c 93       	st	X, r24
		PORTA|=value;
    1b9c:	ab e3       	ldi	r26, 0x3B	; 59
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	eb e3       	ldi	r30, 0x3B	; 59
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	90 81       	ld	r25, Z
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	89 2b       	or	r24, r25
    1baa:	8c 93       	st	X, r24
    1bac:	0f c0       	rjmp	.+30     	; 0x1bcc <DIO_write_low_nibble+0xd4>
		break;
	case 'D':
		PORTD&=0xf0;
    1bae:	a2 e3       	ldi	r26, 0x32	; 50
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	e2 e3       	ldi	r30, 0x32	; 50
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	80 7f       	andi	r24, 0xF0	; 240
    1bba:	8c 93       	st	X, r24
		PORTD|=value;
    1bbc:	a2 e3       	ldi	r26, 0x32	; 50
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	e2 e3       	ldi	r30, 0x32	; 50
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	90 81       	ld	r25, Z
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	89 2b       	or	r24, r25
    1bca:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <DIO_set_low_nibble>:

void DIO_set_low_nibble(uint8 portname)
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <DIO_set_low_nibble+0x6>
    1be0:	0f 92       	push	r0
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	3b 83       	std	Y+3, r19	; 0x03
    1bf0:	2a 83       	std	Y+2, r18	; 0x02
    1bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf4:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf6:	82 34       	cpi	r24, 0x42	; 66
    1bf8:	91 05       	cpc	r25, r1
    1bfa:	f1 f0       	breq	.+60     	; 0x1c38 <DIO_set_low_nibble+0x5e>
    1bfc:	2a 81       	ldd	r18, Y+2	; 0x02
    1bfe:	3b 81       	ldd	r19, Y+3	; 0x03
    1c00:	23 34       	cpi	r18, 0x43	; 67
    1c02:	31 05       	cpc	r19, r1
    1c04:	34 f4       	brge	.+12     	; 0x1c12 <DIO_set_low_nibble+0x38>
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0a:	81 34       	cpi	r24, 0x41	; 65
    1c0c:	91 05       	cpc	r25, r1
    1c0e:	61 f0       	breq	.+24     	; 0x1c28 <DIO_set_low_nibble+0x4e>
    1c10:	2a c0       	rjmp	.+84     	; 0x1c66 <DIO_set_low_nibble+0x8c>
    1c12:	2a 81       	ldd	r18, Y+2	; 0x02
    1c14:	3b 81       	ldd	r19, Y+3	; 0x03
    1c16:	23 34       	cpi	r18, 0x43	; 67
    1c18:	31 05       	cpc	r19, r1
    1c1a:	b1 f0       	breq	.+44     	; 0x1c48 <DIO_set_low_nibble+0x6e>
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1c20:	84 34       	cpi	r24, 0x44	; 68
    1c22:	91 05       	cpc	r25, r1
    1c24:	c9 f0       	breq	.+50     	; 0x1c58 <DIO_set_low_nibble+0x7e>
    1c26:	1f c0       	rjmp	.+62     	; 0x1c66 <DIO_set_low_nibble+0x8c>
	{
	case 'A':
		PORTA|=0x0f;
    1c28:	ab e3       	ldi	r26, 0x3B	; 59
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	eb e3       	ldi	r30, 0x3B	; 59
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	8f 60       	ori	r24, 0x0F	; 15
    1c34:	8c 93       	st	X, r24
    1c36:	17 c0       	rjmp	.+46     	; 0x1c66 <DIO_set_low_nibble+0x8c>
		break;
	case 'B':
		PORTB|=0x0f;
    1c38:	a8 e3       	ldi	r26, 0x38	; 56
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e8 e3       	ldi	r30, 0x38	; 56
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	8f 60       	ori	r24, 0x0F	; 15
    1c44:	8c 93       	st	X, r24
    1c46:	0f c0       	rjmp	.+30     	; 0x1c66 <DIO_set_low_nibble+0x8c>
		break;
	case 'C':
		PORTC|=0x0f;
    1c48:	a5 e3       	ldi	r26, 0x35	; 53
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e5 e3       	ldi	r30, 0x35	; 53
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	8f 60       	ori	r24, 0x0F	; 15
    1c54:	8c 93       	st	X, r24
    1c56:	07 c0       	rjmp	.+14     	; 0x1c66 <DIO_set_low_nibble+0x8c>
		break;
	case 'D':
		PORTD|=0x0f;
    1c58:	a2 e3       	ldi	r26, 0x32	; 50
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e2 e3       	ldi	r30, 0x32	; 50
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	8f 60       	ori	r24, 0x0F	; 15
    1c64:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <DIO_clear_low_nibble>:

void DIO_clear_low_nibble(uint8 portname)
{
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <DIO_clear_low_nibble+0x6>
    1c78:	0f 92       	push	r0
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	3b 83       	std	Y+3, r19	; 0x03
    1c88:	2a 83       	std	Y+2, r18	; 0x02
    1c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8e:	82 34       	cpi	r24, 0x42	; 66
    1c90:	91 05       	cpc	r25, r1
    1c92:	f1 f0       	breq	.+60     	; 0x1cd0 <DIO_clear_low_nibble+0x5e>
    1c94:	2a 81       	ldd	r18, Y+2	; 0x02
    1c96:	3b 81       	ldd	r19, Y+3	; 0x03
    1c98:	23 34       	cpi	r18, 0x43	; 67
    1c9a:	31 05       	cpc	r19, r1
    1c9c:	34 f4       	brge	.+12     	; 0x1caa <DIO_clear_low_nibble+0x38>
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca2:	81 34       	cpi	r24, 0x41	; 65
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	61 f0       	breq	.+24     	; 0x1cc0 <DIO_clear_low_nibble+0x4e>
    1ca8:	2a c0       	rjmp	.+84     	; 0x1cfe <DIO_clear_low_nibble+0x8c>
    1caa:	2a 81       	ldd	r18, Y+2	; 0x02
    1cac:	3b 81       	ldd	r19, Y+3	; 0x03
    1cae:	23 34       	cpi	r18, 0x43	; 67
    1cb0:	31 05       	cpc	r19, r1
    1cb2:	b1 f0       	breq	.+44     	; 0x1ce0 <DIO_clear_low_nibble+0x6e>
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cb8:	84 34       	cpi	r24, 0x44	; 68
    1cba:	91 05       	cpc	r25, r1
    1cbc:	c9 f0       	breq	.+50     	; 0x1cf0 <DIO_clear_low_nibble+0x7e>
    1cbe:	1f c0       	rjmp	.+62     	; 0x1cfe <DIO_clear_low_nibble+0x8c>
	{
	case 'A':
		PORTA&=~(0x0f);
    1cc0:	ab e3       	ldi	r26, 0x3B	; 59
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	eb e3       	ldi	r30, 0x3B	; 59
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	80 7f       	andi	r24, 0xF0	; 240
    1ccc:	8c 93       	st	X, r24
    1cce:	17 c0       	rjmp	.+46     	; 0x1cfe <DIO_clear_low_nibble+0x8c>
		break;
	case 'B':
		PORTB&=~(0x0f);
    1cd0:	a8 e3       	ldi	r26, 0x38	; 56
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e8 e3       	ldi	r30, 0x38	; 56
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	80 7f       	andi	r24, 0xF0	; 240
    1cdc:	8c 93       	st	X, r24
    1cde:	0f c0       	rjmp	.+30     	; 0x1cfe <DIO_clear_low_nibble+0x8c>
		break;
	case 'C':
		PORTC&=~(0x0f);
    1ce0:	a5 e3       	ldi	r26, 0x35	; 53
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e5 e3       	ldi	r30, 0x35	; 53
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	80 7f       	andi	r24, 0xF0	; 240
    1cec:	8c 93       	st	X, r24
    1cee:	07 c0       	rjmp	.+14     	; 0x1cfe <DIO_clear_low_nibble+0x8c>
		break;
	case 'D':
		PORTD&=~(0x0f);
    1cf0:	a2 e3       	ldi	r26, 0x32	; 50
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e2 e3       	ldi	r30, 0x32	; 50
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	80 7f       	andi	r24, 0xF0	; 240
    1cfc:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	cf 91       	pop	r28
    1d06:	df 91       	pop	r29
    1d08:	08 95       	ret

00001d0a <DIO_set_high_nibble>:

void DIO_set_high_nibble(uint8 portname)
{
    1d0a:	df 93       	push	r29
    1d0c:	cf 93       	push	r28
    1d0e:	00 d0       	rcall	.+0      	; 0x1d10 <DIO_set_high_nibble+0x6>
    1d10:	0f 92       	push	r0
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	3b 83       	std	Y+3, r19	; 0x03
    1d20:	2a 83       	std	Y+2, r18	; 0x02
    1d22:	8a 81       	ldd	r24, Y+2	; 0x02
    1d24:	9b 81       	ldd	r25, Y+3	; 0x03
    1d26:	82 34       	cpi	r24, 0x42	; 66
    1d28:	91 05       	cpc	r25, r1
    1d2a:	f1 f0       	breq	.+60     	; 0x1d68 <DIO_set_high_nibble+0x5e>
    1d2c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d2e:	3b 81       	ldd	r19, Y+3	; 0x03
    1d30:	23 34       	cpi	r18, 0x43	; 67
    1d32:	31 05       	cpc	r19, r1
    1d34:	34 f4       	brge	.+12     	; 0x1d42 <DIO_set_high_nibble+0x38>
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3a:	81 34       	cpi	r24, 0x41	; 65
    1d3c:	91 05       	cpc	r25, r1
    1d3e:	61 f0       	breq	.+24     	; 0x1d58 <DIO_set_high_nibble+0x4e>
    1d40:	2a c0       	rjmp	.+84     	; 0x1d96 <DIO_set_high_nibble+0x8c>
    1d42:	2a 81       	ldd	r18, Y+2	; 0x02
    1d44:	3b 81       	ldd	r19, Y+3	; 0x03
    1d46:	23 34       	cpi	r18, 0x43	; 67
    1d48:	31 05       	cpc	r19, r1
    1d4a:	b1 f0       	breq	.+44     	; 0x1d78 <DIO_set_high_nibble+0x6e>
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d50:	84 34       	cpi	r24, 0x44	; 68
    1d52:	91 05       	cpc	r25, r1
    1d54:	c9 f0       	breq	.+50     	; 0x1d88 <DIO_set_high_nibble+0x7e>
    1d56:	1f c0       	rjmp	.+62     	; 0x1d96 <DIO_set_high_nibble+0x8c>
	{
	case 'A':
		PORTA|=0xf0;
    1d58:	ab e3       	ldi	r26, 0x3B	; 59
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	eb e3       	ldi	r30, 0x3B	; 59
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	80 6f       	ori	r24, 0xF0	; 240
    1d64:	8c 93       	st	X, r24
    1d66:	17 c0       	rjmp	.+46     	; 0x1d96 <DIO_set_high_nibble+0x8c>
		break;
	case 'B':
		PORTB|=0xf0;
    1d68:	a8 e3       	ldi	r26, 0x38	; 56
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e8 e3       	ldi	r30, 0x38	; 56
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	80 6f       	ori	r24, 0xF0	; 240
    1d74:	8c 93       	st	X, r24
    1d76:	0f c0       	rjmp	.+30     	; 0x1d96 <DIO_set_high_nibble+0x8c>
		break;
	case 'C':
		PORTC|=0xf0;
    1d78:	a5 e3       	ldi	r26, 0x35	; 53
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	e5 e3       	ldi	r30, 0x35	; 53
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	80 81       	ld	r24, Z
    1d82:	80 6f       	ori	r24, 0xF0	; 240
    1d84:	8c 93       	st	X, r24
    1d86:	07 c0       	rjmp	.+14     	; 0x1d96 <DIO_set_high_nibble+0x8c>
		break;
	case 'D':
		PORTD|=0xf0;
    1d88:	a2 e3       	ldi	r26, 0x32	; 50
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e2 e3       	ldi	r30, 0x32	; 50
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	80 6f       	ori	r24, 0xF0	; 240
    1d94:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	08 95       	ret

00001da2 <DIO_clear_high_nibble>:

void DIO_clear_high_nibble(uint8 portname)
{
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	00 d0       	rcall	.+0      	; 0x1da8 <DIO_clear_high_nibble+0x6>
    1da8:	0f 92       	push	r0
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
    1dae:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	3b 83       	std	Y+3, r19	; 0x03
    1db8:	2a 83       	std	Y+2, r18	; 0x02
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dbe:	82 34       	cpi	r24, 0x42	; 66
    1dc0:	91 05       	cpc	r25, r1
    1dc2:	f1 f0       	breq	.+60     	; 0x1e00 <DIO_clear_high_nibble+0x5e>
    1dc4:	2a 81       	ldd	r18, Y+2	; 0x02
    1dc6:	3b 81       	ldd	r19, Y+3	; 0x03
    1dc8:	23 34       	cpi	r18, 0x43	; 67
    1dca:	31 05       	cpc	r19, r1
    1dcc:	34 f4       	brge	.+12     	; 0x1dda <DIO_clear_high_nibble+0x38>
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd2:	81 34       	cpi	r24, 0x41	; 65
    1dd4:	91 05       	cpc	r25, r1
    1dd6:	61 f0       	breq	.+24     	; 0x1df0 <DIO_clear_high_nibble+0x4e>
    1dd8:	2a c0       	rjmp	.+84     	; 0x1e2e <DIO_clear_high_nibble+0x8c>
    1dda:	2a 81       	ldd	r18, Y+2	; 0x02
    1ddc:	3b 81       	ldd	r19, Y+3	; 0x03
    1dde:	23 34       	cpi	r18, 0x43	; 67
    1de0:	31 05       	cpc	r19, r1
    1de2:	b1 f0       	breq	.+44     	; 0x1e10 <DIO_clear_high_nibble+0x6e>
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	9b 81       	ldd	r25, Y+3	; 0x03
    1de8:	84 34       	cpi	r24, 0x44	; 68
    1dea:	91 05       	cpc	r25, r1
    1dec:	c9 f0       	breq	.+50     	; 0x1e20 <DIO_clear_high_nibble+0x7e>
    1dee:	1f c0       	rjmp	.+62     	; 0x1e2e <DIO_clear_high_nibble+0x8c>
	{
	case 'A':
		PORTA&=~(0xf0);
    1df0:	ab e3       	ldi	r26, 0x3B	; 59
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	eb e3       	ldi	r30, 0x3B	; 59
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	8f 70       	andi	r24, 0x0F	; 15
    1dfc:	8c 93       	st	X, r24
    1dfe:	17 c0       	rjmp	.+46     	; 0x1e2e <DIO_clear_high_nibble+0x8c>
		break;
	case 'B':
		PORTB&=~(0xf0);
    1e00:	a8 e3       	ldi	r26, 0x38	; 56
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e8 e3       	ldi	r30, 0x38	; 56
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	8f 70       	andi	r24, 0x0F	; 15
    1e0c:	8c 93       	st	X, r24
    1e0e:	0f c0       	rjmp	.+30     	; 0x1e2e <DIO_clear_high_nibble+0x8c>
		break;
	case 'C':
		PORTC&=~(0xf0);
    1e10:	a5 e3       	ldi	r26, 0x35	; 53
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e5 e3       	ldi	r30, 0x35	; 53
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	8f 70       	andi	r24, 0x0F	; 15
    1e1c:	8c 93       	st	X, r24
    1e1e:	07 c0       	rjmp	.+14     	; 0x1e2e <DIO_clear_high_nibble+0x8c>
		break;
	case 'D':
		PORTD&=~(0xf0);
    1e20:	a2 e3       	ldi	r26, 0x32	; 50
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	e2 e3       	ldi	r30, 0x32	; 50
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	80 81       	ld	r24, Z
    1e2a:	8f 70       	andi	r24, 0x0F	; 15
    1e2c:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	cf 91       	pop	r28
    1e36:	df 91       	pop	r29
    1e38:	08 95       	ret

00001e3a <DIO_write_high_nibble>:

void DIO_write_high_nibble(uint8 portname,uint8 value)
{
    1e3a:	df 93       	push	r29
    1e3c:	cf 93       	push	r28
    1e3e:	00 d0       	rcall	.+0      	; 0x1e40 <DIO_write_high_nibble+0x6>
    1e40:	00 d0       	rcall	.+0      	; 0x1e42 <DIO_write_high_nibble+0x8>
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	89 83       	std	Y+1, r24	; 0x01
    1e48:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	82 95       	swap	r24
    1e4e:	80 7f       	andi	r24, 0xF0	; 240
    1e50:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	3c 83       	std	Y+4, r19	; 0x04
    1e5a:	2b 83       	std	Y+3, r18	; 0x03
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e60:	82 34       	cpi	r24, 0x42	; 66
    1e62:	91 05       	cpc	r25, r1
    1e64:	31 f1       	breq	.+76     	; 0x1eb2 <DIO_write_high_nibble+0x78>
    1e66:	2b 81       	ldd	r18, Y+3	; 0x03
    1e68:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6a:	23 34       	cpi	r18, 0x43	; 67
    1e6c:	31 05       	cpc	r19, r1
    1e6e:	34 f4       	brge	.+12     	; 0x1e7c <DIO_write_high_nibble+0x42>
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	9c 81       	ldd	r25, Y+4	; 0x04
    1e74:	81 34       	cpi	r24, 0x41	; 65
    1e76:	91 05       	cpc	r25, r1
    1e78:	61 f0       	breq	.+24     	; 0x1e92 <DIO_write_high_nibble+0x58>
    1e7a:	4a c0       	rjmp	.+148    	; 0x1f10 <DIO_write_high_nibble+0xd6>
    1e7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e80:	23 34       	cpi	r18, 0x43	; 67
    1e82:	31 05       	cpc	r19, r1
    1e84:	31 f1       	breq	.+76     	; 0x1ed2 <DIO_write_high_nibble+0x98>
    1e86:	8b 81       	ldd	r24, Y+3	; 0x03
    1e88:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8a:	84 34       	cpi	r24, 0x44	; 68
    1e8c:	91 05       	cpc	r25, r1
    1e8e:	89 f1       	breq	.+98     	; 0x1ef2 <DIO_write_high_nibble+0xb8>
    1e90:	3f c0       	rjmp	.+126    	; 0x1f10 <DIO_write_high_nibble+0xd6>
	{
	case 'A':
		PORTA&=0x0f;
    1e92:	ab e3       	ldi	r26, 0x3B	; 59
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	eb e3       	ldi	r30, 0x3B	; 59
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	8f 70       	andi	r24, 0x0F	; 15
    1e9e:	8c 93       	st	X, r24
		PORTA|=value;
    1ea0:	ab e3       	ldi	r26, 0x3B	; 59
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	eb e3       	ldi	r30, 0x3B	; 59
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	90 81       	ld	r25, Z
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	89 2b       	or	r24, r25
    1eae:	8c 93       	st	X, r24
    1eb0:	2f c0       	rjmp	.+94     	; 0x1f10 <DIO_write_high_nibble+0xd6>
		break;
	case 'B':
		PORTB&=0x0f;
    1eb2:	a8 e3       	ldi	r26, 0x38	; 56
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	e8 e3       	ldi	r30, 0x38	; 56
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	8f 70       	andi	r24, 0x0F	; 15
    1ebe:	8c 93       	st	X, r24
		PORTA|=value;
    1ec0:	ab e3       	ldi	r26, 0x3B	; 59
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	eb e3       	ldi	r30, 0x3B	; 59
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	90 81       	ld	r25, Z
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	89 2b       	or	r24, r25
    1ece:	8c 93       	st	X, r24
    1ed0:	1f c0       	rjmp	.+62     	; 0x1f10 <DIO_write_high_nibble+0xd6>
		break;
	case 'C':
		PORTC&=0x0f;
    1ed2:	a5 e3       	ldi	r26, 0x35	; 53
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e5 e3       	ldi	r30, 0x35	; 53
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	8f 70       	andi	r24, 0x0F	; 15
    1ede:	8c 93       	st	X, r24
		PORTA|=value;
    1ee0:	ab e3       	ldi	r26, 0x3B	; 59
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	eb e3       	ldi	r30, 0x3B	; 59
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	90 81       	ld	r25, Z
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	89 2b       	or	r24, r25
    1eee:	8c 93       	st	X, r24
    1ef0:	0f c0       	rjmp	.+30     	; 0x1f10 <DIO_write_high_nibble+0xd6>
		break;
	case 'D':
		PORTD&=0x0f;
    1ef2:	a2 e3       	ldi	r26, 0x32	; 50
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	e2 e3       	ldi	r30, 0x32	; 50
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	80 81       	ld	r24, Z
    1efc:	8f 70       	andi	r24, 0x0F	; 15
    1efe:	8c 93       	st	X, r24
		PORTD|=value;
    1f00:	a2 e3       	ldi	r26, 0x32	; 50
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e2 e3       	ldi	r30, 0x32	; 50
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	90 81       	ld	r25, Z
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	89 2b       	or	r24, r25
    1f0e:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	0f 90       	pop	r0
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	08 95       	ret

00001f1e <DIO_write_high_nibbleDir>:

void DIO_write_high_nibbleDir(uint8 portname,uint8 direction)
{
    1f1e:	df 93       	push	r29
    1f20:	cf 93       	push	r28
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <DIO_write_high_nibbleDir+0x6>
    1f24:	00 d0       	rcall	.+0      	; 0x1f26 <DIO_write_high_nibbleDir+0x8>
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    1f2a:	89 83       	std	Y+1, r24	; 0x01
    1f2c:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	28 2f       	mov	r18, r24
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	3c 83       	std	Y+4, r19	; 0x04
    1f36:	2b 83       	std	Y+3, r18	; 0x03
    1f38:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3c:	82 34       	cpi	r24, 0x42	; 66
    1f3e:	91 05       	cpc	r25, r1
    1f40:	49 f1       	breq	.+82     	; 0x1f94 <DIO_write_high_nibbleDir+0x76>
    1f42:	2b 81       	ldd	r18, Y+3	; 0x03
    1f44:	3c 81       	ldd	r19, Y+4	; 0x04
    1f46:	23 34       	cpi	r18, 0x43	; 67
    1f48:	31 05       	cpc	r19, r1
    1f4a:	34 f4       	brge	.+12     	; 0x1f58 <DIO_write_high_nibbleDir+0x3a>
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f50:	81 34       	cpi	r24, 0x41	; 65
    1f52:	91 05       	cpc	r25, r1
    1f54:	61 f0       	breq	.+24     	; 0x1f6e <DIO_write_high_nibbleDir+0x50>
    1f56:	56 c0       	rjmp	.+172    	; 0x2004 <DIO_write_high_nibbleDir+0xe6>
    1f58:	2b 81       	ldd	r18, Y+3	; 0x03
    1f5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f5c:	23 34       	cpi	r18, 0x43	; 67
    1f5e:	31 05       	cpc	r19, r1
    1f60:	61 f1       	breq	.+88     	; 0x1fba <DIO_write_high_nibbleDir+0x9c>
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	9c 81       	ldd	r25, Y+4	; 0x04
    1f66:	84 34       	cpi	r24, 0x44	; 68
    1f68:	91 05       	cpc	r25, r1
    1f6a:	d1 f1       	breq	.+116    	; 0x1fe0 <DIO_write_high_nibbleDir+0xc2>
    1f6c:	4b c0       	rjmp	.+150    	; 0x2004 <DIO_write_high_nibbleDir+0xe6>
	{
	case 'A':
		if(direction==1)
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	81 30       	cpi	r24, 0x01	; 1
    1f72:	41 f4       	brne	.+16     	; 0x1f84 <DIO_write_high_nibbleDir+0x66>
			DDRA|=0xf0;
    1f74:	aa e3       	ldi	r26, 0x3A	; 58
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	ea e3       	ldi	r30, 0x3A	; 58
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	80 6f       	ori	r24, 0xF0	; 240
    1f80:	8c 93       	st	X, r24
    1f82:	40 c0       	rjmp	.+128    	; 0x2004 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRA&=~(0xf0);
    1f84:	aa e3       	ldi	r26, 0x3A	; 58
    1f86:	b0 e0       	ldi	r27, 0x00	; 0
    1f88:	ea e3       	ldi	r30, 0x3A	; 58
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	80 81       	ld	r24, Z
    1f8e:	8f 70       	andi	r24, 0x0F	; 15
    1f90:	8c 93       	st	X, r24
    1f92:	38 c0       	rjmp	.+112    	; 0x2004 <DIO_write_high_nibbleDir+0xe6>
		break;
	case 'B':
		if(direction==1)
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	81 30       	cpi	r24, 0x01	; 1
    1f98:	41 f4       	brne	.+16     	; 0x1faa <DIO_write_high_nibbleDir+0x8c>
			DDRB|=0xf0;
    1f9a:	a7 e3       	ldi	r26, 0x37	; 55
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	e7 e3       	ldi	r30, 0x37	; 55
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	80 6f       	ori	r24, 0xF0	; 240
    1fa6:	8c 93       	st	X, r24
    1fa8:	2d c0       	rjmp	.+90     	; 0x2004 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRB&=~(0xf0);
    1faa:	a7 e3       	ldi	r26, 0x37	; 55
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	e7 e3       	ldi	r30, 0x37	; 55
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	8f 70       	andi	r24, 0x0F	; 15
    1fb6:	8c 93       	st	X, r24
    1fb8:	25 c0       	rjmp	.+74     	; 0x2004 <DIO_write_high_nibbleDir+0xe6>
		break;
	case 'C':
		if(direction==1)
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	81 30       	cpi	r24, 0x01	; 1
    1fbe:	41 f4       	brne	.+16     	; 0x1fd0 <DIO_write_high_nibbleDir+0xb2>
			DDRC|=0xf0;
    1fc0:	a4 e3       	ldi	r26, 0x34	; 52
    1fc2:	b0 e0       	ldi	r27, 0x00	; 0
    1fc4:	e4 e3       	ldi	r30, 0x34	; 52
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 81       	ld	r24, Z
    1fca:	80 6f       	ori	r24, 0xF0	; 240
    1fcc:	8c 93       	st	X, r24
    1fce:	1a c0       	rjmp	.+52     	; 0x2004 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRC&=~(0xf0);
    1fd0:	a4 e3       	ldi	r26, 0x34	; 52
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e4 e3       	ldi	r30, 0x34	; 52
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	8f 70       	andi	r24, 0x0F	; 15
    1fdc:	8c 93       	st	X, r24
    1fde:	12 c0       	rjmp	.+36     	; 0x2004 <DIO_write_high_nibbleDir+0xe6>
		break;
	case 'D':
		if(direction==1)
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	81 30       	cpi	r24, 0x01	; 1
    1fe4:	41 f4       	brne	.+16     	; 0x1ff6 <DIO_write_high_nibbleDir+0xd8>
			DDRD|=0xf0;
    1fe6:	a1 e3       	ldi	r26, 0x31	; 49
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	e1 e3       	ldi	r30, 0x31	; 49
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	80 6f       	ori	r24, 0xF0	; 240
    1ff2:	8c 93       	st	X, r24
    1ff4:	07 c0       	rjmp	.+14     	; 0x2004 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRD&=~(0xf0);
    1ff6:	a1 e3       	ldi	r26, 0x31	; 49
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	e1 e3       	ldi	r30, 0x31	; 49
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	8f 70       	andi	r24, 0x0F	; 15
    2002:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	0f 90       	pop	r0
    200a:	0f 90       	pop	r0
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	08 95       	ret

00002012 <DIO_write_low_nibbleDir>:

void DIO_write_low_nibbleDir(uint8 portname,uint8 direction)
{
    2012:	df 93       	push	r29
    2014:	cf 93       	push	r28
    2016:	00 d0       	rcall	.+0      	; 0x2018 <DIO_write_low_nibbleDir+0x6>
    2018:	00 d0       	rcall	.+0      	; 0x201a <DIO_write_low_nibbleDir+0x8>
    201a:	cd b7       	in	r28, 0x3d	; 61
    201c:	de b7       	in	r29, 0x3e	; 62
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	28 2f       	mov	r18, r24
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	3c 83       	std	Y+4, r19	; 0x04
    202a:	2b 83       	std	Y+3, r18	; 0x03
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	9c 81       	ldd	r25, Y+4	; 0x04
    2030:	82 34       	cpi	r24, 0x42	; 66
    2032:	91 05       	cpc	r25, r1
    2034:	49 f1       	breq	.+82     	; 0x2088 <DIO_write_low_nibbleDir+0x76>
    2036:	2b 81       	ldd	r18, Y+3	; 0x03
    2038:	3c 81       	ldd	r19, Y+4	; 0x04
    203a:	23 34       	cpi	r18, 0x43	; 67
    203c:	31 05       	cpc	r19, r1
    203e:	34 f4       	brge	.+12     	; 0x204c <DIO_write_low_nibbleDir+0x3a>
    2040:	8b 81       	ldd	r24, Y+3	; 0x03
    2042:	9c 81       	ldd	r25, Y+4	; 0x04
    2044:	81 34       	cpi	r24, 0x41	; 65
    2046:	91 05       	cpc	r25, r1
    2048:	61 f0       	breq	.+24     	; 0x2062 <DIO_write_low_nibbleDir+0x50>
    204a:	56 c0       	rjmp	.+172    	; 0x20f8 <DIO_write_low_nibbleDir+0xe6>
    204c:	2b 81       	ldd	r18, Y+3	; 0x03
    204e:	3c 81       	ldd	r19, Y+4	; 0x04
    2050:	23 34       	cpi	r18, 0x43	; 67
    2052:	31 05       	cpc	r19, r1
    2054:	61 f1       	breq	.+88     	; 0x20ae <DIO_write_low_nibbleDir+0x9c>
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	9c 81       	ldd	r25, Y+4	; 0x04
    205a:	84 34       	cpi	r24, 0x44	; 68
    205c:	91 05       	cpc	r25, r1
    205e:	d1 f1       	breq	.+116    	; 0x20d4 <DIO_write_low_nibbleDir+0xc2>
    2060:	4b c0       	rjmp	.+150    	; 0x20f8 <DIO_write_low_nibbleDir+0xe6>
	{
	case 'A':
		if(direction==1)
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	81 30       	cpi	r24, 0x01	; 1
    2066:	41 f4       	brne	.+16     	; 0x2078 <DIO_write_low_nibbleDir+0x66>
			DDRA|=0x0f;
    2068:	aa e3       	ldi	r26, 0x3A	; 58
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	ea e3       	ldi	r30, 0x3A	; 58
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	8f 60       	ori	r24, 0x0F	; 15
    2074:	8c 93       	st	X, r24
    2076:	40 c0       	rjmp	.+128    	; 0x20f8 <DIO_write_low_nibbleDir+0xe6>
		else
			DDRA&=~(0x0f);
    2078:	aa e3       	ldi	r26, 0x3A	; 58
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	ea e3       	ldi	r30, 0x3A	; 58
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	80 7f       	andi	r24, 0xF0	; 240
    2084:	8c 93       	st	X, r24
    2086:	38 c0       	rjmp	.+112    	; 0x20f8 <DIO_write_low_nibbleDir+0xe6>
		break;
	case 'B':
		if(direction==1)
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	81 30       	cpi	r24, 0x01	; 1
    208c:	41 f4       	brne	.+16     	; 0x209e <DIO_write_low_nibbleDir+0x8c>
			DDRB|=0x0f;
    208e:	a7 e3       	ldi	r26, 0x37	; 55
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	e7 e3       	ldi	r30, 0x37	; 55
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	8f 60       	ori	r24, 0x0F	; 15
    209a:	8c 93       	st	X, r24
    209c:	2d c0       	rjmp	.+90     	; 0x20f8 <DIO_write_low_nibbleDir+0xe6>
		else
			DDRB&=~(0x0f);
    209e:	a7 e3       	ldi	r26, 0x37	; 55
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	e7 e3       	ldi	r30, 0x37	; 55
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	80 7f       	andi	r24, 0xF0	; 240
    20aa:	8c 93       	st	X, r24
    20ac:	25 c0       	rjmp	.+74     	; 0x20f8 <DIO_write_low_nibbleDir+0xe6>
		break;
	case 'C':
		if(direction==1)
    20ae:	8a 81       	ldd	r24, Y+2	; 0x02
    20b0:	81 30       	cpi	r24, 0x01	; 1
    20b2:	41 f4       	brne	.+16     	; 0x20c4 <DIO_write_low_nibbleDir+0xb2>
			DDRC|=0x0f;
    20b4:	a4 e3       	ldi	r26, 0x34	; 52
    20b6:	b0 e0       	ldi	r27, 0x00	; 0
    20b8:	e4 e3       	ldi	r30, 0x34	; 52
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	8f 60       	ori	r24, 0x0F	; 15
    20c0:	8c 93       	st	X, r24
    20c2:	1a c0       	rjmp	.+52     	; 0x20f8 <DIO_write_low_nibbleDir+0xe6>
		else
			DDRC&=~(0x0f);
    20c4:	a4 e3       	ldi	r26, 0x34	; 52
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	e4 e3       	ldi	r30, 0x34	; 52
    20ca:	f0 e0       	ldi	r31, 0x00	; 0
    20cc:	80 81       	ld	r24, Z
    20ce:	80 7f       	andi	r24, 0xF0	; 240
    20d0:	8c 93       	st	X, r24
    20d2:	12 c0       	rjmp	.+36     	; 0x20f8 <DIO_write_low_nibbleDir+0xe6>
		break;
	case 'D':
		if(direction==1)
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	81 30       	cpi	r24, 0x01	; 1
    20d8:	41 f4       	brne	.+16     	; 0x20ea <DIO_write_low_nibbleDir+0xd8>
			DDRD|=0x0f;
    20da:	a1 e3       	ldi	r26, 0x31	; 49
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	e1 e3       	ldi	r30, 0x31	; 49
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	8f 60       	ori	r24, 0x0F	; 15
    20e6:	8c 93       	st	X, r24
    20e8:	07 c0       	rjmp	.+14     	; 0x20f8 <DIO_write_low_nibbleDir+0xe6>
		else
			DDRD&=~(0x0f);
    20ea:	a1 e3       	ldi	r26, 0x31	; 49
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e1 e3       	ldi	r30, 0x31	; 49
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	80 7f       	andi	r24, 0xF0	; 240
    20f6:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	0f 90       	pop	r0
    2100:	cf 91       	pop	r28
    2102:	df 91       	pop	r29
    2104:	08 95       	ret

00002106 <KeyPad_init>:
#endif
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void KeyPad_init(void)
{
    2106:	df 93       	push	r29
    2108:	cf 93       	push	r28
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
	DIO_setPINDir( KEYPAD_PORT_OUT,0,in);
    210e:	82 e4       	ldi	r24, 0x42	; 66
    2110:	60 e0       	ldi	r22, 0x00	; 0
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_OUT,1,in);
    2118:	82 e4       	ldi	r24, 0x42	; 66
    211a:	61 e0       	ldi	r22, 0x01	; 1
    211c:	40 e0       	ldi	r20, 0x00	; 0
    211e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_OUT,2,in);
    2122:	82 e4       	ldi	r24, 0x42	; 66
    2124:	62 e0       	ldi	r22, 0x02	; 2
    2126:	40 e0       	ldi	r20, 0x00	; 0
    2128:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_OUT,3,in);
    212c:	82 e4       	ldi	r24, 0x42	; 66
    212e:	63 e0       	ldi	r22, 0x03	; 3
    2130:	40 e0       	ldi	r20, 0x00	; 0
    2132:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,0,in);
    2136:	81 e4       	ldi	r24, 0x41	; 65
    2138:	60 e0       	ldi	r22, 0x00	; 0
    213a:	40 e0       	ldi	r20, 0x00	; 0
    213c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,1,in);
    2140:	81 e4       	ldi	r24, 0x41	; 65
    2142:	61 e0       	ldi	r22, 0x01	; 1
    2144:	40 e0       	ldi	r20, 0x00	; 0
    2146:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,2,in);
    214a:	81 e4       	ldi	r24, 0x41	; 65
    214c:	62 e0       	ldi	r22, 0x02	; 2
    214e:	40 e0       	ldi	r20, 0x00	; 0
    2150:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,3,in);
    2154:	81 e4       	ldi	r24, 0x41	; 65
    2156:	63 e0       	ldi	r22, 0x03	; 3
    2158:	40 e0       	ldi	r20, 0x00	; 0
    215a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_setPINDir>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,0,1);
    215e:	81 e4       	ldi	r24, 0x41	; 65
    2160:	60 e0       	ldi	r22, 0x00	; 0
    2162:	41 e0       	ldi	r20, 0x01	; 1
    2164:	0e 94 98 0c 	call	0x1930	; 0x1930 <DIO_enablePullup_pin>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,1,1);
    2168:	81 e4       	ldi	r24, 0x41	; 65
    216a:	61 e0       	ldi	r22, 0x01	; 1
    216c:	41 e0       	ldi	r20, 0x01	; 1
    216e:	0e 94 98 0c 	call	0x1930	; 0x1930 <DIO_enablePullup_pin>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,2,1);
    2172:	81 e4       	ldi	r24, 0x41	; 65
    2174:	62 e0       	ldi	r22, 0x02	; 2
    2176:	41 e0       	ldi	r20, 0x01	; 1
    2178:	0e 94 98 0c 	call	0x1930	; 0x1930 <DIO_enablePullup_pin>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,3,1);
    217c:	81 e4       	ldi	r24, 0x41	; 65
    217e:	63 e0       	ldi	r22, 0x03	; 3
    2180:	41 e0       	ldi	r20, 0x01	; 1
    2182:	0e 94 98 0c 	call	0x1930	; 0x1930 <DIO_enablePullup_pin>
}
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <KeyPad_getPressedKey>:

uint8 KeyPad_getPressedKey(void)
{
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	00 d0       	rcall	.+0      	; 0x2192 <KeyPad_getPressedKey+0x6>
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		KeyPad_init();
    2196:	0e 94 83 10 	call	0x2106	; 0x2106 <KeyPad_init>
		for(row=0;row<N_col;row++)
    219a:	19 82       	std	Y+1, r1	; 0x01
    219c:	35 c0       	rjmp	.+106    	; 0x2208 <KeyPad_getPressedKey+0x7c>
		{
			if(row>0)
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	88 23       	and	r24, r24
    21a2:	29 f0       	breq	.+10     	; 0x21ae <KeyPad_getPressedKey+0x22>
			{
				DIO_setPINDir( KEYPAD_PORT_OUT,row,in);
    21a4:	82 e4       	ldi	r24, 0x42	; 66
    21a6:	69 81       	ldd	r22, Y+1	; 0x01
    21a8:	40 e0       	ldi	r20, 0x00	; 0
    21aa:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_setPINDir>
			}
			DIO_setPINDir( KEYPAD_PORT_OUT,row,out);
    21ae:	82 e4       	ldi	r24, 0x42	; 66
    21b0:	69 81       	ldd	r22, Y+1	; 0x01
    21b2:	41 e0       	ldi	r20, 0x01	; 1
    21b4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_setPINDir>
			DIO_write_PIN(KEYPAD_PORT_OUT,row,0);
    21b8:	82 e4       	ldi	r24, 0x42	; 66
    21ba:	69 81       	ldd	r22, Y+1	; 0x01
    21bc:	40 e0       	ldi	r20, 0x00	; 0
    21be:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_write_PIN>
			for(col=0;col<N_col;col++)
    21c2:	1a 82       	std	Y+2, r1	; 0x02
    21c4:	1b c0       	rjmp	.+54     	; 0x21fc <KeyPad_getPressedKey+0x70>
			{
				if(DIO_read_PIN(KEYPAD_PORT_IN,col)==0)
    21c6:	81 e4       	ldi	r24, 0x41	; 65
    21c8:	6a 81       	ldd	r22, Y+2	; 0x02
    21ca:	0e 94 bd 0a 	call	0x157a	; 0x157a <DIO_read_PIN>
    21ce:	88 23       	and	r24, r24
    21d0:	91 f4       	brne	.+36     	; 0x21f6 <KeyPad_getPressedKey+0x6a>
				{
					#if (N_col==3)
					return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col==4)
					return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	88 2f       	mov	r24, r24
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	88 0f       	add	r24, r24
    21da:	99 1f       	adc	r25, r25
    21dc:	88 0f       	add	r24, r24
    21de:	99 1f       	adc	r25, r25
    21e0:	98 2f       	mov	r25, r24
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	89 0f       	add	r24, r25
    21e6:	8f 5f       	subi	r24, 0xFF	; 255
    21e8:	0e 94 74 11 	call	0x22e8	; 0x22e8 <KeyPad_4x4_adjustKeyNumber>
				}
			}
		}
	}

}
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	cf 91       	pop	r28
    21f2:	df 91       	pop	r29
    21f4:	08 95       	ret
			{
				DIO_setPINDir( KEYPAD_PORT_OUT,row,in);
			}
			DIO_setPINDir( KEYPAD_PORT_OUT,row,out);
			DIO_write_PIN(KEYPAD_PORT_OUT,row,0);
			for(col=0;col<N_col;col++)
    21f6:	8a 81       	ldd	r24, Y+2	; 0x02
    21f8:	8f 5f       	subi	r24, 0xFF	; 255
    21fa:	8a 83       	std	Y+2, r24	; 0x02
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	84 30       	cpi	r24, 0x04	; 4
    2200:	10 f3       	brcs	.-60     	; 0x21c6 <KeyPad_getPressedKey+0x3a>
{
	uint8 col,row;
	while(1)
	{
		KeyPad_init();
		for(row=0;row<N_col;row++)
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	8f 5f       	subi	r24, 0xFF	; 255
    2206:	89 83       	std	Y+1, r24	; 0x01
    2208:	89 81       	ldd	r24, Y+1	; 0x01
    220a:	84 30       	cpi	r24, 0x04	; 4
    220c:	40 f2       	brcs	.-112    	; 0x219e <KeyPad_getPressedKey+0x12>
    220e:	c3 cf       	rjmp	.-122    	; 0x2196 <KeyPad_getPressedKey+0xa>

00002210 <KeyPad_4x3_adjustKeyNumber>:

}


uint8 KeyPad_4x3_adjustKeyNumber(uint8 button_number)
{
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	00 d0       	rcall	.+0      	; 0x2216 <KeyPad_4x3_adjustKeyNumber+0x6>
    2216:	00 d0       	rcall	.+0      	; 0x2218 <KeyPad_4x3_adjustKeyNumber+0x8>
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
    221c:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	28 2f       	mov	r18, r24
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	3c 83       	std	Y+4, r19	; 0x04
    2226:	2b 83       	std	Y+3, r18	; 0x03
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	9c 81       	ldd	r25, Y+4	; 0x04
    222c:	85 30       	cpi	r24, 0x05	; 5
    222e:	91 05       	cpc	r25, r1
    2230:	09 f4       	brne	.+2      	; 0x2234 <KeyPad_4x3_adjustKeyNumber+0x24>
    2232:	41 c0       	rjmp	.+130    	; 0x22b6 <KeyPad_4x3_adjustKeyNumber+0xa6>
    2234:	2b 81       	ldd	r18, Y+3	; 0x03
    2236:	3c 81       	ldd	r19, Y+4	; 0x04
    2238:	26 30       	cpi	r18, 0x06	; 6
    223a:	31 05       	cpc	r19, r1
    223c:	dc f4       	brge	.+54     	; 0x2274 <KeyPad_4x3_adjustKeyNumber+0x64>
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	9c 81       	ldd	r25, Y+4	; 0x04
    2242:	82 30       	cpi	r24, 0x02	; 2
    2244:	91 05       	cpc	r25, r1
    2246:	71 f1       	breq	.+92     	; 0x22a4 <KeyPad_4x3_adjustKeyNumber+0x94>
    2248:	2b 81       	ldd	r18, Y+3	; 0x03
    224a:	3c 81       	ldd	r19, Y+4	; 0x04
    224c:	23 30       	cpi	r18, 0x03	; 3
    224e:	31 05       	cpc	r19, r1
    2250:	34 f4       	brge	.+12     	; 0x225e <KeyPad_4x3_adjustKeyNumber+0x4e>
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	9c 81       	ldd	r25, Y+4	; 0x04
    2256:	81 30       	cpi	r24, 0x01	; 1
    2258:	91 05       	cpc	r25, r1
    225a:	09 f1       	breq	.+66     	; 0x229e <KeyPad_4x3_adjustKeyNumber+0x8e>
    225c:	3b c0       	rjmp	.+118    	; 0x22d4 <KeyPad_4x3_adjustKeyNumber+0xc4>
    225e:	2b 81       	ldd	r18, Y+3	; 0x03
    2260:	3c 81       	ldd	r19, Y+4	; 0x04
    2262:	23 30       	cpi	r18, 0x03	; 3
    2264:	31 05       	cpc	r19, r1
    2266:	09 f1       	breq	.+66     	; 0x22aa <KeyPad_4x3_adjustKeyNumber+0x9a>
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
    226a:	9c 81       	ldd	r25, Y+4	; 0x04
    226c:	84 30       	cpi	r24, 0x04	; 4
    226e:	91 05       	cpc	r25, r1
    2270:	f9 f0       	breq	.+62     	; 0x22b0 <KeyPad_4x3_adjustKeyNumber+0xa0>
    2272:	30 c0       	rjmp	.+96     	; 0x22d4 <KeyPad_4x3_adjustKeyNumber+0xc4>
    2274:	2b 81       	ldd	r18, Y+3	; 0x03
    2276:	3c 81       	ldd	r19, Y+4	; 0x04
    2278:	27 30       	cpi	r18, 0x07	; 7
    227a:	31 05       	cpc	r19, r1
    227c:	11 f1       	breq	.+68     	; 0x22c2 <KeyPad_4x3_adjustKeyNumber+0xb2>
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	9c 81       	ldd	r25, Y+4	; 0x04
    2282:	87 30       	cpi	r24, 0x07	; 7
    2284:	91 05       	cpc	r25, r1
    2286:	d4 f0       	brlt	.+52     	; 0x22bc <KeyPad_4x3_adjustKeyNumber+0xac>
    2288:	2b 81       	ldd	r18, Y+3	; 0x03
    228a:	3c 81       	ldd	r19, Y+4	; 0x04
    228c:	28 30       	cpi	r18, 0x08	; 8
    228e:	31 05       	cpc	r19, r1
    2290:	d9 f0       	breq	.+54     	; 0x22c8 <KeyPad_4x3_adjustKeyNumber+0xb8>
    2292:	8b 81       	ldd	r24, Y+3	; 0x03
    2294:	9c 81       	ldd	r25, Y+4	; 0x04
    2296:	89 30       	cpi	r24, 0x09	; 9
    2298:	91 05       	cpc	r25, r1
    229a:	c9 f0       	breq	.+50     	; 0x22ce <KeyPad_4x3_adjustKeyNumber+0xbe>
    229c:	1b c0       	rjmp	.+54     	; 0x22d4 <KeyPad_4x3_adjustKeyNumber+0xc4>
	{
	case 1:
		return '1';
    229e:	91 e3       	ldi	r25, 0x31	; 49
    22a0:	9a 83       	std	Y+2, r25	; 0x02
    22a2:	1a c0       	rjmp	.+52     	; 0x22d8 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 2:
		return '2';
    22a4:	22 e3       	ldi	r18, 0x32	; 50
    22a6:	2a 83       	std	Y+2, r18	; 0x02
    22a8:	17 c0       	rjmp	.+46     	; 0x22d8 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 3:
		return '3';
    22aa:	33 e3       	ldi	r19, 0x33	; 51
    22ac:	3a 83       	std	Y+2, r19	; 0x02
    22ae:	14 c0       	rjmp	.+40     	; 0x22d8 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 4:
		return '4';
    22b0:	84 e3       	ldi	r24, 0x34	; 52
    22b2:	8a 83       	std	Y+2, r24	; 0x02
    22b4:	11 c0       	rjmp	.+34     	; 0x22d8 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 5:
		return '5';
    22b6:	95 e3       	ldi	r25, 0x35	; 53
    22b8:	9a 83       	std	Y+2, r25	; 0x02
    22ba:	0e c0       	rjmp	.+28     	; 0x22d8 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 6:
		return '6';
    22bc:	26 e3       	ldi	r18, 0x36	; 54
    22be:	2a 83       	std	Y+2, r18	; 0x02
    22c0:	0b c0       	rjmp	.+22     	; 0x22d8 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 7:
		return '7';
    22c2:	37 e3       	ldi	r19, 0x37	; 55
    22c4:	3a 83       	std	Y+2, r19	; 0x02
    22c6:	08 c0       	rjmp	.+16     	; 0x22d8 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 8:
		return '8';
    22c8:	88 e3       	ldi	r24, 0x38	; 56
    22ca:	8a 83       	std	Y+2, r24	; 0x02
    22cc:	05 c0       	rjmp	.+10     	; 0x22d8 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 9:
		return '9';
    22ce:	99 e3       	ldi	r25, 0x39	; 57
    22d0:	9a 83       	std	Y+2, r25	; 0x02
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	default:
		return '0';
    22d4:	20 e3       	ldi	r18, 0x30	; 48
    22d6:	2a 83       	std	Y+2, r18	; 0x02
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
		break;

	}

}
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	cf 91       	pop	r28
    22e4:	df 91       	pop	r29
    22e6:	08 95       	ret

000022e8 <KeyPad_4x4_adjustKeyNumber>:

uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    22e8:	df 93       	push	r29
    22ea:	cf 93       	push	r28
    22ec:	00 d0       	rcall	.+0      	; 0x22ee <KeyPad_4x4_adjustKeyNumber+0x6>
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <KeyPad_4x4_adjustKeyNumber+0x8>
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
    22f4:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	28 2f       	mov	r18, r24
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	3c 83       	std	Y+4, r19	; 0x04
    22fe:	2b 83       	std	Y+3, r18	; 0x03
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	9c 81       	ldd	r25, Y+4	; 0x04
    2304:	88 30       	cpi	r24, 0x08	; 8
    2306:	91 05       	cpc	r25, r1
    2308:	09 f4       	brne	.+2      	; 0x230c <KeyPad_4x4_adjustKeyNumber+0x24>
    230a:	70 c0       	rjmp	.+224    	; 0x23ec <KeyPad_4x4_adjustKeyNumber+0x104>
    230c:	2b 81       	ldd	r18, Y+3	; 0x03
    230e:	3c 81       	ldd	r19, Y+4	; 0x04
    2310:	29 30       	cpi	r18, 0x09	; 9
    2312:	31 05       	cpc	r19, r1
    2314:	5c f5       	brge	.+86     	; 0x236c <KeyPad_4x4_adjustKeyNumber+0x84>
    2316:	8b 81       	ldd	r24, Y+3	; 0x03
    2318:	9c 81       	ldd	r25, Y+4	; 0x04
    231a:	84 30       	cpi	r24, 0x04	; 4
    231c:	91 05       	cpc	r25, r1
    231e:	09 f4       	brne	.+2      	; 0x2322 <KeyPad_4x4_adjustKeyNumber+0x3a>
    2320:	59 c0       	rjmp	.+178    	; 0x23d4 <KeyPad_4x4_adjustKeyNumber+0xec>
    2322:	2b 81       	ldd	r18, Y+3	; 0x03
    2324:	3c 81       	ldd	r19, Y+4	; 0x04
    2326:	25 30       	cpi	r18, 0x05	; 5
    2328:	31 05       	cpc	r19, r1
    232a:	9c f4       	brge	.+38     	; 0x2352 <KeyPad_4x4_adjustKeyNumber+0x6a>
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	9c 81       	ldd	r25, Y+4	; 0x04
    2330:	82 30       	cpi	r24, 0x02	; 2
    2332:	91 05       	cpc	r25, r1
    2334:	09 f4       	brne	.+2      	; 0x2338 <KeyPad_4x4_adjustKeyNumber+0x50>
    2336:	48 c0       	rjmp	.+144    	; 0x23c8 <KeyPad_4x4_adjustKeyNumber+0xe0>
    2338:	2b 81       	ldd	r18, Y+3	; 0x03
    233a:	3c 81       	ldd	r19, Y+4	; 0x04
    233c:	23 30       	cpi	r18, 0x03	; 3
    233e:	31 05       	cpc	r19, r1
    2340:	0c f0       	brlt	.+2      	; 0x2344 <KeyPad_4x4_adjustKeyNumber+0x5c>
    2342:	45 c0       	rjmp	.+138    	; 0x23ce <KeyPad_4x4_adjustKeyNumber+0xe6>
    2344:	8b 81       	ldd	r24, Y+3	; 0x03
    2346:	9c 81       	ldd	r25, Y+4	; 0x04
    2348:	81 30       	cpi	r24, 0x01	; 1
    234a:	91 05       	cpc	r25, r1
    234c:	09 f4       	brne	.+2      	; 0x2350 <KeyPad_4x4_adjustKeyNumber+0x68>
    234e:	39 c0       	rjmp	.+114    	; 0x23c2 <KeyPad_4x4_adjustKeyNumber+0xda>
    2350:	68 c0       	rjmp	.+208    	; 0x2422 <KeyPad_4x4_adjustKeyNumber+0x13a>
    2352:	2b 81       	ldd	r18, Y+3	; 0x03
    2354:	3c 81       	ldd	r19, Y+4	; 0x04
    2356:	26 30       	cpi	r18, 0x06	; 6
    2358:	31 05       	cpc	r19, r1
    235a:	09 f4       	brne	.+2      	; 0x235e <KeyPad_4x4_adjustKeyNumber+0x76>
    235c:	41 c0       	rjmp	.+130    	; 0x23e0 <KeyPad_4x4_adjustKeyNumber+0xf8>
    235e:	8b 81       	ldd	r24, Y+3	; 0x03
    2360:	9c 81       	ldd	r25, Y+4	; 0x04
    2362:	87 30       	cpi	r24, 0x07	; 7
    2364:	91 05       	cpc	r25, r1
    2366:	0c f0       	brlt	.+2      	; 0x236a <KeyPad_4x4_adjustKeyNumber+0x82>
    2368:	3e c0       	rjmp	.+124    	; 0x23e6 <KeyPad_4x4_adjustKeyNumber+0xfe>
    236a:	37 c0       	rjmp	.+110    	; 0x23da <KeyPad_4x4_adjustKeyNumber+0xf2>
    236c:	2b 81       	ldd	r18, Y+3	; 0x03
    236e:	3c 81       	ldd	r19, Y+4	; 0x04
    2370:	2c 30       	cpi	r18, 0x0C	; 12
    2372:	31 05       	cpc	r19, r1
    2374:	09 f4       	brne	.+2      	; 0x2378 <KeyPad_4x4_adjustKeyNumber+0x90>
    2376:	46 c0       	rjmp	.+140    	; 0x2404 <KeyPad_4x4_adjustKeyNumber+0x11c>
    2378:	8b 81       	ldd	r24, Y+3	; 0x03
    237a:	9c 81       	ldd	r25, Y+4	; 0x04
    237c:	8d 30       	cpi	r24, 0x0D	; 13
    237e:	91 05       	cpc	r25, r1
    2380:	5c f4       	brge	.+22     	; 0x2398 <KeyPad_4x4_adjustKeyNumber+0xb0>
    2382:	2b 81       	ldd	r18, Y+3	; 0x03
    2384:	3c 81       	ldd	r19, Y+4	; 0x04
    2386:	2a 30       	cpi	r18, 0x0A	; 10
    2388:	31 05       	cpc	r19, r1
    238a:	b1 f1       	breq	.+108    	; 0x23f8 <KeyPad_4x4_adjustKeyNumber+0x110>
    238c:	8b 81       	ldd	r24, Y+3	; 0x03
    238e:	9c 81       	ldd	r25, Y+4	; 0x04
    2390:	8b 30       	cpi	r24, 0x0B	; 11
    2392:	91 05       	cpc	r25, r1
    2394:	a4 f5       	brge	.+104    	; 0x23fe <KeyPad_4x4_adjustKeyNumber+0x116>
    2396:	2d c0       	rjmp	.+90     	; 0x23f2 <KeyPad_4x4_adjustKeyNumber+0x10a>
    2398:	2b 81       	ldd	r18, Y+3	; 0x03
    239a:	3c 81       	ldd	r19, Y+4	; 0x04
    239c:	2e 30       	cpi	r18, 0x0E	; 14
    239e:	31 05       	cpc	r19, r1
    23a0:	b9 f1       	breq	.+110    	; 0x2410 <KeyPad_4x4_adjustKeyNumber+0x128>
    23a2:	8b 81       	ldd	r24, Y+3	; 0x03
    23a4:	9c 81       	ldd	r25, Y+4	; 0x04
    23a6:	8e 30       	cpi	r24, 0x0E	; 14
    23a8:	91 05       	cpc	r25, r1
    23aa:	7c f1       	brlt	.+94     	; 0x240a <KeyPad_4x4_adjustKeyNumber+0x122>
    23ac:	2b 81       	ldd	r18, Y+3	; 0x03
    23ae:	3c 81       	ldd	r19, Y+4	; 0x04
    23b0:	2f 30       	cpi	r18, 0x0F	; 15
    23b2:	31 05       	cpc	r19, r1
    23b4:	81 f1       	breq	.+96     	; 0x2416 <KeyPad_4x4_adjustKeyNumber+0x12e>
    23b6:	8b 81       	ldd	r24, Y+3	; 0x03
    23b8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ba:	80 31       	cpi	r24, 0x10	; 16
    23bc:	91 05       	cpc	r25, r1
    23be:	71 f1       	breq	.+92     	; 0x241c <KeyPad_4x4_adjustKeyNumber+0x134>
    23c0:	30 c0       	rjmp	.+96     	; 0x2422 <KeyPad_4x4_adjustKeyNumber+0x13a>
	{
	case 1:
		return '7';
    23c2:	97 e3       	ldi	r25, 0x37	; 55
    23c4:	9a 83       	std	Y+2, r25	; 0x02
    23c6:	2e c0       	rjmp	.+92     	; 0x2424 <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 2:
		return '8';
    23c8:	28 e3       	ldi	r18, 0x38	; 56
    23ca:	2a 83       	std	Y+2, r18	; 0x02
    23cc:	2b c0       	rjmp	.+86     	; 0x2424 <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 3:
		return '9';
    23ce:	39 e3       	ldi	r19, 0x39	; 57
    23d0:	3a 83       	std	Y+2, r19	; 0x02
    23d2:	28 c0       	rjmp	.+80     	; 0x2424 <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 4:
		return '/';
    23d4:	8f e2       	ldi	r24, 0x2F	; 47
    23d6:	8a 83       	std	Y+2, r24	; 0x02
    23d8:	25 c0       	rjmp	.+74     	; 0x2424 <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 5:
		return '4';
    23da:	94 e3       	ldi	r25, 0x34	; 52
    23dc:	9a 83       	std	Y+2, r25	; 0x02
    23de:	22 c0       	rjmp	.+68     	; 0x2424 <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 6:
		return '5';
    23e0:	25 e3       	ldi	r18, 0x35	; 53
    23e2:	2a 83       	std	Y+2, r18	; 0x02
    23e4:	1f c0       	rjmp	.+62     	; 0x2424 <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 7:
		return '6';
    23e6:	36 e3       	ldi	r19, 0x36	; 54
    23e8:	3a 83       	std	Y+2, r19	; 0x02
    23ea:	1c c0       	rjmp	.+56     	; 0x2424 <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 8:
		return '*';
    23ec:	8a e2       	ldi	r24, 0x2A	; 42
    23ee:	8a 83       	std	Y+2, r24	; 0x02
    23f0:	19 c0       	rjmp	.+50     	; 0x2424 <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 9:
		return '1';
    23f2:	91 e3       	ldi	r25, 0x31	; 49
    23f4:	9a 83       	std	Y+2, r25	; 0x02
    23f6:	16 c0       	rjmp	.+44     	; 0x2424 <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 10:
		return '2';
    23f8:	22 e3       	ldi	r18, 0x32	; 50
    23fa:	2a 83       	std	Y+2, r18	; 0x02
    23fc:	13 c0       	rjmp	.+38     	; 0x2424 <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 11:
		return '3';
    23fe:	33 e3       	ldi	r19, 0x33	; 51
    2400:	3a 83       	std	Y+2, r19	; 0x02
    2402:	10 c0       	rjmp	.+32     	; 0x2424 <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 12:
		return '-';
    2404:	8d e2       	ldi	r24, 0x2D	; 45
    2406:	8a 83       	std	Y+2, r24	; 0x02
    2408:	0d c0       	rjmp	.+26     	; 0x2424 <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 13:
		return 'A';
    240a:	91 e4       	ldi	r25, 0x41	; 65
    240c:	9a 83       	std	Y+2, r25	; 0x02
    240e:	0a c0       	rjmp	.+20     	; 0x2424 <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 14:
		return '0';
    2410:	20 e3       	ldi	r18, 0x30	; 48
    2412:	2a 83       	std	Y+2, r18	; 0x02
    2414:	07 c0       	rjmp	.+14     	; 0x2424 <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 15:
		return '=';
    2416:	3d e3       	ldi	r19, 0x3D	; 61
    2418:	3a 83       	std	Y+2, r19	; 0x02
    241a:	04 c0       	rjmp	.+8      	; 0x2424 <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;
	case 16:
		return '+';
    241c:	8b e2       	ldi	r24, 0x2B	; 43
    241e:	8a 83       	std	Y+2, r24	; 0x02
    2420:	01 c0       	rjmp	.+2      	; 0x2424 <KeyPad_4x4_adjustKeyNumber+0x13c>
		break;

	default:
		return 0 ;
    2422:	1a 82       	std	Y+2, r1	; 0x02
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
		break;


	}

}
    2426:	0f 90       	pop	r0
    2428:	0f 90       	pop	r0
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	cf 91       	pop	r28
    2430:	df 91       	pop	r29
    2432:	08 95       	ret

00002434 <LCD_refresh>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_refresh(void)
{
    2434:	df 93       	push	r29
    2436:	cf 93       	push	r28
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62
    243c:	aa 97       	sbiw	r28, 0x2a	; 42
    243e:	0f b6       	in	r0, 0x3f	; 63
    2440:	f8 94       	cli
    2442:	de bf       	out	0x3e, r29	; 62
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	cd bf       	out	0x3d, r28	; 61
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	a0 e8       	ldi	r26, 0x80	; 128
    244e:	bf e3       	ldi	r27, 0x3F	; 63
    2450:	8f a3       	std	Y+39, r24	; 0x27
    2452:	98 a7       	std	Y+40, r25	; 0x28
    2454:	a9 a7       	std	Y+41, r26	; 0x29
    2456:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2458:	6f a1       	ldd	r22, Y+39	; 0x27
    245a:	78 a5       	ldd	r23, Y+40	; 0x28
    245c:	89 a5       	ldd	r24, Y+41	; 0x29
    245e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	4a e7       	ldi	r20, 0x7A	; 122
    2466:	53 e4       	ldi	r21, 0x43	; 67
    2468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	8b a3       	std	Y+35, r24	; 0x23
    2472:	9c a3       	std	Y+36, r25	; 0x24
    2474:	ad a3       	std	Y+37, r26	; 0x25
    2476:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2478:	6b a1       	ldd	r22, Y+35	; 0x23
    247a:	7c a1       	ldd	r23, Y+36	; 0x24
    247c:	8d a1       	ldd	r24, Y+37	; 0x25
    247e:	9e a1       	ldd	r25, Y+38	; 0x26
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	40 e8       	ldi	r20, 0x80	; 128
    2486:	5f e3       	ldi	r21, 0x3F	; 63
    2488:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    248c:	88 23       	and	r24, r24
    248e:	2c f4       	brge	.+10     	; 0x249a <LCD_refresh+0x66>
		__ticks = 1;
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	9a a3       	std	Y+34, r25	; 0x22
    2496:	89 a3       	std	Y+33, r24	; 0x21
    2498:	3f c0       	rjmp	.+126    	; 0x2518 <LCD_refresh+0xe4>
	else if (__tmp > 65535)
    249a:	6b a1       	ldd	r22, Y+35	; 0x23
    249c:	7c a1       	ldd	r23, Y+36	; 0x24
    249e:	8d a1       	ldd	r24, Y+37	; 0x25
    24a0:	9e a1       	ldd	r25, Y+38	; 0x26
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	3f ef       	ldi	r19, 0xFF	; 255
    24a6:	4f e7       	ldi	r20, 0x7F	; 127
    24a8:	57 e4       	ldi	r21, 0x47	; 71
    24aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ae:	18 16       	cp	r1, r24
    24b0:	4c f5       	brge	.+82     	; 0x2504 <LCD_refresh+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b2:	6f a1       	ldd	r22, Y+39	; 0x27
    24b4:	78 a5       	ldd	r23, Y+40	; 0x28
    24b6:	89 a5       	ldd	r24, Y+41	; 0x29
    24b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	40 e2       	ldi	r20, 0x20	; 32
    24c0:	51 e4       	ldi	r21, 0x41	; 65
    24c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	bc 01       	movw	r22, r24
    24cc:	cd 01       	movw	r24, r26
    24ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	9a a3       	std	Y+34, r25	; 0x22
    24d8:	89 a3       	std	Y+33, r24	; 0x21
    24da:	0f c0       	rjmp	.+30     	; 0x24fa <LCD_refresh+0xc6>
    24dc:	89 e1       	ldi	r24, 0x19	; 25
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	98 a3       	std	Y+32, r25	; 0x20
    24e2:	8f 8f       	std	Y+31, r24	; 0x1f
    24e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24e6:	98 a1       	ldd	r25, Y+32	; 0x20
    24e8:	01 97       	sbiw	r24, 0x01	; 1
    24ea:	f1 f7       	brne	.-4      	; 0x24e8 <LCD_refresh+0xb4>
    24ec:	98 a3       	std	Y+32, r25	; 0x20
    24ee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f0:	89 a1       	ldd	r24, Y+33	; 0x21
    24f2:	9a a1       	ldd	r25, Y+34	; 0x22
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	9a a3       	std	Y+34, r25	; 0x22
    24f8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fa:	89 a1       	ldd	r24, Y+33	; 0x21
    24fc:	9a a1       	ldd	r25, Y+34	; 0x22
    24fe:	00 97       	sbiw	r24, 0x00	; 0
    2500:	69 f7       	brne	.-38     	; 0x24dc <LCD_refresh+0xa8>
    2502:	14 c0       	rjmp	.+40     	; 0x252c <LCD_refresh+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2504:	6b a1       	ldd	r22, Y+35	; 0x23
    2506:	7c a1       	ldd	r23, Y+36	; 0x24
    2508:	8d a1       	ldd	r24, Y+37	; 0x25
    250a:	9e a1       	ldd	r25, Y+38	; 0x26
    250c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	9a a3       	std	Y+34, r25	; 0x22
    2516:	89 a3       	std	Y+33, r24	; 0x21
    2518:	89 a1       	ldd	r24, Y+33	; 0x21
    251a:	9a a1       	ldd	r25, Y+34	; 0x22
    251c:	9e 8f       	std	Y+30, r25	; 0x1e
    251e:	8d 8f       	std	Y+29, r24	; 0x1d
    2520:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2522:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	f1 f7       	brne	.-4      	; 0x2524 <LCD_refresh+0xf0>
    2528:	9e 8f       	std	Y+30, r25	; 0x1e
    252a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,0);
    252c:	83 e4       	ldi	r24, 0x43	; 67
    252e:	62 e0       	ldi	r22, 0x02	; 2
    2530:	40 e0       	ldi	r20, 0x00	; 0
    2532:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_write_PIN>
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	a0 e8       	ldi	r26, 0x80	; 128
    253c:	bf e3       	ldi	r27, 0x3F	; 63
    253e:	89 8f       	std	Y+25, r24	; 0x19
    2540:	9a 8f       	std	Y+26, r25	; 0x1a
    2542:	ab 8f       	std	Y+27, r26	; 0x1b
    2544:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2546:	69 8d       	ldd	r22, Y+25	; 0x19
    2548:	7a 8d       	ldd	r23, Y+26	; 0x1a
    254a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    254c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	4a e7       	ldi	r20, 0x7A	; 122
    2554:	53 e4       	ldi	r21, 0x43	; 67
    2556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	8d 8b       	std	Y+21, r24	; 0x15
    2560:	9e 8b       	std	Y+22, r25	; 0x16
    2562:	af 8b       	std	Y+23, r26	; 0x17
    2564:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2566:	6d 89       	ldd	r22, Y+21	; 0x15
    2568:	7e 89       	ldd	r23, Y+22	; 0x16
    256a:	8f 89       	ldd	r24, Y+23	; 0x17
    256c:	98 8d       	ldd	r25, Y+24	; 0x18
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	40 e8       	ldi	r20, 0x80	; 128
    2574:	5f e3       	ldi	r21, 0x3F	; 63
    2576:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    257a:	88 23       	and	r24, r24
    257c:	2c f4       	brge	.+10     	; 0x2588 <LCD_refresh+0x154>
		__ticks = 1;
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	9c 8b       	std	Y+20, r25	; 0x14
    2584:	8b 8b       	std	Y+19, r24	; 0x13
    2586:	3f c0       	rjmp	.+126    	; 0x2606 <LCD_refresh+0x1d2>
	else if (__tmp > 65535)
    2588:	6d 89       	ldd	r22, Y+21	; 0x15
    258a:	7e 89       	ldd	r23, Y+22	; 0x16
    258c:	8f 89       	ldd	r24, Y+23	; 0x17
    258e:	98 8d       	ldd	r25, Y+24	; 0x18
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	3f ef       	ldi	r19, 0xFF	; 255
    2594:	4f e7       	ldi	r20, 0x7F	; 127
    2596:	57 e4       	ldi	r21, 0x47	; 71
    2598:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    259c:	18 16       	cp	r1, r24
    259e:	4c f5       	brge	.+82     	; 0x25f2 <LCD_refresh+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a0:	69 8d       	ldd	r22, Y+25	; 0x19
    25a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	40 e2       	ldi	r20, 0x20	; 32
    25ae:	51 e4       	ldi	r21, 0x41	; 65
    25b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	bc 01       	movw	r22, r24
    25ba:	cd 01       	movw	r24, r26
    25bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	9c 8b       	std	Y+20, r25	; 0x14
    25c6:	8b 8b       	std	Y+19, r24	; 0x13
    25c8:	0f c0       	rjmp	.+30     	; 0x25e8 <LCD_refresh+0x1b4>
    25ca:	89 e1       	ldi	r24, 0x19	; 25
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	9a 8b       	std	Y+18, r25	; 0x12
    25d0:	89 8b       	std	Y+17, r24	; 0x11
    25d2:	89 89       	ldd	r24, Y+17	; 0x11
    25d4:	9a 89       	ldd	r25, Y+18	; 0x12
    25d6:	01 97       	sbiw	r24, 0x01	; 1
    25d8:	f1 f7       	brne	.-4      	; 0x25d6 <LCD_refresh+0x1a2>
    25da:	9a 8b       	std	Y+18, r25	; 0x12
    25dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25de:	8b 89       	ldd	r24, Y+19	; 0x13
    25e0:	9c 89       	ldd	r25, Y+20	; 0x14
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	9c 8b       	std	Y+20, r25	; 0x14
    25e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e8:	8b 89       	ldd	r24, Y+19	; 0x13
    25ea:	9c 89       	ldd	r25, Y+20	; 0x14
    25ec:	00 97       	sbiw	r24, 0x00	; 0
    25ee:	69 f7       	brne	.-38     	; 0x25ca <LCD_refresh+0x196>
    25f0:	14 c0       	rjmp	.+40     	; 0x261a <LCD_refresh+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f2:	6d 89       	ldd	r22, Y+21	; 0x15
    25f4:	7e 89       	ldd	r23, Y+22	; 0x16
    25f6:	8f 89       	ldd	r24, Y+23	; 0x17
    25f8:	98 8d       	ldd	r25, Y+24	; 0x18
    25fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fe:	dc 01       	movw	r26, r24
    2600:	cb 01       	movw	r24, r22
    2602:	9c 8b       	std	Y+20, r25	; 0x14
    2604:	8b 8b       	std	Y+19, r24	; 0x13
    2606:	8b 89       	ldd	r24, Y+19	; 0x13
    2608:	9c 89       	ldd	r25, Y+20	; 0x14
    260a:	98 8b       	std	Y+16, r25	; 0x10
    260c:	8f 87       	std	Y+15, r24	; 0x0f
    260e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2610:	98 89       	ldd	r25, Y+16	; 0x10
    2612:	01 97       	sbiw	r24, 0x01	; 1
    2614:	f1 f7       	brne	.-4      	; 0x2612 <LCD_refresh+0x1de>
    2616:	98 8b       	std	Y+16, r25	; 0x10
    2618:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,1);
    261a:	83 e4       	ldi	r24, 0x43	; 67
    261c:	62 e0       	ldi	r22, 0x02	; 2
    261e:	41 e0       	ldi	r20, 0x01	; 1
    2620:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_write_PIN>
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	a0 e8       	ldi	r26, 0x80	; 128
    262a:	bf e3       	ldi	r27, 0x3F	; 63
    262c:	8b 87       	std	Y+11, r24	; 0x0b
    262e:	9c 87       	std	Y+12, r25	; 0x0c
    2630:	ad 87       	std	Y+13, r26	; 0x0d
    2632:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2634:	6b 85       	ldd	r22, Y+11	; 0x0b
    2636:	7c 85       	ldd	r23, Y+12	; 0x0c
    2638:	8d 85       	ldd	r24, Y+13	; 0x0d
    263a:	9e 85       	ldd	r25, Y+14	; 0x0e
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	4a e7       	ldi	r20, 0x7A	; 122
    2642:	53 e4       	ldi	r21, 0x43	; 67
    2644:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	8f 83       	std	Y+7, r24	; 0x07
    264e:	98 87       	std	Y+8, r25	; 0x08
    2650:	a9 87       	std	Y+9, r26	; 0x09
    2652:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2654:	6f 81       	ldd	r22, Y+7	; 0x07
    2656:	78 85       	ldd	r23, Y+8	; 0x08
    2658:	89 85       	ldd	r24, Y+9	; 0x09
    265a:	9a 85       	ldd	r25, Y+10	; 0x0a
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	40 e8       	ldi	r20, 0x80	; 128
    2662:	5f e3       	ldi	r21, 0x3F	; 63
    2664:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2668:	88 23       	and	r24, r24
    266a:	2c f4       	brge	.+10     	; 0x2676 <LCD_refresh+0x242>
		__ticks = 1;
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	9e 83       	std	Y+6, r25	; 0x06
    2672:	8d 83       	std	Y+5, r24	; 0x05
    2674:	3f c0       	rjmp	.+126    	; 0x26f4 <LCD_refresh+0x2c0>
	else if (__tmp > 65535)
    2676:	6f 81       	ldd	r22, Y+7	; 0x07
    2678:	78 85       	ldd	r23, Y+8	; 0x08
    267a:	89 85       	ldd	r24, Y+9	; 0x09
    267c:	9a 85       	ldd	r25, Y+10	; 0x0a
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	3f ef       	ldi	r19, 0xFF	; 255
    2682:	4f e7       	ldi	r20, 0x7F	; 127
    2684:	57 e4       	ldi	r21, 0x47	; 71
    2686:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    268a:	18 16       	cp	r1, r24
    268c:	4c f5       	brge	.+82     	; 0x26e0 <LCD_refresh+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    268e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2690:	7c 85       	ldd	r23, Y+12	; 0x0c
    2692:	8d 85       	ldd	r24, Y+13	; 0x0d
    2694:	9e 85       	ldd	r25, Y+14	; 0x0e
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	40 e2       	ldi	r20, 0x20	; 32
    269c:	51 e4       	ldi	r21, 0x41	; 65
    269e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	bc 01       	movw	r22, r24
    26a8:	cd 01       	movw	r24, r26
    26aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	9e 83       	std	Y+6, r25	; 0x06
    26b4:	8d 83       	std	Y+5, r24	; 0x05
    26b6:	0f c0       	rjmp	.+30     	; 0x26d6 <LCD_refresh+0x2a2>
    26b8:	89 e1       	ldi	r24, 0x19	; 25
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	9c 83       	std	Y+4, r25	; 0x04
    26be:	8b 83       	std	Y+3, r24	; 0x03
    26c0:	8b 81       	ldd	r24, Y+3	; 0x03
    26c2:	9c 81       	ldd	r25, Y+4	; 0x04
    26c4:	01 97       	sbiw	r24, 0x01	; 1
    26c6:	f1 f7       	brne	.-4      	; 0x26c4 <LCD_refresh+0x290>
    26c8:	9c 83       	std	Y+4, r25	; 0x04
    26ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26cc:	8d 81       	ldd	r24, Y+5	; 0x05
    26ce:	9e 81       	ldd	r25, Y+6	; 0x06
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	9e 83       	std	Y+6, r25	; 0x06
    26d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26d6:	8d 81       	ldd	r24, Y+5	; 0x05
    26d8:	9e 81       	ldd	r25, Y+6	; 0x06
    26da:	00 97       	sbiw	r24, 0x00	; 0
    26dc:	69 f7       	brne	.-38     	; 0x26b8 <LCD_refresh+0x284>
    26de:	14 c0       	rjmp	.+40     	; 0x2708 <LCD_refresh+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e0:	6f 81       	ldd	r22, Y+7	; 0x07
    26e2:	78 85       	ldd	r23, Y+8	; 0x08
    26e4:	89 85       	ldd	r24, Y+9	; 0x09
    26e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	9e 83       	std	Y+6, r25	; 0x06
    26f2:	8d 83       	std	Y+5, r24	; 0x05
    26f4:	8d 81       	ldd	r24, Y+5	; 0x05
    26f6:	9e 81       	ldd	r25, Y+6	; 0x06
    26f8:	9a 83       	std	Y+2, r25	; 0x02
    26fa:	89 83       	std	Y+1, r24	; 0x01
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <LCD_refresh+0x2cc>
    2704:	9a 83       	std	Y+2, r25	; 0x02
    2706:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2708:	aa 96       	adiw	r28, 0x2a	; 42
    270a:	0f b6       	in	r0, 0x3f	; 63
    270c:	f8 94       	cli
    270e:	de bf       	out	0x3e, r29	; 62
    2710:	0f be       	out	0x3f, r0	; 63
    2712:	cd bf       	out	0x3d, r28	; 61
    2714:	cf 91       	pop	r28
    2716:	df 91       	pop	r29
    2718:	08 95       	ret

0000271a <LCD_Command>:
void LCD_Command(uint8 cmd)
{
    271a:	df 93       	push	r29
    271c:	cf 93       	push	r28
    271e:	cd b7       	in	r28, 0x3d	; 61
    2720:	de b7       	in	r29, 0x3e	; 62
    2722:	e9 97       	sbiw	r28, 0x39	; 57
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	de bf       	out	0x3e, r29	; 62
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	cd bf       	out	0x3d, r28	; 61
    272e:	89 af       	std	Y+57, r24	; 0x39
	DIO_write_PIN(LCD_ctrl_port,RS,0);
    2730:	83 e4       	ldi	r24, 0x43	; 67
    2732:	60 e0       	ldi	r22, 0x00	; 0
    2734:	40 e0       	ldi	r20, 0x00	; 0
    2736:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_write_PIN>
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	a0 e8       	ldi	r26, 0x80	; 128
    2740:	bf e3       	ldi	r27, 0x3F	; 63
    2742:	8d ab       	std	Y+53, r24	; 0x35
    2744:	9e ab       	std	Y+54, r25	; 0x36
    2746:	af ab       	std	Y+55, r26	; 0x37
    2748:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274a:	6d a9       	ldd	r22, Y+53	; 0x35
    274c:	7e a9       	ldd	r23, Y+54	; 0x36
    274e:	8f a9       	ldd	r24, Y+55	; 0x37
    2750:	98 ad       	ldd	r25, Y+56	; 0x38
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	4a e7       	ldi	r20, 0x7A	; 122
    2758:	53 e4       	ldi	r21, 0x43	; 67
    275a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	89 ab       	std	Y+49, r24	; 0x31
    2764:	9a ab       	std	Y+50, r25	; 0x32
    2766:	ab ab       	std	Y+51, r26	; 0x33
    2768:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    276a:	69 a9       	ldd	r22, Y+49	; 0x31
    276c:	7a a9       	ldd	r23, Y+50	; 0x32
    276e:	8b a9       	ldd	r24, Y+51	; 0x33
    2770:	9c a9       	ldd	r25, Y+52	; 0x34
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	40 e8       	ldi	r20, 0x80	; 128
    2778:	5f e3       	ldi	r21, 0x3F	; 63
    277a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    277e:	88 23       	and	r24, r24
    2780:	2c f4       	brge	.+10     	; 0x278c <LCD_Command+0x72>
		__ticks = 1;
    2782:	81 e0       	ldi	r24, 0x01	; 1
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	98 ab       	std	Y+48, r25	; 0x30
    2788:	8f a7       	std	Y+47, r24	; 0x2f
    278a:	3f c0       	rjmp	.+126    	; 0x280a <LCD_Command+0xf0>
	else if (__tmp > 65535)
    278c:	69 a9       	ldd	r22, Y+49	; 0x31
    278e:	7a a9       	ldd	r23, Y+50	; 0x32
    2790:	8b a9       	ldd	r24, Y+51	; 0x33
    2792:	9c a9       	ldd	r25, Y+52	; 0x34
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	3f ef       	ldi	r19, 0xFF	; 255
    2798:	4f e7       	ldi	r20, 0x7F	; 127
    279a:	57 e4       	ldi	r21, 0x47	; 71
    279c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27a0:	18 16       	cp	r1, r24
    27a2:	4c f5       	brge	.+82     	; 0x27f6 <LCD_Command+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a4:	6d a9       	ldd	r22, Y+53	; 0x35
    27a6:	7e a9       	ldd	r23, Y+54	; 0x36
    27a8:	8f a9       	ldd	r24, Y+55	; 0x37
    27aa:	98 ad       	ldd	r25, Y+56	; 0x38
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e2       	ldi	r20, 0x20	; 32
    27b2:	51 e4       	ldi	r21, 0x41	; 65
    27b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	bc 01       	movw	r22, r24
    27be:	cd 01       	movw	r24, r26
    27c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	98 ab       	std	Y+48, r25	; 0x30
    27ca:	8f a7       	std	Y+47, r24	; 0x2f
    27cc:	0f c0       	rjmp	.+30     	; 0x27ec <LCD_Command+0xd2>
    27ce:	89 e1       	ldi	r24, 0x19	; 25
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	9e a7       	std	Y+46, r25	; 0x2e
    27d4:	8d a7       	std	Y+45, r24	; 0x2d
    27d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    27d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    27da:	01 97       	sbiw	r24, 0x01	; 1
    27dc:	f1 f7       	brne	.-4      	; 0x27da <LCD_Command+0xc0>
    27de:	9e a7       	std	Y+46, r25	; 0x2e
    27e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    27e4:	98 a9       	ldd	r25, Y+48	; 0x30
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	98 ab       	std	Y+48, r25	; 0x30
    27ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    27ee:	98 a9       	ldd	r25, Y+48	; 0x30
    27f0:	00 97       	sbiw	r24, 0x00	; 0
    27f2:	69 f7       	brne	.-38     	; 0x27ce <LCD_Command+0xb4>
    27f4:	14 c0       	rjmp	.+40     	; 0x281e <LCD_Command+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f6:	69 a9       	ldd	r22, Y+49	; 0x31
    27f8:	7a a9       	ldd	r23, Y+50	; 0x32
    27fa:	8b a9       	ldd	r24, Y+51	; 0x33
    27fc:	9c a9       	ldd	r25, Y+52	; 0x34
    27fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	98 ab       	std	Y+48, r25	; 0x30
    2808:	8f a7       	std	Y+47, r24	; 0x2f
    280a:	8f a5       	ldd	r24, Y+47	; 0x2f
    280c:	98 a9       	ldd	r25, Y+48	; 0x30
    280e:	9c a7       	std	Y+44, r25	; 0x2c
    2810:	8b a7       	std	Y+43, r24	; 0x2b
    2812:	8b a5       	ldd	r24, Y+43	; 0x2b
    2814:	9c a5       	ldd	r25, Y+44	; 0x2c
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	f1 f7       	brne	.-4      	; 0x2816 <LCD_Command+0xfc>
    281a:	9c a7       	std	Y+44, r25	; 0x2c
    281c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,1);
    281e:	83 e4       	ldi	r24, 0x43	; 67
    2820:	62 e0       	ldi	r22, 0x02	; 2
    2822:	41 e0       	ldi	r20, 0x01	; 1
    2824:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_write_PIN>
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	a0 e8       	ldi	r26, 0x80	; 128
    282e:	bf e3       	ldi	r27, 0x3F	; 63
    2830:	8f a3       	std	Y+39, r24	; 0x27
    2832:	98 a7       	std	Y+40, r25	; 0x28
    2834:	a9 a7       	std	Y+41, r26	; 0x29
    2836:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2838:	6f a1       	ldd	r22, Y+39	; 0x27
    283a:	78 a5       	ldd	r23, Y+40	; 0x28
    283c:	89 a5       	ldd	r24, Y+41	; 0x29
    283e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	4a e7       	ldi	r20, 0x7A	; 122
    2846:	53 e4       	ldi	r21, 0x43	; 67
    2848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	8b a3       	std	Y+35, r24	; 0x23
    2852:	9c a3       	std	Y+36, r25	; 0x24
    2854:	ad a3       	std	Y+37, r26	; 0x25
    2856:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2858:	6b a1       	ldd	r22, Y+35	; 0x23
    285a:	7c a1       	ldd	r23, Y+36	; 0x24
    285c:	8d a1       	ldd	r24, Y+37	; 0x25
    285e:	9e a1       	ldd	r25, Y+38	; 0x26
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e8       	ldi	r20, 0x80	; 128
    2866:	5f e3       	ldi	r21, 0x3F	; 63
    2868:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    286c:	88 23       	and	r24, r24
    286e:	2c f4       	brge	.+10     	; 0x287a <LCD_Command+0x160>
		__ticks = 1;
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	9a a3       	std	Y+34, r25	; 0x22
    2876:	89 a3       	std	Y+33, r24	; 0x21
    2878:	3f c0       	rjmp	.+126    	; 0x28f8 <LCD_Command+0x1de>
	else if (__tmp > 65535)
    287a:	6b a1       	ldd	r22, Y+35	; 0x23
    287c:	7c a1       	ldd	r23, Y+36	; 0x24
    287e:	8d a1       	ldd	r24, Y+37	; 0x25
    2880:	9e a1       	ldd	r25, Y+38	; 0x26
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	3f ef       	ldi	r19, 0xFF	; 255
    2886:	4f e7       	ldi	r20, 0x7F	; 127
    2888:	57 e4       	ldi	r21, 0x47	; 71
    288a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    288e:	18 16       	cp	r1, r24
    2890:	4c f5       	brge	.+82     	; 0x28e4 <LCD_Command+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2892:	6f a1       	ldd	r22, Y+39	; 0x27
    2894:	78 a5       	ldd	r23, Y+40	; 0x28
    2896:	89 a5       	ldd	r24, Y+41	; 0x29
    2898:	9a a5       	ldd	r25, Y+42	; 0x2a
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	40 e2       	ldi	r20, 0x20	; 32
    28a0:	51 e4       	ldi	r21, 0x41	; 65
    28a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	bc 01       	movw	r22, r24
    28ac:	cd 01       	movw	r24, r26
    28ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	9a a3       	std	Y+34, r25	; 0x22
    28b8:	89 a3       	std	Y+33, r24	; 0x21
    28ba:	0f c0       	rjmp	.+30     	; 0x28da <LCD_Command+0x1c0>
    28bc:	89 e1       	ldi	r24, 0x19	; 25
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	98 a3       	std	Y+32, r25	; 0x20
    28c2:	8f 8f       	std	Y+31, r24	; 0x1f
    28c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28c6:	98 a1       	ldd	r25, Y+32	; 0x20
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <LCD_Command+0x1ae>
    28cc:	98 a3       	std	Y+32, r25	; 0x20
    28ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d0:	89 a1       	ldd	r24, Y+33	; 0x21
    28d2:	9a a1       	ldd	r25, Y+34	; 0x22
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	9a a3       	std	Y+34, r25	; 0x22
    28d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28da:	89 a1       	ldd	r24, Y+33	; 0x21
    28dc:	9a a1       	ldd	r25, Y+34	; 0x22
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	69 f7       	brne	.-38     	; 0x28bc <LCD_Command+0x1a2>
    28e2:	14 c0       	rjmp	.+40     	; 0x290c <LCD_Command+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e4:	6b a1       	ldd	r22, Y+35	; 0x23
    28e6:	7c a1       	ldd	r23, Y+36	; 0x24
    28e8:	8d a1       	ldd	r24, Y+37	; 0x25
    28ea:	9e a1       	ldd	r25, Y+38	; 0x26
    28ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	9a a3       	std	Y+34, r25	; 0x22
    28f6:	89 a3       	std	Y+33, r24	; 0x21
    28f8:	89 a1       	ldd	r24, Y+33	; 0x21
    28fa:	9a a1       	ldd	r25, Y+34	; 0x22
    28fc:	9e 8f       	std	Y+30, r25	; 0x1e
    28fe:	8d 8f       	std	Y+29, r24	; 0x1d
    2900:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2902:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <LCD_Command+0x1ea>
    2908:	9e 8f       	std	Y+30, r25	; 0x1e
    290a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_write_high_nibble(LCD_data_port,cmd>>4);
    290c:	89 ad       	ldd	r24, Y+57	; 0x39
    290e:	98 2f       	mov	r25, r24
    2910:	92 95       	swap	r25
    2912:	9f 70       	andi	r25, 0x0F	; 15
    2914:	84 e4       	ldi	r24, 0x44	; 68
    2916:	69 2f       	mov	r22, r25
    2918:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <DIO_write_high_nibble>
	LCD_refresh();
    291c:	0e 94 1a 12 	call	0x2434	; 0x2434 <LCD_refresh>
	DIO_write_high_nibble(LCD_data_port,cmd);
    2920:	84 e4       	ldi	r24, 0x44	; 68
    2922:	69 ad       	ldd	r22, Y+57	; 0x39
    2924:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <DIO_write_high_nibble>
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	a0 e8       	ldi	r26, 0x80	; 128
    292e:	bf e3       	ldi	r27, 0x3F	; 63
    2930:	89 8f       	std	Y+25, r24	; 0x19
    2932:	9a 8f       	std	Y+26, r25	; 0x1a
    2934:	ab 8f       	std	Y+27, r26	; 0x1b
    2936:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2938:	69 8d       	ldd	r22, Y+25	; 0x19
    293a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    293c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    293e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	4a e7       	ldi	r20, 0x7A	; 122
    2946:	53 e4       	ldi	r21, 0x43	; 67
    2948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	8d 8b       	std	Y+21, r24	; 0x15
    2952:	9e 8b       	std	Y+22, r25	; 0x16
    2954:	af 8b       	std	Y+23, r26	; 0x17
    2956:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2958:	6d 89       	ldd	r22, Y+21	; 0x15
    295a:	7e 89       	ldd	r23, Y+22	; 0x16
    295c:	8f 89       	ldd	r24, Y+23	; 0x17
    295e:	98 8d       	ldd	r25, Y+24	; 0x18
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	40 e8       	ldi	r20, 0x80	; 128
    2966:	5f e3       	ldi	r21, 0x3F	; 63
    2968:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    296c:	88 23       	and	r24, r24
    296e:	2c f4       	brge	.+10     	; 0x297a <LCD_Command+0x260>
		__ticks = 1;
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	9c 8b       	std	Y+20, r25	; 0x14
    2976:	8b 8b       	std	Y+19, r24	; 0x13
    2978:	3f c0       	rjmp	.+126    	; 0x29f8 <LCD_Command+0x2de>
	else if (__tmp > 65535)
    297a:	6d 89       	ldd	r22, Y+21	; 0x15
    297c:	7e 89       	ldd	r23, Y+22	; 0x16
    297e:	8f 89       	ldd	r24, Y+23	; 0x17
    2980:	98 8d       	ldd	r25, Y+24	; 0x18
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	3f ef       	ldi	r19, 0xFF	; 255
    2986:	4f e7       	ldi	r20, 0x7F	; 127
    2988:	57 e4       	ldi	r21, 0x47	; 71
    298a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    298e:	18 16       	cp	r1, r24
    2990:	4c f5       	brge	.+82     	; 0x29e4 <LCD_Command+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2992:	69 8d       	ldd	r22, Y+25	; 0x19
    2994:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2996:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2998:	9c 8d       	ldd	r25, Y+28	; 0x1c
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	40 e2       	ldi	r20, 0x20	; 32
    29a0:	51 e4       	ldi	r21, 0x41	; 65
    29a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	bc 01       	movw	r22, r24
    29ac:	cd 01       	movw	r24, r26
    29ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	9c 8b       	std	Y+20, r25	; 0x14
    29b8:	8b 8b       	std	Y+19, r24	; 0x13
    29ba:	0f c0       	rjmp	.+30     	; 0x29da <LCD_Command+0x2c0>
    29bc:	89 e1       	ldi	r24, 0x19	; 25
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	9a 8b       	std	Y+18, r25	; 0x12
    29c2:	89 8b       	std	Y+17, r24	; 0x11
    29c4:	89 89       	ldd	r24, Y+17	; 0x11
    29c6:	9a 89       	ldd	r25, Y+18	; 0x12
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	f1 f7       	brne	.-4      	; 0x29c8 <LCD_Command+0x2ae>
    29cc:	9a 8b       	std	Y+18, r25	; 0x12
    29ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d0:	8b 89       	ldd	r24, Y+19	; 0x13
    29d2:	9c 89       	ldd	r25, Y+20	; 0x14
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	9c 8b       	std	Y+20, r25	; 0x14
    29d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29da:	8b 89       	ldd	r24, Y+19	; 0x13
    29dc:	9c 89       	ldd	r25, Y+20	; 0x14
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	69 f7       	brne	.-38     	; 0x29bc <LCD_Command+0x2a2>
    29e2:	14 c0       	rjmp	.+40     	; 0x2a0c <LCD_Command+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e4:	6d 89       	ldd	r22, Y+21	; 0x15
    29e6:	7e 89       	ldd	r23, Y+22	; 0x16
    29e8:	8f 89       	ldd	r24, Y+23	; 0x17
    29ea:	98 8d       	ldd	r25, Y+24	; 0x18
    29ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	9c 8b       	std	Y+20, r25	; 0x14
    29f6:	8b 8b       	std	Y+19, r24	; 0x13
    29f8:	8b 89       	ldd	r24, Y+19	; 0x13
    29fa:	9c 89       	ldd	r25, Y+20	; 0x14
    29fc:	98 8b       	std	Y+16, r25	; 0x10
    29fe:	8f 87       	std	Y+15, r24	; 0x0f
    2a00:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a02:	98 89       	ldd	r25, Y+16	; 0x10
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	f1 f7       	brne	.-4      	; 0x2a04 <LCD_Command+0x2ea>
    2a08:	98 8b       	std	Y+16, r25	; 0x10
    2a0a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,0);
    2a0c:	83 e4       	ldi	r24, 0x43	; 67
    2a0e:	62 e0       	ldi	r22, 0x02	; 2
    2a10:	40 e0       	ldi	r20, 0x00	; 0
    2a12:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_write_PIN>
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	a0 e8       	ldi	r26, 0x80	; 128
    2a1c:	bf e3       	ldi	r27, 0x3F	; 63
    2a1e:	8b 87       	std	Y+11, r24	; 0x0b
    2a20:	9c 87       	std	Y+12, r25	; 0x0c
    2a22:	ad 87       	std	Y+13, r26	; 0x0d
    2a24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a26:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a28:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	4a e7       	ldi	r20, 0x7A	; 122
    2a34:	53 e4       	ldi	r21, 0x43	; 67
    2a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	8f 83       	std	Y+7, r24	; 0x07
    2a40:	98 87       	std	Y+8, r25	; 0x08
    2a42:	a9 87       	std	Y+9, r26	; 0x09
    2a44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a46:	6f 81       	ldd	r22, Y+7	; 0x07
    2a48:	78 85       	ldd	r23, Y+8	; 0x08
    2a4a:	89 85       	ldd	r24, Y+9	; 0x09
    2a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	40 e8       	ldi	r20, 0x80	; 128
    2a54:	5f e3       	ldi	r21, 0x3F	; 63
    2a56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a5a:	88 23       	and	r24, r24
    2a5c:	2c f4       	brge	.+10     	; 0x2a68 <LCD_Command+0x34e>
		__ticks = 1;
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	9e 83       	std	Y+6, r25	; 0x06
    2a64:	8d 83       	std	Y+5, r24	; 0x05
    2a66:	3f c0       	rjmp	.+126    	; 0x2ae6 <LCD_Command+0x3cc>
	else if (__tmp > 65535)
    2a68:	6f 81       	ldd	r22, Y+7	; 0x07
    2a6a:	78 85       	ldd	r23, Y+8	; 0x08
    2a6c:	89 85       	ldd	r24, Y+9	; 0x09
    2a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	3f ef       	ldi	r19, 0xFF	; 255
    2a74:	4f e7       	ldi	r20, 0x7F	; 127
    2a76:	57 e4       	ldi	r21, 0x47	; 71
    2a78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a7c:	18 16       	cp	r1, r24
    2a7e:	4c f5       	brge	.+82     	; 0x2ad2 <LCD_Command+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a80:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a82:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a86:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	40 e2       	ldi	r20, 0x20	; 32
    2a8e:	51 e4       	ldi	r21, 0x41	; 65
    2a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	bc 01       	movw	r22, r24
    2a9a:	cd 01       	movw	r24, r26
    2a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	9e 83       	std	Y+6, r25	; 0x06
    2aa6:	8d 83       	std	Y+5, r24	; 0x05
    2aa8:	0f c0       	rjmp	.+30     	; 0x2ac8 <LCD_Command+0x3ae>
    2aaa:	89 e1       	ldi	r24, 0x19	; 25
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	9c 83       	std	Y+4, r25	; 0x04
    2ab0:	8b 83       	std	Y+3, r24	; 0x03
    2ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab6:	01 97       	sbiw	r24, 0x01	; 1
    2ab8:	f1 f7       	brne	.-4      	; 0x2ab6 <LCD_Command+0x39c>
    2aba:	9c 83       	std	Y+4, r25	; 0x04
    2abc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2abe:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	9e 83       	std	Y+6, r25	; 0x06
    2ac6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aca:	9e 81       	ldd	r25, Y+6	; 0x06
    2acc:	00 97       	sbiw	r24, 0x00	; 0
    2ace:	69 f7       	brne	.-38     	; 0x2aaa <LCD_Command+0x390>
    2ad0:	14 c0       	rjmp	.+40     	; 0x2afa <LCD_Command+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad4:	78 85       	ldd	r23, Y+8	; 0x08
    2ad6:	89 85       	ldd	r24, Y+9	; 0x09
    2ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	9e 83       	std	Y+6, r25	; 0x06
    2ae4:	8d 83       	std	Y+5, r24	; 0x05
    2ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aea:	9a 83       	std	Y+2, r25	; 0x02
    2aec:	89 83       	std	Y+1, r24	; 0x01
    2aee:	89 81       	ldd	r24, Y+1	; 0x01
    2af0:	9a 81       	ldd	r25, Y+2	; 0x02
    2af2:	01 97       	sbiw	r24, 0x01	; 1
    2af4:	f1 f7       	brne	.-4      	; 0x2af2 <LCD_Command+0x3d8>
    2af6:	9a 83       	std	Y+2, r25	; 0x02
    2af8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2afa:	e9 96       	adiw	r28, 0x39	; 57
    2afc:	0f b6       	in	r0, 0x3f	; 63
    2afe:	f8 94       	cli
    2b00:	de bf       	out	0x3e, r29	; 62
    2b02:	0f be       	out	0x3f, r0	; 63
    2b04:	cd bf       	out	0x3d, r28	; 61
    2b06:	cf 91       	pop	r28
    2b08:	df 91       	pop	r29
    2b0a:	08 95       	ret

00002b0c <LCD_init>:
void LCD_init(void)
{
    2b0c:	df 93       	push	r29
    2b0e:	cf 93       	push	r28
    2b10:	cd b7       	in	r28, 0x3d	; 61
    2b12:	de b7       	in	r29, 0x3e	; 62
    2b14:	2e 97       	sbiw	r28, 0x0e	; 14
    2b16:	0f b6       	in	r0, 0x3f	; 63
    2b18:	f8 94       	cli
    2b1a:	de bf       	out	0x3e, r29	; 62
    2b1c:	0f be       	out	0x3f, r0	; 63
    2b1e:	cd bf       	out	0x3d, r28	; 61
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	a8 e4       	ldi	r26, 0x48	; 72
    2b26:	b3 e4       	ldi	r27, 0x43	; 67
    2b28:	8b 87       	std	Y+11, r24	; 0x0b
    2b2a:	9c 87       	std	Y+12, r25	; 0x0c
    2b2c:	ad 87       	std	Y+13, r26	; 0x0d
    2b2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b30:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b32:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	4a e7       	ldi	r20, 0x7A	; 122
    2b3e:	53 e4       	ldi	r21, 0x43	; 67
    2b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	8f 83       	std	Y+7, r24	; 0x07
    2b4a:	98 87       	std	Y+8, r25	; 0x08
    2b4c:	a9 87       	std	Y+9, r26	; 0x09
    2b4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b50:	6f 81       	ldd	r22, Y+7	; 0x07
    2b52:	78 85       	ldd	r23, Y+8	; 0x08
    2b54:	89 85       	ldd	r24, Y+9	; 0x09
    2b56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	40 e8       	ldi	r20, 0x80	; 128
    2b5e:	5f e3       	ldi	r21, 0x3F	; 63
    2b60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b64:	88 23       	and	r24, r24
    2b66:	2c f4       	brge	.+10     	; 0x2b72 <LCD_init+0x66>
		__ticks = 1;
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	9e 83       	std	Y+6, r25	; 0x06
    2b6e:	8d 83       	std	Y+5, r24	; 0x05
    2b70:	3f c0       	rjmp	.+126    	; 0x2bf0 <LCD_init+0xe4>
	else if (__tmp > 65535)
    2b72:	6f 81       	ldd	r22, Y+7	; 0x07
    2b74:	78 85       	ldd	r23, Y+8	; 0x08
    2b76:	89 85       	ldd	r24, Y+9	; 0x09
    2b78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	3f ef       	ldi	r19, 0xFF	; 255
    2b7e:	4f e7       	ldi	r20, 0x7F	; 127
    2b80:	57 e4       	ldi	r21, 0x47	; 71
    2b82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b86:	18 16       	cp	r1, r24
    2b88:	4c f5       	brge	.+82     	; 0x2bdc <LCD_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e2       	ldi	r20, 0x20	; 32
    2b98:	51 e4       	ldi	r21, 0x41	; 65
    2b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	bc 01       	movw	r22, r24
    2ba4:	cd 01       	movw	r24, r26
    2ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	9e 83       	std	Y+6, r25	; 0x06
    2bb0:	8d 83       	std	Y+5, r24	; 0x05
    2bb2:	0f c0       	rjmp	.+30     	; 0x2bd2 <LCD_init+0xc6>
    2bb4:	89 e1       	ldi	r24, 0x19	; 25
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	9c 83       	std	Y+4, r25	; 0x04
    2bba:	8b 83       	std	Y+3, r24	; 0x03
    2bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc0:	01 97       	sbiw	r24, 0x01	; 1
    2bc2:	f1 f7       	brne	.-4      	; 0x2bc0 <LCD_init+0xb4>
    2bc4:	9c 83       	std	Y+4, r25	; 0x04
    2bc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bca:	9e 81       	ldd	r25, Y+6	; 0x06
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	9e 83       	std	Y+6, r25	; 0x06
    2bd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd6:	00 97       	sbiw	r24, 0x00	; 0
    2bd8:	69 f7       	brne	.-38     	; 0x2bb4 <LCD_init+0xa8>
    2bda:	14 c0       	rjmp	.+40     	; 0x2c04 <LCD_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bde:	78 85       	ldd	r23, Y+8	; 0x08
    2be0:	89 85       	ldd	r24, Y+9	; 0x09
    2be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	9e 83       	std	Y+6, r25	; 0x06
    2bee:	8d 83       	std	Y+5, r24	; 0x05
    2bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf4:	9a 83       	std	Y+2, r25	; 0x02
    2bf6:	89 83       	std	Y+1, r24	; 0x01
    2bf8:	89 81       	ldd	r24, Y+1	; 0x01
    2bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	f1 f7       	brne	.-4      	; 0x2bfc <LCD_init+0xf0>
    2c00:	9a 83       	std	Y+2, r25	; 0x02
    2c02:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	DIO_setPINDir(LCD_ctrl_port,RS,out);
    2c04:	83 e4       	ldi	r24, 0x43	; 67
    2c06:	60 e0       	ldi	r22, 0x00	; 0
    2c08:	41 e0       	ldi	r20, 0x01	; 1
    2c0a:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_setPINDir>
	DIO_setPINDir(LCD_ctrl_port,RW,out);
    2c0e:	83 e4       	ldi	r24, 0x43	; 67
    2c10:	61 e0       	ldi	r22, 0x01	; 1
    2c12:	41 e0       	ldi	r20, 0x01	; 1
    2c14:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_setPINDir>
	DIO_setPINDir(LCD_ctrl_port,EN,out);
    2c18:	83 e4       	ldi	r24, 0x43	; 67
    2c1a:	62 e0       	ldi	r22, 0x02	; 2
    2c1c:	41 e0       	ldi	r20, 0x01	; 1
    2c1e:	0e 94 f5 08 	call	0x11ea	; 0x11ea <DIO_setPINDir>
	DIO_write_high_nibbleDir(LCD_data_port,out);
    2c22:	84 e4       	ldi	r24, 0x44	; 68
    2c24:	61 e0       	ldi	r22, 0x01	; 1
    2c26:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <DIO_write_high_nibbleDir>
	LCD_Command(LCD_Cursor_reset);
    2c2a:	82 e0       	ldi	r24, 0x02	; 2
    2c2c:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_Command>
	LCD_Command(LCD_4bit_2line);
    2c30:	88 e2       	ldi	r24, 0x28	; 40
    2c32:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_Command>
	LCD_Command(LCD_displayOn_cursorOn);
    2c36:	8e e0       	ldi	r24, 0x0E	; 14
    2c38:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_Command>
	LCD_Command(LCD_clear_cmd);
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_Command>
}
    2c42:	2e 96       	adiw	r28, 0x0e	; 14
    2c44:	0f b6       	in	r0, 0x3f	; 63
    2c46:	f8 94       	cli
    2c48:	de bf       	out	0x3e, r29	; 62
    2c4a:	0f be       	out	0x3f, r0	; 63
    2c4c:	cd bf       	out	0x3d, r28	; 61
    2c4e:	cf 91       	pop	r28
    2c50:	df 91       	pop	r29
    2c52:	08 95       	ret

00002c54 <LCD_displayChar>:

void LCD_displayChar(uint8 data)
{
    2c54:	df 93       	push	r29
    2c56:	cf 93       	push	r28
    2c58:	cd b7       	in	r28, 0x3d	; 61
    2c5a:	de b7       	in	r29, 0x3e	; 62
    2c5c:	e9 97       	sbiw	r28, 0x39	; 57
    2c5e:	0f b6       	in	r0, 0x3f	; 63
    2c60:	f8 94       	cli
    2c62:	de bf       	out	0x3e, r29	; 62
    2c64:	0f be       	out	0x3f, r0	; 63
    2c66:	cd bf       	out	0x3d, r28	; 61
    2c68:	89 af       	std	Y+57, r24	; 0x39
	DIO_write_PIN(LCD_ctrl_port,RS,1);
    2c6a:	83 e4       	ldi	r24, 0x43	; 67
    2c6c:	60 e0       	ldi	r22, 0x00	; 0
    2c6e:	41 e0       	ldi	r20, 0x01	; 1
    2c70:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_write_PIN>
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	a0 e8       	ldi	r26, 0x80	; 128
    2c7a:	bf e3       	ldi	r27, 0x3F	; 63
    2c7c:	8d ab       	std	Y+53, r24	; 0x35
    2c7e:	9e ab       	std	Y+54, r25	; 0x36
    2c80:	af ab       	std	Y+55, r26	; 0x37
    2c82:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c84:	6d a9       	ldd	r22, Y+53	; 0x35
    2c86:	7e a9       	ldd	r23, Y+54	; 0x36
    2c88:	8f a9       	ldd	r24, Y+55	; 0x37
    2c8a:	98 ad       	ldd	r25, Y+56	; 0x38
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	4a e7       	ldi	r20, 0x7A	; 122
    2c92:	53 e4       	ldi	r21, 0x43	; 67
    2c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	89 ab       	std	Y+49, r24	; 0x31
    2c9e:	9a ab       	std	Y+50, r25	; 0x32
    2ca0:	ab ab       	std	Y+51, r26	; 0x33
    2ca2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ca4:	69 a9       	ldd	r22, Y+49	; 0x31
    2ca6:	7a a9       	ldd	r23, Y+50	; 0x32
    2ca8:	8b a9       	ldd	r24, Y+51	; 0x33
    2caa:	9c a9       	ldd	r25, Y+52	; 0x34
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	40 e8       	ldi	r20, 0x80	; 128
    2cb2:	5f e3       	ldi	r21, 0x3F	; 63
    2cb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cb8:	88 23       	and	r24, r24
    2cba:	2c f4       	brge	.+10     	; 0x2cc6 <LCD_displayChar+0x72>
		__ticks = 1;
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	98 ab       	std	Y+48, r25	; 0x30
    2cc2:	8f a7       	std	Y+47, r24	; 0x2f
    2cc4:	3f c0       	rjmp	.+126    	; 0x2d44 <LCD_displayChar+0xf0>
	else if (__tmp > 65535)
    2cc6:	69 a9       	ldd	r22, Y+49	; 0x31
    2cc8:	7a a9       	ldd	r23, Y+50	; 0x32
    2cca:	8b a9       	ldd	r24, Y+51	; 0x33
    2ccc:	9c a9       	ldd	r25, Y+52	; 0x34
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	3f ef       	ldi	r19, 0xFF	; 255
    2cd2:	4f e7       	ldi	r20, 0x7F	; 127
    2cd4:	57 e4       	ldi	r21, 0x47	; 71
    2cd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cda:	18 16       	cp	r1, r24
    2cdc:	4c f5       	brge	.+82     	; 0x2d30 <LCD_displayChar+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cde:	6d a9       	ldd	r22, Y+53	; 0x35
    2ce0:	7e a9       	ldd	r23, Y+54	; 0x36
    2ce2:	8f a9       	ldd	r24, Y+55	; 0x37
    2ce4:	98 ad       	ldd	r25, Y+56	; 0x38
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	40 e2       	ldi	r20, 0x20	; 32
    2cec:	51 e4       	ldi	r21, 0x41	; 65
    2cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	bc 01       	movw	r22, r24
    2cf8:	cd 01       	movw	r24, r26
    2cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	98 ab       	std	Y+48, r25	; 0x30
    2d04:	8f a7       	std	Y+47, r24	; 0x2f
    2d06:	0f c0       	rjmp	.+30     	; 0x2d26 <LCD_displayChar+0xd2>
    2d08:	89 e1       	ldi	r24, 0x19	; 25
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	9e a7       	std	Y+46, r25	; 0x2e
    2d0e:	8d a7       	std	Y+45, r24	; 0x2d
    2d10:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d12:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d14:	01 97       	sbiw	r24, 0x01	; 1
    2d16:	f1 f7       	brne	.-4      	; 0x2d14 <LCD_displayChar+0xc0>
    2d18:	9e a7       	std	Y+46, r25	; 0x2e
    2d1a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d1e:	98 a9       	ldd	r25, Y+48	; 0x30
    2d20:	01 97       	sbiw	r24, 0x01	; 1
    2d22:	98 ab       	std	Y+48, r25	; 0x30
    2d24:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d26:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d28:	98 a9       	ldd	r25, Y+48	; 0x30
    2d2a:	00 97       	sbiw	r24, 0x00	; 0
    2d2c:	69 f7       	brne	.-38     	; 0x2d08 <LCD_displayChar+0xb4>
    2d2e:	14 c0       	rjmp	.+40     	; 0x2d58 <LCD_displayChar+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d30:	69 a9       	ldd	r22, Y+49	; 0x31
    2d32:	7a a9       	ldd	r23, Y+50	; 0x32
    2d34:	8b a9       	ldd	r24, Y+51	; 0x33
    2d36:	9c a9       	ldd	r25, Y+52	; 0x34
    2d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	98 ab       	std	Y+48, r25	; 0x30
    2d42:	8f a7       	std	Y+47, r24	; 0x2f
    2d44:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d46:	98 a9       	ldd	r25, Y+48	; 0x30
    2d48:	9c a7       	std	Y+44, r25	; 0x2c
    2d4a:	8b a7       	std	Y+43, r24	; 0x2b
    2d4c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d4e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d50:	01 97       	sbiw	r24, 0x01	; 1
    2d52:	f1 f7       	brne	.-4      	; 0x2d50 <LCD_displayChar+0xfc>
    2d54:	9c a7       	std	Y+44, r25	; 0x2c
    2d56:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,1);
    2d58:	83 e4       	ldi	r24, 0x43	; 67
    2d5a:	62 e0       	ldi	r22, 0x02	; 2
    2d5c:	41 e0       	ldi	r20, 0x01	; 1
    2d5e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_write_PIN>
    2d62:	80 e0       	ldi	r24, 0x00	; 0
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	a0 e8       	ldi	r26, 0x80	; 128
    2d68:	bf e3       	ldi	r27, 0x3F	; 63
    2d6a:	8f a3       	std	Y+39, r24	; 0x27
    2d6c:	98 a7       	std	Y+40, r25	; 0x28
    2d6e:	a9 a7       	std	Y+41, r26	; 0x29
    2d70:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d72:	6f a1       	ldd	r22, Y+39	; 0x27
    2d74:	78 a5       	ldd	r23, Y+40	; 0x28
    2d76:	89 a5       	ldd	r24, Y+41	; 0x29
    2d78:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	30 e0       	ldi	r19, 0x00	; 0
    2d7e:	4a e7       	ldi	r20, 0x7A	; 122
    2d80:	53 e4       	ldi	r21, 0x43	; 67
    2d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	8b a3       	std	Y+35, r24	; 0x23
    2d8c:	9c a3       	std	Y+36, r25	; 0x24
    2d8e:	ad a3       	std	Y+37, r26	; 0x25
    2d90:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d92:	6b a1       	ldd	r22, Y+35	; 0x23
    2d94:	7c a1       	ldd	r23, Y+36	; 0x24
    2d96:	8d a1       	ldd	r24, Y+37	; 0x25
    2d98:	9e a1       	ldd	r25, Y+38	; 0x26
    2d9a:	20 e0       	ldi	r18, 0x00	; 0
    2d9c:	30 e0       	ldi	r19, 0x00	; 0
    2d9e:	40 e8       	ldi	r20, 0x80	; 128
    2da0:	5f e3       	ldi	r21, 0x3F	; 63
    2da2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2da6:	88 23       	and	r24, r24
    2da8:	2c f4       	brge	.+10     	; 0x2db4 <LCD_displayChar+0x160>
		__ticks = 1;
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	9a a3       	std	Y+34, r25	; 0x22
    2db0:	89 a3       	std	Y+33, r24	; 0x21
    2db2:	3f c0       	rjmp	.+126    	; 0x2e32 <LCD_displayChar+0x1de>
	else if (__tmp > 65535)
    2db4:	6b a1       	ldd	r22, Y+35	; 0x23
    2db6:	7c a1       	ldd	r23, Y+36	; 0x24
    2db8:	8d a1       	ldd	r24, Y+37	; 0x25
    2dba:	9e a1       	ldd	r25, Y+38	; 0x26
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	3f ef       	ldi	r19, 0xFF	; 255
    2dc0:	4f e7       	ldi	r20, 0x7F	; 127
    2dc2:	57 e4       	ldi	r21, 0x47	; 71
    2dc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dc8:	18 16       	cp	r1, r24
    2dca:	4c f5       	brge	.+82     	; 0x2e1e <LCD_displayChar+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dcc:	6f a1       	ldd	r22, Y+39	; 0x27
    2dce:	78 a5       	ldd	r23, Y+40	; 0x28
    2dd0:	89 a5       	ldd	r24, Y+41	; 0x29
    2dd2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	40 e2       	ldi	r20, 0x20	; 32
    2dda:	51 e4       	ldi	r21, 0x41	; 65
    2ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de0:	dc 01       	movw	r26, r24
    2de2:	cb 01       	movw	r24, r22
    2de4:	bc 01       	movw	r22, r24
    2de6:	cd 01       	movw	r24, r26
    2de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	9a a3       	std	Y+34, r25	; 0x22
    2df2:	89 a3       	std	Y+33, r24	; 0x21
    2df4:	0f c0       	rjmp	.+30     	; 0x2e14 <LCD_displayChar+0x1c0>
    2df6:	89 e1       	ldi	r24, 0x19	; 25
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	98 a3       	std	Y+32, r25	; 0x20
    2dfc:	8f 8f       	std	Y+31, r24	; 0x1f
    2dfe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e00:	98 a1       	ldd	r25, Y+32	; 0x20
    2e02:	01 97       	sbiw	r24, 0x01	; 1
    2e04:	f1 f7       	brne	.-4      	; 0x2e02 <LCD_displayChar+0x1ae>
    2e06:	98 a3       	std	Y+32, r25	; 0x20
    2e08:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e0a:	89 a1       	ldd	r24, Y+33	; 0x21
    2e0c:	9a a1       	ldd	r25, Y+34	; 0x22
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	9a a3       	std	Y+34, r25	; 0x22
    2e12:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e14:	89 a1       	ldd	r24, Y+33	; 0x21
    2e16:	9a a1       	ldd	r25, Y+34	; 0x22
    2e18:	00 97       	sbiw	r24, 0x00	; 0
    2e1a:	69 f7       	brne	.-38     	; 0x2df6 <LCD_displayChar+0x1a2>
    2e1c:	14 c0       	rjmp	.+40     	; 0x2e46 <LCD_displayChar+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e1e:	6b a1       	ldd	r22, Y+35	; 0x23
    2e20:	7c a1       	ldd	r23, Y+36	; 0x24
    2e22:	8d a1       	ldd	r24, Y+37	; 0x25
    2e24:	9e a1       	ldd	r25, Y+38	; 0x26
    2e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	9a a3       	std	Y+34, r25	; 0x22
    2e30:	89 a3       	std	Y+33, r24	; 0x21
    2e32:	89 a1       	ldd	r24, Y+33	; 0x21
    2e34:	9a a1       	ldd	r25, Y+34	; 0x22
    2e36:	9e 8f       	std	Y+30, r25	; 0x1e
    2e38:	8d 8f       	std	Y+29, r24	; 0x1d
    2e3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e3c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e3e:	01 97       	sbiw	r24, 0x01	; 1
    2e40:	f1 f7       	brne	.-4      	; 0x2e3e <LCD_displayChar+0x1ea>
    2e42:	9e 8f       	std	Y+30, r25	; 0x1e
    2e44:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_write_high_nibble(LCD_data_port,HIGH_NIBBLE_OF(data));
    2e46:	89 ad       	ldd	r24, Y+57	; 0x39
    2e48:	98 2f       	mov	r25, r24
    2e4a:	92 95       	swap	r25
    2e4c:	9f 70       	andi	r25, 0x0F	; 15
    2e4e:	84 e4       	ldi	r24, 0x44	; 68
    2e50:	69 2f       	mov	r22, r25
    2e52:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <DIO_write_high_nibble>
	LCD_refresh();
    2e56:	0e 94 1a 12 	call	0x2434	; 0x2434 <LCD_refresh>
	DIO_write_high_nibble(LCD_data_port,data);
    2e5a:	84 e4       	ldi	r24, 0x44	; 68
    2e5c:	69 ad       	ldd	r22, Y+57	; 0x39
    2e5e:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <DIO_write_high_nibble>
    2e62:	80 e0       	ldi	r24, 0x00	; 0
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	a0 e8       	ldi	r26, 0x80	; 128
    2e68:	bf e3       	ldi	r27, 0x3F	; 63
    2e6a:	89 8f       	std	Y+25, r24	; 0x19
    2e6c:	9a 8f       	std	Y+26, r25	; 0x1a
    2e6e:	ab 8f       	std	Y+27, r26	; 0x1b
    2e70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e72:	69 8d       	ldd	r22, Y+25	; 0x19
    2e74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	4a e7       	ldi	r20, 0x7A	; 122
    2e80:	53 e4       	ldi	r21, 0x43	; 67
    2e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e86:	dc 01       	movw	r26, r24
    2e88:	cb 01       	movw	r24, r22
    2e8a:	8d 8b       	std	Y+21, r24	; 0x15
    2e8c:	9e 8b       	std	Y+22, r25	; 0x16
    2e8e:	af 8b       	std	Y+23, r26	; 0x17
    2e90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e92:	6d 89       	ldd	r22, Y+21	; 0x15
    2e94:	7e 89       	ldd	r23, Y+22	; 0x16
    2e96:	8f 89       	ldd	r24, Y+23	; 0x17
    2e98:	98 8d       	ldd	r25, Y+24	; 0x18
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	40 e8       	ldi	r20, 0x80	; 128
    2ea0:	5f e3       	ldi	r21, 0x3F	; 63
    2ea2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ea6:	88 23       	and	r24, r24
    2ea8:	2c f4       	brge	.+10     	; 0x2eb4 <LCD_displayChar+0x260>
		__ticks = 1;
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	90 e0       	ldi	r25, 0x00	; 0
    2eae:	9c 8b       	std	Y+20, r25	; 0x14
    2eb0:	8b 8b       	std	Y+19, r24	; 0x13
    2eb2:	3f c0       	rjmp	.+126    	; 0x2f32 <LCD_displayChar+0x2de>
	else if (__tmp > 65535)
    2eb4:	6d 89       	ldd	r22, Y+21	; 0x15
    2eb6:	7e 89       	ldd	r23, Y+22	; 0x16
    2eb8:	8f 89       	ldd	r24, Y+23	; 0x17
    2eba:	98 8d       	ldd	r25, Y+24	; 0x18
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	3f ef       	ldi	r19, 0xFF	; 255
    2ec0:	4f e7       	ldi	r20, 0x7F	; 127
    2ec2:	57 e4       	ldi	r21, 0x47	; 71
    2ec4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ec8:	18 16       	cp	r1, r24
    2eca:	4c f5       	brge	.+82     	; 0x2f1e <LCD_displayChar+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ecc:	69 8d       	ldd	r22, Y+25	; 0x19
    2ece:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ed0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ed2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	40 e2       	ldi	r20, 0x20	; 32
    2eda:	51 e4       	ldi	r21, 0x41	; 65
    2edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	bc 01       	movw	r22, r24
    2ee6:	cd 01       	movw	r24, r26
    2ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	9c 8b       	std	Y+20, r25	; 0x14
    2ef2:	8b 8b       	std	Y+19, r24	; 0x13
    2ef4:	0f c0       	rjmp	.+30     	; 0x2f14 <LCD_displayChar+0x2c0>
    2ef6:	89 e1       	ldi	r24, 0x19	; 25
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	9a 8b       	std	Y+18, r25	; 0x12
    2efc:	89 8b       	std	Y+17, r24	; 0x11
    2efe:	89 89       	ldd	r24, Y+17	; 0x11
    2f00:	9a 89       	ldd	r25, Y+18	; 0x12
    2f02:	01 97       	sbiw	r24, 0x01	; 1
    2f04:	f1 f7       	brne	.-4      	; 0x2f02 <LCD_displayChar+0x2ae>
    2f06:	9a 8b       	std	Y+18, r25	; 0x12
    2f08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f0e:	01 97       	sbiw	r24, 0x01	; 1
    2f10:	9c 8b       	std	Y+20, r25	; 0x14
    2f12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f14:	8b 89       	ldd	r24, Y+19	; 0x13
    2f16:	9c 89       	ldd	r25, Y+20	; 0x14
    2f18:	00 97       	sbiw	r24, 0x00	; 0
    2f1a:	69 f7       	brne	.-38     	; 0x2ef6 <LCD_displayChar+0x2a2>
    2f1c:	14 c0       	rjmp	.+40     	; 0x2f46 <LCD_displayChar+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2f20:	7e 89       	ldd	r23, Y+22	; 0x16
    2f22:	8f 89       	ldd	r24, Y+23	; 0x17
    2f24:	98 8d       	ldd	r25, Y+24	; 0x18
    2f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	cb 01       	movw	r24, r22
    2f2e:	9c 8b       	std	Y+20, r25	; 0x14
    2f30:	8b 8b       	std	Y+19, r24	; 0x13
    2f32:	8b 89       	ldd	r24, Y+19	; 0x13
    2f34:	9c 89       	ldd	r25, Y+20	; 0x14
    2f36:	98 8b       	std	Y+16, r25	; 0x10
    2f38:	8f 87       	std	Y+15, r24	; 0x0f
    2f3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f3c:	98 89       	ldd	r25, Y+16	; 0x10
    2f3e:	01 97       	sbiw	r24, 0x01	; 1
    2f40:	f1 f7       	brne	.-4      	; 0x2f3e <LCD_displayChar+0x2ea>
    2f42:	98 8b       	std	Y+16, r25	; 0x10
    2f44:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,0);
    2f46:	83 e4       	ldi	r24, 0x43	; 67
    2f48:	62 e0       	ldi	r22, 0x02	; 2
    2f4a:	40 e0       	ldi	r20, 0x00	; 0
    2f4c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <DIO_write_PIN>
    2f50:	80 e0       	ldi	r24, 0x00	; 0
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	a0 e8       	ldi	r26, 0x80	; 128
    2f56:	bf e3       	ldi	r27, 0x3F	; 63
    2f58:	8b 87       	std	Y+11, r24	; 0x0b
    2f5a:	9c 87       	std	Y+12, r25	; 0x0c
    2f5c:	ad 87       	std	Y+13, r26	; 0x0d
    2f5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f60:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f62:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f64:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f66:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	4a e7       	ldi	r20, 0x7A	; 122
    2f6e:	53 e4       	ldi	r21, 0x43	; 67
    2f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	8f 83       	std	Y+7, r24	; 0x07
    2f7a:	98 87       	std	Y+8, r25	; 0x08
    2f7c:	a9 87       	std	Y+9, r26	; 0x09
    2f7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f80:	6f 81       	ldd	r22, Y+7	; 0x07
    2f82:	78 85       	ldd	r23, Y+8	; 0x08
    2f84:	89 85       	ldd	r24, Y+9	; 0x09
    2f86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	40 e8       	ldi	r20, 0x80	; 128
    2f8e:	5f e3       	ldi	r21, 0x3F	; 63
    2f90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f94:	88 23       	and	r24, r24
    2f96:	2c f4       	brge	.+10     	; 0x2fa2 <LCD_displayChar+0x34e>
		__ticks = 1;
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	9e 83       	std	Y+6, r25	; 0x06
    2f9e:	8d 83       	std	Y+5, r24	; 0x05
    2fa0:	3f c0       	rjmp	.+126    	; 0x3020 <LCD_displayChar+0x3cc>
	else if (__tmp > 65535)
    2fa2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa4:	78 85       	ldd	r23, Y+8	; 0x08
    2fa6:	89 85       	ldd	r24, Y+9	; 0x09
    2fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	3f ef       	ldi	r19, 0xFF	; 255
    2fae:	4f e7       	ldi	r20, 0x7F	; 127
    2fb0:	57 e4       	ldi	r21, 0x47	; 71
    2fb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fb6:	18 16       	cp	r1, r24
    2fb8:	4c f5       	brge	.+82     	; 0x300c <LCD_displayChar+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fba:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	40 e2       	ldi	r20, 0x20	; 32
    2fc8:	51 e4       	ldi	r21, 0x41	; 65
    2fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	bc 01       	movw	r22, r24
    2fd4:	cd 01       	movw	r24, r26
    2fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fda:	dc 01       	movw	r26, r24
    2fdc:	cb 01       	movw	r24, r22
    2fde:	9e 83       	std	Y+6, r25	; 0x06
    2fe0:	8d 83       	std	Y+5, r24	; 0x05
    2fe2:	0f c0       	rjmp	.+30     	; 0x3002 <LCD_displayChar+0x3ae>
    2fe4:	89 e1       	ldi	r24, 0x19	; 25
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	9c 83       	std	Y+4, r25	; 0x04
    2fea:	8b 83       	std	Y+3, r24	; 0x03
    2fec:	8b 81       	ldd	r24, Y+3	; 0x03
    2fee:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff0:	01 97       	sbiw	r24, 0x01	; 1
    2ff2:	f1 f7       	brne	.-4      	; 0x2ff0 <LCD_displayChar+0x39c>
    2ff4:	9c 83       	std	Y+4, r25	; 0x04
    2ff6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff8:	8d 81       	ldd	r24, Y+5	; 0x05
    2ffa:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffc:	01 97       	sbiw	r24, 0x01	; 1
    2ffe:	9e 83       	std	Y+6, r25	; 0x06
    3000:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3002:	8d 81       	ldd	r24, Y+5	; 0x05
    3004:	9e 81       	ldd	r25, Y+6	; 0x06
    3006:	00 97       	sbiw	r24, 0x00	; 0
    3008:	69 f7       	brne	.-38     	; 0x2fe4 <LCD_displayChar+0x390>
    300a:	14 c0       	rjmp	.+40     	; 0x3034 <LCD_displayChar+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    300c:	6f 81       	ldd	r22, Y+7	; 0x07
    300e:	78 85       	ldd	r23, Y+8	; 0x08
    3010:	89 85       	ldd	r24, Y+9	; 0x09
    3012:	9a 85       	ldd	r25, Y+10	; 0x0a
    3014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	9e 83       	std	Y+6, r25	; 0x06
    301e:	8d 83       	std	Y+5, r24	; 0x05
    3020:	8d 81       	ldd	r24, Y+5	; 0x05
    3022:	9e 81       	ldd	r25, Y+6	; 0x06
    3024:	9a 83       	std	Y+2, r25	; 0x02
    3026:	89 83       	std	Y+1, r24	; 0x01
    3028:	89 81       	ldd	r24, Y+1	; 0x01
    302a:	9a 81       	ldd	r25, Y+2	; 0x02
    302c:	01 97       	sbiw	r24, 0x01	; 1
    302e:	f1 f7       	brne	.-4      	; 0x302c <LCD_displayChar+0x3d8>
    3030:	9a 83       	std	Y+2, r25	; 0x02
    3032:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3034:	e9 96       	adiw	r28, 0x39	; 57
    3036:	0f b6       	in	r0, 0x3f	; 63
    3038:	f8 94       	cli
    303a:	de bf       	out	0x3e, r29	; 62
    303c:	0f be       	out	0x3f, r0	; 63
    303e:	cd bf       	out	0x3d, r28	; 61
    3040:	cf 91       	pop	r28
    3042:	df 91       	pop	r29
    3044:	08 95       	ret

00003046 <LCD_displayString>:


void LCD_displayString(const char *str)
{
    3046:	df 93       	push	r29
    3048:	cf 93       	push	r28
    304a:	00 d0       	rcall	.+0      	; 0x304c <LCD_displayString+0x6>
    304c:	0f 92       	push	r0
    304e:	cd b7       	in	r28, 0x3d	; 61
    3050:	de b7       	in	r29, 0x3e	; 62
    3052:	9b 83       	std	Y+3, r25	; 0x03
    3054:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    3056:	19 82       	std	Y+1, r1	; 0x01
    3058:	0e c0       	rjmp	.+28     	; 0x3076 <LCD_displayString+0x30>
	while(str[i]!='\0')
	{
		LCD_displayChar(str[i]);
    305a:	89 81       	ldd	r24, Y+1	; 0x01
    305c:	28 2f       	mov	r18, r24
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	8a 81       	ldd	r24, Y+2	; 0x02
    3062:	9b 81       	ldd	r25, Y+3	; 0x03
    3064:	fc 01       	movw	r30, r24
    3066:	e2 0f       	add	r30, r18
    3068:	f3 1f       	adc	r31, r19
    306a:	80 81       	ld	r24, Z
    306c:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <LCD_displayChar>
		i++;
    3070:	89 81       	ldd	r24, Y+1	; 0x01
    3072:	8f 5f       	subi	r24, 0xFF	; 255
    3074:	89 83       	std	Y+1, r24	; 0x01


void LCD_displayString(const char *str)
{
	uint8 i=0;
	while(str[i]!='\0')
    3076:	89 81       	ldd	r24, Y+1	; 0x01
    3078:	28 2f       	mov	r18, r24
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	8a 81       	ldd	r24, Y+2	; 0x02
    307e:	9b 81       	ldd	r25, Y+3	; 0x03
    3080:	fc 01       	movw	r30, r24
    3082:	e2 0f       	add	r30, r18
    3084:	f3 1f       	adc	r31, r19
    3086:	80 81       	ld	r24, Z
    3088:	88 23       	and	r24, r24
    308a:	39 f7       	brne	.-50     	; 0x305a <LCD_displayString+0x14>
	{
		LCD_displayChar(str[i]);
		i++;
	}

}
    308c:	0f 90       	pop	r0
    308e:	0f 90       	pop	r0
    3090:	0f 90       	pop	r0
    3092:	cf 91       	pop	r28
    3094:	df 91       	pop	r29
    3096:	08 95       	ret

00003098 <LCD_MoveTo_Row_Column>:


void LCD_MoveTo_Row_Column(uint8 row, uint8 col)
{
    3098:	df 93       	push	r29
    309a:	cf 93       	push	r28
    309c:	00 d0       	rcall	.+0      	; 0x309e <LCD_MoveTo_Row_Column+0x6>
    309e:	00 d0       	rcall	.+0      	; 0x30a0 <LCD_MoveTo_Row_Column+0x8>
    30a0:	0f 92       	push	r0
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
    30a6:	8a 83       	std	Y+2, r24	; 0x02
    30a8:	6b 83       	std	Y+3, r22	; 0x03
	// The position is COL+ROW
	uint8 position;

	switch(row)
    30aa:	8a 81       	ldd	r24, Y+2	; 0x02
    30ac:	28 2f       	mov	r18, r24
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	3d 83       	std	Y+5, r19	; 0x05
    30b2:	2c 83       	std	Y+4, r18	; 0x04
    30b4:	8c 81       	ldd	r24, Y+4	; 0x04
    30b6:	9d 81       	ldd	r25, Y+5	; 0x05
    30b8:	00 97       	sbiw	r24, 0x00	; 0
    30ba:	31 f0       	breq	.+12     	; 0x30c8 <LCD_MoveTo_Row_Column+0x30>
    30bc:	2c 81       	ldd	r18, Y+4	; 0x04
    30be:	3d 81       	ldd	r19, Y+5	; 0x05
    30c0:	21 30       	cpi	r18, 0x01	; 1
    30c2:	31 05       	cpc	r19, r1
    30c4:	21 f0       	breq	.+8      	; 0x30ce <LCD_MoveTo_Row_Column+0x36>
    30c6:	06 c0       	rjmp	.+12     	; 0x30d4 <LCD_MoveTo_Row_Column+0x3c>
	{
		case 0:
			position=col;
    30c8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ca:	89 83       	std	Y+1, r24	; 0x01
    30cc:	03 c0       	rjmp	.+6      	; 0x30d4 <LCD_MoveTo_Row_Column+0x3c>
			break;
		case 1:
			position=col+0x40;
    30ce:	8b 81       	ldd	r24, Y+3	; 0x03
    30d0:	80 5c       	subi	r24, 0xC0	; 192
    30d2:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	LCD_Command(position|LCD_Cursor_move_to);
    30d4:	89 81       	ldd	r24, Y+1	; 0x01
    30d6:	80 68       	ori	r24, 0x80	; 128
    30d8:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_Command>
}
    30dc:	0f 90       	pop	r0
    30de:	0f 90       	pop	r0
    30e0:	0f 90       	pop	r0
    30e2:	0f 90       	pop	r0
    30e4:	0f 90       	pop	r0
    30e6:	cf 91       	pop	r28
    30e8:	df 91       	pop	r29
    30ea:	08 95       	ret

000030ec <LCD_display_String_Row_Column>:


void LCD_display_String_Row_Column(uint8 row,uint8 col, const char *str)
{
    30ec:	df 93       	push	r29
    30ee:	cf 93       	push	r28
    30f0:	00 d0       	rcall	.+0      	; 0x30f2 <LCD_display_String_Row_Column+0x6>
    30f2:	00 d0       	rcall	.+0      	; 0x30f4 <LCD_display_String_Row_Column+0x8>
    30f4:	cd b7       	in	r28, 0x3d	; 61
    30f6:	de b7       	in	r29, 0x3e	; 62
    30f8:	89 83       	std	Y+1, r24	; 0x01
    30fa:	6a 83       	std	Y+2, r22	; 0x02
    30fc:	5c 83       	std	Y+4, r21	; 0x04
    30fe:	4b 83       	std	Y+3, r20	; 0x03
	LCD_MoveTo_Row_Column(row,col);
    3100:	89 81       	ldd	r24, Y+1	; 0x01
    3102:	6a 81       	ldd	r22, Y+2	; 0x02
    3104:	0e 94 4c 18 	call	0x3098	; 0x3098 <LCD_MoveTo_Row_Column>
	LCD_displayString(str);
    3108:	8b 81       	ldd	r24, Y+3	; 0x03
    310a:	9c 81       	ldd	r25, Y+4	; 0x04
    310c:	0e 94 23 18 	call	0x3046	; 0x3046 <LCD_displayString>

}
    3110:	0f 90       	pop	r0
    3112:	0f 90       	pop	r0
    3114:	0f 90       	pop	r0
    3116:	0f 90       	pop	r0
    3118:	cf 91       	pop	r28
    311a:	df 91       	pop	r29
    311c:	08 95       	ret

0000311e <LCD_Clear>:



void LCD_Clear(void)
{
    311e:	df 93       	push	r29
    3120:	cf 93       	push	r28
    3122:	cd b7       	in	r28, 0x3d	; 61
    3124:	de b7       	in	r29, 0x3e	; 62
	LCD_Command(LCD_clear_cmd);
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_Command>
}
    312c:	cf 91       	pop	r28
    312e:	df 91       	pop	r29
    3130:	08 95       	ret

00003132 <LCD_integerToString>:



void LCD_integerToString(uint8 data)
{
    3132:	df 93       	push	r29
    3134:	cf 93       	push	r28
    3136:	cd b7       	in	r28, 0x3d	; 61
    3138:	de b7       	in	r29, 0x3e	; 62
    313a:	61 97       	sbiw	r28, 0x11	; 17
    313c:	0f b6       	in	r0, 0x3f	; 63
    313e:	f8 94       	cli
    3140:	de bf       	out	0x3e, r29	; 62
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	cd bf       	out	0x3d, r28	; 61
    3146:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(data,buff,10);
    3148:	89 89       	ldd	r24, Y+17	; 0x11
    314a:	88 2f       	mov	r24, r24
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	9e 01       	movw	r18, r28
    3150:	2f 5f       	subi	r18, 0xFF	; 255
    3152:	3f 4f       	sbci	r19, 0xFF	; 255
    3154:	b9 01       	movw	r22, r18
    3156:	4a e0       	ldi	r20, 0x0A	; 10
    3158:	50 e0       	ldi	r21, 0x00	; 0
    315a:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <itoa>
	LCD_displayString( buff );
    315e:	ce 01       	movw	r24, r28
    3160:	01 96       	adiw	r24, 0x01	; 1
    3162:	0e 94 23 18 	call	0x3046	; 0x3046 <LCD_displayString>
}
    3166:	61 96       	adiw	r28, 0x11	; 17
    3168:	0f b6       	in	r0, 0x3f	; 63
    316a:	f8 94       	cli
    316c:	de bf       	out	0x3e, r29	; 62
    316e:	0f be       	out	0x3f, r0	; 63
    3170:	cd bf       	out	0x3d, r28	; 61
    3172:	cf 91       	pop	r28
    3174:	df 91       	pop	r29
    3176:	08 95       	ret

00003178 <__prologue_saves__>:
    3178:	2f 92       	push	r2
    317a:	3f 92       	push	r3
    317c:	4f 92       	push	r4
    317e:	5f 92       	push	r5
    3180:	6f 92       	push	r6
    3182:	7f 92       	push	r7
    3184:	8f 92       	push	r8
    3186:	9f 92       	push	r9
    3188:	af 92       	push	r10
    318a:	bf 92       	push	r11
    318c:	cf 92       	push	r12
    318e:	df 92       	push	r13
    3190:	ef 92       	push	r14
    3192:	ff 92       	push	r15
    3194:	0f 93       	push	r16
    3196:	1f 93       	push	r17
    3198:	cf 93       	push	r28
    319a:	df 93       	push	r29
    319c:	cd b7       	in	r28, 0x3d	; 61
    319e:	de b7       	in	r29, 0x3e	; 62
    31a0:	ca 1b       	sub	r28, r26
    31a2:	db 0b       	sbc	r29, r27
    31a4:	0f b6       	in	r0, 0x3f	; 63
    31a6:	f8 94       	cli
    31a8:	de bf       	out	0x3e, r29	; 62
    31aa:	0f be       	out	0x3f, r0	; 63
    31ac:	cd bf       	out	0x3d, r28	; 61
    31ae:	09 94       	ijmp

000031b0 <__epilogue_restores__>:
    31b0:	2a 88       	ldd	r2, Y+18	; 0x12
    31b2:	39 88       	ldd	r3, Y+17	; 0x11
    31b4:	48 88       	ldd	r4, Y+16	; 0x10
    31b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    31b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    31ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    31bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    31be:	9b 84       	ldd	r9, Y+11	; 0x0b
    31c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    31c2:	b9 84       	ldd	r11, Y+9	; 0x09
    31c4:	c8 84       	ldd	r12, Y+8	; 0x08
    31c6:	df 80       	ldd	r13, Y+7	; 0x07
    31c8:	ee 80       	ldd	r14, Y+6	; 0x06
    31ca:	fd 80       	ldd	r15, Y+5	; 0x05
    31cc:	0c 81       	ldd	r16, Y+4	; 0x04
    31ce:	1b 81       	ldd	r17, Y+3	; 0x03
    31d0:	aa 81       	ldd	r26, Y+2	; 0x02
    31d2:	b9 81       	ldd	r27, Y+1	; 0x01
    31d4:	ce 0f       	add	r28, r30
    31d6:	d1 1d       	adc	r29, r1
    31d8:	0f b6       	in	r0, 0x3f	; 63
    31da:	f8 94       	cli
    31dc:	de bf       	out	0x3e, r29	; 62
    31de:	0f be       	out	0x3f, r0	; 63
    31e0:	cd bf       	out	0x3d, r28	; 61
    31e2:	ed 01       	movw	r28, r26
    31e4:	08 95       	ret

000031e6 <itoa>:
    31e6:	fb 01       	movw	r30, r22
    31e8:	9f 01       	movw	r18, r30
    31ea:	e8 94       	clt
    31ec:	42 30       	cpi	r20, 0x02	; 2
    31ee:	c4 f0       	brlt	.+48     	; 0x3220 <itoa+0x3a>
    31f0:	45 32       	cpi	r20, 0x25	; 37
    31f2:	b4 f4       	brge	.+44     	; 0x3220 <itoa+0x3a>
    31f4:	4a 30       	cpi	r20, 0x0A	; 10
    31f6:	29 f4       	brne	.+10     	; 0x3202 <itoa+0x1c>
    31f8:	97 fb       	bst	r25, 7
    31fa:	1e f4       	brtc	.+6      	; 0x3202 <itoa+0x1c>
    31fc:	90 95       	com	r25
    31fe:	81 95       	neg	r24
    3200:	9f 4f       	sbci	r25, 0xFF	; 255
    3202:	64 2f       	mov	r22, r20
    3204:	77 27       	eor	r23, r23
    3206:	0e 94 24 19 	call	0x3248	; 0x3248 <__udivmodhi4>
    320a:	80 5d       	subi	r24, 0xD0	; 208
    320c:	8a 33       	cpi	r24, 0x3A	; 58
    320e:	0c f0       	brlt	.+2      	; 0x3212 <itoa+0x2c>
    3210:	89 5d       	subi	r24, 0xD9	; 217
    3212:	81 93       	st	Z+, r24
    3214:	cb 01       	movw	r24, r22
    3216:	00 97       	sbiw	r24, 0x00	; 0
    3218:	a1 f7       	brne	.-24     	; 0x3202 <itoa+0x1c>
    321a:	16 f4       	brtc	.+4      	; 0x3220 <itoa+0x3a>
    321c:	5d e2       	ldi	r21, 0x2D	; 45
    321e:	51 93       	st	Z+, r21
    3220:	10 82       	st	Z, r1
    3222:	c9 01       	movw	r24, r18
    3224:	0c 94 14 19 	jmp	0x3228	; 0x3228 <strrev>

00003228 <strrev>:
    3228:	dc 01       	movw	r26, r24
    322a:	fc 01       	movw	r30, r24
    322c:	67 2f       	mov	r22, r23
    322e:	71 91       	ld	r23, Z+
    3230:	77 23       	and	r23, r23
    3232:	e1 f7       	brne	.-8      	; 0x322c <strrev+0x4>
    3234:	32 97       	sbiw	r30, 0x02	; 2
    3236:	04 c0       	rjmp	.+8      	; 0x3240 <strrev+0x18>
    3238:	7c 91       	ld	r23, X
    323a:	6d 93       	st	X+, r22
    323c:	70 83       	st	Z, r23
    323e:	62 91       	ld	r22, -Z
    3240:	ae 17       	cp	r26, r30
    3242:	bf 07       	cpc	r27, r31
    3244:	c8 f3       	brcs	.-14     	; 0x3238 <strrev+0x10>
    3246:	08 95       	ret

00003248 <__udivmodhi4>:
    3248:	aa 1b       	sub	r26, r26
    324a:	bb 1b       	sub	r27, r27
    324c:	51 e1       	ldi	r21, 0x11	; 17
    324e:	07 c0       	rjmp	.+14     	; 0x325e <__udivmodhi4_ep>

00003250 <__udivmodhi4_loop>:
    3250:	aa 1f       	adc	r26, r26
    3252:	bb 1f       	adc	r27, r27
    3254:	a6 17       	cp	r26, r22
    3256:	b7 07       	cpc	r27, r23
    3258:	10 f0       	brcs	.+4      	; 0x325e <__udivmodhi4_ep>
    325a:	a6 1b       	sub	r26, r22
    325c:	b7 0b       	sbc	r27, r23

0000325e <__udivmodhi4_ep>:
    325e:	88 1f       	adc	r24, r24
    3260:	99 1f       	adc	r25, r25
    3262:	5a 95       	dec	r21
    3264:	a9 f7       	brne	.-22     	; 0x3250 <__udivmodhi4_loop>
    3266:	80 95       	com	r24
    3268:	90 95       	com	r25
    326a:	bc 01       	movw	r22, r24
    326c:	cd 01       	movw	r24, r26
    326e:	08 95       	ret

00003270 <_exit>:
    3270:	f8 94       	cli

00003272 <__stop_program>:
    3272:	ff cf       	rjmp	.-2      	; 0x3272 <__stop_program>
