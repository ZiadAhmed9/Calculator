
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000038f0  00003984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800068  00800068  0000398c  2**0
                  ALLOC
  3 .stab         00002acc  00000000  00000000  0000398c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d82  00000000  00000000  00006458  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000071da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000731a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000748a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000090d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ad6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000aecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b159  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b927  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a3 37       	cpi	r26, 0x73	; 115
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e0 ef       	ldi	r30, 0xF0	; 240
      78:	f8 e3       	ldi	r31, 0x38	; 56
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 76 1c 	jmp	0x38ec	; 0x38ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fa 1b 	jmp	0x37f4	; 0x37f4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 16 1c 	jmp	0x382c	; 0x382c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 06 1c 	jmp	0x380c	; 0x380c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 22 1c 	jmp	0x3844	; 0x3844 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 06 1c 	jmp	0x380c	; 0x380c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 22 1c 	jmp	0x3844	; 0x3844 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fa 1b 	jmp	0x37f4	; 0x37f4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 16 1c 	jmp	0x382c	; 0x382c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 06 1c 	jmp	0x380c	; 0x380c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 22 1c 	jmp	0x3844	; 0x3844 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 06 1c 	jmp	0x380c	; 0x380c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 22 1c 	jmp	0x3844	; 0x3844 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 06 1c 	jmp	0x380c	; 0x380c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 22 1c 	jmp	0x3844	; 0x3844 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0a 1c 	jmp	0x3814	; 0x3814 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 26 1c 	jmp	0x384c	; 0x384c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
/*******************************************************************************
 *                           Main Function                                     *
 *******************************************************************************/

int main(void)
{
     b46:	ef 92       	push	r14
     b48:	ff 92       	push	r15
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	df 93       	push	r29
     b50:	cf 93       	push	r28
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
	op1=0,op2=0;
     b56:	10 92 6f 00 	sts	0x006F, r1
     b5a:	10 92 70 00 	sts	0x0070, r1
     b5e:	10 92 71 00 	sts	0x0071, r1
     b62:	10 92 72 00 	sts	0x0072, r1
     b66:	10 92 69 00 	sts	0x0069, r1
     b6a:	10 92 6a 00 	sts	0x006A, r1
     b6e:	10 92 6b 00 	sts	0x006B, r1
     b72:	10 92 6c 00 	sts	0x006C, r1
	check=0;
     b76:	10 92 6e 00 	sts	0x006E, r1
	LCD_init();
     b7a:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <LCD_init>
	KeyPad_init();
     b7e:	0e 94 bb 12 	call	0x2576	; 0x2576 <KeyPad_init>
	GET_OP1();
     b82:	0e 94 2b 08 	call	0x1056	; 0x1056 <GET_OP1>

	if(check==1)
     b86:	80 91 6e 00 	lds	r24, 0x006E
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	11 f4       	brne	.+4      	; 0xb92 <main+0x4c>
	{
		main();
     b8e:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
	}
	if(neg==1)
     b92:	80 91 68 00 	lds	r24, 0x0068
     b96:	81 30       	cpi	r24, 0x01	; 1
     b98:	b9 f4       	brne	.+46     	; 0xbc8 <main+0x82>
	{
		op1=op1*-1;
     b9a:	80 91 6f 00 	lds	r24, 0x006F
     b9e:	90 91 70 00 	lds	r25, 0x0070
     ba2:	a0 91 71 00 	lds	r26, 0x0071
     ba6:	b0 91 72 00 	lds	r27, 0x0072
     baa:	b0 95       	com	r27
     bac:	a0 95       	com	r26
     bae:	90 95       	com	r25
     bb0:	81 95       	neg	r24
     bb2:	9f 4f       	sbci	r25, 0xFF	; 255
     bb4:	af 4f       	sbci	r26, 0xFF	; 255
     bb6:	bf 4f       	sbci	r27, 0xFF	; 255
     bb8:	80 93 6f 00 	sts	0x006F, r24
     bbc:	90 93 70 00 	sts	0x0070, r25
     bc0:	a0 93 71 00 	sts	0x0071, r26
     bc4:	b0 93 72 00 	sts	0x0072, r27
	}

//	GET_OPERATION();

	GET_OP2();
     bc8:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <GET_OP2>

	if(check==1)
     bcc:	80 91 6e 00 	lds	r24, 0x006E
     bd0:	81 30       	cpi	r24, 0x01	; 1
     bd2:	11 f4       	brne	.+4      	; 0xbd8 <main+0x92>
	{
		main();
     bd4:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
	}

	LCD_Clear();
     bd8:	0e 94 c9 1a 	call	0x3592	; 0x3592 <LCD_Clear>

	calc(operation,op1,op2);
     bdc:	80 91 6d 00 	lds	r24, 0x006D
     be0:	20 91 6f 00 	lds	r18, 0x006F
     be4:	30 91 70 00 	lds	r19, 0x0070
     be8:	40 91 71 00 	lds	r20, 0x0071
     bec:	50 91 72 00 	lds	r21, 0x0072
     bf0:	e0 90 69 00 	lds	r14, 0x0069
     bf4:	f0 90 6a 00 	lds	r15, 0x006A
     bf8:	00 91 6b 00 	lds	r16, 0x006B
     bfc:	10 91 6c 00 	lds	r17, 0x006C
     c00:	ba 01       	movw	r22, r20
     c02:	a9 01       	movw	r20, r18
     c04:	98 01       	movw	r18, r16
     c06:	87 01       	movw	r16, r14
     c08:	0e 94 0d 06 	call	0xc1a	; 0xc1a <calc>


	while(1)
	{
		if(KeyPad_getPressedKey()=='A')
     c0c:	0e 94 fe 12 	call	0x25fc	; 0x25fc <KeyPad_getPressedKey>
     c10:	81 34       	cpi	r24, 0x41	; 65
     c12:	e1 f7       	brne	.-8      	; 0xc0c <main+0xc6>
		{
			main();
     c14:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
     c18:	f9 cf       	rjmp	.-14     	; 0xc0c <main+0xc6>

00000c1a <calc>:

	}
}

void calc(uint8 operation,sint32 op1,sint32 op2)
{
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	df 93       	push	r29
     c20:	cf 93       	push	r28
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62
     c26:	2f 97       	sbiw	r28, 0x0f	; 15
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	f8 94       	cli
     c2c:	de bf       	out	0x3e, r29	; 62
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	cd bf       	out	0x3d, r28	; 61
     c32:	8d 83       	std	Y+5, r24	; 0x05
     c34:	4e 83       	std	Y+6, r20	; 0x06
     c36:	5f 83       	std	Y+7, r21	; 0x07
     c38:	68 87       	std	Y+8, r22	; 0x08
     c3a:	79 87       	std	Y+9, r23	; 0x09
     c3c:	0a 87       	std	Y+10, r16	; 0x0a
     c3e:	1b 87       	std	Y+11, r17	; 0x0b
     c40:	2c 87       	std	Y+12, r18	; 0x0c
     c42:	3d 87       	std	Y+13, r19	; 0x0d
	sint32 result;
	switch(operation)
     c44:	8d 81       	ldd	r24, Y+5	; 0x05
     c46:	28 2f       	mov	r18, r24
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	3f 87       	std	Y+15, r19	; 0x0f
     c4c:	2e 87       	std	Y+14, r18	; 0x0e
     c4e:	8e 85       	ldd	r24, Y+14	; 0x0e
     c50:	9f 85       	ldd	r25, Y+15	; 0x0f
     c52:	8b 32       	cpi	r24, 0x2B	; 43
     c54:	91 05       	cpc	r25, r1
     c56:	b1 f0       	breq	.+44     	; 0xc84 <calc+0x6a>
     c58:	2e 85       	ldd	r18, Y+14	; 0x0e
     c5a:	3f 85       	ldd	r19, Y+15	; 0x0f
     c5c:	2c 32       	cpi	r18, 0x2C	; 44
     c5e:	31 05       	cpc	r19, r1
     c60:	34 f4       	brge	.+12     	; 0xc6e <calc+0x54>
     c62:	8e 85       	ldd	r24, Y+14	; 0x0e
     c64:	9f 85       	ldd	r25, Y+15	; 0x0f
     c66:	8a 32       	cpi	r24, 0x2A	; 42
     c68:	91 05       	cpc	r25, r1
     c6a:	71 f1       	breq	.+92     	; 0xcc8 <calc+0xae>
     c6c:	52 c0       	rjmp	.+164    	; 0xd12 <calc+0xf8>
     c6e:	2e 85       	ldd	r18, Y+14	; 0x0e
     c70:	3f 85       	ldd	r19, Y+15	; 0x0f
     c72:	2d 32       	cpi	r18, 0x2D	; 45
     c74:	31 05       	cpc	r19, r1
     c76:	b9 f0       	breq	.+46     	; 0xca6 <calc+0x8c>
     c78:	8e 85       	ldd	r24, Y+14	; 0x0e
     c7a:	9f 85       	ldd	r25, Y+15	; 0x0f
     c7c:	8f 32       	cpi	r24, 0x2F	; 47
     c7e:	91 05       	cpc	r25, r1
     c80:	b1 f1       	breq	.+108    	; 0xcee <calc+0xd4>
     c82:	47 c0       	rjmp	.+142    	; 0xd12 <calc+0xf8>
	{
	case '+' :
		result=op1+op2;
     c84:	8e 81       	ldd	r24, Y+6	; 0x06
     c86:	9f 81       	ldd	r25, Y+7	; 0x07
     c88:	a8 85       	ldd	r26, Y+8	; 0x08
     c8a:	b9 85       	ldd	r27, Y+9	; 0x09
     c8c:	2a 85       	ldd	r18, Y+10	; 0x0a
     c8e:	3b 85       	ldd	r19, Y+11	; 0x0b
     c90:	4c 85       	ldd	r20, Y+12	; 0x0c
     c92:	5d 85       	ldd	r21, Y+13	; 0x0d
     c94:	82 0f       	add	r24, r18
     c96:	93 1f       	adc	r25, r19
     c98:	a4 1f       	adc	r26, r20
     c9a:	b5 1f       	adc	r27, r21
     c9c:	89 83       	std	Y+1, r24	; 0x01
     c9e:	9a 83       	std	Y+2, r25	; 0x02
     ca0:	ab 83       	std	Y+3, r26	; 0x03
     ca2:	bc 83       	std	Y+4, r27	; 0x04
     ca4:	36 c0       	rjmp	.+108    	; 0xd12 <calc+0xf8>
		break;
	case '-' :
		result=op1-op2;
     ca6:	8e 81       	ldd	r24, Y+6	; 0x06
     ca8:	9f 81       	ldd	r25, Y+7	; 0x07
     caa:	a8 85       	ldd	r26, Y+8	; 0x08
     cac:	b9 85       	ldd	r27, Y+9	; 0x09
     cae:	2a 85       	ldd	r18, Y+10	; 0x0a
     cb0:	3b 85       	ldd	r19, Y+11	; 0x0b
     cb2:	4c 85       	ldd	r20, Y+12	; 0x0c
     cb4:	5d 85       	ldd	r21, Y+13	; 0x0d
     cb6:	82 1b       	sub	r24, r18
     cb8:	93 0b       	sbc	r25, r19
     cba:	a4 0b       	sbc	r26, r20
     cbc:	b5 0b       	sbc	r27, r21
     cbe:	89 83       	std	Y+1, r24	; 0x01
     cc0:	9a 83       	std	Y+2, r25	; 0x02
     cc2:	ab 83       	std	Y+3, r26	; 0x03
     cc4:	bc 83       	std	Y+4, r27	; 0x04
     cc6:	25 c0       	rjmp	.+74     	; 0xd12 <calc+0xf8>
		break;
	case '*' :
		result=op1*op2;
     cc8:	8e 81       	ldd	r24, Y+6	; 0x06
     cca:	9f 81       	ldd	r25, Y+7	; 0x07
     ccc:	a8 85       	ldd	r26, Y+8	; 0x08
     cce:	b9 85       	ldd	r27, Y+9	; 0x09
     cd0:	2a 85       	ldd	r18, Y+10	; 0x0a
     cd2:	3b 85       	ldd	r19, Y+11	; 0x0b
     cd4:	4c 85       	ldd	r20, Y+12	; 0x0c
     cd6:	5d 85       	ldd	r21, Y+13	; 0x0d
     cd8:	bc 01       	movw	r22, r24
     cda:	cd 01       	movw	r24, r26
     cdc:	0e 94 9e 1b 	call	0x373c	; 0x373c <__mulsi3>
     ce0:	dc 01       	movw	r26, r24
     ce2:	cb 01       	movw	r24, r22
     ce4:	89 83       	std	Y+1, r24	; 0x01
     ce6:	9a 83       	std	Y+2, r25	; 0x02
     ce8:	ab 83       	std	Y+3, r26	; 0x03
     cea:	bc 83       	std	Y+4, r27	; 0x04
     cec:	12 c0       	rjmp	.+36     	; 0xd12 <calc+0xf8>
		break;
	case '/' :
		result=op1/op2;
     cee:	8e 81       	ldd	r24, Y+6	; 0x06
     cf0:	9f 81       	ldd	r25, Y+7	; 0x07
     cf2:	a8 85       	ldd	r26, Y+8	; 0x08
     cf4:	b9 85       	ldd	r27, Y+9	; 0x09
     cf6:	2a 85       	ldd	r18, Y+10	; 0x0a
     cf8:	3b 85       	ldd	r19, Y+11	; 0x0b
     cfa:	4c 85       	ldd	r20, Y+12	; 0x0c
     cfc:	5d 85       	ldd	r21, Y+13	; 0x0d
     cfe:	bc 01       	movw	r22, r24
     d00:	cd 01       	movw	r24, r26
     d02:	0e 94 bd 1b 	call	0x377a	; 0x377a <__divmodsi4>
     d06:	da 01       	movw	r26, r20
     d08:	c9 01       	movw	r24, r18
     d0a:	89 83       	std	Y+1, r24	; 0x01
     d0c:	9a 83       	std	Y+2, r25	; 0x02
     d0e:	ab 83       	std	Y+3, r26	; 0x03
     d10:	bc 83       	std	Y+4, r27	; 0x04
		break;
	}
	if(result<0)
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	9a 81       	ldd	r25, Y+2	; 0x02
     d16:	ab 81       	ldd	r26, Y+3	; 0x03
     d18:	bc 81       	ldd	r27, Y+4	; 0x04
     d1a:	bb 23       	and	r27, r27
     d1c:	1c f4       	brge	.+6      	; 0xd24 <calc+0x10a>
	{
		LCD_integerToString(result);
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <LCD_integerToString>
//	if(result<-10&&result>-100)
//	{
//		LCD_integerToString(result);
//
//	}
	if(result>=0&&result<10)
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	9a 81       	ldd	r25, Y+2	; 0x02
     d28:	ab 81       	ldd	r26, Y+3	; 0x03
     d2a:	bc 81       	ldd	r27, Y+4	; 0x04
     d2c:	bb 23       	and	r27, r27
     d2e:	6c f0       	brlt	.+26     	; 0xd4a <calc+0x130>
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	9a 81       	ldd	r25, Y+2	; 0x02
     d34:	ab 81       	ldd	r26, Y+3	; 0x03
     d36:	bc 81       	ldd	r27, Y+4	; 0x04
     d38:	8a 30       	cpi	r24, 0x0A	; 10
     d3a:	91 05       	cpc	r25, r1
     d3c:	a1 05       	cpc	r26, r1
     d3e:	b1 05       	cpc	r27, r1
     d40:	24 f4       	brge	.+8      	; 0xd4a <calc+0x130>
	{
		LCD_integerToString(result);
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <LCD_integerToString>
     d48:	7b c1       	rjmp	.+758    	; 0x1040 <calc+0x426>
	}
	else if(result>=10&&result<100)
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	9a 81       	ldd	r25, Y+2	; 0x02
     d4e:	ab 81       	ldd	r26, Y+3	; 0x03
     d50:	bc 81       	ldd	r27, Y+4	; 0x04
     d52:	8a 30       	cpi	r24, 0x0A	; 10
     d54:	91 05       	cpc	r25, r1
     d56:	a1 05       	cpc	r26, r1
     d58:	b1 05       	cpc	r27, r1
     d5a:	54 f1       	brlt	.+84     	; 0xdb0 <calc+0x196>
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	9a 81       	ldd	r25, Y+2	; 0x02
     d60:	ab 81       	ldd	r26, Y+3	; 0x03
     d62:	bc 81       	ldd	r27, Y+4	; 0x04
     d64:	84 36       	cpi	r24, 0x64	; 100
     d66:	91 05       	cpc	r25, r1
     d68:	a1 05       	cpc	r26, r1
     d6a:	b1 05       	cpc	r27, r1
     d6c:	0c f5       	brge	.+66     	; 0xdb0 <calc+0x196>
	{
		LCD_integerToString(result/10);
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	9a 81       	ldd	r25, Y+2	; 0x02
     d72:	ab 81       	ldd	r26, Y+3	; 0x03
     d74:	bc 81       	ldd	r27, Y+4	; 0x04
     d76:	2a e0       	ldi	r18, 0x0A	; 10
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	40 e0       	ldi	r20, 0x00	; 0
     d7c:	50 e0       	ldi	r21, 0x00	; 0
     d7e:	bc 01       	movw	r22, r24
     d80:	cd 01       	movw	r24, r26
     d82:	0e 94 bd 1b 	call	0x377a	; 0x377a <__divmodsi4>
     d86:	da 01       	movw	r26, r20
     d88:	c9 01       	movw	r24, r18
     d8a:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <LCD_integerToString>
		LCD_integerToString(result%10);
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	9a 81       	ldd	r25, Y+2	; 0x02
     d92:	ab 81       	ldd	r26, Y+3	; 0x03
     d94:	bc 81       	ldd	r27, Y+4	; 0x04
     d96:	2a e0       	ldi	r18, 0x0A	; 10
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	40 e0       	ldi	r20, 0x00	; 0
     d9c:	50 e0       	ldi	r21, 0x00	; 0
     d9e:	bc 01       	movw	r22, r24
     da0:	cd 01       	movw	r24, r26
     da2:	0e 94 bd 1b 	call	0x377a	; 0x377a <__divmodsi4>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <LCD_integerToString>
     dae:	48 c1       	rjmp	.+656    	; 0x1040 <calc+0x426>
	}
	else if(result>=100&&result<1000)
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	9a 81       	ldd	r25, Y+2	; 0x02
     db4:	ab 81       	ldd	r26, Y+3	; 0x03
     db6:	bc 81       	ldd	r27, Y+4	; 0x04
     db8:	84 36       	cpi	r24, 0x64	; 100
     dba:	91 05       	cpc	r25, r1
     dbc:	a1 05       	cpc	r26, r1
     dbe:	b1 05       	cpc	r27, r1
     dc0:	0c f4       	brge	.+2      	; 0xdc4 <calc+0x1aa>
     dc2:	47 c0       	rjmp	.+142    	; 0xe52 <calc+0x238>
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	9a 81       	ldd	r25, Y+2	; 0x02
     dc8:	ab 81       	ldd	r26, Y+3	; 0x03
     dca:	bc 81       	ldd	r27, Y+4	; 0x04
     dcc:	88 3e       	cpi	r24, 0xE8	; 232
     dce:	23 e0       	ldi	r18, 0x03	; 3
     dd0:	92 07       	cpc	r25, r18
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	a2 07       	cpc	r26, r18
     dd6:	20 e0       	ldi	r18, 0x00	; 0
     dd8:	b2 07       	cpc	r27, r18
     dda:	dc f5       	brge	.+118    	; 0xe52 <calc+0x238>
	{
		LCD_integerToString(result/100);
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	9a 81       	ldd	r25, Y+2	; 0x02
     de0:	ab 81       	ldd	r26, Y+3	; 0x03
     de2:	bc 81       	ldd	r27, Y+4	; 0x04
     de4:	24 e6       	ldi	r18, 0x64	; 100
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	40 e0       	ldi	r20, 0x00	; 0
     dea:	50 e0       	ldi	r21, 0x00	; 0
     dec:	bc 01       	movw	r22, r24
     dee:	cd 01       	movw	r24, r26
     df0:	0e 94 bd 1b 	call	0x377a	; 0x377a <__divmodsi4>
     df4:	da 01       	movw	r26, r20
     df6:	c9 01       	movw	r24, r18
     df8:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <LCD_integerToString>
		LCD_integerToString((result/10)%10);
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	9a 81       	ldd	r25, Y+2	; 0x02
     e00:	ab 81       	ldd	r26, Y+3	; 0x03
     e02:	bc 81       	ldd	r27, Y+4	; 0x04
     e04:	2a e0       	ldi	r18, 0x0A	; 10
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	40 e0       	ldi	r20, 0x00	; 0
     e0a:	50 e0       	ldi	r21, 0x00	; 0
     e0c:	bc 01       	movw	r22, r24
     e0e:	cd 01       	movw	r24, r26
     e10:	0e 94 bd 1b 	call	0x377a	; 0x377a <__divmodsi4>
     e14:	da 01       	movw	r26, r20
     e16:	c9 01       	movw	r24, r18
     e18:	2a e0       	ldi	r18, 0x0A	; 10
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e0       	ldi	r20, 0x00	; 0
     e1e:	50 e0       	ldi	r21, 0x00	; 0
     e20:	bc 01       	movw	r22, r24
     e22:	cd 01       	movw	r24, r26
     e24:	0e 94 bd 1b 	call	0x377a	; 0x377a <__divmodsi4>
     e28:	dc 01       	movw	r26, r24
     e2a:	cb 01       	movw	r24, r22
     e2c:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <LCD_integerToString>
		LCD_integerToString(result%10);
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	9a 81       	ldd	r25, Y+2	; 0x02
     e34:	ab 81       	ldd	r26, Y+3	; 0x03
     e36:	bc 81       	ldd	r27, Y+4	; 0x04
     e38:	2a e0       	ldi	r18, 0x0A	; 10
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e0       	ldi	r20, 0x00	; 0
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	bc 01       	movw	r22, r24
     e42:	cd 01       	movw	r24, r26
     e44:	0e 94 bd 1b 	call	0x377a	; 0x377a <__divmodsi4>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <LCD_integerToString>
     e50:	f7 c0       	rjmp	.+494    	; 0x1040 <calc+0x426>
	}
	else if(result>=1000&&result<10000)
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	9a 81       	ldd	r25, Y+2	; 0x02
     e56:	ab 81       	ldd	r26, Y+3	; 0x03
     e58:	bc 81       	ldd	r27, Y+4	; 0x04
     e5a:	88 3e       	cpi	r24, 0xE8	; 232
     e5c:	33 e0       	ldi	r19, 0x03	; 3
     e5e:	93 07       	cpc	r25, r19
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	a3 07       	cpc	r26, r19
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	b3 07       	cpc	r27, r19
     e68:	0c f4       	brge	.+2      	; 0xe6c <calc+0x252>
     e6a:	62 c0       	rjmp	.+196    	; 0xf30 <calc+0x316>
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	9a 81       	ldd	r25, Y+2	; 0x02
     e70:	ab 81       	ldd	r26, Y+3	; 0x03
     e72:	bc 81       	ldd	r27, Y+4	; 0x04
     e74:	80 31       	cpi	r24, 0x10	; 16
     e76:	27 e2       	ldi	r18, 0x27	; 39
     e78:	92 07       	cpc	r25, r18
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	a2 07       	cpc	r26, r18
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	b2 07       	cpc	r27, r18
     e82:	0c f0       	brlt	.+2      	; 0xe86 <calc+0x26c>
     e84:	55 c0       	rjmp	.+170    	; 0xf30 <calc+0x316>
	{
		LCD_integerToString(result/1000);
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	9a 81       	ldd	r25, Y+2	; 0x02
     e8a:	ab 81       	ldd	r26, Y+3	; 0x03
     e8c:	bc 81       	ldd	r27, Y+4	; 0x04
     e8e:	28 ee       	ldi	r18, 0xE8	; 232
     e90:	33 e0       	ldi	r19, 0x03	; 3
     e92:	40 e0       	ldi	r20, 0x00	; 0
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	bc 01       	movw	r22, r24
     e98:	cd 01       	movw	r24, r26
     e9a:	0e 94 bd 1b 	call	0x377a	; 0x377a <__divmodsi4>
     e9e:	da 01       	movw	r26, r20
     ea0:	c9 01       	movw	r24, r18
     ea2:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <LCD_integerToString>
		LCD_integerToString((result/100)%10);
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	9a 81       	ldd	r25, Y+2	; 0x02
     eaa:	ab 81       	ldd	r26, Y+3	; 0x03
     eac:	bc 81       	ldd	r27, Y+4	; 0x04
     eae:	24 e6       	ldi	r18, 0x64	; 100
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e0       	ldi	r20, 0x00	; 0
     eb4:	50 e0       	ldi	r21, 0x00	; 0
     eb6:	bc 01       	movw	r22, r24
     eb8:	cd 01       	movw	r24, r26
     eba:	0e 94 bd 1b 	call	0x377a	; 0x377a <__divmodsi4>
     ebe:	da 01       	movw	r26, r20
     ec0:	c9 01       	movw	r24, r18
     ec2:	2a e0       	ldi	r18, 0x0A	; 10
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	40 e0       	ldi	r20, 0x00	; 0
     ec8:	50 e0       	ldi	r21, 0x00	; 0
     eca:	bc 01       	movw	r22, r24
     ecc:	cd 01       	movw	r24, r26
     ece:	0e 94 bd 1b 	call	0x377a	; 0x377a <__divmodsi4>
     ed2:	dc 01       	movw	r26, r24
     ed4:	cb 01       	movw	r24, r22
     ed6:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <LCD_integerToString>
		LCD_integerToString((result/10)%10);
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	9a 81       	ldd	r25, Y+2	; 0x02
     ede:	ab 81       	ldd	r26, Y+3	; 0x03
     ee0:	bc 81       	ldd	r27, Y+4	; 0x04
     ee2:	2a e0       	ldi	r18, 0x0A	; 10
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	40 e0       	ldi	r20, 0x00	; 0
     ee8:	50 e0       	ldi	r21, 0x00	; 0
     eea:	bc 01       	movw	r22, r24
     eec:	cd 01       	movw	r24, r26
     eee:	0e 94 bd 1b 	call	0x377a	; 0x377a <__divmodsi4>
     ef2:	da 01       	movw	r26, r20
     ef4:	c9 01       	movw	r24, r18
     ef6:	2a e0       	ldi	r18, 0x0A	; 10
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 e0       	ldi	r20, 0x00	; 0
     efc:	50 e0       	ldi	r21, 0x00	; 0
     efe:	bc 01       	movw	r22, r24
     f00:	cd 01       	movw	r24, r26
     f02:	0e 94 bd 1b 	call	0x377a	; 0x377a <__divmodsi4>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <LCD_integerToString>
		LCD_integerToString(result%10);
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	9a 81       	ldd	r25, Y+2	; 0x02
     f12:	ab 81       	ldd	r26, Y+3	; 0x03
     f14:	bc 81       	ldd	r27, Y+4	; 0x04
     f16:	2a e0       	ldi	r18, 0x0A	; 10
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	40 e0       	ldi	r20, 0x00	; 0
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	bc 01       	movw	r22, r24
     f20:	cd 01       	movw	r24, r26
     f22:	0e 94 bd 1b 	call	0x377a	; 0x377a <__divmodsi4>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <LCD_integerToString>
     f2e:	88 c0       	rjmp	.+272    	; 0x1040 <calc+0x426>

	}
	else if(result>=10000&&result<100000)
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	9a 81       	ldd	r25, Y+2	; 0x02
     f34:	ab 81       	ldd	r26, Y+3	; 0x03
     f36:	bc 81       	ldd	r27, Y+4	; 0x04
     f38:	80 31       	cpi	r24, 0x10	; 16
     f3a:	37 e2       	ldi	r19, 0x27	; 39
     f3c:	93 07       	cpc	r25, r19
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	a3 07       	cpc	r26, r19
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	b3 07       	cpc	r27, r19
     f46:	0c f4       	brge	.+2      	; 0xf4a <calc+0x330>
     f48:	7b c0       	rjmp	.+246    	; 0x1040 <calc+0x426>
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	9a 81       	ldd	r25, Y+2	; 0x02
     f4e:	ab 81       	ldd	r26, Y+3	; 0x03
     f50:	bc 81       	ldd	r27, Y+4	; 0x04
     f52:	80 3a       	cpi	r24, 0xA0	; 160
     f54:	26 e8       	ldi	r18, 0x86	; 134
     f56:	92 07       	cpc	r25, r18
     f58:	21 e0       	ldi	r18, 0x01	; 1
     f5a:	a2 07       	cpc	r26, r18
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	b2 07       	cpc	r27, r18
     f60:	0c f0       	brlt	.+2      	; 0xf64 <calc+0x34a>
     f62:	6e c0       	rjmp	.+220    	; 0x1040 <calc+0x426>
	{
		LCD_integerToString(result/10000);
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	9a 81       	ldd	r25, Y+2	; 0x02
     f68:	ab 81       	ldd	r26, Y+3	; 0x03
     f6a:	bc 81       	ldd	r27, Y+4	; 0x04
     f6c:	20 e1       	ldi	r18, 0x10	; 16
     f6e:	37 e2       	ldi	r19, 0x27	; 39
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	bc 01       	movw	r22, r24
     f76:	cd 01       	movw	r24, r26
     f78:	0e 94 bd 1b 	call	0x377a	; 0x377a <__divmodsi4>
     f7c:	da 01       	movw	r26, r20
     f7e:	c9 01       	movw	r24, r18
     f80:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <LCD_integerToString>
		LCD_integerToString((result/1000)%10);
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	9a 81       	ldd	r25, Y+2	; 0x02
     f88:	ab 81       	ldd	r26, Y+3	; 0x03
     f8a:	bc 81       	ldd	r27, Y+4	; 0x04
     f8c:	28 ee       	ldi	r18, 0xE8	; 232
     f8e:	33 e0       	ldi	r19, 0x03	; 3
     f90:	40 e0       	ldi	r20, 0x00	; 0
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	bc 01       	movw	r22, r24
     f96:	cd 01       	movw	r24, r26
     f98:	0e 94 bd 1b 	call	0x377a	; 0x377a <__divmodsi4>
     f9c:	da 01       	movw	r26, r20
     f9e:	c9 01       	movw	r24, r18
     fa0:	2a e0       	ldi	r18, 0x0A	; 10
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	50 e0       	ldi	r21, 0x00	; 0
     fa8:	bc 01       	movw	r22, r24
     faa:	cd 01       	movw	r24, r26
     fac:	0e 94 bd 1b 	call	0x377a	; 0x377a <__divmodsi4>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <LCD_integerToString>
		LCD_integerToString((result/100)%10);
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	9a 81       	ldd	r25, Y+2	; 0x02
     fbc:	ab 81       	ldd	r26, Y+3	; 0x03
     fbe:	bc 81       	ldd	r27, Y+4	; 0x04
     fc0:	24 e6       	ldi	r18, 0x64	; 100
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	bc 01       	movw	r22, r24
     fca:	cd 01       	movw	r24, r26
     fcc:	0e 94 bd 1b 	call	0x377a	; 0x377a <__divmodsi4>
     fd0:	da 01       	movw	r26, r20
     fd2:	c9 01       	movw	r24, r18
     fd4:	2a e0       	ldi	r18, 0x0A	; 10
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	40 e0       	ldi	r20, 0x00	; 0
     fda:	50 e0       	ldi	r21, 0x00	; 0
     fdc:	bc 01       	movw	r22, r24
     fde:	cd 01       	movw	r24, r26
     fe0:	0e 94 bd 1b 	call	0x377a	; 0x377a <__divmodsi4>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <LCD_integerToString>
		LCD_integerToString((result/10)%10);
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	9a 81       	ldd	r25, Y+2	; 0x02
     ff0:	ab 81       	ldd	r26, Y+3	; 0x03
     ff2:	bc 81       	ldd	r27, Y+4	; 0x04
     ff4:	2a e0       	ldi	r18, 0x0A	; 10
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	40 e0       	ldi	r20, 0x00	; 0
     ffa:	50 e0       	ldi	r21, 0x00	; 0
     ffc:	bc 01       	movw	r22, r24
     ffe:	cd 01       	movw	r24, r26
    1000:	0e 94 bd 1b 	call	0x377a	; 0x377a <__divmodsi4>
    1004:	da 01       	movw	r26, r20
    1006:	c9 01       	movw	r24, r18
    1008:	2a e0       	ldi	r18, 0x0A	; 10
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	bc 01       	movw	r22, r24
    1012:	cd 01       	movw	r24, r26
    1014:	0e 94 bd 1b 	call	0x377a	; 0x377a <__divmodsi4>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <LCD_integerToString>
		LCD_integerToString(result%10);
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	9a 81       	ldd	r25, Y+2	; 0x02
    1024:	ab 81       	ldd	r26, Y+3	; 0x03
    1026:	bc 81       	ldd	r27, Y+4	; 0x04
    1028:	2a e0       	ldi	r18, 0x0A	; 10
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e0       	ldi	r20, 0x00	; 0
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	bc 01       	movw	r22, r24
    1032:	cd 01       	movw	r24, r26
    1034:	0e 94 bd 1b 	call	0x377a	; 0x377a <__divmodsi4>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <LCD_integerToString>

	}

}
    1040:	2f 96       	adiw	r28, 0x0f	; 15
    1042:	0f b6       	in	r0, 0x3f	; 63
    1044:	f8 94       	cli
    1046:	de bf       	out	0x3e, r29	; 62
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	cd bf       	out	0x3d, r28	; 61
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	1f 91       	pop	r17
    1052:	0f 91       	pop	r16
    1054:	08 95       	ret

00001056 <GET_OP1>:

void GET_OP1(void)
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	ab 97       	sbiw	r28, 0x2b	; 43
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
	volatile sint8 key;
	key = KeyPad_getPressedKey(); /* get the pressed key number */
    106a:	0e 94 fe 12 	call	0x25fc	; 0x25fc <KeyPad_getPressedKey>
    106e:	8b a7       	std	Y+43, r24	; 0x2b
	if(key=='+'||key=='/'||key=='='||key=='A'||key=='*')
    1070:	8b a5       	ldd	r24, Y+43	; 0x2b
    1072:	8b 32       	cpi	r24, 0x2B	; 43
    1074:	61 f0       	breq	.+24     	; 0x108e <GET_OP1+0x38>
    1076:	8b a5       	ldd	r24, Y+43	; 0x2b
    1078:	8f 32       	cpi	r24, 0x2F	; 47
    107a:	49 f0       	breq	.+18     	; 0x108e <GET_OP1+0x38>
    107c:	8b a5       	ldd	r24, Y+43	; 0x2b
    107e:	8d 33       	cpi	r24, 0x3D	; 61
    1080:	31 f0       	breq	.+12     	; 0x108e <GET_OP1+0x38>
    1082:	8b a5       	ldd	r24, Y+43	; 0x2b
    1084:	81 34       	cpi	r24, 0x41	; 65
    1086:	19 f0       	breq	.+6      	; 0x108e <GET_OP1+0x38>
    1088:	8b a5       	ldd	r24, Y+43	; 0x2b
    108a:	8a 32       	cpi	r24, 0x2A	; 42
    108c:	19 f4       	brne	.+6      	; 0x1094 <GET_OP1+0x3e>
	{
		restart();
    108e:	0e 94 21 0b 	call	0x1642	; 0x1642 <restart>
    1092:	09 c2       	rjmp	.+1042   	; 0x14a6 <GET_OP1+0x450>
		return;
	}
	LCD_display_int(key);   /*Display the pressed key*/
    1094:	8b a5       	ldd	r24, Y+43	; 0x2b
    1096:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <LCD_display_int>
	if(key=='-')
    109a:	8b a5       	ldd	r24, Y+43	; 0x2b
    109c:	8d 32       	cpi	r24, 0x2D	; 45
    109e:	21 f4       	brne	.+8      	; 0x10a8 <GET_OP1+0x52>
	{
		neg=1;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	80 93 68 00 	sts	0x0068, r24
    10a6:	0e c0       	rjmp	.+28     	; 0x10c4 <GET_OP1+0x6e>
		goto step;
	}
	op1=key;
    10a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    10aa:	99 27       	eor	r25, r25
    10ac:	87 fd       	sbrc	r24, 7
    10ae:	90 95       	com	r25
    10b0:	a9 2f       	mov	r26, r25
    10b2:	b9 2f       	mov	r27, r25
    10b4:	80 93 6f 00 	sts	0x006F, r24
    10b8:	90 93 70 00 	sts	0x0070, r25
    10bc:	a0 93 71 00 	sts	0x0071, r26
    10c0:	b0 93 72 00 	sts	0x0072, r27
	step : key = KeyPad_getPressedKey();
    10c4:	0e 94 fe 12 	call	0x25fc	; 0x25fc <KeyPad_getPressedKey>
    10c8:	8b a7       	std	Y+43, r24	; 0x2b
	if(key=='+'||key=='-'||key=='/'||key=='*')   /*if the entered digit is an arthimetic operator*/
    10ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    10cc:	8b 32       	cpi	r24, 0x2B	; 43
    10ce:	51 f0       	breq	.+20     	; 0x10e4 <GET_OP1+0x8e>
    10d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    10d2:	8d 32       	cpi	r24, 0x2D	; 45
    10d4:	39 f0       	breq	.+14     	; 0x10e4 <GET_OP1+0x8e>
    10d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    10d8:	8f 32       	cpi	r24, 0x2F	; 47
    10da:	21 f0       	breq	.+8      	; 0x10e4 <GET_OP1+0x8e>
    10dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    10de:	8a 32       	cpi	r24, 0x2A	; 42
    10e0:	09 f0       	breq	.+2      	; 0x10e4 <GET_OP1+0x8e>
    10e2:	76 c0       	rjmp	.+236    	; 0x11d0 <GET_OP1+0x17a>
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	af ea       	ldi	r26, 0xAF	; 175
    10ea:	b3 e4       	ldi	r27, 0x43	; 67
    10ec:	8f a3       	std	Y+39, r24	; 0x27
    10ee:	98 a7       	std	Y+40, r25	; 0x28
    10f0:	a9 a7       	std	Y+41, r26	; 0x29
    10f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10f4:	6f a1       	ldd	r22, Y+39	; 0x27
    10f6:	78 a5       	ldd	r23, Y+40	; 0x28
    10f8:	89 a5       	ldd	r24, Y+41	; 0x29
    10fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	4a e7       	ldi	r20, 0x7A	; 122
    1102:	53 e4       	ldi	r21, 0x43	; 67
    1104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1108:	dc 01       	movw	r26, r24
    110a:	cb 01       	movw	r24, r22
    110c:	8b a3       	std	Y+35, r24	; 0x23
    110e:	9c a3       	std	Y+36, r25	; 0x24
    1110:	ad a3       	std	Y+37, r26	; 0x25
    1112:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1114:	6b a1       	ldd	r22, Y+35	; 0x23
    1116:	7c a1       	ldd	r23, Y+36	; 0x24
    1118:	8d a1       	ldd	r24, Y+37	; 0x25
    111a:	9e a1       	ldd	r25, Y+38	; 0x26
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	40 e8       	ldi	r20, 0x80	; 128
    1122:	5f e3       	ldi	r21, 0x3F	; 63
    1124:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1128:	88 23       	and	r24, r24
    112a:	2c f4       	brge	.+10     	; 0x1136 <GET_OP1+0xe0>
		__ticks = 1;
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	9a a3       	std	Y+34, r25	; 0x22
    1132:	89 a3       	std	Y+33, r24	; 0x21
    1134:	3f c0       	rjmp	.+126    	; 0x11b4 <GET_OP1+0x15e>
	else if (__tmp > 65535)
    1136:	6b a1       	ldd	r22, Y+35	; 0x23
    1138:	7c a1       	ldd	r23, Y+36	; 0x24
    113a:	8d a1       	ldd	r24, Y+37	; 0x25
    113c:	9e a1       	ldd	r25, Y+38	; 0x26
    113e:	20 e0       	ldi	r18, 0x00	; 0
    1140:	3f ef       	ldi	r19, 0xFF	; 255
    1142:	4f e7       	ldi	r20, 0x7F	; 127
    1144:	57 e4       	ldi	r21, 0x47	; 71
    1146:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    114a:	18 16       	cp	r1, r24
    114c:	4c f5       	brge	.+82     	; 0x11a0 <GET_OP1+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    114e:	6f a1       	ldd	r22, Y+39	; 0x27
    1150:	78 a5       	ldd	r23, Y+40	; 0x28
    1152:	89 a5       	ldd	r24, Y+41	; 0x29
    1154:	9a a5       	ldd	r25, Y+42	; 0x2a
    1156:	20 e0       	ldi	r18, 0x00	; 0
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	40 e2       	ldi	r20, 0x20	; 32
    115c:	51 e4       	ldi	r21, 0x41	; 65
    115e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1162:	dc 01       	movw	r26, r24
    1164:	cb 01       	movw	r24, r22
    1166:	bc 01       	movw	r22, r24
    1168:	cd 01       	movw	r24, r26
    116a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	9a a3       	std	Y+34, r25	; 0x22
    1174:	89 a3       	std	Y+33, r24	; 0x21
    1176:	0f c0       	rjmp	.+30     	; 0x1196 <GET_OP1+0x140>
    1178:	89 e1       	ldi	r24, 0x19	; 25
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	98 a3       	std	Y+32, r25	; 0x20
    117e:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1180:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1182:	98 a1       	ldd	r25, Y+32	; 0x20
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	f1 f7       	brne	.-4      	; 0x1184 <GET_OP1+0x12e>
    1188:	98 a3       	std	Y+32, r25	; 0x20
    118a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    118c:	89 a1       	ldd	r24, Y+33	; 0x21
    118e:	9a a1       	ldd	r25, Y+34	; 0x22
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	9a a3       	std	Y+34, r25	; 0x22
    1194:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1196:	89 a1       	ldd	r24, Y+33	; 0x21
    1198:	9a a1       	ldd	r25, Y+34	; 0x22
    119a:	00 97       	sbiw	r24, 0x00	; 0
    119c:	69 f7       	brne	.-38     	; 0x1178 <GET_OP1+0x122>
    119e:	14 c0       	rjmp	.+40     	; 0x11c8 <GET_OP1+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a0:	6b a1       	ldd	r22, Y+35	; 0x23
    11a2:	7c a1       	ldd	r23, Y+36	; 0x24
    11a4:	8d a1       	ldd	r24, Y+37	; 0x25
    11a6:	9e a1       	ldd	r25, Y+38	; 0x26
    11a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ac:	dc 01       	movw	r26, r24
    11ae:	cb 01       	movw	r24, r22
    11b0:	9a a3       	std	Y+34, r25	; 0x22
    11b2:	89 a3       	std	Y+33, r24	; 0x21
    11b4:	89 a1       	ldd	r24, Y+33	; 0x21
    11b6:	9a a1       	ldd	r25, Y+34	; 0x22
    11b8:	9e 8f       	std	Y+30, r25	; 0x1e
    11ba:	8d 8f       	std	Y+29, r24	; 0x1d
    11bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	f1 f7       	brne	.-4      	; 0x11c0 <GET_OP1+0x16a>
    11c4:	9e 8f       	std	Y+30, r25	; 0x1e
    11c6:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(350);
			operation=key;
    11c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    11ca:	80 93 6d 00 	sts	0x006D, r24
    11ce:	6b c1       	rjmp	.+726    	; 0x14a6 <GET_OP1+0x450>
			return;
		}
	else if(key=='A'||key=='=')
    11d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    11d2:	81 34       	cpi	r24, 0x41	; 65
    11d4:	19 f0       	breq	.+6      	; 0x11dc <GET_OP1+0x186>
    11d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    11d8:	8d 33       	cpi	r24, 0x3D	; 61
    11da:	19 f4       	brne	.+6      	; 0x11e2 <GET_OP1+0x18c>
	{
		restart();
    11dc:	0e 94 21 0b 	call	0x1642	; 0x1642 <restart>
    11e0:	62 c1       	rjmp	.+708    	; 0x14a6 <GET_OP1+0x450>
		return;
	}
	LCD_display_int(key);
    11e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    11e4:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <LCD_display_int>
	op1=op1*10+key;
    11e8:	80 91 6f 00 	lds	r24, 0x006F
    11ec:	90 91 70 00 	lds	r25, 0x0070
    11f0:	a0 91 71 00 	lds	r26, 0x0071
    11f4:	b0 91 72 00 	lds	r27, 0x0072
    11f8:	2a e0       	ldi	r18, 0x0A	; 10
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	bc 01       	movw	r22, r24
    1202:	cd 01       	movw	r24, r26
    1204:	0e 94 9e 1b 	call	0x373c	; 0x373c <__mulsi3>
    1208:	9b 01       	movw	r18, r22
    120a:	ac 01       	movw	r20, r24
    120c:	8b a5       	ldd	r24, Y+43	; 0x2b
    120e:	99 27       	eor	r25, r25
    1210:	87 fd       	sbrc	r24, 7
    1212:	90 95       	com	r25
    1214:	a9 2f       	mov	r26, r25
    1216:	b9 2f       	mov	r27, r25
    1218:	82 0f       	add	r24, r18
    121a:	93 1f       	adc	r25, r19
    121c:	a4 1f       	adc	r26, r20
    121e:	b5 1f       	adc	r27, r21
    1220:	80 93 6f 00 	sts	0x006F, r24
    1224:	90 93 70 00 	sts	0x0070, r25
    1228:	a0 93 71 00 	sts	0x0071, r26
    122c:	b0 93 72 00 	sts	0x0072, r27
	key = KeyPad_getPressedKey();
    1230:	0e 94 fe 12 	call	0x25fc	; 0x25fc <KeyPad_getPressedKey>
    1234:	8b a7       	std	Y+43, r24	; 0x2b
	if(key=='+'||key=='-'||key=='/'||key=='*')   /*if the entered digit is an arthimetic operator*/
    1236:	8b a5       	ldd	r24, Y+43	; 0x2b
    1238:	8b 32       	cpi	r24, 0x2B	; 43
    123a:	51 f0       	breq	.+20     	; 0x1250 <GET_OP1+0x1fa>
    123c:	8b a5       	ldd	r24, Y+43	; 0x2b
    123e:	8d 32       	cpi	r24, 0x2D	; 45
    1240:	39 f0       	breq	.+14     	; 0x1250 <GET_OP1+0x1fa>
    1242:	8b a5       	ldd	r24, Y+43	; 0x2b
    1244:	8f 32       	cpi	r24, 0x2F	; 47
    1246:	21 f0       	breq	.+8      	; 0x1250 <GET_OP1+0x1fa>
    1248:	8b a5       	ldd	r24, Y+43	; 0x2b
    124a:	8a 32       	cpi	r24, 0x2A	; 42
    124c:	09 f0       	breq	.+2      	; 0x1250 <GET_OP1+0x1fa>
    124e:	76 c0       	rjmp	.+236    	; 0x133c <GET_OP1+0x2e6>
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	af ea       	ldi	r26, 0xAF	; 175
    1256:	b3 e4       	ldi	r27, 0x43	; 67
    1258:	89 8f       	std	Y+25, r24	; 0x19
    125a:	9a 8f       	std	Y+26, r25	; 0x1a
    125c:	ab 8f       	std	Y+27, r26	; 0x1b
    125e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1260:	69 8d       	ldd	r22, Y+25	; 0x19
    1262:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1264:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1266:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	4a e7       	ldi	r20, 0x7A	; 122
    126e:	53 e4       	ldi	r21, 0x43	; 67
    1270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	8d 8b       	std	Y+21, r24	; 0x15
    127a:	9e 8b       	std	Y+22, r25	; 0x16
    127c:	af 8b       	std	Y+23, r26	; 0x17
    127e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1280:	6d 89       	ldd	r22, Y+21	; 0x15
    1282:	7e 89       	ldd	r23, Y+22	; 0x16
    1284:	8f 89       	ldd	r24, Y+23	; 0x17
    1286:	98 8d       	ldd	r25, Y+24	; 0x18
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	40 e8       	ldi	r20, 0x80	; 128
    128e:	5f e3       	ldi	r21, 0x3F	; 63
    1290:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1294:	88 23       	and	r24, r24
    1296:	2c f4       	brge	.+10     	; 0x12a2 <GET_OP1+0x24c>
		__ticks = 1;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	9c 8b       	std	Y+20, r25	; 0x14
    129e:	8b 8b       	std	Y+19, r24	; 0x13
    12a0:	3f c0       	rjmp	.+126    	; 0x1320 <GET_OP1+0x2ca>
	else if (__tmp > 65535)
    12a2:	6d 89       	ldd	r22, Y+21	; 0x15
    12a4:	7e 89       	ldd	r23, Y+22	; 0x16
    12a6:	8f 89       	ldd	r24, Y+23	; 0x17
    12a8:	98 8d       	ldd	r25, Y+24	; 0x18
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	3f ef       	ldi	r19, 0xFF	; 255
    12ae:	4f e7       	ldi	r20, 0x7F	; 127
    12b0:	57 e4       	ldi	r21, 0x47	; 71
    12b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12b6:	18 16       	cp	r1, r24
    12b8:	4c f5       	brge	.+82     	; 0x130c <GET_OP1+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ba:	69 8d       	ldd	r22, Y+25	; 0x19
    12bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	40 e2       	ldi	r20, 0x20	; 32
    12c8:	51 e4       	ldi	r21, 0x41	; 65
    12ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	bc 01       	movw	r22, r24
    12d4:	cd 01       	movw	r24, r26
    12d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	9c 8b       	std	Y+20, r25	; 0x14
    12e0:	8b 8b       	std	Y+19, r24	; 0x13
    12e2:	0f c0       	rjmp	.+30     	; 0x1302 <GET_OP1+0x2ac>
    12e4:	89 e1       	ldi	r24, 0x19	; 25
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	9a 8b       	std	Y+18, r25	; 0x12
    12ea:	89 8b       	std	Y+17, r24	; 0x11
    12ec:	89 89       	ldd	r24, Y+17	; 0x11
    12ee:	9a 89       	ldd	r25, Y+18	; 0x12
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	f1 f7       	brne	.-4      	; 0x12f0 <GET_OP1+0x29a>
    12f4:	9a 8b       	std	Y+18, r25	; 0x12
    12f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f8:	8b 89       	ldd	r24, Y+19	; 0x13
    12fa:	9c 89       	ldd	r25, Y+20	; 0x14
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	9c 8b       	std	Y+20, r25	; 0x14
    1300:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1302:	8b 89       	ldd	r24, Y+19	; 0x13
    1304:	9c 89       	ldd	r25, Y+20	; 0x14
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	69 f7       	brne	.-38     	; 0x12e4 <GET_OP1+0x28e>
    130a:	14 c0       	rjmp	.+40     	; 0x1334 <GET_OP1+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    130c:	6d 89       	ldd	r22, Y+21	; 0x15
    130e:	7e 89       	ldd	r23, Y+22	; 0x16
    1310:	8f 89       	ldd	r24, Y+23	; 0x17
    1312:	98 8d       	ldd	r25, Y+24	; 0x18
    1314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	9c 8b       	std	Y+20, r25	; 0x14
    131e:	8b 8b       	std	Y+19, r24	; 0x13
    1320:	8b 89       	ldd	r24, Y+19	; 0x13
    1322:	9c 89       	ldd	r25, Y+20	; 0x14
    1324:	98 8b       	std	Y+16, r25	; 0x10
    1326:	8f 87       	std	Y+15, r24	; 0x0f
    1328:	8f 85       	ldd	r24, Y+15	; 0x0f
    132a:	98 89       	ldd	r25, Y+16	; 0x10
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	f1 f7       	brne	.-4      	; 0x132c <GET_OP1+0x2d6>
    1330:	98 8b       	std	Y+16, r25	; 0x10
    1332:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(350);
				operation=key;
    1334:	8b a5       	ldd	r24, Y+43	; 0x2b
    1336:	80 93 6d 00 	sts	0x006D, r24
    133a:	b5 c0       	rjmp	.+362    	; 0x14a6 <GET_OP1+0x450>
				return;
			}
	else if(key=='A'||key=='=')
    133c:	8b a5       	ldd	r24, Y+43	; 0x2b
    133e:	81 34       	cpi	r24, 0x41	; 65
    1340:	19 f0       	breq	.+6      	; 0x1348 <GET_OP1+0x2f2>
    1342:	8b a5       	ldd	r24, Y+43	; 0x2b
    1344:	8d 33       	cpi	r24, 0x3D	; 61
    1346:	19 f4       	brne	.+6      	; 0x134e <GET_OP1+0x2f8>
	{
		restart();
    1348:	0e 94 21 0b 	call	0x1642	; 0x1642 <restart>
    134c:	ac c0       	rjmp	.+344    	; 0x14a6 <GET_OP1+0x450>
		return;
	}
	LCD_display_int(key);
    134e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1350:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <LCD_display_int>
		op1=op1*10+key;
    1354:	80 91 6f 00 	lds	r24, 0x006F
    1358:	90 91 70 00 	lds	r25, 0x0070
    135c:	a0 91 71 00 	lds	r26, 0x0071
    1360:	b0 91 72 00 	lds	r27, 0x0072
    1364:	2a e0       	ldi	r18, 0x0A	; 10
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	40 e0       	ldi	r20, 0x00	; 0
    136a:	50 e0       	ldi	r21, 0x00	; 0
    136c:	bc 01       	movw	r22, r24
    136e:	cd 01       	movw	r24, r26
    1370:	0e 94 9e 1b 	call	0x373c	; 0x373c <__mulsi3>
    1374:	9b 01       	movw	r18, r22
    1376:	ac 01       	movw	r20, r24
    1378:	8b a5       	ldd	r24, Y+43	; 0x2b
    137a:	99 27       	eor	r25, r25
    137c:	87 fd       	sbrc	r24, 7
    137e:	90 95       	com	r25
    1380:	a9 2f       	mov	r26, r25
    1382:	b9 2f       	mov	r27, r25
    1384:	82 0f       	add	r24, r18
    1386:	93 1f       	adc	r25, r19
    1388:	a4 1f       	adc	r26, r20
    138a:	b5 1f       	adc	r27, r21
    138c:	80 93 6f 00 	sts	0x006F, r24
    1390:	90 93 70 00 	sts	0x0070, r25
    1394:	a0 93 71 00 	sts	0x0071, r26
    1398:	b0 93 72 00 	sts	0x0072, r27
		key = KeyPad_getPressedKey();
    139c:	0e 94 fe 12 	call	0x25fc	; 0x25fc <KeyPad_getPressedKey>
    13a0:	8b a7       	std	Y+43, r24	; 0x2b
		if(key=='+'||key=='-'||key=='/'||key=='*')   /*if the entered digit is an arthimetic operator*/
    13a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    13a4:	8b 32       	cpi	r24, 0x2B	; 43
    13a6:	51 f0       	breq	.+20     	; 0x13bc <GET_OP1+0x366>
    13a8:	8b a5       	ldd	r24, Y+43	; 0x2b
    13aa:	8d 32       	cpi	r24, 0x2D	; 45
    13ac:	39 f0       	breq	.+14     	; 0x13bc <GET_OP1+0x366>
    13ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    13b0:	8f 32       	cpi	r24, 0x2F	; 47
    13b2:	21 f0       	breq	.+8      	; 0x13bc <GET_OP1+0x366>
    13b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    13b6:	8a 32       	cpi	r24, 0x2A	; 42
    13b8:	09 f0       	breq	.+2      	; 0x13bc <GET_OP1+0x366>
    13ba:	75 c0       	rjmp	.+234    	; 0x14a6 <GET_OP1+0x450>
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	af ea       	ldi	r26, 0xAF	; 175
    13c2:	b3 e4       	ldi	r27, 0x43	; 67
    13c4:	8b 87       	std	Y+11, r24	; 0x0b
    13c6:	9c 87       	std	Y+12, r25	; 0x0c
    13c8:	ad 87       	std	Y+13, r26	; 0x0d
    13ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	4a e7       	ldi	r20, 0x7A	; 122
    13da:	53 e4       	ldi	r21, 0x43	; 67
    13dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	8f 83       	std	Y+7, r24	; 0x07
    13e6:	98 87       	std	Y+8, r25	; 0x08
    13e8:	a9 87       	std	Y+9, r26	; 0x09
    13ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13ec:	6f 81       	ldd	r22, Y+7	; 0x07
    13ee:	78 85       	ldd	r23, Y+8	; 0x08
    13f0:	89 85       	ldd	r24, Y+9	; 0x09
    13f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	40 e8       	ldi	r20, 0x80	; 128
    13fa:	5f e3       	ldi	r21, 0x3F	; 63
    13fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1400:	88 23       	and	r24, r24
    1402:	2c f4       	brge	.+10     	; 0x140e <GET_OP1+0x3b8>
		__ticks = 1;
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	9e 83       	std	Y+6, r25	; 0x06
    140a:	8d 83       	std	Y+5, r24	; 0x05
    140c:	3f c0       	rjmp	.+126    	; 0x148c <GET_OP1+0x436>
	else if (__tmp > 65535)
    140e:	6f 81       	ldd	r22, Y+7	; 0x07
    1410:	78 85       	ldd	r23, Y+8	; 0x08
    1412:	89 85       	ldd	r24, Y+9	; 0x09
    1414:	9a 85       	ldd	r25, Y+10	; 0x0a
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	3f ef       	ldi	r19, 0xFF	; 255
    141a:	4f e7       	ldi	r20, 0x7F	; 127
    141c:	57 e4       	ldi	r21, 0x47	; 71
    141e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1422:	18 16       	cp	r1, r24
    1424:	4c f5       	brge	.+82     	; 0x1478 <GET_OP1+0x422>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1426:	6b 85       	ldd	r22, Y+11	; 0x0b
    1428:	7c 85       	ldd	r23, Y+12	; 0x0c
    142a:	8d 85       	ldd	r24, Y+13	; 0x0d
    142c:	9e 85       	ldd	r25, Y+14	; 0x0e
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	40 e2       	ldi	r20, 0x20	; 32
    1434:	51 e4       	ldi	r21, 0x41	; 65
    1436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	bc 01       	movw	r22, r24
    1440:	cd 01       	movw	r24, r26
    1442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	9e 83       	std	Y+6, r25	; 0x06
    144c:	8d 83       	std	Y+5, r24	; 0x05
    144e:	0f c0       	rjmp	.+30     	; 0x146e <GET_OP1+0x418>
    1450:	89 e1       	ldi	r24, 0x19	; 25
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	9c 83       	std	Y+4, r25	; 0x04
    1456:	8b 83       	std	Y+3, r24	; 0x03
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	9c 81       	ldd	r25, Y+4	; 0x04
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	f1 f7       	brne	.-4      	; 0x145c <GET_OP1+0x406>
    1460:	9c 83       	std	Y+4, r25	; 0x04
    1462:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1464:	8d 81       	ldd	r24, Y+5	; 0x05
    1466:	9e 81       	ldd	r25, Y+6	; 0x06
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	9e 83       	std	Y+6, r25	; 0x06
    146c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    146e:	8d 81       	ldd	r24, Y+5	; 0x05
    1470:	9e 81       	ldd	r25, Y+6	; 0x06
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	69 f7       	brne	.-38     	; 0x1450 <GET_OP1+0x3fa>
    1476:	14 c0       	rjmp	.+40     	; 0x14a0 <GET_OP1+0x44a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1478:	6f 81       	ldd	r22, Y+7	; 0x07
    147a:	78 85       	ldd	r23, Y+8	; 0x08
    147c:	89 85       	ldd	r24, Y+9	; 0x09
    147e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	9e 83       	std	Y+6, r25	; 0x06
    148a:	8d 83       	std	Y+5, r24	; 0x05
    148c:	8d 81       	ldd	r24, Y+5	; 0x05
    148e:	9e 81       	ldd	r25, Y+6	; 0x06
    1490:	9a 83       	std	Y+2, r25	; 0x02
    1492:	89 83       	std	Y+1, r24	; 0x01
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	9a 81       	ldd	r25, Y+2	; 0x02
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	f1 f7       	brne	.-4      	; 0x1498 <GET_OP1+0x442>
    149c:	9a 83       	std	Y+2, r25	; 0x02
    149e:	89 83       	std	Y+1, r24	; 0x01
				{
					_delay_ms(350);
					operation=key;
    14a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    14a2:	80 93 6d 00 	sts	0x006D, r24
					return;
				}
}
    14a6:	ab 96       	adiw	r28, 0x2b	; 43
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	cf 91       	pop	r28
    14b4:	df 91       	pop	r29
    14b6:	08 95       	ret

000014b8 <GET_OP2>:




void GET_OP2(void)
{
    14b8:	df 93       	push	r29
    14ba:	cf 93       	push	r28
    14bc:	0f 92       	push	r0
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
	uint8 key;

	key =KeyPad_getPressedKey();
    14c2:	0e 94 fe 12 	call	0x25fc	; 0x25fc <KeyPad_getPressedKey>
    14c6:	89 83       	std	Y+1, r24	; 0x01
	LCD_Clear();
    14c8:	0e 94 c9 1a 	call	0x3592	; 0x3592 <LCD_Clear>
	if(key=='+'||key=='-'||key=='/'||key=='='||key=='A'||key=='*')
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	8b 32       	cpi	r24, 0x2B	; 43
    14d0:	79 f0       	breq	.+30     	; 0x14f0 <GET_OP2+0x38>
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
    14d4:	8d 32       	cpi	r24, 0x2D	; 45
    14d6:	61 f0       	breq	.+24     	; 0x14f0 <GET_OP2+0x38>
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	8f 32       	cpi	r24, 0x2F	; 47
    14dc:	49 f0       	breq	.+18     	; 0x14f0 <GET_OP2+0x38>
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	8d 33       	cpi	r24, 0x3D	; 61
    14e2:	31 f0       	breq	.+12     	; 0x14f0 <GET_OP2+0x38>
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	81 34       	cpi	r24, 0x41	; 65
    14e8:	19 f0       	breq	.+6      	; 0x14f0 <GET_OP2+0x38>
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	8a 32       	cpi	r24, 0x2A	; 42
    14ee:	19 f4       	brne	.+6      	; 0x14f6 <GET_OP2+0x3e>
	{
		restart();
    14f0:	0e 94 21 0b 	call	0x1642	; 0x1642 <restart>
    14f4:	a2 c0       	rjmp	.+324    	; 0x163a <GET_OP2+0x182>
		return;
	}
	LCD_display_int(key);   /*Display the pressed key*/
    14f6:	89 81       	ldd	r24, Y+1	; 0x01
    14f8:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <LCD_display_int>
	op2=key;
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	88 2f       	mov	r24, r24
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	a0 e0       	ldi	r26, 0x00	; 0
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	80 93 69 00 	sts	0x0069, r24
    150a:	90 93 6a 00 	sts	0x006A, r25
    150e:	a0 93 6b 00 	sts	0x006B, r26
    1512:	b0 93 6c 00 	sts	0x006C, r27

	key =KeyPad_getPressedKey();
    1516:	0e 94 fe 12 	call	0x25fc	; 0x25fc <KeyPad_getPressedKey>
    151a:	89 83       	std	Y+1, r24	; 0x01
	if(key=='+'||key=='-'||key=='/'||key=='A'||key=='*')
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	8b 32       	cpi	r24, 0x2B	; 43
    1520:	61 f0       	breq	.+24     	; 0x153a <GET_OP2+0x82>
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	8d 32       	cpi	r24, 0x2D	; 45
    1526:	49 f0       	breq	.+18     	; 0x153a <GET_OP2+0x82>
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	8f 32       	cpi	r24, 0x2F	; 47
    152c:	31 f0       	breq	.+12     	; 0x153a <GET_OP2+0x82>
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	81 34       	cpi	r24, 0x41	; 65
    1532:	19 f0       	breq	.+6      	; 0x153a <GET_OP2+0x82>
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	8a 32       	cpi	r24, 0x2A	; 42
    1538:	19 f4       	brne	.+6      	; 0x1540 <GET_OP2+0x88>
	{
		restart();
    153a:	0e 94 21 0b 	call	0x1642	; 0x1642 <restart>
    153e:	7d c0       	rjmp	.+250    	; 0x163a <GET_OP2+0x182>
		return;
	}
	else if(key=='=')
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	8d 33       	cpi	r24, 0x3D	; 61
    1544:	09 f4       	brne	.+2      	; 0x1548 <GET_OP2+0x90>
    1546:	79 c0       	rjmp	.+242    	; 0x163a <GET_OP2+0x182>
	{
		return;
	}
	LCD_display_int(key);
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <LCD_display_int>
	op2=op2*10+key;
    154e:	80 91 69 00 	lds	r24, 0x0069
    1552:	90 91 6a 00 	lds	r25, 0x006A
    1556:	a0 91 6b 00 	lds	r26, 0x006B
    155a:	b0 91 6c 00 	lds	r27, 0x006C
    155e:	2a e0       	ldi	r18, 0x0A	; 10
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	40 e0       	ldi	r20, 0x00	; 0
    1564:	50 e0       	ldi	r21, 0x00	; 0
    1566:	bc 01       	movw	r22, r24
    1568:	cd 01       	movw	r24, r26
    156a:	0e 94 9e 1b 	call	0x373c	; 0x373c <__mulsi3>
    156e:	9b 01       	movw	r18, r22
    1570:	ac 01       	movw	r20, r24
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	88 2f       	mov	r24, r24
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	a0 e0       	ldi	r26, 0x00	; 0
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	82 0f       	add	r24, r18
    157e:	93 1f       	adc	r25, r19
    1580:	a4 1f       	adc	r26, r20
    1582:	b5 1f       	adc	r27, r21
    1584:	80 93 69 00 	sts	0x0069, r24
    1588:	90 93 6a 00 	sts	0x006A, r25
    158c:	a0 93 6b 00 	sts	0x006B, r26
    1590:	b0 93 6c 00 	sts	0x006C, r27
	key =KeyPad_getPressedKey();
    1594:	0e 94 fe 12 	call	0x25fc	; 0x25fc <KeyPad_getPressedKey>
    1598:	89 83       	std	Y+1, r24	; 0x01
	if(key=='+'||key=='-'||key=='/'||key=='A'||key=='*')
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	8b 32       	cpi	r24, 0x2B	; 43
    159e:	61 f0       	breq	.+24     	; 0x15b8 <GET_OP2+0x100>
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	8d 32       	cpi	r24, 0x2D	; 45
    15a4:	49 f0       	breq	.+18     	; 0x15b8 <GET_OP2+0x100>
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	8f 32       	cpi	r24, 0x2F	; 47
    15aa:	31 f0       	breq	.+12     	; 0x15b8 <GET_OP2+0x100>
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	81 34       	cpi	r24, 0x41	; 65
    15b0:	19 f0       	breq	.+6      	; 0x15b8 <GET_OP2+0x100>
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	8a 32       	cpi	r24, 0x2A	; 42
    15b6:	19 f4       	brne	.+6      	; 0x15be <GET_OP2+0x106>
	{
		restart();
    15b8:	0e 94 21 0b 	call	0x1642	; 0x1642 <restart>
    15bc:	3e c0       	rjmp	.+124    	; 0x163a <GET_OP2+0x182>
		return;
	}
	else if(key=='=')
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	8d 33       	cpi	r24, 0x3D	; 61
    15c2:	d9 f1       	breq	.+118    	; 0x163a <GET_OP2+0x182>
	{
		return;
	}
	LCD_display_int(key);
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <LCD_display_int>
		op2=op2*10+key;
    15ca:	80 91 69 00 	lds	r24, 0x0069
    15ce:	90 91 6a 00 	lds	r25, 0x006A
    15d2:	a0 91 6b 00 	lds	r26, 0x006B
    15d6:	b0 91 6c 00 	lds	r27, 0x006C
    15da:	2a e0       	ldi	r18, 0x0A	; 10
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	40 e0       	ldi	r20, 0x00	; 0
    15e0:	50 e0       	ldi	r21, 0x00	; 0
    15e2:	bc 01       	movw	r22, r24
    15e4:	cd 01       	movw	r24, r26
    15e6:	0e 94 9e 1b 	call	0x373c	; 0x373c <__mulsi3>
    15ea:	9b 01       	movw	r18, r22
    15ec:	ac 01       	movw	r20, r24
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	88 2f       	mov	r24, r24
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	a0 e0       	ldi	r26, 0x00	; 0
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	82 0f       	add	r24, r18
    15fa:	93 1f       	adc	r25, r19
    15fc:	a4 1f       	adc	r26, r20
    15fe:	b5 1f       	adc	r27, r21
    1600:	80 93 69 00 	sts	0x0069, r24
    1604:	90 93 6a 00 	sts	0x006A, r25
    1608:	a0 93 6b 00 	sts	0x006B, r26
    160c:	b0 93 6c 00 	sts	0x006C, r27
		key =KeyPad_getPressedKey();
    1610:	0e 94 fe 12 	call	0x25fc	; 0x25fc <KeyPad_getPressedKey>
    1614:	89 83       	std	Y+1, r24	; 0x01
		if(key=='+'||key=='-'||key=='/'||key=='A'||key=='*')
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	8b 32       	cpi	r24, 0x2B	; 43
    161a:	61 f0       	breq	.+24     	; 0x1634 <GET_OP2+0x17c>
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	8d 32       	cpi	r24, 0x2D	; 45
    1620:	49 f0       	breq	.+18     	; 0x1634 <GET_OP2+0x17c>
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	8f 32       	cpi	r24, 0x2F	; 47
    1626:	31 f0       	breq	.+12     	; 0x1634 <GET_OP2+0x17c>
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	81 34       	cpi	r24, 0x41	; 65
    162c:	19 f0       	breq	.+6      	; 0x1634 <GET_OP2+0x17c>
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	8a 32       	cpi	r24, 0x2A	; 42
    1632:	19 f4       	brne	.+6      	; 0x163a <GET_OP2+0x182>
		{
			check=1;
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	80 93 6e 00 	sts	0x006E, r24
		}
		else if(key=='=')
		{
			return;
		}
}
    163a:	0f 90       	pop	r0
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <restart>:
//	LCD_display_int(key);   /*Display the pressed key*/
//	operation=key;
//}

void restart(void)
{
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
	LCD_Clear();
    164a:	0e 94 c9 1a 	call	0x3592	; 0x3592 <LCD_Clear>
	check=1;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	80 93 6e 00 	sts	0x006E, r24
}
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	08 95       	ret

0000165a <DIO_setPINDir>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void DIO_setPINDir(uint8 portname,uint8 pin,uint8 direction)
{
    165a:	df 93       	push	r29
    165c:	cf 93       	push	r28
    165e:	00 d0       	rcall	.+0      	; 0x1660 <DIO_setPINDir+0x6>
    1660:	00 d0       	rcall	.+0      	; 0x1662 <DIO_setPINDir+0x8>
    1662:	0f 92       	push	r0
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	89 83       	std	Y+1, r24	; 0x01
    166a:	6a 83       	std	Y+2, r22	; 0x02
    166c:	4b 83       	std	Y+3, r20	; 0x03

	switch(portname)
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	3d 83       	std	Y+5, r19	; 0x05
    1676:	2c 83       	std	Y+4, r18	; 0x04
    1678:	8c 81       	ldd	r24, Y+4	; 0x04
    167a:	9d 81       	ldd	r25, Y+5	; 0x05
    167c:	82 34       	cpi	r24, 0x42	; 66
    167e:	91 05       	cpc	r25, r1
    1680:	09 f4       	brne	.+2      	; 0x1684 <DIO_setPINDir+0x2a>
    1682:	44 c0       	rjmp	.+136    	; 0x170c <DIO_setPINDir+0xb2>
    1684:	2c 81       	ldd	r18, Y+4	; 0x04
    1686:	3d 81       	ldd	r19, Y+5	; 0x05
    1688:	23 34       	cpi	r18, 0x43	; 67
    168a:	31 05       	cpc	r19, r1
    168c:	34 f4       	brge	.+12     	; 0x169a <DIO_setPINDir+0x40>
    168e:	8c 81       	ldd	r24, Y+4	; 0x04
    1690:	9d 81       	ldd	r25, Y+5	; 0x05
    1692:	81 34       	cpi	r24, 0x41	; 65
    1694:	91 05       	cpc	r25, r1
    1696:	71 f0       	breq	.+28     	; 0x16b4 <DIO_setPINDir+0x5a>
    1698:	bc c0       	rjmp	.+376    	; 0x1812 <DIO_setPINDir+0x1b8>
    169a:	2c 81       	ldd	r18, Y+4	; 0x04
    169c:	3d 81       	ldd	r19, Y+5	; 0x05
    169e:	23 34       	cpi	r18, 0x43	; 67
    16a0:	31 05       	cpc	r19, r1
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <DIO_setPINDir+0x4c>
    16a4:	5f c0       	rjmp	.+190    	; 0x1764 <DIO_setPINDir+0x10a>
    16a6:	8c 81       	ldd	r24, Y+4	; 0x04
    16a8:	9d 81       	ldd	r25, Y+5	; 0x05
    16aa:	84 34       	cpi	r24, 0x44	; 68
    16ac:	91 05       	cpc	r25, r1
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <DIO_setPINDir+0x58>
    16b0:	85 c0       	rjmp	.+266    	; 0x17bc <DIO_setPINDir+0x162>
    16b2:	af c0       	rjmp	.+350    	; 0x1812 <DIO_setPINDir+0x1b8>
	{

	case 'A':
		if( direction==1 )
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	a1 f4       	brne	.+40     	; 0x16e2 <DIO_setPINDir+0x88>
		{
			SET_BIT(DDRA,pin);
    16ba:	aa e3       	ldi	r26, 0x3A	; 58
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	ea e3       	ldi	r30, 0x3A	; 58
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <DIO_setPINDir+0x7e>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <DIO_setPINDir+0x7a>
    16dc:	84 2b       	or	r24, r20
    16de:	8c 93       	st	X, r24
    16e0:	98 c0       	rjmp	.+304    	; 0x1812 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRA,pin);
    16e2:	aa e3       	ldi	r26, 0x3A	; 58
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	ea e3       	ldi	r30, 0x3A	; 58
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	48 2f       	mov	r20, r24
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 2e       	mov	r0, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <DIO_setPINDir+0xa6>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	0a 94       	dec	r0
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <DIO_setPINDir+0xa2>
    1704:	80 95       	com	r24
    1706:	84 23       	and	r24, r20
    1708:	8c 93       	st	X, r24
    170a:	83 c0       	rjmp	.+262    	; 0x1812 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'B':
		if( direction==1 )
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	a1 f4       	brne	.+40     	; 0x173a <DIO_setPINDir+0xe0>
		{
			SET_BIT(DDRB,pin);
    1712:	a7 e3       	ldi	r26, 0x37	; 55
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e7 e3       	ldi	r30, 0x37	; 55
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	48 2f       	mov	r20, r24
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	02 2e       	mov	r0, r18
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <DIO_setPINDir+0xd6>
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	0a 94       	dec	r0
    1732:	e2 f7       	brpl	.-8      	; 0x172c <DIO_setPINDir+0xd2>
    1734:	84 2b       	or	r24, r20
    1736:	8c 93       	st	X, r24
    1738:	6c c0       	rjmp	.+216    	; 0x1812 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRB,pin);
    173a:	a7 e3       	ldi	r26, 0x37	; 55
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e7 e3       	ldi	r30, 0x37	; 55
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	48 2f       	mov	r20, r24
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	02 2e       	mov	r0, r18
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <DIO_setPINDir+0xfe>
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	0a 94       	dec	r0
    175a:	e2 f7       	brpl	.-8      	; 0x1754 <DIO_setPINDir+0xfa>
    175c:	80 95       	com	r24
    175e:	84 23       	and	r24, r20
    1760:	8c 93       	st	X, r24
    1762:	57 c0       	rjmp	.+174    	; 0x1812 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'C':
		if( direction==1 )
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	81 30       	cpi	r24, 0x01	; 1
    1768:	a1 f4       	brne	.+40     	; 0x1792 <DIO_setPINDir+0x138>
		{
			SET_BIT(DDRC,pin);
    176a:	a4 e3       	ldi	r26, 0x34	; 52
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e4 e3       	ldi	r30, 0x34	; 52
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	48 2f       	mov	r20, r24
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	02 2e       	mov	r0, r18
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <DIO_setPINDir+0x12e>
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	0a 94       	dec	r0
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <DIO_setPINDir+0x12a>
    178c:	84 2b       	or	r24, r20
    178e:	8c 93       	st	X, r24
    1790:	40 c0       	rjmp	.+128    	; 0x1812 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRC,pin);
    1792:	a4 e3       	ldi	r26, 0x34	; 52
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e4 e3       	ldi	r30, 0x34	; 52
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	48 2f       	mov	r20, r24
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	02 2e       	mov	r0, r18
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <DIO_setPINDir+0x156>
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	0a 94       	dec	r0
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <DIO_setPINDir+0x152>
    17b4:	80 95       	com	r24
    17b6:	84 23       	and	r24, r20
    17b8:	8c 93       	st	X, r24
    17ba:	2b c0       	rjmp	.+86     	; 0x1812 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'D':
		if( direction==1)
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	81 30       	cpi	r24, 0x01	; 1
    17c0:	a1 f4       	brne	.+40     	; 0x17ea <DIO_setPINDir+0x190>
		{
			SET_BIT(DDRD,pin);
    17c2:	a1 e3       	ldi	r26, 0x31	; 49
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e1 e3       	ldi	r30, 0x31	; 49
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	48 2f       	mov	r20, r24
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	02 2e       	mov	r0, r18
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <DIO_setPINDir+0x186>
    17dc:	88 0f       	add	r24, r24
    17de:	99 1f       	adc	r25, r25
    17e0:	0a 94       	dec	r0
    17e2:	e2 f7       	brpl	.-8      	; 0x17dc <DIO_setPINDir+0x182>
    17e4:	84 2b       	or	r24, r20
    17e6:	8c 93       	st	X, r24
    17e8:	14 c0       	rjmp	.+40     	; 0x1812 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRD,pin);
    17ea:	a1 e3       	ldi	r26, 0x31	; 49
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e1 e3       	ldi	r30, 0x31	; 49
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	48 2f       	mov	r20, r24
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	28 2f       	mov	r18, r24
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	02 2e       	mov	r0, r18
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <DIO_setPINDir+0x1ae>
    1804:	88 0f       	add	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	0a 94       	dec	r0
    180a:	e2 f7       	brpl	.-8      	; 0x1804 <DIO_setPINDir+0x1aa>
    180c:	80 95       	com	r24
    180e:	84 23       	and	r24, r20
    1810:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	cf 91       	pop	r28
    181e:	df 91       	pop	r29
    1820:	08 95       	ret

00001822 <DIO_write_PIN>:


void DIO_write_PIN(uint8 portname,uint8 pin,uint8 pinvalue)
{
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	00 d0       	rcall	.+0      	; 0x1828 <DIO_write_PIN+0x6>
    1828:	00 d0       	rcall	.+0      	; 0x182a <DIO_write_PIN+0x8>
    182a:	0f 92       	push	r0
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	89 83       	std	Y+1, r24	; 0x01
    1832:	6a 83       	std	Y+2, r22	; 0x02
    1834:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	3d 83       	std	Y+5, r19	; 0x05
    183e:	2c 83       	std	Y+4, r18	; 0x04
    1840:	8c 81       	ldd	r24, Y+4	; 0x04
    1842:	9d 81       	ldd	r25, Y+5	; 0x05
    1844:	82 34       	cpi	r24, 0x42	; 66
    1846:	91 05       	cpc	r25, r1
    1848:	09 f4       	brne	.+2      	; 0x184c <DIO_write_PIN+0x2a>
    184a:	44 c0       	rjmp	.+136    	; 0x18d4 <DIO_write_PIN+0xb2>
    184c:	2c 81       	ldd	r18, Y+4	; 0x04
    184e:	3d 81       	ldd	r19, Y+5	; 0x05
    1850:	23 34       	cpi	r18, 0x43	; 67
    1852:	31 05       	cpc	r19, r1
    1854:	34 f4       	brge	.+12     	; 0x1862 <DIO_write_PIN+0x40>
    1856:	8c 81       	ldd	r24, Y+4	; 0x04
    1858:	9d 81       	ldd	r25, Y+5	; 0x05
    185a:	81 34       	cpi	r24, 0x41	; 65
    185c:	91 05       	cpc	r25, r1
    185e:	71 f0       	breq	.+28     	; 0x187c <DIO_write_PIN+0x5a>
    1860:	bc c0       	rjmp	.+376    	; 0x19da <DIO_write_PIN+0x1b8>
    1862:	2c 81       	ldd	r18, Y+4	; 0x04
    1864:	3d 81       	ldd	r19, Y+5	; 0x05
    1866:	23 34       	cpi	r18, 0x43	; 67
    1868:	31 05       	cpc	r19, r1
    186a:	09 f4       	brne	.+2      	; 0x186e <DIO_write_PIN+0x4c>
    186c:	5f c0       	rjmp	.+190    	; 0x192c <DIO_write_PIN+0x10a>
    186e:	8c 81       	ldd	r24, Y+4	; 0x04
    1870:	9d 81       	ldd	r25, Y+5	; 0x05
    1872:	84 34       	cpi	r24, 0x44	; 68
    1874:	91 05       	cpc	r25, r1
    1876:	09 f4       	brne	.+2      	; 0x187a <DIO_write_PIN+0x58>
    1878:	85 c0       	rjmp	.+266    	; 0x1984 <DIO_write_PIN+0x162>
    187a:	af c0       	rjmp	.+350    	; 0x19da <DIO_write_PIN+0x1b8>
	{

	case 'A':
		if( pinvalue==1 )
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	81 30       	cpi	r24, 0x01	; 1
    1880:	a1 f4       	brne	.+40     	; 0x18aa <DIO_write_PIN+0x88>
		{
			SET_BIT(PORTA,pin);
    1882:	ab e3       	ldi	r26, 0x3B	; 59
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	eb e3       	ldi	r30, 0x3B	; 59
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	48 2f       	mov	r20, r24
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	02 2e       	mov	r0, r18
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <DIO_write_PIN+0x7e>
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	0a 94       	dec	r0
    18a2:	e2 f7       	brpl	.-8      	; 0x189c <DIO_write_PIN+0x7a>
    18a4:	84 2b       	or	r24, r20
    18a6:	8c 93       	st	X, r24
    18a8:	98 c0       	rjmp	.+304    	; 0x19da <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
    18aa:	ab e3       	ldi	r26, 0x3B	; 59
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	eb e3       	ldi	r30, 0x3B	; 59
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	48 2f       	mov	r20, r24
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	02 2e       	mov	r0, r18
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <DIO_write_PIN+0xa6>
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	0a 94       	dec	r0
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <DIO_write_PIN+0xa2>
    18cc:	80 95       	com	r24
    18ce:	84 23       	and	r24, r20
    18d0:	8c 93       	st	X, r24
    18d2:	83 c0       	rjmp	.+262    	; 0x19da <DIO_write_PIN+0x1b8>
		}
		break;
	case 'B':
		if( pinvalue==1 )
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	81 30       	cpi	r24, 0x01	; 1
    18d8:	a1 f4       	brne	.+40     	; 0x1902 <DIO_write_PIN+0xe0>
		{
			SET_BIT(PORTB,pin);
    18da:	a8 e3       	ldi	r26, 0x38	; 56
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e8 e3       	ldi	r30, 0x38	; 56
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	48 2f       	mov	r20, r24
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	02 2e       	mov	r0, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <DIO_write_PIN+0xd6>
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	0a 94       	dec	r0
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <DIO_write_PIN+0xd2>
    18fc:	84 2b       	or	r24, r20
    18fe:	8c 93       	st	X, r24
    1900:	6c c0       	rjmp	.+216    	; 0x19da <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTB,pin);
    1902:	a8 e3       	ldi	r26, 0x38	; 56
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e8 e3       	ldi	r30, 0x38	; 56
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	48 2f       	mov	r20, r24
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 2e       	mov	r0, r18
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <DIO_write_PIN+0xfe>
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	0a 94       	dec	r0
    1922:	e2 f7       	brpl	.-8      	; 0x191c <DIO_write_PIN+0xfa>
    1924:	80 95       	com	r24
    1926:	84 23       	and	r24, r20
    1928:	8c 93       	st	X, r24
    192a:	57 c0       	rjmp	.+174    	; 0x19da <DIO_write_PIN+0x1b8>
		}
		break;
	case 'C':
		if( pinvalue==1 )
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	81 30       	cpi	r24, 0x01	; 1
    1930:	a1 f4       	brne	.+40     	; 0x195a <DIO_write_PIN+0x138>
		{
			SET_BIT(PORTC,pin);
    1932:	a5 e3       	ldi	r26, 0x35	; 53
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e5 e3       	ldi	r30, 0x35	; 53
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	48 2f       	mov	r20, r24
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	02 2e       	mov	r0, r18
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <DIO_write_PIN+0x12e>
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	0a 94       	dec	r0
    1952:	e2 f7       	brpl	.-8      	; 0x194c <DIO_write_PIN+0x12a>
    1954:	84 2b       	or	r24, r20
    1956:	8c 93       	st	X, r24
    1958:	40 c0       	rjmp	.+128    	; 0x19da <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTC,pin);
    195a:	a5 e3       	ldi	r26, 0x35	; 53
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e5 e3       	ldi	r30, 0x35	; 53
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	48 2f       	mov	r20, r24
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	02 2e       	mov	r0, r18
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <DIO_write_PIN+0x156>
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	0a 94       	dec	r0
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <DIO_write_PIN+0x152>
    197c:	80 95       	com	r24
    197e:	84 23       	and	r24, r20
    1980:	8c 93       	st	X, r24
    1982:	2b c0       	rjmp	.+86     	; 0x19da <DIO_write_PIN+0x1b8>
		}
		break;
	case 'D':
		if( pinvalue==1)
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	81 30       	cpi	r24, 0x01	; 1
    1988:	a1 f4       	brne	.+40     	; 0x19b2 <DIO_write_PIN+0x190>
		{
			SET_BIT(PORTD,pin);
    198a:	a2 e3       	ldi	r26, 0x32	; 50
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e2 e3       	ldi	r30, 0x32	; 50
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	48 2f       	mov	r20, r24
    1996:	8a 81       	ldd	r24, Y+2	; 0x02
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	02 2e       	mov	r0, r18
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <DIO_write_PIN+0x186>
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	0a 94       	dec	r0
    19aa:	e2 f7       	brpl	.-8      	; 0x19a4 <DIO_write_PIN+0x182>
    19ac:	84 2b       	or	r24, r20
    19ae:	8c 93       	st	X, r24
    19b0:	14 c0       	rjmp	.+40     	; 0x19da <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTD,pin);
    19b2:	a2 e3       	ldi	r26, 0x32	; 50
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e2 e3       	ldi	r30, 0x32	; 50
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	48 2f       	mov	r20, r24
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	02 2e       	mov	r0, r18
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <DIO_write_PIN+0x1ae>
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	0a 94       	dec	r0
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <DIO_write_PIN+0x1aa>
    19d4:	80 95       	com	r24
    19d6:	84 23       	and	r24, r20
    19d8:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	cf 91       	pop	r28
    19e6:	df 91       	pop	r29
    19e8:	08 95       	ret

000019ea <DIO_read_PIN>:

uint8 DIO_read_PIN(uint8 portname,uint8 pin)
{
    19ea:	df 93       	push	r29
    19ec:	cf 93       	push	r28
    19ee:	00 d0       	rcall	.+0      	; 0x19f0 <DIO_read_PIN+0x6>
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <DIO_read_PIN+0x8>
    19f2:	0f 92       	push	r0
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	8a 83       	std	Y+2, r24	; 0x02
    19fa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_val=0;
    19fc:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	3d 83       	std	Y+5, r19	; 0x05
    1a06:	2c 83       	std	Y+4, r18	; 0x04
    1a08:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0c:	82 34       	cpi	r24, 0x42	; 66
    1a0e:	91 05       	cpc	r25, r1
    1a10:	41 f1       	breq	.+80     	; 0x1a62 <DIO_read_PIN+0x78>
    1a12:	2c 81       	ldd	r18, Y+4	; 0x04
    1a14:	3d 81       	ldd	r19, Y+5	; 0x05
    1a16:	23 34       	cpi	r18, 0x43	; 67
    1a18:	31 05       	cpc	r19, r1
    1a1a:	34 f4       	brge	.+12     	; 0x1a28 <DIO_read_PIN+0x3e>
    1a1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a20:	81 34       	cpi	r24, 0x41	; 65
    1a22:	91 05       	cpc	r25, r1
    1a24:	61 f0       	breq	.+24     	; 0x1a3e <DIO_read_PIN+0x54>
    1a26:	52 c0       	rjmp	.+164    	; 0x1acc <DIO_read_PIN+0xe2>
    1a28:	2c 81       	ldd	r18, Y+4	; 0x04
    1a2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a2c:	23 34       	cpi	r18, 0x43	; 67
    1a2e:	31 05       	cpc	r19, r1
    1a30:	51 f1       	breq	.+84     	; 0x1a86 <DIO_read_PIN+0x9c>
    1a32:	8c 81       	ldd	r24, Y+4	; 0x04
    1a34:	9d 81       	ldd	r25, Y+5	; 0x05
    1a36:	84 34       	cpi	r24, 0x44	; 68
    1a38:	91 05       	cpc	r25, r1
    1a3a:	b9 f1       	breq	.+110    	; 0x1aaa <DIO_read_PIN+0xc0>
    1a3c:	47 c0       	rjmp	.+142    	; 0x1acc <DIO_read_PIN+0xe2>
	{

	case 'A':
		pin_val=READ_BIT(PINA,pin);
    1a3e:	e9 e3       	ldi	r30, 0x39	; 57
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	48 2f       	mov	r20, r24
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	02 2e       	mov	r0, r18
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <DIO_read_PIN+0x6e>
    1a54:	88 0f       	add	r24, r24
    1a56:	99 1f       	adc	r25, r25
    1a58:	0a 94       	dec	r0
    1a5a:	e2 f7       	brpl	.-8      	; 0x1a54 <DIO_read_PIN+0x6a>
    1a5c:	84 23       	and	r24, r20
    1a5e:	89 83       	std	Y+1, r24	; 0x01
    1a60:	35 c0       	rjmp	.+106    	; 0x1acc <DIO_read_PIN+0xe2>
		break;
	case 'B':
		pin_val=READ_BIT(PINB,pin);
    1a62:	e6 e3       	ldi	r30, 0x36	; 54
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	48 2f       	mov	r20, r24
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	02 2e       	mov	r0, r18
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <DIO_read_PIN+0x92>
    1a78:	88 0f       	add	r24, r24
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	0a 94       	dec	r0
    1a7e:	e2 f7       	brpl	.-8      	; 0x1a78 <DIO_read_PIN+0x8e>
    1a80:	84 23       	and	r24, r20
    1a82:	89 83       	std	Y+1, r24	; 0x01
    1a84:	23 c0       	rjmp	.+70     	; 0x1acc <DIO_read_PIN+0xe2>
		break;
	case 'C':
		pin_val=READ_BIT(PINC,pin);
    1a86:	e3 e3       	ldi	r30, 0x33	; 51
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	48 2f       	mov	r20, r24
    1a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	02 2e       	mov	r0, r18
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <DIO_read_PIN+0xb6>
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	0a 94       	dec	r0
    1aa2:	e2 f7       	brpl	.-8      	; 0x1a9c <DIO_read_PIN+0xb2>
    1aa4:	84 23       	and	r24, r20
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	11 c0       	rjmp	.+34     	; 0x1acc <DIO_read_PIN+0xe2>
		break;
	case 'D':
		pin_val=READ_BIT(PIND,pin);
    1aaa:	e0 e3       	ldi	r30, 0x30	; 48
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	48 2f       	mov	r20, r24
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	02 2e       	mov	r0, r18
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <DIO_read_PIN+0xda>
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	0a 94       	dec	r0
    1ac6:	e2 f7       	brpl	.-8      	; 0x1ac0 <DIO_read_PIN+0xd6>
    1ac8:	84 23       	and	r24, r20
    1aca:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	return pin_val;
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <DIO_BIT_TOGGLE>:

void DIO_BIT_TOGGLE(uint8 portname,uint8 pin)
{
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <DIO_BIT_TOGGLE+0x6>
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <DIO_BIT_TOGGLE+0x8>
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	3c 83       	std	Y+4, r19	; 0x04
    1af6:	2b 83       	std	Y+3, r18	; 0x03
    1af8:	8b 81       	ldd	r24, Y+3	; 0x03
    1afa:	9c 81       	ldd	r25, Y+4	; 0x04
    1afc:	82 34       	cpi	r24, 0x42	; 66
    1afe:	91 05       	cpc	r25, r1
    1b00:	51 f1       	breq	.+84     	; 0x1b56 <DIO_BIT_TOGGLE+0x78>
    1b02:	2b 81       	ldd	r18, Y+3	; 0x03
    1b04:	3c 81       	ldd	r19, Y+4	; 0x04
    1b06:	23 34       	cpi	r18, 0x43	; 67
    1b08:	31 05       	cpc	r19, r1
    1b0a:	34 f4       	brge	.+12     	; 0x1b18 <DIO_BIT_TOGGLE+0x3a>
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b10:	81 34       	cpi	r24, 0x41	; 65
    1b12:	91 05       	cpc	r25, r1
    1b14:	61 f0       	breq	.+24     	; 0x1b2e <DIO_BIT_TOGGLE+0x50>
    1b16:	5a c0       	rjmp	.+180    	; 0x1bcc <DIO_BIT_TOGGLE+0xee>
    1b18:	2b 81       	ldd	r18, Y+3	; 0x03
    1b1a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b1c:	23 34       	cpi	r18, 0x43	; 67
    1b1e:	31 05       	cpc	r19, r1
    1b20:	71 f1       	breq	.+92     	; 0x1b7e <DIO_BIT_TOGGLE+0xa0>
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	9c 81       	ldd	r25, Y+4	; 0x04
    1b26:	84 34       	cpi	r24, 0x44	; 68
    1b28:	91 05       	cpc	r25, r1
    1b2a:	e9 f1       	breq	.+122    	; 0x1ba6 <DIO_BIT_TOGGLE+0xc8>
    1b2c:	4f c0       	rjmp	.+158    	; 0x1bcc <DIO_BIT_TOGGLE+0xee>
	{

	case 'A':
		TOGGLE_BIT(PORTA,pin);
    1b2e:	ab e3       	ldi	r26, 0x3B	; 59
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	eb e3       	ldi	r30, 0x3B	; 59
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	48 2f       	mov	r20, r24
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	02 2e       	mov	r0, r18
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <DIO_BIT_TOGGLE+0x6e>
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	0a 94       	dec	r0
    1b4e:	e2 f7       	brpl	.-8      	; 0x1b48 <DIO_BIT_TOGGLE+0x6a>
    1b50:	84 27       	eor	r24, r20
    1b52:	8c 93       	st	X, r24
    1b54:	3b c0       	rjmp	.+118    	; 0x1bcc <DIO_BIT_TOGGLE+0xee>
		break;
	case 'B':
		TOGGLE_BIT(PORTB,pin);
    1b56:	a8 e3       	ldi	r26, 0x38	; 56
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e8 e3       	ldi	r30, 0x38	; 56
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	48 2f       	mov	r20, r24
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	02 2e       	mov	r0, r18
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <DIO_BIT_TOGGLE+0x96>
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	0a 94       	dec	r0
    1b76:	e2 f7       	brpl	.-8      	; 0x1b70 <DIO_BIT_TOGGLE+0x92>
    1b78:	84 27       	eor	r24, r20
    1b7a:	8c 93       	st	X, r24
    1b7c:	27 c0       	rjmp	.+78     	; 0x1bcc <DIO_BIT_TOGGLE+0xee>
		break;
	case 'C':
		TOGGLE_BIT(PORTC,pin);
    1b7e:	a5 e3       	ldi	r26, 0x35	; 53
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	e5 e3       	ldi	r30, 0x35	; 53
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	48 2f       	mov	r20, r24
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	02 2e       	mov	r0, r18
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <DIO_BIT_TOGGLE+0xbe>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	0a 94       	dec	r0
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <DIO_BIT_TOGGLE+0xba>
    1ba0:	84 27       	eor	r24, r20
    1ba2:	8c 93       	st	X, r24
    1ba4:	13 c0       	rjmp	.+38     	; 0x1bcc <DIO_BIT_TOGGLE+0xee>
		break;
	case 'D':
		TOGGLE_BIT(PORTD,pin);
    1ba6:	a2 e3       	ldi	r26, 0x32	; 50
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e2 e3       	ldi	r30, 0x32	; 50
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	48 2f       	mov	r20, r24
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	28 2f       	mov	r18, r24
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	02 2e       	mov	r0, r18
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <DIO_BIT_TOGGLE+0xe6>
    1bc0:	88 0f       	add	r24, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	0a 94       	dec	r0
    1bc6:	e2 f7       	brpl	.-8      	; 0x1bc0 <DIO_BIT_TOGGLE+0xe2>
    1bc8:	84 27       	eor	r24, r20
    1bca:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <DIO_set_port_Dir>:

void DIO_set_port_Dir(uint8 portname,uint8 direction)
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <DIO_set_port_Dir+0x6>
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <DIO_set_port_Dir+0x8>
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	89 83       	std	Y+1, r24	; 0x01
    1be8:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1bea:	89 81       	ldd	r24, Y+1	; 0x01
    1bec:	28 2f       	mov	r18, r24
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	3c 83       	std	Y+4, r19	; 0x04
    1bf2:	2b 83       	std	Y+3, r18	; 0x03
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf8:	82 34       	cpi	r24, 0x42	; 66
    1bfa:	91 05       	cpc	r25, r1
    1bfc:	11 f1       	breq	.+68     	; 0x1c42 <DIO_set_port_Dir+0x68>
    1bfe:	2b 81       	ldd	r18, Y+3	; 0x03
    1c00:	3c 81       	ldd	r19, Y+4	; 0x04
    1c02:	23 34       	cpi	r18, 0x43	; 67
    1c04:	31 05       	cpc	r19, r1
    1c06:	34 f4       	brge	.+12     	; 0x1c14 <DIO_set_port_Dir+0x3a>
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0c:	81 34       	cpi	r24, 0x41	; 65
    1c0e:	91 05       	cpc	r25, r1
    1c10:	61 f0       	breq	.+24     	; 0x1c2a <DIO_set_port_Dir+0x50>
    1c12:	3a c0       	rjmp	.+116    	; 0x1c88 <DIO_set_port_Dir+0xae>
    1c14:	2b 81       	ldd	r18, Y+3	; 0x03
    1c16:	3c 81       	ldd	r19, Y+4	; 0x04
    1c18:	23 34       	cpi	r18, 0x43	; 67
    1c1a:	31 05       	cpc	r19, r1
    1c1c:	f1 f0       	breq	.+60     	; 0x1c5a <DIO_set_port_Dir+0x80>
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	9c 81       	ldd	r25, Y+4	; 0x04
    1c22:	84 34       	cpi	r24, 0x44	; 68
    1c24:	91 05       	cpc	r25, r1
    1c26:	29 f1       	breq	.+74     	; 0x1c72 <DIO_set_port_Dir+0x98>
    1c28:	2f c0       	rjmp	.+94     	; 0x1c88 <DIO_set_port_Dir+0xae>
	{
	case 'A':
		if(direction==1)
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	81 30       	cpi	r24, 0x01	; 1
    1c2e:	29 f4       	brne	.+10     	; 0x1c3a <DIO_set_port_Dir+0x60>
		{
			DDRA=0xFF;
    1c30:	ea e3       	ldi	r30, 0x3A	; 58
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	8f ef       	ldi	r24, 0xFF	; 255
    1c36:	80 83       	st	Z, r24
    1c38:	27 c0       	rjmp	.+78     	; 0x1c88 <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRA=0;
    1c3a:	ea e3       	ldi	r30, 0x3A	; 58
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	10 82       	st	Z, r1
    1c40:	23 c0       	rjmp	.+70     	; 0x1c88 <DIO_set_port_Dir+0xae>
		}
		break;
	case 'B':
		if(direction==1)
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	81 30       	cpi	r24, 0x01	; 1
    1c46:	29 f4       	brne	.+10     	; 0x1c52 <DIO_set_port_Dir+0x78>
		{
			DDRB=0xFF;
    1c48:	e7 e3       	ldi	r30, 0x37	; 55
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	8f ef       	ldi	r24, 0xFF	; 255
    1c4e:	80 83       	st	Z, r24
    1c50:	1b c0       	rjmp	.+54     	; 0x1c88 <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRB=0;
    1c52:	e7 e3       	ldi	r30, 0x37	; 55
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	10 82       	st	Z, r1
    1c58:	17 c0       	rjmp	.+46     	; 0x1c88 <DIO_set_port_Dir+0xae>
		}
		break;
	case 'C':
		if(direction==1)
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	81 30       	cpi	r24, 0x01	; 1
    1c5e:	29 f4       	brne	.+10     	; 0x1c6a <DIO_set_port_Dir+0x90>
		{
			DDRC=0XFF;
    1c60:	e4 e3       	ldi	r30, 0x34	; 52
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	8f ef       	ldi	r24, 0xFF	; 255
    1c66:	80 83       	st	Z, r24
    1c68:	0f c0       	rjmp	.+30     	; 0x1c88 <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRC=0;
    1c6a:	e4 e3       	ldi	r30, 0x34	; 52
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	10 82       	st	Z, r1
    1c70:	0b c0       	rjmp	.+22     	; 0x1c88 <DIO_set_port_Dir+0xae>
		}
		break;
	case 'D':
		if(direction==1)
    1c72:	8a 81       	ldd	r24, Y+2	; 0x02
    1c74:	81 30       	cpi	r24, 0x01	; 1
    1c76:	29 f4       	brne	.+10     	; 0x1c82 <DIO_set_port_Dir+0xa8>
		{
			DDRD=0XFF;
    1c78:	e1 e3       	ldi	r30, 0x31	; 49
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	8f ef       	ldi	r24, 0xFF	; 255
    1c7e:	80 83       	st	Z, r24
    1c80:	03 c0       	rjmp	.+6      	; 0x1c88 <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRD=0;
    1c82:	e1 e3       	ldi	r30, 0x31	; 49
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	10 82       	st	Z, r1
		}
		break;
	default:
		break;
	}
}
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	08 95       	ret

00001c96 <DIO_write_port>:

void DIO_write_port(uint8 portname,uint8 portvalue)
{
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <DIO_write_port+0x6>
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <DIO_write_port+0x8>
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	89 83       	std	Y+1, r24	; 0x01
    1ca4:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	28 2f       	mov	r18, r24
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	3c 83       	std	Y+4, r19	; 0x04
    1cae:	2b 83       	std	Y+3, r18	; 0x03
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb4:	82 34       	cpi	r24, 0x42	; 66
    1cb6:	91 05       	cpc	r25, r1
    1cb8:	d9 f0       	breq	.+54     	; 0x1cf0 <DIO_write_port+0x5a>
    1cba:	2b 81       	ldd	r18, Y+3	; 0x03
    1cbc:	3c 81       	ldd	r19, Y+4	; 0x04
    1cbe:	23 34       	cpi	r18, 0x43	; 67
    1cc0:	31 05       	cpc	r19, r1
    1cc2:	34 f4       	brge	.+12     	; 0x1cd0 <DIO_write_port+0x3a>
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc8:	81 34       	cpi	r24, 0x41	; 65
    1cca:	91 05       	cpc	r25, r1
    1ccc:	61 f0       	breq	.+24     	; 0x1ce6 <DIO_write_port+0x50>
    1cce:	1e c0       	rjmp	.+60     	; 0x1d0c <DIO_write_port+0x76>
    1cd0:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd2:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd4:	23 34       	cpi	r18, 0x43	; 67
    1cd6:	31 05       	cpc	r19, r1
    1cd8:	81 f0       	breq	.+32     	; 0x1cfa <DIO_write_port+0x64>
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cde:	84 34       	cpi	r24, 0x44	; 68
    1ce0:	91 05       	cpc	r25, r1
    1ce2:	81 f0       	breq	.+32     	; 0x1d04 <DIO_write_port+0x6e>
    1ce4:	13 c0       	rjmp	.+38     	; 0x1d0c <DIO_write_port+0x76>
	{
	case 'A':
		PORTA=portvalue;
    1ce6:	eb e3       	ldi	r30, 0x3B	; 59
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	80 83       	st	Z, r24
    1cee:	0e c0       	rjmp	.+28     	; 0x1d0c <DIO_write_port+0x76>
		break;
	case 'B':
		PORTB=portvalue;
    1cf0:	e8 e3       	ldi	r30, 0x38	; 56
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf6:	80 83       	st	Z, r24
    1cf8:	09 c0       	rjmp	.+18     	; 0x1d0c <DIO_write_port+0x76>
		break;
	case 'C':
		PORTC=portvalue;
    1cfa:	e5 e3       	ldi	r30, 0x35	; 53
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	80 83       	st	Z, r24
    1d02:	04 c0       	rjmp	.+8      	; 0x1d0c <DIO_write_port+0x76>
		break;
	case 'D':
		PORTD=portvalue;
    1d04:	e2 e3       	ldi	r30, 0x32	; 50
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	80 83       	st	Z, r24
	}
}
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	cf 91       	pop	r28
    1d16:	df 91       	pop	r29
    1d18:	08 95       	ret

00001d1a <DIO_read_port>:

uint8 DIO_read_port(uint8 portname)
{
    1d1a:	df 93       	push	r29
    1d1c:	cf 93       	push	r28
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <DIO_read_port+0x6>
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <DIO_read_port+0x8>
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_val=0;
    1d28:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	3c 83       	std	Y+4, r19	; 0x04
    1d32:	2b 83       	std	Y+3, r18	; 0x03
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	9c 81       	ldd	r25, Y+4	; 0x04
    1d38:	82 34       	cpi	r24, 0x42	; 66
    1d3a:	91 05       	cpc	r25, r1
    1d3c:	d9 f0       	breq	.+54     	; 0x1d74 <DIO_read_port+0x5a>
    1d3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d40:	3c 81       	ldd	r19, Y+4	; 0x04
    1d42:	23 34       	cpi	r18, 0x43	; 67
    1d44:	31 05       	cpc	r19, r1
    1d46:	34 f4       	brge	.+12     	; 0x1d54 <DIO_read_port+0x3a>
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	81 34       	cpi	r24, 0x41	; 65
    1d4e:	91 05       	cpc	r25, r1
    1d50:	61 f0       	breq	.+24     	; 0x1d6a <DIO_read_port+0x50>
    1d52:	1e c0       	rjmp	.+60     	; 0x1d90 <DIO_read_port+0x76>
    1d54:	2b 81       	ldd	r18, Y+3	; 0x03
    1d56:	3c 81       	ldd	r19, Y+4	; 0x04
    1d58:	23 34       	cpi	r18, 0x43	; 67
    1d5a:	31 05       	cpc	r19, r1
    1d5c:	81 f0       	breq	.+32     	; 0x1d7e <DIO_read_port+0x64>
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	9c 81       	ldd	r25, Y+4	; 0x04
    1d62:	84 34       	cpi	r24, 0x44	; 68
    1d64:	91 05       	cpc	r25, r1
    1d66:	81 f0       	breq	.+32     	; 0x1d88 <DIO_read_port+0x6e>
    1d68:	13 c0       	rjmp	.+38     	; 0x1d90 <DIO_read_port+0x76>
	{

	case 'A':
		port_val=PINA;
    1d6a:	e9 e3       	ldi	r30, 0x39	; 57
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	89 83       	std	Y+1, r24	; 0x01
    1d72:	0e c0       	rjmp	.+28     	; 0x1d90 <DIO_read_port+0x76>
		break;
	case 'B':
		port_val=PINB;
    1d74:	e6 e3       	ldi	r30, 0x36	; 54
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	89 83       	std	Y+1, r24	; 0x01
    1d7c:	09 c0       	rjmp	.+18     	; 0x1d90 <DIO_read_port+0x76>
		break;
	case 'C':
		port_val=PINC;
    1d7e:	e3 e3       	ldi	r30, 0x33	; 51
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	80 81       	ld	r24, Z
    1d84:	89 83       	std	Y+1, r24	; 0x01
    1d86:	04 c0       	rjmp	.+8      	; 0x1d90 <DIO_read_port+0x76>
		break;
	case 'D':
		port_val=PIND;
    1d88:	e0 e3       	ldi	r30, 0x30	; 48
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	return port_val;
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <DIO_enablePullup_pin>:

void DIO_enablePullup_pin(uint8 portname,uint8 pin,uint8 status)
{
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	00 d0       	rcall	.+0      	; 0x1da6 <DIO_enablePullup_pin+0x6>
    1da6:	00 d0       	rcall	.+0      	; 0x1da8 <DIO_enablePullup_pin+0x8>
    1da8:	0f 92       	push	r0
    1daa:	cd b7       	in	r28, 0x3d	; 61
    1dac:	de b7       	in	r29, 0x3e	; 62
    1dae:	89 83       	std	Y+1, r24	; 0x01
    1db0:	6a 83       	std	Y+2, r22	; 0x02
    1db2:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	28 2f       	mov	r18, r24
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	3d 83       	std	Y+5, r19	; 0x05
    1dbc:	2c 83       	std	Y+4, r18	; 0x04
    1dbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc0:	9d 81       	ldd	r25, Y+5	; 0x05
    1dc2:	82 34       	cpi	r24, 0x42	; 66
    1dc4:	91 05       	cpc	r25, r1
    1dc6:	09 f4       	brne	.+2      	; 0x1dca <DIO_enablePullup_pin+0x2a>
    1dc8:	44 c0       	rjmp	.+136    	; 0x1e52 <DIO_enablePullup_pin+0xb2>
    1dca:	2c 81       	ldd	r18, Y+4	; 0x04
    1dcc:	3d 81       	ldd	r19, Y+5	; 0x05
    1dce:	23 34       	cpi	r18, 0x43	; 67
    1dd0:	31 05       	cpc	r19, r1
    1dd2:	34 f4       	brge	.+12     	; 0x1de0 <DIO_enablePullup_pin+0x40>
    1dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd8:	81 34       	cpi	r24, 0x41	; 65
    1dda:	91 05       	cpc	r25, r1
    1ddc:	71 f0       	breq	.+28     	; 0x1dfa <DIO_enablePullup_pin+0x5a>
    1dde:	bc c0       	rjmp	.+376    	; 0x1f58 <DIO_enablePullup_pin+0x1b8>
    1de0:	2c 81       	ldd	r18, Y+4	; 0x04
    1de2:	3d 81       	ldd	r19, Y+5	; 0x05
    1de4:	23 34       	cpi	r18, 0x43	; 67
    1de6:	31 05       	cpc	r19, r1
    1de8:	09 f4       	brne	.+2      	; 0x1dec <DIO_enablePullup_pin+0x4c>
    1dea:	5f c0       	rjmp	.+190    	; 0x1eaa <DIO_enablePullup_pin+0x10a>
    1dec:	8c 81       	ldd	r24, Y+4	; 0x04
    1dee:	9d 81       	ldd	r25, Y+5	; 0x05
    1df0:	84 34       	cpi	r24, 0x44	; 68
    1df2:	91 05       	cpc	r25, r1
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <DIO_enablePullup_pin+0x58>
    1df6:	85 c0       	rjmp	.+266    	; 0x1f02 <DIO_enablePullup_pin+0x162>
    1df8:	af c0       	rjmp	.+350    	; 0x1f58 <DIO_enablePullup_pin+0x1b8>
	{
	case 'A':
		if(status==1)
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	81 30       	cpi	r24, 0x01	; 1
    1dfe:	a1 f4       	brne	.+40     	; 0x1e28 <DIO_enablePullup_pin+0x88>
		{
			SET_BIT(PORTA,pin);
    1e00:	ab e3       	ldi	r26, 0x3B	; 59
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	eb e3       	ldi	r30, 0x3B	; 59
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	48 2f       	mov	r20, r24
    1e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	02 2e       	mov	r0, r18
    1e18:	02 c0       	rjmp	.+4      	; 0x1e1e <DIO_enablePullup_pin+0x7e>
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	0a 94       	dec	r0
    1e20:	e2 f7       	brpl	.-8      	; 0x1e1a <DIO_enablePullup_pin+0x7a>
    1e22:	84 2b       	or	r24, r20
    1e24:	8c 93       	st	X, r24
    1e26:	98 c0       	rjmp	.+304    	; 0x1f58 <DIO_enablePullup_pin+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
    1e28:	ab e3       	ldi	r26, 0x3B	; 59
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	eb e3       	ldi	r30, 0x3B	; 59
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	48 2f       	mov	r20, r24
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	02 2e       	mov	r0, r18
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <DIO_enablePullup_pin+0xa6>
    1e42:	88 0f       	add	r24, r24
    1e44:	99 1f       	adc	r25, r25
    1e46:	0a 94       	dec	r0
    1e48:	e2 f7       	brpl	.-8      	; 0x1e42 <DIO_enablePullup_pin+0xa2>
    1e4a:	80 95       	com	r24
    1e4c:	84 23       	and	r24, r20
    1e4e:	8c 93       	st	X, r24
    1e50:	83 c0       	rjmp	.+262    	; 0x1f58 <DIO_enablePullup_pin+0x1b8>
		}
		break;
	case 'B':
		if(status==1)
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	81 30       	cpi	r24, 0x01	; 1
    1e56:	a1 f4       	brne	.+40     	; 0x1e80 <DIO_enablePullup_pin+0xe0>
				{
					SET_BIT(PORTB,pin);
    1e58:	a8 e3       	ldi	r26, 0x38	; 56
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e8 e3       	ldi	r30, 0x38	; 56
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	48 2f       	mov	r20, r24
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	02 2e       	mov	r0, r18
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <DIO_enablePullup_pin+0xd6>
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	0a 94       	dec	r0
    1e78:	e2 f7       	brpl	.-8      	; 0x1e72 <DIO_enablePullup_pin+0xd2>
    1e7a:	84 2b       	or	r24, r20
    1e7c:	8c 93       	st	X, r24
    1e7e:	6c c0       	rjmp	.+216    	; 0x1f58 <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTB,pin);
    1e80:	a8 e3       	ldi	r26, 0x38	; 56
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	e8 e3       	ldi	r30, 0x38	; 56
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	48 2f       	mov	r20, r24
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	02 2e       	mov	r0, r18
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <DIO_enablePullup_pin+0xfe>
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	0a 94       	dec	r0
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <DIO_enablePullup_pin+0xfa>
    1ea2:	80 95       	com	r24
    1ea4:	84 23       	and	r24, r20
    1ea6:	8c 93       	st	X, r24
    1ea8:	57 c0       	rjmp	.+174    	; 0x1f58 <DIO_enablePullup_pin+0x1b8>
				}
				break;
	case 'C':
		if(status==1)
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	81 30       	cpi	r24, 0x01	; 1
    1eae:	a1 f4       	brne	.+40     	; 0x1ed8 <DIO_enablePullup_pin+0x138>
				{
					SET_BIT(PORTC,pin);
    1eb0:	a5 e3       	ldi	r26, 0x35	; 53
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e5 e3       	ldi	r30, 0x35	; 53
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	48 2f       	mov	r20, r24
    1ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	02 2e       	mov	r0, r18
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <DIO_enablePullup_pin+0x12e>
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	0a 94       	dec	r0
    1ed0:	e2 f7       	brpl	.-8      	; 0x1eca <DIO_enablePullup_pin+0x12a>
    1ed2:	84 2b       	or	r24, r20
    1ed4:	8c 93       	st	X, r24
    1ed6:	40 c0       	rjmp	.+128    	; 0x1f58 <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTC,pin);
    1ed8:	a5 e3       	ldi	r26, 0x35	; 53
    1eda:	b0 e0       	ldi	r27, 0x00	; 0
    1edc:	e5 e3       	ldi	r30, 0x35	; 53
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	48 2f       	mov	r20, r24
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	02 2e       	mov	r0, r18
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <DIO_enablePullup_pin+0x156>
    1ef2:	88 0f       	add	r24, r24
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	0a 94       	dec	r0
    1ef8:	e2 f7       	brpl	.-8      	; 0x1ef2 <DIO_enablePullup_pin+0x152>
    1efa:	80 95       	com	r24
    1efc:	84 23       	and	r24, r20
    1efe:	8c 93       	st	X, r24
    1f00:	2b c0       	rjmp	.+86     	; 0x1f58 <DIO_enablePullup_pin+0x1b8>
				}
				break;
	case 'D':
		if(status==1)
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	81 30       	cpi	r24, 0x01	; 1
    1f06:	a1 f4       	brne	.+40     	; 0x1f30 <DIO_enablePullup_pin+0x190>
				{
					SET_BIT(PORTD,pin);
    1f08:	a2 e3       	ldi	r26, 0x32	; 50
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e2 e3       	ldi	r30, 0x32	; 50
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	48 2f       	mov	r20, r24
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	28 2f       	mov	r18, r24
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	02 2e       	mov	r0, r18
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <DIO_enablePullup_pin+0x186>
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	0a 94       	dec	r0
    1f28:	e2 f7       	brpl	.-8      	; 0x1f22 <DIO_enablePullup_pin+0x182>
    1f2a:	84 2b       	or	r24, r20
    1f2c:	8c 93       	st	X, r24
    1f2e:	14 c0       	rjmp	.+40     	; 0x1f58 <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTD,pin);
    1f30:	a2 e3       	ldi	r26, 0x32	; 50
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e2 e3       	ldi	r30, 0x32	; 50
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	48 2f       	mov	r20, r24
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	02 2e       	mov	r0, r18
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <DIO_enablePullup_pin+0x1ae>
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	0a 94       	dec	r0
    1f50:	e2 f7       	brpl	.-8      	; 0x1f4a <DIO_enablePullup_pin+0x1aa>
    1f52:	80 95       	com	r24
    1f54:	84 23       	and	r24, r20
    1f56:	8c 93       	st	X, r24
				}
				break;
	}
}
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	08 95       	ret

00001f68 <DIO_write_low_nibble>:

void DIO_write_low_nibble(uint8 portname,uint8 value)
{
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	00 d0       	rcall	.+0      	; 0x1f6e <DIO_write_low_nibble+0x6>
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <DIO_write_low_nibble+0x8>
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	89 83       	std	Y+1, r24	; 0x01
    1f76:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
    1f78:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7a:	8f 70       	andi	r24, 0x0F	; 15
    1f7c:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	28 2f       	mov	r18, r24
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	3c 83       	std	Y+4, r19	; 0x04
    1f86:	2b 83       	std	Y+3, r18	; 0x03
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8c:	82 34       	cpi	r24, 0x42	; 66
    1f8e:	91 05       	cpc	r25, r1
    1f90:	31 f1       	breq	.+76     	; 0x1fde <DIO_write_low_nibble+0x76>
    1f92:	2b 81       	ldd	r18, Y+3	; 0x03
    1f94:	3c 81       	ldd	r19, Y+4	; 0x04
    1f96:	23 34       	cpi	r18, 0x43	; 67
    1f98:	31 05       	cpc	r19, r1
    1f9a:	34 f4       	brge	.+12     	; 0x1fa8 <DIO_write_low_nibble+0x40>
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa0:	81 34       	cpi	r24, 0x41	; 65
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	61 f0       	breq	.+24     	; 0x1fbe <DIO_write_low_nibble+0x56>
    1fa6:	4a c0       	rjmp	.+148    	; 0x203c <DIO_write_low_nibble+0xd4>
    1fa8:	2b 81       	ldd	r18, Y+3	; 0x03
    1faa:	3c 81       	ldd	r19, Y+4	; 0x04
    1fac:	23 34       	cpi	r18, 0x43	; 67
    1fae:	31 05       	cpc	r19, r1
    1fb0:	31 f1       	breq	.+76     	; 0x1ffe <DIO_write_low_nibble+0x96>
    1fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb6:	84 34       	cpi	r24, 0x44	; 68
    1fb8:	91 05       	cpc	r25, r1
    1fba:	89 f1       	breq	.+98     	; 0x201e <DIO_write_low_nibble+0xb6>
    1fbc:	3f c0       	rjmp	.+126    	; 0x203c <DIO_write_low_nibble+0xd4>
	{
	case 'A':
		PORTA&=0xf0;
    1fbe:	ab e3       	ldi	r26, 0x3B	; 59
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	eb e3       	ldi	r30, 0x3B	; 59
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	80 7f       	andi	r24, 0xF0	; 240
    1fca:	8c 93       	st	X, r24
		PORTA|=value;
    1fcc:	ab e3       	ldi	r26, 0x3B	; 59
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	eb e3       	ldi	r30, 0x3B	; 59
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	90 81       	ld	r25, Z
    1fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd8:	89 2b       	or	r24, r25
    1fda:	8c 93       	st	X, r24
    1fdc:	2f c0       	rjmp	.+94     	; 0x203c <DIO_write_low_nibble+0xd4>
		break;
	case 'B':
		PORTB&=0xf0;
    1fde:	a8 e3       	ldi	r26, 0x38	; 56
    1fe0:	b0 e0       	ldi	r27, 0x00	; 0
    1fe2:	e8 e3       	ldi	r30, 0x38	; 56
    1fe4:	f0 e0       	ldi	r31, 0x00	; 0
    1fe6:	80 81       	ld	r24, Z
    1fe8:	80 7f       	andi	r24, 0xF0	; 240
    1fea:	8c 93       	st	X, r24
		PORTA|=value;
    1fec:	ab e3       	ldi	r26, 0x3B	; 59
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	eb e3       	ldi	r30, 0x3B	; 59
    1ff2:	f0 e0       	ldi	r31, 0x00	; 0
    1ff4:	90 81       	ld	r25, Z
    1ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff8:	89 2b       	or	r24, r25
    1ffa:	8c 93       	st	X, r24
    1ffc:	1f c0       	rjmp	.+62     	; 0x203c <DIO_write_low_nibble+0xd4>
		break;
	case 'C':
		PORTC&=0xf0;
    1ffe:	a5 e3       	ldi	r26, 0x35	; 53
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e5 e3       	ldi	r30, 0x35	; 53
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	80 7f       	andi	r24, 0xF0	; 240
    200a:	8c 93       	st	X, r24
		PORTA|=value;
    200c:	ab e3       	ldi	r26, 0x3B	; 59
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	eb e3       	ldi	r30, 0x3B	; 59
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	90 81       	ld	r25, Z
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
    2018:	89 2b       	or	r24, r25
    201a:	8c 93       	st	X, r24
    201c:	0f c0       	rjmp	.+30     	; 0x203c <DIO_write_low_nibble+0xd4>
		break;
	case 'D':
		PORTD&=0xf0;
    201e:	a2 e3       	ldi	r26, 0x32	; 50
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	e2 e3       	ldi	r30, 0x32	; 50
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	80 7f       	andi	r24, 0xF0	; 240
    202a:	8c 93       	st	X, r24
		PORTD|=value;
    202c:	a2 e3       	ldi	r26, 0x32	; 50
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	e2 e3       	ldi	r30, 0x32	; 50
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	90 81       	ld	r25, Z
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	89 2b       	or	r24, r25
    203a:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <DIO_set_low_nibble>:

void DIO_set_low_nibble(uint8 portname)
{
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	00 d0       	rcall	.+0      	; 0x2050 <DIO_set_low_nibble+0x6>
    2050:	0f 92       	push	r0
    2052:	cd b7       	in	r28, 0x3d	; 61
    2054:	de b7       	in	r29, 0x3e	; 62
    2056:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	3b 83       	std	Y+3, r19	; 0x03
    2060:	2a 83       	std	Y+2, r18	; 0x02
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	9b 81       	ldd	r25, Y+3	; 0x03
    2066:	82 34       	cpi	r24, 0x42	; 66
    2068:	91 05       	cpc	r25, r1
    206a:	f1 f0       	breq	.+60     	; 0x20a8 <DIO_set_low_nibble+0x5e>
    206c:	2a 81       	ldd	r18, Y+2	; 0x02
    206e:	3b 81       	ldd	r19, Y+3	; 0x03
    2070:	23 34       	cpi	r18, 0x43	; 67
    2072:	31 05       	cpc	r19, r1
    2074:	34 f4       	brge	.+12     	; 0x2082 <DIO_set_low_nibble+0x38>
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	9b 81       	ldd	r25, Y+3	; 0x03
    207a:	81 34       	cpi	r24, 0x41	; 65
    207c:	91 05       	cpc	r25, r1
    207e:	61 f0       	breq	.+24     	; 0x2098 <DIO_set_low_nibble+0x4e>
    2080:	2a c0       	rjmp	.+84     	; 0x20d6 <DIO_set_low_nibble+0x8c>
    2082:	2a 81       	ldd	r18, Y+2	; 0x02
    2084:	3b 81       	ldd	r19, Y+3	; 0x03
    2086:	23 34       	cpi	r18, 0x43	; 67
    2088:	31 05       	cpc	r19, r1
    208a:	b1 f0       	breq	.+44     	; 0x20b8 <DIO_set_low_nibble+0x6e>
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	9b 81       	ldd	r25, Y+3	; 0x03
    2090:	84 34       	cpi	r24, 0x44	; 68
    2092:	91 05       	cpc	r25, r1
    2094:	c9 f0       	breq	.+50     	; 0x20c8 <DIO_set_low_nibble+0x7e>
    2096:	1f c0       	rjmp	.+62     	; 0x20d6 <DIO_set_low_nibble+0x8c>
	{
	case 'A':
		PORTA|=0x0f;
    2098:	ab e3       	ldi	r26, 0x3B	; 59
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	eb e3       	ldi	r30, 0x3B	; 59
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	80 81       	ld	r24, Z
    20a2:	8f 60       	ori	r24, 0x0F	; 15
    20a4:	8c 93       	st	X, r24
    20a6:	17 c0       	rjmp	.+46     	; 0x20d6 <DIO_set_low_nibble+0x8c>
		break;
	case 'B':
		PORTB|=0x0f;
    20a8:	a8 e3       	ldi	r26, 0x38	; 56
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e8 e3       	ldi	r30, 0x38	; 56
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	8f 60       	ori	r24, 0x0F	; 15
    20b4:	8c 93       	st	X, r24
    20b6:	0f c0       	rjmp	.+30     	; 0x20d6 <DIO_set_low_nibble+0x8c>
		break;
	case 'C':
		PORTC|=0x0f;
    20b8:	a5 e3       	ldi	r26, 0x35	; 53
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	e5 e3       	ldi	r30, 0x35	; 53
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	8f 60       	ori	r24, 0x0F	; 15
    20c4:	8c 93       	st	X, r24
    20c6:	07 c0       	rjmp	.+14     	; 0x20d6 <DIO_set_low_nibble+0x8c>
		break;
	case 'D':
		PORTD|=0x0f;
    20c8:	a2 e3       	ldi	r26, 0x32	; 50
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	e2 e3       	ldi	r30, 0x32	; 50
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	8f 60       	ori	r24, 0x0F	; 15
    20d4:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    20d6:	0f 90       	pop	r0
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	08 95       	ret

000020e2 <DIO_clear_low_nibble>:

void DIO_clear_low_nibble(uint8 portname)
{
    20e2:	df 93       	push	r29
    20e4:	cf 93       	push	r28
    20e6:	00 d0       	rcall	.+0      	; 0x20e8 <DIO_clear_low_nibble+0x6>
    20e8:	0f 92       	push	r0
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	3b 83       	std	Y+3, r19	; 0x03
    20f8:	2a 83       	std	Y+2, r18	; 0x02
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	9b 81       	ldd	r25, Y+3	; 0x03
    20fe:	82 34       	cpi	r24, 0x42	; 66
    2100:	91 05       	cpc	r25, r1
    2102:	f1 f0       	breq	.+60     	; 0x2140 <DIO_clear_low_nibble+0x5e>
    2104:	2a 81       	ldd	r18, Y+2	; 0x02
    2106:	3b 81       	ldd	r19, Y+3	; 0x03
    2108:	23 34       	cpi	r18, 0x43	; 67
    210a:	31 05       	cpc	r19, r1
    210c:	34 f4       	brge	.+12     	; 0x211a <DIO_clear_low_nibble+0x38>
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	9b 81       	ldd	r25, Y+3	; 0x03
    2112:	81 34       	cpi	r24, 0x41	; 65
    2114:	91 05       	cpc	r25, r1
    2116:	61 f0       	breq	.+24     	; 0x2130 <DIO_clear_low_nibble+0x4e>
    2118:	2a c0       	rjmp	.+84     	; 0x216e <DIO_clear_low_nibble+0x8c>
    211a:	2a 81       	ldd	r18, Y+2	; 0x02
    211c:	3b 81       	ldd	r19, Y+3	; 0x03
    211e:	23 34       	cpi	r18, 0x43	; 67
    2120:	31 05       	cpc	r19, r1
    2122:	b1 f0       	breq	.+44     	; 0x2150 <DIO_clear_low_nibble+0x6e>
    2124:	8a 81       	ldd	r24, Y+2	; 0x02
    2126:	9b 81       	ldd	r25, Y+3	; 0x03
    2128:	84 34       	cpi	r24, 0x44	; 68
    212a:	91 05       	cpc	r25, r1
    212c:	c9 f0       	breq	.+50     	; 0x2160 <DIO_clear_low_nibble+0x7e>
    212e:	1f c0       	rjmp	.+62     	; 0x216e <DIO_clear_low_nibble+0x8c>
	{
	case 'A':
		PORTA&=~(0x0f);
    2130:	ab e3       	ldi	r26, 0x3B	; 59
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	eb e3       	ldi	r30, 0x3B	; 59
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	80 7f       	andi	r24, 0xF0	; 240
    213c:	8c 93       	st	X, r24
    213e:	17 c0       	rjmp	.+46     	; 0x216e <DIO_clear_low_nibble+0x8c>
		break;
	case 'B':
		PORTB&=~(0x0f);
    2140:	a8 e3       	ldi	r26, 0x38	; 56
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	e8 e3       	ldi	r30, 0x38	; 56
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	80 7f       	andi	r24, 0xF0	; 240
    214c:	8c 93       	st	X, r24
    214e:	0f c0       	rjmp	.+30     	; 0x216e <DIO_clear_low_nibble+0x8c>
		break;
	case 'C':
		PORTC&=~(0x0f);
    2150:	a5 e3       	ldi	r26, 0x35	; 53
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	e5 e3       	ldi	r30, 0x35	; 53
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	80 7f       	andi	r24, 0xF0	; 240
    215c:	8c 93       	st	X, r24
    215e:	07 c0       	rjmp	.+14     	; 0x216e <DIO_clear_low_nibble+0x8c>
		break;
	case 'D':
		PORTD&=~(0x0f);
    2160:	a2 e3       	ldi	r26, 0x32	; 50
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	e2 e3       	ldi	r30, 0x32	; 50
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	80 7f       	andi	r24, 0xF0	; 240
    216c:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <DIO_set_high_nibble>:

void DIO_set_high_nibble(uint8 portname)
{
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	00 d0       	rcall	.+0      	; 0x2180 <DIO_set_high_nibble+0x6>
    2180:	0f 92       	push	r0
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
    2186:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	3b 83       	std	Y+3, r19	; 0x03
    2190:	2a 83       	std	Y+2, r18	; 0x02
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	9b 81       	ldd	r25, Y+3	; 0x03
    2196:	82 34       	cpi	r24, 0x42	; 66
    2198:	91 05       	cpc	r25, r1
    219a:	f1 f0       	breq	.+60     	; 0x21d8 <DIO_set_high_nibble+0x5e>
    219c:	2a 81       	ldd	r18, Y+2	; 0x02
    219e:	3b 81       	ldd	r19, Y+3	; 0x03
    21a0:	23 34       	cpi	r18, 0x43	; 67
    21a2:	31 05       	cpc	r19, r1
    21a4:	34 f4       	brge	.+12     	; 0x21b2 <DIO_set_high_nibble+0x38>
    21a6:	8a 81       	ldd	r24, Y+2	; 0x02
    21a8:	9b 81       	ldd	r25, Y+3	; 0x03
    21aa:	81 34       	cpi	r24, 0x41	; 65
    21ac:	91 05       	cpc	r25, r1
    21ae:	61 f0       	breq	.+24     	; 0x21c8 <DIO_set_high_nibble+0x4e>
    21b0:	2a c0       	rjmp	.+84     	; 0x2206 <DIO_set_high_nibble+0x8c>
    21b2:	2a 81       	ldd	r18, Y+2	; 0x02
    21b4:	3b 81       	ldd	r19, Y+3	; 0x03
    21b6:	23 34       	cpi	r18, 0x43	; 67
    21b8:	31 05       	cpc	r19, r1
    21ba:	b1 f0       	breq	.+44     	; 0x21e8 <DIO_set_high_nibble+0x6e>
    21bc:	8a 81       	ldd	r24, Y+2	; 0x02
    21be:	9b 81       	ldd	r25, Y+3	; 0x03
    21c0:	84 34       	cpi	r24, 0x44	; 68
    21c2:	91 05       	cpc	r25, r1
    21c4:	c9 f0       	breq	.+50     	; 0x21f8 <DIO_set_high_nibble+0x7e>
    21c6:	1f c0       	rjmp	.+62     	; 0x2206 <DIO_set_high_nibble+0x8c>
	{
	case 'A':
		PORTA|=0xf0;
    21c8:	ab e3       	ldi	r26, 0x3B	; 59
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	eb e3       	ldi	r30, 0x3B	; 59
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	80 6f       	ori	r24, 0xF0	; 240
    21d4:	8c 93       	st	X, r24
    21d6:	17 c0       	rjmp	.+46     	; 0x2206 <DIO_set_high_nibble+0x8c>
		break;
	case 'B':
		PORTB|=0xf0;
    21d8:	a8 e3       	ldi	r26, 0x38	; 56
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	e8 e3       	ldi	r30, 0x38	; 56
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	80 6f       	ori	r24, 0xF0	; 240
    21e4:	8c 93       	st	X, r24
    21e6:	0f c0       	rjmp	.+30     	; 0x2206 <DIO_set_high_nibble+0x8c>
		break;
	case 'C':
		PORTC|=0xf0;
    21e8:	a5 e3       	ldi	r26, 0x35	; 53
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e5 e3       	ldi	r30, 0x35	; 53
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	80 6f       	ori	r24, 0xF0	; 240
    21f4:	8c 93       	st	X, r24
    21f6:	07 c0       	rjmp	.+14     	; 0x2206 <DIO_set_high_nibble+0x8c>
		break;
	case 'D':
		PORTD|=0xf0;
    21f8:	a2 e3       	ldi	r26, 0x32	; 50
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e2 e3       	ldi	r30, 0x32	; 50
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	80 6f       	ori	r24, 0xF0	; 240
    2204:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    2206:	0f 90       	pop	r0
    2208:	0f 90       	pop	r0
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <DIO_clear_high_nibble>:

void DIO_clear_high_nibble(uint8 portname)
{
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	00 d0       	rcall	.+0      	; 0x2218 <DIO_clear_high_nibble+0x6>
    2218:	0f 92       	push	r0
    221a:	cd b7       	in	r28, 0x3d	; 61
    221c:	de b7       	in	r29, 0x3e	; 62
    221e:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	28 2f       	mov	r18, r24
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	3b 83       	std	Y+3, r19	; 0x03
    2228:	2a 83       	std	Y+2, r18	; 0x02
    222a:	8a 81       	ldd	r24, Y+2	; 0x02
    222c:	9b 81       	ldd	r25, Y+3	; 0x03
    222e:	82 34       	cpi	r24, 0x42	; 66
    2230:	91 05       	cpc	r25, r1
    2232:	f1 f0       	breq	.+60     	; 0x2270 <DIO_clear_high_nibble+0x5e>
    2234:	2a 81       	ldd	r18, Y+2	; 0x02
    2236:	3b 81       	ldd	r19, Y+3	; 0x03
    2238:	23 34       	cpi	r18, 0x43	; 67
    223a:	31 05       	cpc	r19, r1
    223c:	34 f4       	brge	.+12     	; 0x224a <DIO_clear_high_nibble+0x38>
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	9b 81       	ldd	r25, Y+3	; 0x03
    2242:	81 34       	cpi	r24, 0x41	; 65
    2244:	91 05       	cpc	r25, r1
    2246:	61 f0       	breq	.+24     	; 0x2260 <DIO_clear_high_nibble+0x4e>
    2248:	2a c0       	rjmp	.+84     	; 0x229e <DIO_clear_high_nibble+0x8c>
    224a:	2a 81       	ldd	r18, Y+2	; 0x02
    224c:	3b 81       	ldd	r19, Y+3	; 0x03
    224e:	23 34       	cpi	r18, 0x43	; 67
    2250:	31 05       	cpc	r19, r1
    2252:	b1 f0       	breq	.+44     	; 0x2280 <DIO_clear_high_nibble+0x6e>
    2254:	8a 81       	ldd	r24, Y+2	; 0x02
    2256:	9b 81       	ldd	r25, Y+3	; 0x03
    2258:	84 34       	cpi	r24, 0x44	; 68
    225a:	91 05       	cpc	r25, r1
    225c:	c9 f0       	breq	.+50     	; 0x2290 <DIO_clear_high_nibble+0x7e>
    225e:	1f c0       	rjmp	.+62     	; 0x229e <DIO_clear_high_nibble+0x8c>
	{
	case 'A':
		PORTA&=~(0xf0);
    2260:	ab e3       	ldi	r26, 0x3B	; 59
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	eb e3       	ldi	r30, 0x3B	; 59
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	8f 70       	andi	r24, 0x0F	; 15
    226c:	8c 93       	st	X, r24
    226e:	17 c0       	rjmp	.+46     	; 0x229e <DIO_clear_high_nibble+0x8c>
		break;
	case 'B':
		PORTB&=~(0xf0);
    2270:	a8 e3       	ldi	r26, 0x38	; 56
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	e8 e3       	ldi	r30, 0x38	; 56
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	80 81       	ld	r24, Z
    227a:	8f 70       	andi	r24, 0x0F	; 15
    227c:	8c 93       	st	X, r24
    227e:	0f c0       	rjmp	.+30     	; 0x229e <DIO_clear_high_nibble+0x8c>
		break;
	case 'C':
		PORTC&=~(0xf0);
    2280:	a5 e3       	ldi	r26, 0x35	; 53
    2282:	b0 e0       	ldi	r27, 0x00	; 0
    2284:	e5 e3       	ldi	r30, 0x35	; 53
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	8f 70       	andi	r24, 0x0F	; 15
    228c:	8c 93       	st	X, r24
    228e:	07 c0       	rjmp	.+14     	; 0x229e <DIO_clear_high_nibble+0x8c>
		break;
	case 'D':
		PORTD&=~(0xf0);
    2290:	a2 e3       	ldi	r26, 0x32	; 50
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	e2 e3       	ldi	r30, 0x32	; 50
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	8f 70       	andi	r24, 0x0F	; 15
    229c:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	08 95       	ret

000022aa <DIO_write_high_nibble>:

void DIO_write_high_nibble(uint8 portname,uint8 value)
{
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	00 d0       	rcall	.+0      	; 0x22b0 <DIO_write_high_nibble+0x6>
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <DIO_write_high_nibble+0x8>
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
    22b6:	89 83       	std	Y+1, r24	; 0x01
    22b8:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	82 95       	swap	r24
    22be:	80 7f       	andi	r24, 0xF0	; 240
    22c0:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	28 2f       	mov	r18, r24
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	3c 83       	std	Y+4, r19	; 0x04
    22ca:	2b 83       	std	Y+3, r18	; 0x03
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	9c 81       	ldd	r25, Y+4	; 0x04
    22d0:	82 34       	cpi	r24, 0x42	; 66
    22d2:	91 05       	cpc	r25, r1
    22d4:	31 f1       	breq	.+76     	; 0x2322 <DIO_write_high_nibble+0x78>
    22d6:	2b 81       	ldd	r18, Y+3	; 0x03
    22d8:	3c 81       	ldd	r19, Y+4	; 0x04
    22da:	23 34       	cpi	r18, 0x43	; 67
    22dc:	31 05       	cpc	r19, r1
    22de:	34 f4       	brge	.+12     	; 0x22ec <DIO_write_high_nibble+0x42>
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	9c 81       	ldd	r25, Y+4	; 0x04
    22e4:	81 34       	cpi	r24, 0x41	; 65
    22e6:	91 05       	cpc	r25, r1
    22e8:	61 f0       	breq	.+24     	; 0x2302 <DIO_write_high_nibble+0x58>
    22ea:	4a c0       	rjmp	.+148    	; 0x2380 <DIO_write_high_nibble+0xd6>
    22ec:	2b 81       	ldd	r18, Y+3	; 0x03
    22ee:	3c 81       	ldd	r19, Y+4	; 0x04
    22f0:	23 34       	cpi	r18, 0x43	; 67
    22f2:	31 05       	cpc	r19, r1
    22f4:	31 f1       	breq	.+76     	; 0x2342 <DIO_write_high_nibble+0x98>
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	9c 81       	ldd	r25, Y+4	; 0x04
    22fa:	84 34       	cpi	r24, 0x44	; 68
    22fc:	91 05       	cpc	r25, r1
    22fe:	89 f1       	breq	.+98     	; 0x2362 <DIO_write_high_nibble+0xb8>
    2300:	3f c0       	rjmp	.+126    	; 0x2380 <DIO_write_high_nibble+0xd6>
	{
	case 'A':
		PORTA&=0x0f;
    2302:	ab e3       	ldi	r26, 0x3B	; 59
    2304:	b0 e0       	ldi	r27, 0x00	; 0
    2306:	eb e3       	ldi	r30, 0x3B	; 59
    2308:	f0 e0       	ldi	r31, 0x00	; 0
    230a:	80 81       	ld	r24, Z
    230c:	8f 70       	andi	r24, 0x0F	; 15
    230e:	8c 93       	st	X, r24
		PORTA|=value;
    2310:	ab e3       	ldi	r26, 0x3B	; 59
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	eb e3       	ldi	r30, 0x3B	; 59
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	90 81       	ld	r25, Z
    231a:	8a 81       	ldd	r24, Y+2	; 0x02
    231c:	89 2b       	or	r24, r25
    231e:	8c 93       	st	X, r24
    2320:	2f c0       	rjmp	.+94     	; 0x2380 <DIO_write_high_nibble+0xd6>
		break;
	case 'B':
		PORTB&=0x0f;
    2322:	a8 e3       	ldi	r26, 0x38	; 56
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	e8 e3       	ldi	r30, 0x38	; 56
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	8f 70       	andi	r24, 0x0F	; 15
    232e:	8c 93       	st	X, r24
		PORTA|=value;
    2330:	ab e3       	ldi	r26, 0x3B	; 59
    2332:	b0 e0       	ldi	r27, 0x00	; 0
    2334:	eb e3       	ldi	r30, 0x3B	; 59
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	90 81       	ld	r25, Z
    233a:	8a 81       	ldd	r24, Y+2	; 0x02
    233c:	89 2b       	or	r24, r25
    233e:	8c 93       	st	X, r24
    2340:	1f c0       	rjmp	.+62     	; 0x2380 <DIO_write_high_nibble+0xd6>
		break;
	case 'C':
		PORTC&=0x0f;
    2342:	a5 e3       	ldi	r26, 0x35	; 53
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	e5 e3       	ldi	r30, 0x35	; 53
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	8f 70       	andi	r24, 0x0F	; 15
    234e:	8c 93       	st	X, r24
		PORTA|=value;
    2350:	ab e3       	ldi	r26, 0x3B	; 59
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	eb e3       	ldi	r30, 0x3B	; 59
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	90 81       	ld	r25, Z
    235a:	8a 81       	ldd	r24, Y+2	; 0x02
    235c:	89 2b       	or	r24, r25
    235e:	8c 93       	st	X, r24
    2360:	0f c0       	rjmp	.+30     	; 0x2380 <DIO_write_high_nibble+0xd6>
		break;
	case 'D':
		PORTD&=0x0f;
    2362:	a2 e3       	ldi	r26, 0x32	; 50
    2364:	b0 e0       	ldi	r27, 0x00	; 0
    2366:	e2 e3       	ldi	r30, 0x32	; 50
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	80 81       	ld	r24, Z
    236c:	8f 70       	andi	r24, 0x0F	; 15
    236e:	8c 93       	st	X, r24
		PORTD|=value;
    2370:	a2 e3       	ldi	r26, 0x32	; 50
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	e2 e3       	ldi	r30, 0x32	; 50
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	90 81       	ld	r25, Z
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	89 2b       	or	r24, r25
    237e:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	cf 91       	pop	r28
    238a:	df 91       	pop	r29
    238c:	08 95       	ret

0000238e <DIO_write_high_nibbleDir>:

void DIO_write_high_nibbleDir(uint8 portname,uint8 direction)
{
    238e:	df 93       	push	r29
    2390:	cf 93       	push	r28
    2392:	00 d0       	rcall	.+0      	; 0x2394 <DIO_write_high_nibbleDir+0x6>
    2394:	00 d0       	rcall	.+0      	; 0x2396 <DIO_write_high_nibbleDir+0x8>
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
    239a:	89 83       	std	Y+1, r24	; 0x01
    239c:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	28 2f       	mov	r18, r24
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	3c 83       	std	Y+4, r19	; 0x04
    23a6:	2b 83       	std	Y+3, r18	; 0x03
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	9c 81       	ldd	r25, Y+4	; 0x04
    23ac:	82 34       	cpi	r24, 0x42	; 66
    23ae:	91 05       	cpc	r25, r1
    23b0:	49 f1       	breq	.+82     	; 0x2404 <DIO_write_high_nibbleDir+0x76>
    23b2:	2b 81       	ldd	r18, Y+3	; 0x03
    23b4:	3c 81       	ldd	r19, Y+4	; 0x04
    23b6:	23 34       	cpi	r18, 0x43	; 67
    23b8:	31 05       	cpc	r19, r1
    23ba:	34 f4       	brge	.+12     	; 0x23c8 <DIO_write_high_nibbleDir+0x3a>
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	9c 81       	ldd	r25, Y+4	; 0x04
    23c0:	81 34       	cpi	r24, 0x41	; 65
    23c2:	91 05       	cpc	r25, r1
    23c4:	61 f0       	breq	.+24     	; 0x23de <DIO_write_high_nibbleDir+0x50>
    23c6:	56 c0       	rjmp	.+172    	; 0x2474 <DIO_write_high_nibbleDir+0xe6>
    23c8:	2b 81       	ldd	r18, Y+3	; 0x03
    23ca:	3c 81       	ldd	r19, Y+4	; 0x04
    23cc:	23 34       	cpi	r18, 0x43	; 67
    23ce:	31 05       	cpc	r19, r1
    23d0:	61 f1       	breq	.+88     	; 0x242a <DIO_write_high_nibbleDir+0x9c>
    23d2:	8b 81       	ldd	r24, Y+3	; 0x03
    23d4:	9c 81       	ldd	r25, Y+4	; 0x04
    23d6:	84 34       	cpi	r24, 0x44	; 68
    23d8:	91 05       	cpc	r25, r1
    23da:	d1 f1       	breq	.+116    	; 0x2450 <DIO_write_high_nibbleDir+0xc2>
    23dc:	4b c0       	rjmp	.+150    	; 0x2474 <DIO_write_high_nibbleDir+0xe6>
	{
	case 'A':
		if(direction==1)
    23de:	8a 81       	ldd	r24, Y+2	; 0x02
    23e0:	81 30       	cpi	r24, 0x01	; 1
    23e2:	41 f4       	brne	.+16     	; 0x23f4 <DIO_write_high_nibbleDir+0x66>
			DDRA|=0xf0;
    23e4:	aa e3       	ldi	r26, 0x3A	; 58
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	ea e3       	ldi	r30, 0x3A	; 58
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	80 6f       	ori	r24, 0xF0	; 240
    23f0:	8c 93       	st	X, r24
    23f2:	40 c0       	rjmp	.+128    	; 0x2474 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRA&=~(0xf0);
    23f4:	aa e3       	ldi	r26, 0x3A	; 58
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	ea e3       	ldi	r30, 0x3A	; 58
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	8f 70       	andi	r24, 0x0F	; 15
    2400:	8c 93       	st	X, r24
    2402:	38 c0       	rjmp	.+112    	; 0x2474 <DIO_write_high_nibbleDir+0xe6>
		break;
	case 'B':
		if(direction==1)
    2404:	8a 81       	ldd	r24, Y+2	; 0x02
    2406:	81 30       	cpi	r24, 0x01	; 1
    2408:	41 f4       	brne	.+16     	; 0x241a <DIO_write_high_nibbleDir+0x8c>
			DDRB|=0xf0;
    240a:	a7 e3       	ldi	r26, 0x37	; 55
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	e7 e3       	ldi	r30, 0x37	; 55
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	80 81       	ld	r24, Z
    2414:	80 6f       	ori	r24, 0xF0	; 240
    2416:	8c 93       	st	X, r24
    2418:	2d c0       	rjmp	.+90     	; 0x2474 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRB&=~(0xf0);
    241a:	a7 e3       	ldi	r26, 0x37	; 55
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	e7 e3       	ldi	r30, 0x37	; 55
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	8f 70       	andi	r24, 0x0F	; 15
    2426:	8c 93       	st	X, r24
    2428:	25 c0       	rjmp	.+74     	; 0x2474 <DIO_write_high_nibbleDir+0xe6>
		break;
	case 'C':
		if(direction==1)
    242a:	8a 81       	ldd	r24, Y+2	; 0x02
    242c:	81 30       	cpi	r24, 0x01	; 1
    242e:	41 f4       	brne	.+16     	; 0x2440 <DIO_write_high_nibbleDir+0xb2>
			DDRC|=0xf0;
    2430:	a4 e3       	ldi	r26, 0x34	; 52
    2432:	b0 e0       	ldi	r27, 0x00	; 0
    2434:	e4 e3       	ldi	r30, 0x34	; 52
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	80 81       	ld	r24, Z
    243a:	80 6f       	ori	r24, 0xF0	; 240
    243c:	8c 93       	st	X, r24
    243e:	1a c0       	rjmp	.+52     	; 0x2474 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRC&=~(0xf0);
    2440:	a4 e3       	ldi	r26, 0x34	; 52
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	e4 e3       	ldi	r30, 0x34	; 52
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	8f 70       	andi	r24, 0x0F	; 15
    244c:	8c 93       	st	X, r24
    244e:	12 c0       	rjmp	.+36     	; 0x2474 <DIO_write_high_nibbleDir+0xe6>
		break;
	case 'D':
		if(direction==1)
    2450:	8a 81       	ldd	r24, Y+2	; 0x02
    2452:	81 30       	cpi	r24, 0x01	; 1
    2454:	41 f4       	brne	.+16     	; 0x2466 <DIO_write_high_nibbleDir+0xd8>
			DDRD|=0xf0;
    2456:	a1 e3       	ldi	r26, 0x31	; 49
    2458:	b0 e0       	ldi	r27, 0x00	; 0
    245a:	e1 e3       	ldi	r30, 0x31	; 49
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	80 6f       	ori	r24, 0xF0	; 240
    2462:	8c 93       	st	X, r24
    2464:	07 c0       	rjmp	.+14     	; 0x2474 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRD&=~(0xf0);
    2466:	a1 e3       	ldi	r26, 0x31	; 49
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	e1 e3       	ldi	r30, 0x31	; 49
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	8f 70       	andi	r24, 0x0F	; 15
    2472:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    2474:	0f 90       	pop	r0
    2476:	0f 90       	pop	r0
    2478:	0f 90       	pop	r0
    247a:	0f 90       	pop	r0
    247c:	cf 91       	pop	r28
    247e:	df 91       	pop	r29
    2480:	08 95       	ret

00002482 <DIO_write_low_nibbleDir>:

void DIO_write_low_nibbleDir(uint8 portname,uint8 direction)
{
    2482:	df 93       	push	r29
    2484:	cf 93       	push	r28
    2486:	00 d0       	rcall	.+0      	; 0x2488 <DIO_write_low_nibbleDir+0x6>
    2488:	00 d0       	rcall	.+0      	; 0x248a <DIO_write_low_nibbleDir+0x8>
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	28 2f       	mov	r18, r24
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	3c 83       	std	Y+4, r19	; 0x04
    249a:	2b 83       	std	Y+3, r18	; 0x03
    249c:	8b 81       	ldd	r24, Y+3	; 0x03
    249e:	9c 81       	ldd	r25, Y+4	; 0x04
    24a0:	82 34       	cpi	r24, 0x42	; 66
    24a2:	91 05       	cpc	r25, r1
    24a4:	49 f1       	breq	.+82     	; 0x24f8 <DIO_write_low_nibbleDir+0x76>
    24a6:	2b 81       	ldd	r18, Y+3	; 0x03
    24a8:	3c 81       	ldd	r19, Y+4	; 0x04
    24aa:	23 34       	cpi	r18, 0x43	; 67
    24ac:	31 05       	cpc	r19, r1
    24ae:	34 f4       	brge	.+12     	; 0x24bc <DIO_write_low_nibbleDir+0x3a>
    24b0:	8b 81       	ldd	r24, Y+3	; 0x03
    24b2:	9c 81       	ldd	r25, Y+4	; 0x04
    24b4:	81 34       	cpi	r24, 0x41	; 65
    24b6:	91 05       	cpc	r25, r1
    24b8:	61 f0       	breq	.+24     	; 0x24d2 <DIO_write_low_nibbleDir+0x50>
    24ba:	56 c0       	rjmp	.+172    	; 0x2568 <DIO_write_low_nibbleDir+0xe6>
    24bc:	2b 81       	ldd	r18, Y+3	; 0x03
    24be:	3c 81       	ldd	r19, Y+4	; 0x04
    24c0:	23 34       	cpi	r18, 0x43	; 67
    24c2:	31 05       	cpc	r19, r1
    24c4:	61 f1       	breq	.+88     	; 0x251e <DIO_write_low_nibbleDir+0x9c>
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03
    24c8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ca:	84 34       	cpi	r24, 0x44	; 68
    24cc:	91 05       	cpc	r25, r1
    24ce:	d1 f1       	breq	.+116    	; 0x2544 <DIO_write_low_nibbleDir+0xc2>
    24d0:	4b c0       	rjmp	.+150    	; 0x2568 <DIO_write_low_nibbleDir+0xe6>
	{
	case 'A':
		if(direction==1)
    24d2:	8a 81       	ldd	r24, Y+2	; 0x02
    24d4:	81 30       	cpi	r24, 0x01	; 1
    24d6:	41 f4       	brne	.+16     	; 0x24e8 <DIO_write_low_nibbleDir+0x66>
			DDRA|=0x0f;
    24d8:	aa e3       	ldi	r26, 0x3A	; 58
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	ea e3       	ldi	r30, 0x3A	; 58
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
    24e2:	8f 60       	ori	r24, 0x0F	; 15
    24e4:	8c 93       	st	X, r24
    24e6:	40 c0       	rjmp	.+128    	; 0x2568 <DIO_write_low_nibbleDir+0xe6>
		else
			DDRA&=~(0x0f);
    24e8:	aa e3       	ldi	r26, 0x3A	; 58
    24ea:	b0 e0       	ldi	r27, 0x00	; 0
    24ec:	ea e3       	ldi	r30, 0x3A	; 58
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	80 81       	ld	r24, Z
    24f2:	80 7f       	andi	r24, 0xF0	; 240
    24f4:	8c 93       	st	X, r24
    24f6:	38 c0       	rjmp	.+112    	; 0x2568 <DIO_write_low_nibbleDir+0xe6>
		break;
	case 'B':
		if(direction==1)
    24f8:	8a 81       	ldd	r24, Y+2	; 0x02
    24fa:	81 30       	cpi	r24, 0x01	; 1
    24fc:	41 f4       	brne	.+16     	; 0x250e <DIO_write_low_nibbleDir+0x8c>
			DDRB|=0x0f;
    24fe:	a7 e3       	ldi	r26, 0x37	; 55
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	e7 e3       	ldi	r30, 0x37	; 55
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	8f 60       	ori	r24, 0x0F	; 15
    250a:	8c 93       	st	X, r24
    250c:	2d c0       	rjmp	.+90     	; 0x2568 <DIO_write_low_nibbleDir+0xe6>
		else
			DDRB&=~(0x0f);
    250e:	a7 e3       	ldi	r26, 0x37	; 55
    2510:	b0 e0       	ldi	r27, 0x00	; 0
    2512:	e7 e3       	ldi	r30, 0x37	; 55
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	80 81       	ld	r24, Z
    2518:	80 7f       	andi	r24, 0xF0	; 240
    251a:	8c 93       	st	X, r24
    251c:	25 c0       	rjmp	.+74     	; 0x2568 <DIO_write_low_nibbleDir+0xe6>
		break;
	case 'C':
		if(direction==1)
    251e:	8a 81       	ldd	r24, Y+2	; 0x02
    2520:	81 30       	cpi	r24, 0x01	; 1
    2522:	41 f4       	brne	.+16     	; 0x2534 <DIO_write_low_nibbleDir+0xb2>
			DDRC|=0x0f;
    2524:	a4 e3       	ldi	r26, 0x34	; 52
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	e4 e3       	ldi	r30, 0x34	; 52
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	8f 60       	ori	r24, 0x0F	; 15
    2530:	8c 93       	st	X, r24
    2532:	1a c0       	rjmp	.+52     	; 0x2568 <DIO_write_low_nibbleDir+0xe6>
		else
			DDRC&=~(0x0f);
    2534:	a4 e3       	ldi	r26, 0x34	; 52
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	e4 e3       	ldi	r30, 0x34	; 52
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	80 7f       	andi	r24, 0xF0	; 240
    2540:	8c 93       	st	X, r24
    2542:	12 c0       	rjmp	.+36     	; 0x2568 <DIO_write_low_nibbleDir+0xe6>
		break;
	case 'D':
		if(direction==1)
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	81 30       	cpi	r24, 0x01	; 1
    2548:	41 f4       	brne	.+16     	; 0x255a <DIO_write_low_nibbleDir+0xd8>
			DDRD|=0x0f;
    254a:	a1 e3       	ldi	r26, 0x31	; 49
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	e1 e3       	ldi	r30, 0x31	; 49
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	8f 60       	ori	r24, 0x0F	; 15
    2556:	8c 93       	st	X, r24
    2558:	07 c0       	rjmp	.+14     	; 0x2568 <DIO_write_low_nibbleDir+0xe6>
		else
			DDRD&=~(0x0f);
    255a:	a1 e3       	ldi	r26, 0x31	; 49
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	e1 e3       	ldi	r30, 0x31	; 49
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	80 7f       	andi	r24, 0xF0	; 240
    2566:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	cf 91       	pop	r28
    2572:	df 91       	pop	r29
    2574:	08 95       	ret

00002576 <KeyPad_init>:
#endif
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void KeyPad_init(void)
{
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
	DIO_setPINDir( KEYPAD_PORT_OUT,0,in);
    257e:	82 e4       	ldi	r24, 0x42	; 66
    2580:	60 e0       	ldi	r22, 0x00	; 0
    2582:	40 e0       	ldi	r20, 0x00	; 0
    2584:	0e 94 2d 0b 	call	0x165a	; 0x165a <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_OUT,1,in);
    2588:	82 e4       	ldi	r24, 0x42	; 66
    258a:	61 e0       	ldi	r22, 0x01	; 1
    258c:	40 e0       	ldi	r20, 0x00	; 0
    258e:	0e 94 2d 0b 	call	0x165a	; 0x165a <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_OUT,2,in);
    2592:	82 e4       	ldi	r24, 0x42	; 66
    2594:	62 e0       	ldi	r22, 0x02	; 2
    2596:	40 e0       	ldi	r20, 0x00	; 0
    2598:	0e 94 2d 0b 	call	0x165a	; 0x165a <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_OUT,3,in);
    259c:	82 e4       	ldi	r24, 0x42	; 66
    259e:	63 e0       	ldi	r22, 0x03	; 3
    25a0:	40 e0       	ldi	r20, 0x00	; 0
    25a2:	0e 94 2d 0b 	call	0x165a	; 0x165a <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,0,in);
    25a6:	81 e4       	ldi	r24, 0x41	; 65
    25a8:	60 e0       	ldi	r22, 0x00	; 0
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	0e 94 2d 0b 	call	0x165a	; 0x165a <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,1,in);
    25b0:	81 e4       	ldi	r24, 0x41	; 65
    25b2:	61 e0       	ldi	r22, 0x01	; 1
    25b4:	40 e0       	ldi	r20, 0x00	; 0
    25b6:	0e 94 2d 0b 	call	0x165a	; 0x165a <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,2,in);
    25ba:	81 e4       	ldi	r24, 0x41	; 65
    25bc:	62 e0       	ldi	r22, 0x02	; 2
    25be:	40 e0       	ldi	r20, 0x00	; 0
    25c0:	0e 94 2d 0b 	call	0x165a	; 0x165a <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,3,in);
    25c4:	81 e4       	ldi	r24, 0x41	; 65
    25c6:	63 e0       	ldi	r22, 0x03	; 3
    25c8:	40 e0       	ldi	r20, 0x00	; 0
    25ca:	0e 94 2d 0b 	call	0x165a	; 0x165a <DIO_setPINDir>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,0,1);
    25ce:	81 e4       	ldi	r24, 0x41	; 65
    25d0:	60 e0       	ldi	r22, 0x00	; 0
    25d2:	41 e0       	ldi	r20, 0x01	; 1
    25d4:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <DIO_enablePullup_pin>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,1,1);
    25d8:	81 e4       	ldi	r24, 0x41	; 65
    25da:	61 e0       	ldi	r22, 0x01	; 1
    25dc:	41 e0       	ldi	r20, 0x01	; 1
    25de:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <DIO_enablePullup_pin>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,2,1);
    25e2:	81 e4       	ldi	r24, 0x41	; 65
    25e4:	62 e0       	ldi	r22, 0x02	; 2
    25e6:	41 e0       	ldi	r20, 0x01	; 1
    25e8:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <DIO_enablePullup_pin>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,3,1);
    25ec:	81 e4       	ldi	r24, 0x41	; 65
    25ee:	63 e0       	ldi	r22, 0x03	; 3
    25f0:	41 e0       	ldi	r20, 0x01	; 1
    25f2:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <DIO_enablePullup_pin>
}
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	08 95       	ret

000025fc <KeyPad_getPressedKey>:

uint8 KeyPad_getPressedKey(void)
{
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	00 d0       	rcall	.+0      	; 0x2602 <KeyPad_getPressedKey+0x6>
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		KeyPad_init();
    2606:	0e 94 bb 12 	call	0x2576	; 0x2576 <KeyPad_init>
		for(row=0;row<N_row;row++)
    260a:	19 82       	std	Y+1, r1	; 0x01
    260c:	38 c0       	rjmp	.+112    	; 0x267e <KeyPad_getPressedKey+0x82>
		{
			if(row>0)
    260e:	89 81       	ldd	r24, Y+1	; 0x01
    2610:	88 23       	and	r24, r24
    2612:	41 f0       	breq	.+16     	; 0x2624 <KeyPad_getPressedKey+0x28>
			{
				DIO_setPINDir( KEYPAD_PORT_OUT,row-1,in);
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	98 2f       	mov	r25, r24
    2618:	91 50       	subi	r25, 0x01	; 1
    261a:	82 e4       	ldi	r24, 0x42	; 66
    261c:	69 2f       	mov	r22, r25
    261e:	40 e0       	ldi	r20, 0x00	; 0
    2620:	0e 94 2d 0b 	call	0x165a	; 0x165a <DIO_setPINDir>
			}
			DIO_setPINDir( KEYPAD_PORT_OUT,row,out);
    2624:	82 e4       	ldi	r24, 0x42	; 66
    2626:	69 81       	ldd	r22, Y+1	; 0x01
    2628:	41 e0       	ldi	r20, 0x01	; 1
    262a:	0e 94 2d 0b 	call	0x165a	; 0x165a <DIO_setPINDir>
			DIO_write_PIN(KEYPAD_PORT_OUT,row,0);
    262e:	82 e4       	ldi	r24, 0x42	; 66
    2630:	69 81       	ldd	r22, Y+1	; 0x01
    2632:	40 e0       	ldi	r20, 0x00	; 0
    2634:	0e 94 11 0c 	call	0x1822	; 0x1822 <DIO_write_PIN>
			for(col=0;col<N_col;col++)
    2638:	1a 82       	std	Y+2, r1	; 0x02
    263a:	1b c0       	rjmp	.+54     	; 0x2672 <KeyPad_getPressedKey+0x76>
			{
				if(DIO_read_PIN(KEYPAD_PORT_IN,col)==0)
    263c:	81 e4       	ldi	r24, 0x41	; 65
    263e:	6a 81       	ldd	r22, Y+2	; 0x02
    2640:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <DIO_read_PIN>
    2644:	88 23       	and	r24, r24
    2646:	91 f4       	brne	.+36     	; 0x266c <KeyPad_getPressedKey+0x70>
				{
					#if (N_col==3)
					return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col==4)
					return KeyPad_4x4_adjustKeyNumber((col*N_col)+row+1);
    2648:	8a 81       	ldd	r24, Y+2	; 0x02
    264a:	88 2f       	mov	r24, r24
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	88 0f       	add	r24, r24
    2650:	99 1f       	adc	r25, r25
    2652:	88 0f       	add	r24, r24
    2654:	99 1f       	adc	r25, r25
    2656:	98 2f       	mov	r25, r24
    2658:	89 81       	ldd	r24, Y+1	; 0x01
    265a:	89 0f       	add	r24, r25
    265c:	8f 5f       	subi	r24, 0xFF	; 255
    265e:	0e 94 af 13 	call	0x275e	; 0x275e <KeyPad_4x4_adjustKeyNumber>
				}
			}
		}
	}

}
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	cf 91       	pop	r28
    2668:	df 91       	pop	r29
    266a:	08 95       	ret
			{
				DIO_setPINDir( KEYPAD_PORT_OUT,row-1,in);
			}
			DIO_setPINDir( KEYPAD_PORT_OUT,row,out);
			DIO_write_PIN(KEYPAD_PORT_OUT,row,0);
			for(col=0;col<N_col;col++)
    266c:	8a 81       	ldd	r24, Y+2	; 0x02
    266e:	8f 5f       	subi	r24, 0xFF	; 255
    2670:	8a 83       	std	Y+2, r24	; 0x02
    2672:	8a 81       	ldd	r24, Y+2	; 0x02
    2674:	84 30       	cpi	r24, 0x04	; 4
    2676:	10 f3       	brcs	.-60     	; 0x263c <KeyPad_getPressedKey+0x40>
{
	uint8 col,row;
	while(1)
	{
		KeyPad_init();
		for(row=0;row<N_row;row++)
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	8f 5f       	subi	r24, 0xFF	; 255
    267c:	89 83       	std	Y+1, r24	; 0x01
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	84 30       	cpi	r24, 0x04	; 4
    2682:	28 f2       	brcs	.-118    	; 0x260e <KeyPad_getPressedKey+0x12>
    2684:	c0 cf       	rjmp	.-128    	; 0x2606 <KeyPad_getPressedKey+0xa>

00002686 <KeyPad_4x3_adjustKeyNumber>:

}


uint8 KeyPad_4x3_adjustKeyNumber(uint8 button_number)
{
    2686:	df 93       	push	r29
    2688:	cf 93       	push	r28
    268a:	00 d0       	rcall	.+0      	; 0x268c <KeyPad_4x3_adjustKeyNumber+0x6>
    268c:	00 d0       	rcall	.+0      	; 0x268e <KeyPad_4x3_adjustKeyNumber+0x8>
    268e:	cd b7       	in	r28, 0x3d	; 61
    2690:	de b7       	in	r29, 0x3e	; 62
    2692:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	28 2f       	mov	r18, r24
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	3c 83       	std	Y+4, r19	; 0x04
    269c:	2b 83       	std	Y+3, r18	; 0x03
    269e:	8b 81       	ldd	r24, Y+3	; 0x03
    26a0:	9c 81       	ldd	r25, Y+4	; 0x04
    26a2:	85 30       	cpi	r24, 0x05	; 5
    26a4:	91 05       	cpc	r25, r1
    26a6:	09 f4       	brne	.+2      	; 0x26aa <KeyPad_4x3_adjustKeyNumber+0x24>
    26a8:	41 c0       	rjmp	.+130    	; 0x272c <KeyPad_4x3_adjustKeyNumber+0xa6>
    26aa:	2b 81       	ldd	r18, Y+3	; 0x03
    26ac:	3c 81       	ldd	r19, Y+4	; 0x04
    26ae:	26 30       	cpi	r18, 0x06	; 6
    26b0:	31 05       	cpc	r19, r1
    26b2:	dc f4       	brge	.+54     	; 0x26ea <KeyPad_4x3_adjustKeyNumber+0x64>
    26b4:	8b 81       	ldd	r24, Y+3	; 0x03
    26b6:	9c 81       	ldd	r25, Y+4	; 0x04
    26b8:	82 30       	cpi	r24, 0x02	; 2
    26ba:	91 05       	cpc	r25, r1
    26bc:	71 f1       	breq	.+92     	; 0x271a <KeyPad_4x3_adjustKeyNumber+0x94>
    26be:	2b 81       	ldd	r18, Y+3	; 0x03
    26c0:	3c 81       	ldd	r19, Y+4	; 0x04
    26c2:	23 30       	cpi	r18, 0x03	; 3
    26c4:	31 05       	cpc	r19, r1
    26c6:	34 f4       	brge	.+12     	; 0x26d4 <KeyPad_4x3_adjustKeyNumber+0x4e>
    26c8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ca:	9c 81       	ldd	r25, Y+4	; 0x04
    26cc:	81 30       	cpi	r24, 0x01	; 1
    26ce:	91 05       	cpc	r25, r1
    26d0:	09 f1       	breq	.+66     	; 0x2714 <KeyPad_4x3_adjustKeyNumber+0x8e>
    26d2:	3b c0       	rjmp	.+118    	; 0x274a <KeyPad_4x3_adjustKeyNumber+0xc4>
    26d4:	2b 81       	ldd	r18, Y+3	; 0x03
    26d6:	3c 81       	ldd	r19, Y+4	; 0x04
    26d8:	23 30       	cpi	r18, 0x03	; 3
    26da:	31 05       	cpc	r19, r1
    26dc:	09 f1       	breq	.+66     	; 0x2720 <KeyPad_4x3_adjustKeyNumber+0x9a>
    26de:	8b 81       	ldd	r24, Y+3	; 0x03
    26e0:	9c 81       	ldd	r25, Y+4	; 0x04
    26e2:	84 30       	cpi	r24, 0x04	; 4
    26e4:	91 05       	cpc	r25, r1
    26e6:	f9 f0       	breq	.+62     	; 0x2726 <KeyPad_4x3_adjustKeyNumber+0xa0>
    26e8:	30 c0       	rjmp	.+96     	; 0x274a <KeyPad_4x3_adjustKeyNumber+0xc4>
    26ea:	2b 81       	ldd	r18, Y+3	; 0x03
    26ec:	3c 81       	ldd	r19, Y+4	; 0x04
    26ee:	27 30       	cpi	r18, 0x07	; 7
    26f0:	31 05       	cpc	r19, r1
    26f2:	11 f1       	breq	.+68     	; 0x2738 <KeyPad_4x3_adjustKeyNumber+0xb2>
    26f4:	8b 81       	ldd	r24, Y+3	; 0x03
    26f6:	9c 81       	ldd	r25, Y+4	; 0x04
    26f8:	87 30       	cpi	r24, 0x07	; 7
    26fa:	91 05       	cpc	r25, r1
    26fc:	d4 f0       	brlt	.+52     	; 0x2732 <KeyPad_4x3_adjustKeyNumber+0xac>
    26fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2700:	3c 81       	ldd	r19, Y+4	; 0x04
    2702:	28 30       	cpi	r18, 0x08	; 8
    2704:	31 05       	cpc	r19, r1
    2706:	d9 f0       	breq	.+54     	; 0x273e <KeyPad_4x3_adjustKeyNumber+0xb8>
    2708:	8b 81       	ldd	r24, Y+3	; 0x03
    270a:	9c 81       	ldd	r25, Y+4	; 0x04
    270c:	89 30       	cpi	r24, 0x09	; 9
    270e:	91 05       	cpc	r25, r1
    2710:	c9 f0       	breq	.+50     	; 0x2744 <KeyPad_4x3_adjustKeyNumber+0xbe>
    2712:	1b c0       	rjmp	.+54     	; 0x274a <KeyPad_4x3_adjustKeyNumber+0xc4>
	{
	case 1:
		return '1';
    2714:	91 e3       	ldi	r25, 0x31	; 49
    2716:	9a 83       	std	Y+2, r25	; 0x02
    2718:	1a c0       	rjmp	.+52     	; 0x274e <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 2:
		return '2';
    271a:	22 e3       	ldi	r18, 0x32	; 50
    271c:	2a 83       	std	Y+2, r18	; 0x02
    271e:	17 c0       	rjmp	.+46     	; 0x274e <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 3:
		return '3';
    2720:	33 e3       	ldi	r19, 0x33	; 51
    2722:	3a 83       	std	Y+2, r19	; 0x02
    2724:	14 c0       	rjmp	.+40     	; 0x274e <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 4:
		return '4';
    2726:	84 e3       	ldi	r24, 0x34	; 52
    2728:	8a 83       	std	Y+2, r24	; 0x02
    272a:	11 c0       	rjmp	.+34     	; 0x274e <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 5:
		return '5';
    272c:	95 e3       	ldi	r25, 0x35	; 53
    272e:	9a 83       	std	Y+2, r25	; 0x02
    2730:	0e c0       	rjmp	.+28     	; 0x274e <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 6:
		return '6';
    2732:	26 e3       	ldi	r18, 0x36	; 54
    2734:	2a 83       	std	Y+2, r18	; 0x02
    2736:	0b c0       	rjmp	.+22     	; 0x274e <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 7:
		return '7';
    2738:	37 e3       	ldi	r19, 0x37	; 55
    273a:	3a 83       	std	Y+2, r19	; 0x02
    273c:	08 c0       	rjmp	.+16     	; 0x274e <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 8:
		return '8';
    273e:	88 e3       	ldi	r24, 0x38	; 56
    2740:	8a 83       	std	Y+2, r24	; 0x02
    2742:	05 c0       	rjmp	.+10     	; 0x274e <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 9:
		return '9';
    2744:	99 e3       	ldi	r25, 0x39	; 57
    2746:	9a 83       	std	Y+2, r25	; 0x02
    2748:	02 c0       	rjmp	.+4      	; 0x274e <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	default:
		return '0';
    274a:	20 e3       	ldi	r18, 0x30	; 48
    274c:	2a 83       	std	Y+2, r18	; 0x02
    274e:	8a 81       	ldd	r24, Y+2	; 0x02
		break;

	}

}
    2750:	0f 90       	pop	r0
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	0f 90       	pop	r0
    2758:	cf 91       	pop	r28
    275a:	df 91       	pop	r29
    275c:	08 95       	ret

0000275e <KeyPad_4x4_adjustKeyNumber>:

sint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    275e:	df 93       	push	r29
    2760:	cf 93       	push	r28
    2762:	00 d0       	rcall	.+0      	; 0x2764 <KeyPad_4x4_adjustKeyNumber+0x6>
    2764:	00 d0       	rcall	.+0      	; 0x2766 <KeyPad_4x4_adjustKeyNumber+0x8>
    2766:	cd b7       	in	r28, 0x3d	; 61
    2768:	de b7       	in	r29, 0x3e	; 62
    276a:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	28 2f       	mov	r18, r24
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	3c 83       	std	Y+4, r19	; 0x04
    2774:	2b 83       	std	Y+3, r18	; 0x03
    2776:	8b 81       	ldd	r24, Y+3	; 0x03
    2778:	9c 81       	ldd	r25, Y+4	; 0x04
    277a:	88 30       	cpi	r24, 0x08	; 8
    277c:	91 05       	cpc	r25, r1
    277e:	09 f4       	brne	.+2      	; 0x2782 <KeyPad_4x4_adjustKeyNumber+0x24>
    2780:	70 c0       	rjmp	.+224    	; 0x2862 <KeyPad_4x4_adjustKeyNumber+0x104>
    2782:	2b 81       	ldd	r18, Y+3	; 0x03
    2784:	3c 81       	ldd	r19, Y+4	; 0x04
    2786:	29 30       	cpi	r18, 0x09	; 9
    2788:	31 05       	cpc	r19, r1
    278a:	5c f5       	brge	.+86     	; 0x27e2 <KeyPad_4x4_adjustKeyNumber+0x84>
    278c:	8b 81       	ldd	r24, Y+3	; 0x03
    278e:	9c 81       	ldd	r25, Y+4	; 0x04
    2790:	84 30       	cpi	r24, 0x04	; 4
    2792:	91 05       	cpc	r25, r1
    2794:	09 f4       	brne	.+2      	; 0x2798 <KeyPad_4x4_adjustKeyNumber+0x3a>
    2796:	59 c0       	rjmp	.+178    	; 0x284a <KeyPad_4x4_adjustKeyNumber+0xec>
    2798:	2b 81       	ldd	r18, Y+3	; 0x03
    279a:	3c 81       	ldd	r19, Y+4	; 0x04
    279c:	25 30       	cpi	r18, 0x05	; 5
    279e:	31 05       	cpc	r19, r1
    27a0:	9c f4       	brge	.+38     	; 0x27c8 <KeyPad_4x4_adjustKeyNumber+0x6a>
    27a2:	8b 81       	ldd	r24, Y+3	; 0x03
    27a4:	9c 81       	ldd	r25, Y+4	; 0x04
    27a6:	82 30       	cpi	r24, 0x02	; 2
    27a8:	91 05       	cpc	r25, r1
    27aa:	09 f4       	brne	.+2      	; 0x27ae <KeyPad_4x4_adjustKeyNumber+0x50>
    27ac:	48 c0       	rjmp	.+144    	; 0x283e <KeyPad_4x4_adjustKeyNumber+0xe0>
    27ae:	2b 81       	ldd	r18, Y+3	; 0x03
    27b0:	3c 81       	ldd	r19, Y+4	; 0x04
    27b2:	23 30       	cpi	r18, 0x03	; 3
    27b4:	31 05       	cpc	r19, r1
    27b6:	0c f0       	brlt	.+2      	; 0x27ba <KeyPad_4x4_adjustKeyNumber+0x5c>
    27b8:	45 c0       	rjmp	.+138    	; 0x2844 <KeyPad_4x4_adjustKeyNumber+0xe6>
    27ba:	8b 81       	ldd	r24, Y+3	; 0x03
    27bc:	9c 81       	ldd	r25, Y+4	; 0x04
    27be:	81 30       	cpi	r24, 0x01	; 1
    27c0:	91 05       	cpc	r25, r1
    27c2:	09 f4       	brne	.+2      	; 0x27c6 <KeyPad_4x4_adjustKeyNumber+0x68>
    27c4:	39 c0       	rjmp	.+114    	; 0x2838 <KeyPad_4x4_adjustKeyNumber+0xda>
    27c6:	67 c0       	rjmp	.+206    	; 0x2896 <KeyPad_4x4_adjustKeyNumber+0x138>
    27c8:	2b 81       	ldd	r18, Y+3	; 0x03
    27ca:	3c 81       	ldd	r19, Y+4	; 0x04
    27cc:	26 30       	cpi	r18, 0x06	; 6
    27ce:	31 05       	cpc	r19, r1
    27d0:	09 f4       	brne	.+2      	; 0x27d4 <KeyPad_4x4_adjustKeyNumber+0x76>
    27d2:	41 c0       	rjmp	.+130    	; 0x2856 <KeyPad_4x4_adjustKeyNumber+0xf8>
    27d4:	8b 81       	ldd	r24, Y+3	; 0x03
    27d6:	9c 81       	ldd	r25, Y+4	; 0x04
    27d8:	87 30       	cpi	r24, 0x07	; 7
    27da:	91 05       	cpc	r25, r1
    27dc:	0c f0       	brlt	.+2      	; 0x27e0 <KeyPad_4x4_adjustKeyNumber+0x82>
    27de:	3e c0       	rjmp	.+124    	; 0x285c <KeyPad_4x4_adjustKeyNumber+0xfe>
    27e0:	37 c0       	rjmp	.+110    	; 0x2850 <KeyPad_4x4_adjustKeyNumber+0xf2>
    27e2:	2b 81       	ldd	r18, Y+3	; 0x03
    27e4:	3c 81       	ldd	r19, Y+4	; 0x04
    27e6:	2c 30       	cpi	r18, 0x0C	; 12
    27e8:	31 05       	cpc	r19, r1
    27ea:	09 f4       	brne	.+2      	; 0x27ee <KeyPad_4x4_adjustKeyNumber+0x90>
    27ec:	46 c0       	rjmp	.+140    	; 0x287a <KeyPad_4x4_adjustKeyNumber+0x11c>
    27ee:	8b 81       	ldd	r24, Y+3	; 0x03
    27f0:	9c 81       	ldd	r25, Y+4	; 0x04
    27f2:	8d 30       	cpi	r24, 0x0D	; 13
    27f4:	91 05       	cpc	r25, r1
    27f6:	5c f4       	brge	.+22     	; 0x280e <KeyPad_4x4_adjustKeyNumber+0xb0>
    27f8:	2b 81       	ldd	r18, Y+3	; 0x03
    27fa:	3c 81       	ldd	r19, Y+4	; 0x04
    27fc:	2a 30       	cpi	r18, 0x0A	; 10
    27fe:	31 05       	cpc	r19, r1
    2800:	b1 f1       	breq	.+108    	; 0x286e <KeyPad_4x4_adjustKeyNumber+0x110>
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	9c 81       	ldd	r25, Y+4	; 0x04
    2806:	8b 30       	cpi	r24, 0x0B	; 11
    2808:	91 05       	cpc	r25, r1
    280a:	a4 f5       	brge	.+104    	; 0x2874 <KeyPad_4x4_adjustKeyNumber+0x116>
    280c:	2d c0       	rjmp	.+90     	; 0x2868 <KeyPad_4x4_adjustKeyNumber+0x10a>
    280e:	2b 81       	ldd	r18, Y+3	; 0x03
    2810:	3c 81       	ldd	r19, Y+4	; 0x04
    2812:	2e 30       	cpi	r18, 0x0E	; 14
    2814:	31 05       	cpc	r19, r1
    2816:	b9 f1       	breq	.+110    	; 0x2886 <KeyPad_4x4_adjustKeyNumber+0x128>
    2818:	8b 81       	ldd	r24, Y+3	; 0x03
    281a:	9c 81       	ldd	r25, Y+4	; 0x04
    281c:	8e 30       	cpi	r24, 0x0E	; 14
    281e:	91 05       	cpc	r25, r1
    2820:	7c f1       	brlt	.+94     	; 0x2880 <KeyPad_4x4_adjustKeyNumber+0x122>
    2822:	2b 81       	ldd	r18, Y+3	; 0x03
    2824:	3c 81       	ldd	r19, Y+4	; 0x04
    2826:	2f 30       	cpi	r18, 0x0F	; 15
    2828:	31 05       	cpc	r19, r1
    282a:	79 f1       	breq	.+94     	; 0x288a <KeyPad_4x4_adjustKeyNumber+0x12c>
    282c:	8b 81       	ldd	r24, Y+3	; 0x03
    282e:	9c 81       	ldd	r25, Y+4	; 0x04
    2830:	80 31       	cpi	r24, 0x10	; 16
    2832:	91 05       	cpc	r25, r1
    2834:	69 f1       	breq	.+90     	; 0x2890 <KeyPad_4x4_adjustKeyNumber+0x132>
    2836:	2f c0       	rjmp	.+94     	; 0x2896 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
	case 1:
		return 7;
    2838:	97 e0       	ldi	r25, 0x07	; 7
    283a:	9a 83       	std	Y+2, r25	; 0x02
    283c:	2d c0       	rjmp	.+90     	; 0x2898 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 2:
		return 8;
    283e:	28 e0       	ldi	r18, 0x08	; 8
    2840:	2a 83       	std	Y+2, r18	; 0x02
    2842:	2a c0       	rjmp	.+84     	; 0x2898 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 3:
		return 9;
    2844:	39 e0       	ldi	r19, 0x09	; 9
    2846:	3a 83       	std	Y+2, r19	; 0x02
    2848:	27 c0       	rjmp	.+78     	; 0x2898 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 4:
		return '/';
    284a:	8f e2       	ldi	r24, 0x2F	; 47
    284c:	8a 83       	std	Y+2, r24	; 0x02
    284e:	24 c0       	rjmp	.+72     	; 0x2898 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 5:
		return 4;
    2850:	94 e0       	ldi	r25, 0x04	; 4
    2852:	9a 83       	std	Y+2, r25	; 0x02
    2854:	21 c0       	rjmp	.+66     	; 0x2898 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 6:
		return 5;
    2856:	25 e0       	ldi	r18, 0x05	; 5
    2858:	2a 83       	std	Y+2, r18	; 0x02
    285a:	1e c0       	rjmp	.+60     	; 0x2898 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 7:
		return 6;
    285c:	36 e0       	ldi	r19, 0x06	; 6
    285e:	3a 83       	std	Y+2, r19	; 0x02
    2860:	1b c0       	rjmp	.+54     	; 0x2898 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 8:
		return '*';
    2862:	8a e2       	ldi	r24, 0x2A	; 42
    2864:	8a 83       	std	Y+2, r24	; 0x02
    2866:	18 c0       	rjmp	.+48     	; 0x2898 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 9:
		return 1;
    2868:	91 e0       	ldi	r25, 0x01	; 1
    286a:	9a 83       	std	Y+2, r25	; 0x02
    286c:	15 c0       	rjmp	.+42     	; 0x2898 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 10:
		return 2;
    286e:	22 e0       	ldi	r18, 0x02	; 2
    2870:	2a 83       	std	Y+2, r18	; 0x02
    2872:	12 c0       	rjmp	.+36     	; 0x2898 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 11:
		return 3;
    2874:	33 e0       	ldi	r19, 0x03	; 3
    2876:	3a 83       	std	Y+2, r19	; 0x02
    2878:	0f c0       	rjmp	.+30     	; 0x2898 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 12:
		return '-';
    287a:	8d e2       	ldi	r24, 0x2D	; 45
    287c:	8a 83       	std	Y+2, r24	; 0x02
    287e:	0c c0       	rjmp	.+24     	; 0x2898 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 13:
		return 'A';
    2880:	91 e4       	ldi	r25, 0x41	; 65
    2882:	9a 83       	std	Y+2, r25	; 0x02
    2884:	09 c0       	rjmp	.+18     	; 0x2898 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 14:
		return 0;
    2886:	1a 82       	std	Y+2, r1	; 0x02
    2888:	07 c0       	rjmp	.+14     	; 0x2898 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 15:
		return '=';
    288a:	2d e3       	ldi	r18, 0x3D	; 61
    288c:	2a 83       	std	Y+2, r18	; 0x02
    288e:	04 c0       	rjmp	.+8      	; 0x2898 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 16:
		return '+';
    2890:	3b e2       	ldi	r19, 0x2B	; 43
    2892:	3a 83       	std	Y+2, r19	; 0x02
    2894:	01 c0       	rjmp	.+2      	; 0x2898 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;

	default:
		return 0 ;
    2896:	1a 82       	std	Y+2, r1	; 0x02
    2898:	8a 81       	ldd	r24, Y+2	; 0x02
		break;


	}

}
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	cf 91       	pop	r28
    28a4:	df 91       	pop	r29
    28a6:	08 95       	ret

000028a8 <LCD_refresh>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_refresh(void)
{
    28a8:	df 93       	push	r29
    28aa:	cf 93       	push	r28
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
    28b0:	aa 97       	sbiw	r28, 0x2a	; 42
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	f8 94       	cli
    28b6:	de bf       	out	0x3e, r29	; 62
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	cd bf       	out	0x3d, r28	; 61
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	a0 e8       	ldi	r26, 0x80	; 128
    28c2:	bf e3       	ldi	r27, 0x3F	; 63
    28c4:	8f a3       	std	Y+39, r24	; 0x27
    28c6:	98 a7       	std	Y+40, r25	; 0x28
    28c8:	a9 a7       	std	Y+41, r26	; 0x29
    28ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28cc:	6f a1       	ldd	r22, Y+39	; 0x27
    28ce:	78 a5       	ldd	r23, Y+40	; 0x28
    28d0:	89 a5       	ldd	r24, Y+41	; 0x29
    28d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	4a e7       	ldi	r20, 0x7A	; 122
    28da:	53 e4       	ldi	r21, 0x43	; 67
    28dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	8b a3       	std	Y+35, r24	; 0x23
    28e6:	9c a3       	std	Y+36, r25	; 0x24
    28e8:	ad a3       	std	Y+37, r26	; 0x25
    28ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28ec:	6b a1       	ldd	r22, Y+35	; 0x23
    28ee:	7c a1       	ldd	r23, Y+36	; 0x24
    28f0:	8d a1       	ldd	r24, Y+37	; 0x25
    28f2:	9e a1       	ldd	r25, Y+38	; 0x26
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e8       	ldi	r20, 0x80	; 128
    28fa:	5f e3       	ldi	r21, 0x3F	; 63
    28fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2900:	88 23       	and	r24, r24
    2902:	2c f4       	brge	.+10     	; 0x290e <LCD_refresh+0x66>
		__ticks = 1;
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	9a a3       	std	Y+34, r25	; 0x22
    290a:	89 a3       	std	Y+33, r24	; 0x21
    290c:	3f c0       	rjmp	.+126    	; 0x298c <LCD_refresh+0xe4>
	else if (__tmp > 65535)
    290e:	6b a1       	ldd	r22, Y+35	; 0x23
    2910:	7c a1       	ldd	r23, Y+36	; 0x24
    2912:	8d a1       	ldd	r24, Y+37	; 0x25
    2914:	9e a1       	ldd	r25, Y+38	; 0x26
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	3f ef       	ldi	r19, 0xFF	; 255
    291a:	4f e7       	ldi	r20, 0x7F	; 127
    291c:	57 e4       	ldi	r21, 0x47	; 71
    291e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2922:	18 16       	cp	r1, r24
    2924:	4c f5       	brge	.+82     	; 0x2978 <LCD_refresh+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2926:	6f a1       	ldd	r22, Y+39	; 0x27
    2928:	78 a5       	ldd	r23, Y+40	; 0x28
    292a:	89 a5       	ldd	r24, Y+41	; 0x29
    292c:	9a a5       	ldd	r25, Y+42	; 0x2a
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e2       	ldi	r20, 0x20	; 32
    2934:	51 e4       	ldi	r21, 0x41	; 65
    2936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	bc 01       	movw	r22, r24
    2940:	cd 01       	movw	r24, r26
    2942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	9a a3       	std	Y+34, r25	; 0x22
    294c:	89 a3       	std	Y+33, r24	; 0x21
    294e:	0f c0       	rjmp	.+30     	; 0x296e <LCD_refresh+0xc6>
    2950:	89 e1       	ldi	r24, 0x19	; 25
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	98 a3       	std	Y+32, r25	; 0x20
    2956:	8f 8f       	std	Y+31, r24	; 0x1f
    2958:	8f 8d       	ldd	r24, Y+31	; 0x1f
    295a:	98 a1       	ldd	r25, Y+32	; 0x20
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <LCD_refresh+0xb4>
    2960:	98 a3       	std	Y+32, r25	; 0x20
    2962:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2964:	89 a1       	ldd	r24, Y+33	; 0x21
    2966:	9a a1       	ldd	r25, Y+34	; 0x22
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	9a a3       	std	Y+34, r25	; 0x22
    296c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    296e:	89 a1       	ldd	r24, Y+33	; 0x21
    2970:	9a a1       	ldd	r25, Y+34	; 0x22
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	69 f7       	brne	.-38     	; 0x2950 <LCD_refresh+0xa8>
    2976:	14 c0       	rjmp	.+40     	; 0x29a0 <LCD_refresh+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2978:	6b a1       	ldd	r22, Y+35	; 0x23
    297a:	7c a1       	ldd	r23, Y+36	; 0x24
    297c:	8d a1       	ldd	r24, Y+37	; 0x25
    297e:	9e a1       	ldd	r25, Y+38	; 0x26
    2980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	9a a3       	std	Y+34, r25	; 0x22
    298a:	89 a3       	std	Y+33, r24	; 0x21
    298c:	89 a1       	ldd	r24, Y+33	; 0x21
    298e:	9a a1       	ldd	r25, Y+34	; 0x22
    2990:	9e 8f       	std	Y+30, r25	; 0x1e
    2992:	8d 8f       	std	Y+29, r24	; 0x1d
    2994:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2996:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <LCD_refresh+0xf0>
    299c:	9e 8f       	std	Y+30, r25	; 0x1e
    299e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,0);
    29a0:	83 e4       	ldi	r24, 0x43	; 67
    29a2:	62 e0       	ldi	r22, 0x02	; 2
    29a4:	40 e0       	ldi	r20, 0x00	; 0
    29a6:	0e 94 11 0c 	call	0x1822	; 0x1822 <DIO_write_PIN>
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	a0 e8       	ldi	r26, 0x80	; 128
    29b0:	bf e3       	ldi	r27, 0x3F	; 63
    29b2:	89 8f       	std	Y+25, r24	; 0x19
    29b4:	9a 8f       	std	Y+26, r25	; 0x1a
    29b6:	ab 8f       	std	Y+27, r26	; 0x1b
    29b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ba:	69 8d       	ldd	r22, Y+25	; 0x19
    29bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	4a e7       	ldi	r20, 0x7A	; 122
    29c8:	53 e4       	ldi	r21, 0x43	; 67
    29ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	8d 8b       	std	Y+21, r24	; 0x15
    29d4:	9e 8b       	std	Y+22, r25	; 0x16
    29d6:	af 8b       	std	Y+23, r26	; 0x17
    29d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29da:	6d 89       	ldd	r22, Y+21	; 0x15
    29dc:	7e 89       	ldd	r23, Y+22	; 0x16
    29de:	8f 89       	ldd	r24, Y+23	; 0x17
    29e0:	98 8d       	ldd	r25, Y+24	; 0x18
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e8       	ldi	r20, 0x80	; 128
    29e8:	5f e3       	ldi	r21, 0x3F	; 63
    29ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29ee:	88 23       	and	r24, r24
    29f0:	2c f4       	brge	.+10     	; 0x29fc <LCD_refresh+0x154>
		__ticks = 1;
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	9c 8b       	std	Y+20, r25	; 0x14
    29f8:	8b 8b       	std	Y+19, r24	; 0x13
    29fa:	3f c0       	rjmp	.+126    	; 0x2a7a <LCD_refresh+0x1d2>
	else if (__tmp > 65535)
    29fc:	6d 89       	ldd	r22, Y+21	; 0x15
    29fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2a00:	8f 89       	ldd	r24, Y+23	; 0x17
    2a02:	98 8d       	ldd	r25, Y+24	; 0x18
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	3f ef       	ldi	r19, 0xFF	; 255
    2a08:	4f e7       	ldi	r20, 0x7F	; 127
    2a0a:	57 e4       	ldi	r21, 0x47	; 71
    2a0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a10:	18 16       	cp	r1, r24
    2a12:	4c f5       	brge	.+82     	; 0x2a66 <LCD_refresh+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a14:	69 8d       	ldd	r22, Y+25	; 0x19
    2a16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	40 e2       	ldi	r20, 0x20	; 32
    2a22:	51 e4       	ldi	r21, 0x41	; 65
    2a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	bc 01       	movw	r22, r24
    2a2e:	cd 01       	movw	r24, r26
    2a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	9c 8b       	std	Y+20, r25	; 0x14
    2a3a:	8b 8b       	std	Y+19, r24	; 0x13
    2a3c:	0f c0       	rjmp	.+30     	; 0x2a5c <LCD_refresh+0x1b4>
    2a3e:	89 e1       	ldi	r24, 0x19	; 25
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	9a 8b       	std	Y+18, r25	; 0x12
    2a44:	89 8b       	std	Y+17, r24	; 0x11
    2a46:	89 89       	ldd	r24, Y+17	; 0x11
    2a48:	9a 89       	ldd	r25, Y+18	; 0x12
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	f1 f7       	brne	.-4      	; 0x2a4a <LCD_refresh+0x1a2>
    2a4e:	9a 8b       	std	Y+18, r25	; 0x12
    2a50:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a52:	8b 89       	ldd	r24, Y+19	; 0x13
    2a54:	9c 89       	ldd	r25, Y+20	; 0x14
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	9c 8b       	std	Y+20, r25	; 0x14
    2a5a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a60:	00 97       	sbiw	r24, 0x00	; 0
    2a62:	69 f7       	brne	.-38     	; 0x2a3e <LCD_refresh+0x196>
    2a64:	14 c0       	rjmp	.+40     	; 0x2a8e <LCD_refresh+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a66:	6d 89       	ldd	r22, Y+21	; 0x15
    2a68:	7e 89       	ldd	r23, Y+22	; 0x16
    2a6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	9c 8b       	std	Y+20, r25	; 0x14
    2a78:	8b 8b       	std	Y+19, r24	; 0x13
    2a7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a7e:	98 8b       	std	Y+16, r25	; 0x10
    2a80:	8f 87       	std	Y+15, r24	; 0x0f
    2a82:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a84:	98 89       	ldd	r25, Y+16	; 0x10
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <LCD_refresh+0x1de>
    2a8a:	98 8b       	std	Y+16, r25	; 0x10
    2a8c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,1);
    2a8e:	83 e4       	ldi	r24, 0x43	; 67
    2a90:	62 e0       	ldi	r22, 0x02	; 2
    2a92:	41 e0       	ldi	r20, 0x01	; 1
    2a94:	0e 94 11 0c 	call	0x1822	; 0x1822 <DIO_write_PIN>
    2a98:	80 e0       	ldi	r24, 0x00	; 0
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	a0 e8       	ldi	r26, 0x80	; 128
    2a9e:	bf e3       	ldi	r27, 0x3F	; 63
    2aa0:	8b 87       	std	Y+11, r24	; 0x0b
    2aa2:	9c 87       	std	Y+12, r25	; 0x0c
    2aa4:	ad 87       	std	Y+13, r26	; 0x0d
    2aa6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	4a e7       	ldi	r20, 0x7A	; 122
    2ab6:	53 e4       	ldi	r21, 0x43	; 67
    2ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2abc:	dc 01       	movw	r26, r24
    2abe:	cb 01       	movw	r24, r22
    2ac0:	8f 83       	std	Y+7, r24	; 0x07
    2ac2:	98 87       	std	Y+8, r25	; 0x08
    2ac4:	a9 87       	std	Y+9, r26	; 0x09
    2ac6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aca:	78 85       	ldd	r23, Y+8	; 0x08
    2acc:	89 85       	ldd	r24, Y+9	; 0x09
    2ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	40 e8       	ldi	r20, 0x80	; 128
    2ad6:	5f e3       	ldi	r21, 0x3F	; 63
    2ad8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2adc:	88 23       	and	r24, r24
    2ade:	2c f4       	brge	.+10     	; 0x2aea <LCD_refresh+0x242>
		__ticks = 1;
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	9e 83       	std	Y+6, r25	; 0x06
    2ae6:	8d 83       	std	Y+5, r24	; 0x05
    2ae8:	3f c0       	rjmp	.+126    	; 0x2b68 <LCD_refresh+0x2c0>
	else if (__tmp > 65535)
    2aea:	6f 81       	ldd	r22, Y+7	; 0x07
    2aec:	78 85       	ldd	r23, Y+8	; 0x08
    2aee:	89 85       	ldd	r24, Y+9	; 0x09
    2af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	3f ef       	ldi	r19, 0xFF	; 255
    2af6:	4f e7       	ldi	r20, 0x7F	; 127
    2af8:	57 e4       	ldi	r21, 0x47	; 71
    2afa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2afe:	18 16       	cp	r1, r24
    2b00:	4c f5       	brge	.+82     	; 0x2b54 <LCD_refresh+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	40 e2       	ldi	r20, 0x20	; 32
    2b10:	51 e4       	ldi	r21, 0x41	; 65
    2b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	bc 01       	movw	r22, r24
    2b1c:	cd 01       	movw	r24, r26
    2b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	9e 83       	std	Y+6, r25	; 0x06
    2b28:	8d 83       	std	Y+5, r24	; 0x05
    2b2a:	0f c0       	rjmp	.+30     	; 0x2b4a <LCD_refresh+0x2a2>
    2b2c:	89 e1       	ldi	r24, 0x19	; 25
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	9c 83       	std	Y+4, r25	; 0x04
    2b32:	8b 83       	std	Y+3, r24	; 0x03
    2b34:	8b 81       	ldd	r24, Y+3	; 0x03
    2b36:	9c 81       	ldd	r25, Y+4	; 0x04
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	f1 f7       	brne	.-4      	; 0x2b38 <LCD_refresh+0x290>
    2b3c:	9c 83       	std	Y+4, r25	; 0x04
    2b3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b40:	8d 81       	ldd	r24, Y+5	; 0x05
    2b42:	9e 81       	ldd	r25, Y+6	; 0x06
    2b44:	01 97       	sbiw	r24, 0x01	; 1
    2b46:	9e 83       	std	Y+6, r25	; 0x06
    2b48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4e:	00 97       	sbiw	r24, 0x00	; 0
    2b50:	69 f7       	brne	.-38     	; 0x2b2c <LCD_refresh+0x284>
    2b52:	14 c0       	rjmp	.+40     	; 0x2b7c <LCD_refresh+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b54:	6f 81       	ldd	r22, Y+7	; 0x07
    2b56:	78 85       	ldd	r23, Y+8	; 0x08
    2b58:	89 85       	ldd	r24, Y+9	; 0x09
    2b5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	9e 83       	std	Y+6, r25	; 0x06
    2b66:	8d 83       	std	Y+5, r24	; 0x05
    2b68:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b6c:	9a 83       	std	Y+2, r25	; 0x02
    2b6e:	89 83       	std	Y+1, r24	; 0x01
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	9a 81       	ldd	r25, Y+2	; 0x02
    2b74:	01 97       	sbiw	r24, 0x01	; 1
    2b76:	f1 f7       	brne	.-4      	; 0x2b74 <LCD_refresh+0x2cc>
    2b78:	9a 83       	std	Y+2, r25	; 0x02
    2b7a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2b7c:	aa 96       	adiw	r28, 0x2a	; 42
    2b7e:	0f b6       	in	r0, 0x3f	; 63
    2b80:	f8 94       	cli
    2b82:	de bf       	out	0x3e, r29	; 62
    2b84:	0f be       	out	0x3f, r0	; 63
    2b86:	cd bf       	out	0x3d, r28	; 61
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	08 95       	ret

00002b8e <LCD_Command>:
void LCD_Command(uint8 cmd)
{
    2b8e:	df 93       	push	r29
    2b90:	cf 93       	push	r28
    2b92:	cd b7       	in	r28, 0x3d	; 61
    2b94:	de b7       	in	r29, 0x3e	; 62
    2b96:	e9 97       	sbiw	r28, 0x39	; 57
    2b98:	0f b6       	in	r0, 0x3f	; 63
    2b9a:	f8 94       	cli
    2b9c:	de bf       	out	0x3e, r29	; 62
    2b9e:	0f be       	out	0x3f, r0	; 63
    2ba0:	cd bf       	out	0x3d, r28	; 61
    2ba2:	89 af       	std	Y+57, r24	; 0x39
	DIO_write_PIN(LCD_ctrl_port,RS,0);
    2ba4:	83 e4       	ldi	r24, 0x43	; 67
    2ba6:	60 e0       	ldi	r22, 0x00	; 0
    2ba8:	40 e0       	ldi	r20, 0x00	; 0
    2baa:	0e 94 11 0c 	call	0x1822	; 0x1822 <DIO_write_PIN>
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	a0 e8       	ldi	r26, 0x80	; 128
    2bb4:	bf e3       	ldi	r27, 0x3F	; 63
    2bb6:	8d ab       	std	Y+53, r24	; 0x35
    2bb8:	9e ab       	std	Y+54, r25	; 0x36
    2bba:	af ab       	std	Y+55, r26	; 0x37
    2bbc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bbe:	6d a9       	ldd	r22, Y+53	; 0x35
    2bc0:	7e a9       	ldd	r23, Y+54	; 0x36
    2bc2:	8f a9       	ldd	r24, Y+55	; 0x37
    2bc4:	98 ad       	ldd	r25, Y+56	; 0x38
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	4a e7       	ldi	r20, 0x7A	; 122
    2bcc:	53 e4       	ldi	r21, 0x43	; 67
    2bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd2:	dc 01       	movw	r26, r24
    2bd4:	cb 01       	movw	r24, r22
    2bd6:	89 ab       	std	Y+49, r24	; 0x31
    2bd8:	9a ab       	std	Y+50, r25	; 0x32
    2bda:	ab ab       	std	Y+51, r26	; 0x33
    2bdc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2bde:	69 a9       	ldd	r22, Y+49	; 0x31
    2be0:	7a a9       	ldd	r23, Y+50	; 0x32
    2be2:	8b a9       	ldd	r24, Y+51	; 0x33
    2be4:	9c a9       	ldd	r25, Y+52	; 0x34
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	40 e8       	ldi	r20, 0x80	; 128
    2bec:	5f e3       	ldi	r21, 0x3F	; 63
    2bee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bf2:	88 23       	and	r24, r24
    2bf4:	2c f4       	brge	.+10     	; 0x2c00 <LCD_Command+0x72>
		__ticks = 1;
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	98 ab       	std	Y+48, r25	; 0x30
    2bfc:	8f a7       	std	Y+47, r24	; 0x2f
    2bfe:	3f c0       	rjmp	.+126    	; 0x2c7e <LCD_Command+0xf0>
	else if (__tmp > 65535)
    2c00:	69 a9       	ldd	r22, Y+49	; 0x31
    2c02:	7a a9       	ldd	r23, Y+50	; 0x32
    2c04:	8b a9       	ldd	r24, Y+51	; 0x33
    2c06:	9c a9       	ldd	r25, Y+52	; 0x34
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	3f ef       	ldi	r19, 0xFF	; 255
    2c0c:	4f e7       	ldi	r20, 0x7F	; 127
    2c0e:	57 e4       	ldi	r21, 0x47	; 71
    2c10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c14:	18 16       	cp	r1, r24
    2c16:	4c f5       	brge	.+82     	; 0x2c6a <LCD_Command+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c18:	6d a9       	ldd	r22, Y+53	; 0x35
    2c1a:	7e a9       	ldd	r23, Y+54	; 0x36
    2c1c:	8f a9       	ldd	r24, Y+55	; 0x37
    2c1e:	98 ad       	ldd	r25, Y+56	; 0x38
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	40 e2       	ldi	r20, 0x20	; 32
    2c26:	51 e4       	ldi	r21, 0x41	; 65
    2c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	bc 01       	movw	r22, r24
    2c32:	cd 01       	movw	r24, r26
    2c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	98 ab       	std	Y+48, r25	; 0x30
    2c3e:	8f a7       	std	Y+47, r24	; 0x2f
    2c40:	0f c0       	rjmp	.+30     	; 0x2c60 <LCD_Command+0xd2>
    2c42:	89 e1       	ldi	r24, 0x19	; 25
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	9e a7       	std	Y+46, r25	; 0x2e
    2c48:	8d a7       	std	Y+45, r24	; 0x2d
    2c4a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c4c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c4e:	01 97       	sbiw	r24, 0x01	; 1
    2c50:	f1 f7       	brne	.-4      	; 0x2c4e <LCD_Command+0xc0>
    2c52:	9e a7       	std	Y+46, r25	; 0x2e
    2c54:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c56:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c58:	98 a9       	ldd	r25, Y+48	; 0x30
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	98 ab       	std	Y+48, r25	; 0x30
    2c5e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c60:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c62:	98 a9       	ldd	r25, Y+48	; 0x30
    2c64:	00 97       	sbiw	r24, 0x00	; 0
    2c66:	69 f7       	brne	.-38     	; 0x2c42 <LCD_Command+0xb4>
    2c68:	14 c0       	rjmp	.+40     	; 0x2c92 <LCD_Command+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c6a:	69 a9       	ldd	r22, Y+49	; 0x31
    2c6c:	7a a9       	ldd	r23, Y+50	; 0x32
    2c6e:	8b a9       	ldd	r24, Y+51	; 0x33
    2c70:	9c a9       	ldd	r25, Y+52	; 0x34
    2c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c76:	dc 01       	movw	r26, r24
    2c78:	cb 01       	movw	r24, r22
    2c7a:	98 ab       	std	Y+48, r25	; 0x30
    2c7c:	8f a7       	std	Y+47, r24	; 0x2f
    2c7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c80:	98 a9       	ldd	r25, Y+48	; 0x30
    2c82:	9c a7       	std	Y+44, r25	; 0x2c
    2c84:	8b a7       	std	Y+43, r24	; 0x2b
    2c86:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c88:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <LCD_Command+0xfc>
    2c8e:	9c a7       	std	Y+44, r25	; 0x2c
    2c90:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,1);
    2c92:	83 e4       	ldi	r24, 0x43	; 67
    2c94:	62 e0       	ldi	r22, 0x02	; 2
    2c96:	41 e0       	ldi	r20, 0x01	; 1
    2c98:	0e 94 11 0c 	call	0x1822	; 0x1822 <DIO_write_PIN>
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	a0 e8       	ldi	r26, 0x80	; 128
    2ca2:	bf e3       	ldi	r27, 0x3F	; 63
    2ca4:	8f a3       	std	Y+39, r24	; 0x27
    2ca6:	98 a7       	std	Y+40, r25	; 0x28
    2ca8:	a9 a7       	std	Y+41, r26	; 0x29
    2caa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cac:	6f a1       	ldd	r22, Y+39	; 0x27
    2cae:	78 a5       	ldd	r23, Y+40	; 0x28
    2cb0:	89 a5       	ldd	r24, Y+41	; 0x29
    2cb2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	4a e7       	ldi	r20, 0x7A	; 122
    2cba:	53 e4       	ldi	r21, 0x43	; 67
    2cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	8b a3       	std	Y+35, r24	; 0x23
    2cc6:	9c a3       	std	Y+36, r25	; 0x24
    2cc8:	ad a3       	std	Y+37, r26	; 0x25
    2cca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ccc:	6b a1       	ldd	r22, Y+35	; 0x23
    2cce:	7c a1       	ldd	r23, Y+36	; 0x24
    2cd0:	8d a1       	ldd	r24, Y+37	; 0x25
    2cd2:	9e a1       	ldd	r25, Y+38	; 0x26
    2cd4:	20 e0       	ldi	r18, 0x00	; 0
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	40 e8       	ldi	r20, 0x80	; 128
    2cda:	5f e3       	ldi	r21, 0x3F	; 63
    2cdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ce0:	88 23       	and	r24, r24
    2ce2:	2c f4       	brge	.+10     	; 0x2cee <LCD_Command+0x160>
		__ticks = 1;
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	9a a3       	std	Y+34, r25	; 0x22
    2cea:	89 a3       	std	Y+33, r24	; 0x21
    2cec:	3f c0       	rjmp	.+126    	; 0x2d6c <LCD_Command+0x1de>
	else if (__tmp > 65535)
    2cee:	6b a1       	ldd	r22, Y+35	; 0x23
    2cf0:	7c a1       	ldd	r23, Y+36	; 0x24
    2cf2:	8d a1       	ldd	r24, Y+37	; 0x25
    2cf4:	9e a1       	ldd	r25, Y+38	; 0x26
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	3f ef       	ldi	r19, 0xFF	; 255
    2cfa:	4f e7       	ldi	r20, 0x7F	; 127
    2cfc:	57 e4       	ldi	r21, 0x47	; 71
    2cfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d02:	18 16       	cp	r1, r24
    2d04:	4c f5       	brge	.+82     	; 0x2d58 <LCD_Command+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d06:	6f a1       	ldd	r22, Y+39	; 0x27
    2d08:	78 a5       	ldd	r23, Y+40	; 0x28
    2d0a:	89 a5       	ldd	r24, Y+41	; 0x29
    2d0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 e2       	ldi	r20, 0x20	; 32
    2d14:	51 e4       	ldi	r21, 0x41	; 65
    2d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	bc 01       	movw	r22, r24
    2d20:	cd 01       	movw	r24, r26
    2d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	9a a3       	std	Y+34, r25	; 0x22
    2d2c:	89 a3       	std	Y+33, r24	; 0x21
    2d2e:	0f c0       	rjmp	.+30     	; 0x2d4e <LCD_Command+0x1c0>
    2d30:	89 e1       	ldi	r24, 0x19	; 25
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	98 a3       	std	Y+32, r25	; 0x20
    2d36:	8f 8f       	std	Y+31, r24	; 0x1f
    2d38:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d3a:	98 a1       	ldd	r25, Y+32	; 0x20
    2d3c:	01 97       	sbiw	r24, 0x01	; 1
    2d3e:	f1 f7       	brne	.-4      	; 0x2d3c <LCD_Command+0x1ae>
    2d40:	98 a3       	std	Y+32, r25	; 0x20
    2d42:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d44:	89 a1       	ldd	r24, Y+33	; 0x21
    2d46:	9a a1       	ldd	r25, Y+34	; 0x22
    2d48:	01 97       	sbiw	r24, 0x01	; 1
    2d4a:	9a a3       	std	Y+34, r25	; 0x22
    2d4c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d4e:	89 a1       	ldd	r24, Y+33	; 0x21
    2d50:	9a a1       	ldd	r25, Y+34	; 0x22
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	69 f7       	brne	.-38     	; 0x2d30 <LCD_Command+0x1a2>
    2d56:	14 c0       	rjmp	.+40     	; 0x2d80 <LCD_Command+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d58:	6b a1       	ldd	r22, Y+35	; 0x23
    2d5a:	7c a1       	ldd	r23, Y+36	; 0x24
    2d5c:	8d a1       	ldd	r24, Y+37	; 0x25
    2d5e:	9e a1       	ldd	r25, Y+38	; 0x26
    2d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d64:	dc 01       	movw	r26, r24
    2d66:	cb 01       	movw	r24, r22
    2d68:	9a a3       	std	Y+34, r25	; 0x22
    2d6a:	89 a3       	std	Y+33, r24	; 0x21
    2d6c:	89 a1       	ldd	r24, Y+33	; 0x21
    2d6e:	9a a1       	ldd	r25, Y+34	; 0x22
    2d70:	9e 8f       	std	Y+30, r25	; 0x1e
    2d72:	8d 8f       	std	Y+29, r24	; 0x1d
    2d74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d76:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d78:	01 97       	sbiw	r24, 0x01	; 1
    2d7a:	f1 f7       	brne	.-4      	; 0x2d78 <LCD_Command+0x1ea>
    2d7c:	9e 8f       	std	Y+30, r25	; 0x1e
    2d7e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_write_high_nibble(LCD_data_port,cmd>>4);
    2d80:	89 ad       	ldd	r24, Y+57	; 0x39
    2d82:	98 2f       	mov	r25, r24
    2d84:	92 95       	swap	r25
    2d86:	9f 70       	andi	r25, 0x0F	; 15
    2d88:	84 e4       	ldi	r24, 0x44	; 68
    2d8a:	69 2f       	mov	r22, r25
    2d8c:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_write_high_nibble>
	LCD_refresh();
    2d90:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_refresh>
	DIO_write_high_nibble(LCD_data_port,cmd);
    2d94:	84 e4       	ldi	r24, 0x44	; 68
    2d96:	69 ad       	ldd	r22, Y+57	; 0x39
    2d98:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_write_high_nibble>
    2d9c:	80 e0       	ldi	r24, 0x00	; 0
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	a0 e8       	ldi	r26, 0x80	; 128
    2da2:	bf e3       	ldi	r27, 0x3F	; 63
    2da4:	89 8f       	std	Y+25, r24	; 0x19
    2da6:	9a 8f       	std	Y+26, r25	; 0x1a
    2da8:	ab 8f       	std	Y+27, r26	; 0x1b
    2daa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dac:	69 8d       	ldd	r22, Y+25	; 0x19
    2dae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2db0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2db2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	30 e0       	ldi	r19, 0x00	; 0
    2db8:	4a e7       	ldi	r20, 0x7A	; 122
    2dba:	53 e4       	ldi	r21, 0x43	; 67
    2dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	8d 8b       	std	Y+21, r24	; 0x15
    2dc6:	9e 8b       	std	Y+22, r25	; 0x16
    2dc8:	af 8b       	std	Y+23, r26	; 0x17
    2dca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dcc:	6d 89       	ldd	r22, Y+21	; 0x15
    2dce:	7e 89       	ldd	r23, Y+22	; 0x16
    2dd0:	8f 89       	ldd	r24, Y+23	; 0x17
    2dd2:	98 8d       	ldd	r25, Y+24	; 0x18
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	40 e8       	ldi	r20, 0x80	; 128
    2dda:	5f e3       	ldi	r21, 0x3F	; 63
    2ddc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2de0:	88 23       	and	r24, r24
    2de2:	2c f4       	brge	.+10     	; 0x2dee <LCD_Command+0x260>
		__ticks = 1;
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	9c 8b       	std	Y+20, r25	; 0x14
    2dea:	8b 8b       	std	Y+19, r24	; 0x13
    2dec:	3f c0       	rjmp	.+126    	; 0x2e6c <LCD_Command+0x2de>
	else if (__tmp > 65535)
    2dee:	6d 89       	ldd	r22, Y+21	; 0x15
    2df0:	7e 89       	ldd	r23, Y+22	; 0x16
    2df2:	8f 89       	ldd	r24, Y+23	; 0x17
    2df4:	98 8d       	ldd	r25, Y+24	; 0x18
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	3f ef       	ldi	r19, 0xFF	; 255
    2dfa:	4f e7       	ldi	r20, 0x7F	; 127
    2dfc:	57 e4       	ldi	r21, 0x47	; 71
    2dfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e02:	18 16       	cp	r1, r24
    2e04:	4c f5       	brge	.+82     	; 0x2e58 <LCD_Command+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e06:	69 8d       	ldd	r22, Y+25	; 0x19
    2e08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	40 e2       	ldi	r20, 0x20	; 32
    2e14:	51 e4       	ldi	r21, 0x41	; 65
    2e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	bc 01       	movw	r22, r24
    2e20:	cd 01       	movw	r24, r26
    2e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	9c 8b       	std	Y+20, r25	; 0x14
    2e2c:	8b 8b       	std	Y+19, r24	; 0x13
    2e2e:	0f c0       	rjmp	.+30     	; 0x2e4e <LCD_Command+0x2c0>
    2e30:	89 e1       	ldi	r24, 0x19	; 25
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	9a 8b       	std	Y+18, r25	; 0x12
    2e36:	89 8b       	std	Y+17, r24	; 0x11
    2e38:	89 89       	ldd	r24, Y+17	; 0x11
    2e3a:	9a 89       	ldd	r25, Y+18	; 0x12
    2e3c:	01 97       	sbiw	r24, 0x01	; 1
    2e3e:	f1 f7       	brne	.-4      	; 0x2e3c <LCD_Command+0x2ae>
    2e40:	9a 8b       	std	Y+18, r25	; 0x12
    2e42:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e44:	8b 89       	ldd	r24, Y+19	; 0x13
    2e46:	9c 89       	ldd	r25, Y+20	; 0x14
    2e48:	01 97       	sbiw	r24, 0x01	; 1
    2e4a:	9c 8b       	std	Y+20, r25	; 0x14
    2e4c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e50:	9c 89       	ldd	r25, Y+20	; 0x14
    2e52:	00 97       	sbiw	r24, 0x00	; 0
    2e54:	69 f7       	brne	.-38     	; 0x2e30 <LCD_Command+0x2a2>
    2e56:	14 c0       	rjmp	.+40     	; 0x2e80 <LCD_Command+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e58:	6d 89       	ldd	r22, Y+21	; 0x15
    2e5a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e5c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e5e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	9c 8b       	std	Y+20, r25	; 0x14
    2e6a:	8b 8b       	std	Y+19, r24	; 0x13
    2e6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e70:	98 8b       	std	Y+16, r25	; 0x10
    2e72:	8f 87       	std	Y+15, r24	; 0x0f
    2e74:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e76:	98 89       	ldd	r25, Y+16	; 0x10
    2e78:	01 97       	sbiw	r24, 0x01	; 1
    2e7a:	f1 f7       	brne	.-4      	; 0x2e78 <LCD_Command+0x2ea>
    2e7c:	98 8b       	std	Y+16, r25	; 0x10
    2e7e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,0);
    2e80:	83 e4       	ldi	r24, 0x43	; 67
    2e82:	62 e0       	ldi	r22, 0x02	; 2
    2e84:	40 e0       	ldi	r20, 0x00	; 0
    2e86:	0e 94 11 0c 	call	0x1822	; 0x1822 <DIO_write_PIN>
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	a0 e8       	ldi	r26, 0x80	; 128
    2e90:	bf e3       	ldi	r27, 0x3F	; 63
    2e92:	8b 87       	std	Y+11, r24	; 0x0b
    2e94:	9c 87       	std	Y+12, r25	; 0x0c
    2e96:	ad 87       	std	Y+13, r26	; 0x0d
    2e98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ea0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	4a e7       	ldi	r20, 0x7A	; 122
    2ea8:	53 e4       	ldi	r21, 0x43	; 67
    2eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	8f 83       	std	Y+7, r24	; 0x07
    2eb4:	98 87       	std	Y+8, r25	; 0x08
    2eb6:	a9 87       	std	Y+9, r26	; 0x09
    2eb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eba:	6f 81       	ldd	r22, Y+7	; 0x07
    2ebc:	78 85       	ldd	r23, Y+8	; 0x08
    2ebe:	89 85       	ldd	r24, Y+9	; 0x09
    2ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec2:	20 e0       	ldi	r18, 0x00	; 0
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	40 e8       	ldi	r20, 0x80	; 128
    2ec8:	5f e3       	ldi	r21, 0x3F	; 63
    2eca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ece:	88 23       	and	r24, r24
    2ed0:	2c f4       	brge	.+10     	; 0x2edc <LCD_Command+0x34e>
		__ticks = 1;
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	9e 83       	std	Y+6, r25	; 0x06
    2ed8:	8d 83       	std	Y+5, r24	; 0x05
    2eda:	3f c0       	rjmp	.+126    	; 0x2f5a <LCD_Command+0x3cc>
	else if (__tmp > 65535)
    2edc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ede:	78 85       	ldd	r23, Y+8	; 0x08
    2ee0:	89 85       	ldd	r24, Y+9	; 0x09
    2ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	3f ef       	ldi	r19, 0xFF	; 255
    2ee8:	4f e7       	ldi	r20, 0x7F	; 127
    2eea:	57 e4       	ldi	r21, 0x47	; 71
    2eec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ef0:	18 16       	cp	r1, r24
    2ef2:	4c f5       	brge	.+82     	; 0x2f46 <LCD_Command+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2efa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 e2       	ldi	r20, 0x20	; 32
    2f02:	51 e4       	ldi	r21, 0x41	; 65
    2f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	bc 01       	movw	r22, r24
    2f0e:	cd 01       	movw	r24, r26
    2f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	9e 83       	std	Y+6, r25	; 0x06
    2f1a:	8d 83       	std	Y+5, r24	; 0x05
    2f1c:	0f c0       	rjmp	.+30     	; 0x2f3c <LCD_Command+0x3ae>
    2f1e:	89 e1       	ldi	r24, 0x19	; 25
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	9c 83       	std	Y+4, r25	; 0x04
    2f24:	8b 83       	std	Y+3, r24	; 0x03
    2f26:	8b 81       	ldd	r24, Y+3	; 0x03
    2f28:	9c 81       	ldd	r25, Y+4	; 0x04
    2f2a:	01 97       	sbiw	r24, 0x01	; 1
    2f2c:	f1 f7       	brne	.-4      	; 0x2f2a <LCD_Command+0x39c>
    2f2e:	9c 83       	std	Y+4, r25	; 0x04
    2f30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f32:	8d 81       	ldd	r24, Y+5	; 0x05
    2f34:	9e 81       	ldd	r25, Y+6	; 0x06
    2f36:	01 97       	sbiw	r24, 0x01	; 1
    2f38:	9e 83       	std	Y+6, r25	; 0x06
    2f3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f40:	00 97       	sbiw	r24, 0x00	; 0
    2f42:	69 f7       	brne	.-38     	; 0x2f1e <LCD_Command+0x390>
    2f44:	14 c0       	rjmp	.+40     	; 0x2f6e <LCD_Command+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f46:	6f 81       	ldd	r22, Y+7	; 0x07
    2f48:	78 85       	ldd	r23, Y+8	; 0x08
    2f4a:	89 85       	ldd	r24, Y+9	; 0x09
    2f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	9e 83       	std	Y+6, r25	; 0x06
    2f58:	8d 83       	std	Y+5, r24	; 0x05
    2f5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f5e:	9a 83       	std	Y+2, r25	; 0x02
    2f60:	89 83       	std	Y+1, r24	; 0x01
    2f62:	89 81       	ldd	r24, Y+1	; 0x01
    2f64:	9a 81       	ldd	r25, Y+2	; 0x02
    2f66:	01 97       	sbiw	r24, 0x01	; 1
    2f68:	f1 f7       	brne	.-4      	; 0x2f66 <LCD_Command+0x3d8>
    2f6a:	9a 83       	std	Y+2, r25	; 0x02
    2f6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2f6e:	e9 96       	adiw	r28, 0x39	; 57
    2f70:	0f b6       	in	r0, 0x3f	; 63
    2f72:	f8 94       	cli
    2f74:	de bf       	out	0x3e, r29	; 62
    2f76:	0f be       	out	0x3f, r0	; 63
    2f78:	cd bf       	out	0x3d, r28	; 61
    2f7a:	cf 91       	pop	r28
    2f7c:	df 91       	pop	r29
    2f7e:	08 95       	ret

00002f80 <LCD_init>:
void LCD_init(void)
{
    2f80:	df 93       	push	r29
    2f82:	cf 93       	push	r28
    2f84:	cd b7       	in	r28, 0x3d	; 61
    2f86:	de b7       	in	r29, 0x3e	; 62
    2f88:	2e 97       	sbiw	r28, 0x0e	; 14
    2f8a:	0f b6       	in	r0, 0x3f	; 63
    2f8c:	f8 94       	cli
    2f8e:	de bf       	out	0x3e, r29	; 62
    2f90:	0f be       	out	0x3f, r0	; 63
    2f92:	cd bf       	out	0x3d, r28	; 61
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	a8 e4       	ldi	r26, 0x48	; 72
    2f9a:	b3 e4       	ldi	r27, 0x43	; 67
    2f9c:	8b 87       	std	Y+11, r24	; 0x0b
    2f9e:	9c 87       	std	Y+12, r25	; 0x0c
    2fa0:	ad 87       	std	Y+13, r26	; 0x0d
    2fa2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2faa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fac:	20 e0       	ldi	r18, 0x00	; 0
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	4a e7       	ldi	r20, 0x7A	; 122
    2fb2:	53 e4       	ldi	r21, 0x43	; 67
    2fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb8:	dc 01       	movw	r26, r24
    2fba:	cb 01       	movw	r24, r22
    2fbc:	8f 83       	std	Y+7, r24	; 0x07
    2fbe:	98 87       	std	Y+8, r25	; 0x08
    2fc0:	a9 87       	std	Y+9, r26	; 0x09
    2fc2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fc4:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc6:	78 85       	ldd	r23, Y+8	; 0x08
    2fc8:	89 85       	ldd	r24, Y+9	; 0x09
    2fca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fcc:	20 e0       	ldi	r18, 0x00	; 0
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	40 e8       	ldi	r20, 0x80	; 128
    2fd2:	5f e3       	ldi	r21, 0x3F	; 63
    2fd4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fd8:	88 23       	and	r24, r24
    2fda:	2c f4       	brge	.+10     	; 0x2fe6 <LCD_init+0x66>
		__ticks = 1;
    2fdc:	81 e0       	ldi	r24, 0x01	; 1
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	9e 83       	std	Y+6, r25	; 0x06
    2fe2:	8d 83       	std	Y+5, r24	; 0x05
    2fe4:	3f c0       	rjmp	.+126    	; 0x3064 <LCD_init+0xe4>
	else if (__tmp > 65535)
    2fe6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fe8:	78 85       	ldd	r23, Y+8	; 0x08
    2fea:	89 85       	ldd	r24, Y+9	; 0x09
    2fec:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fee:	20 e0       	ldi	r18, 0x00	; 0
    2ff0:	3f ef       	ldi	r19, 0xFF	; 255
    2ff2:	4f e7       	ldi	r20, 0x7F	; 127
    2ff4:	57 e4       	ldi	r21, 0x47	; 71
    2ff6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ffa:	18 16       	cp	r1, r24
    2ffc:	4c f5       	brge	.+82     	; 0x3050 <LCD_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ffe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3000:	7c 85       	ldd	r23, Y+12	; 0x0c
    3002:	8d 85       	ldd	r24, Y+13	; 0x0d
    3004:	9e 85       	ldd	r25, Y+14	; 0x0e
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	40 e2       	ldi	r20, 0x20	; 32
    300c:	51 e4       	ldi	r21, 0x41	; 65
    300e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	bc 01       	movw	r22, r24
    3018:	cd 01       	movw	r24, r26
    301a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	9e 83       	std	Y+6, r25	; 0x06
    3024:	8d 83       	std	Y+5, r24	; 0x05
    3026:	0f c0       	rjmp	.+30     	; 0x3046 <LCD_init+0xc6>
    3028:	89 e1       	ldi	r24, 0x19	; 25
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	9c 83       	std	Y+4, r25	; 0x04
    302e:	8b 83       	std	Y+3, r24	; 0x03
    3030:	8b 81       	ldd	r24, Y+3	; 0x03
    3032:	9c 81       	ldd	r25, Y+4	; 0x04
    3034:	01 97       	sbiw	r24, 0x01	; 1
    3036:	f1 f7       	brne	.-4      	; 0x3034 <LCD_init+0xb4>
    3038:	9c 83       	std	Y+4, r25	; 0x04
    303a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    303c:	8d 81       	ldd	r24, Y+5	; 0x05
    303e:	9e 81       	ldd	r25, Y+6	; 0x06
    3040:	01 97       	sbiw	r24, 0x01	; 1
    3042:	9e 83       	std	Y+6, r25	; 0x06
    3044:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3046:	8d 81       	ldd	r24, Y+5	; 0x05
    3048:	9e 81       	ldd	r25, Y+6	; 0x06
    304a:	00 97       	sbiw	r24, 0x00	; 0
    304c:	69 f7       	brne	.-38     	; 0x3028 <LCD_init+0xa8>
    304e:	14 c0       	rjmp	.+40     	; 0x3078 <LCD_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3050:	6f 81       	ldd	r22, Y+7	; 0x07
    3052:	78 85       	ldd	r23, Y+8	; 0x08
    3054:	89 85       	ldd	r24, Y+9	; 0x09
    3056:	9a 85       	ldd	r25, Y+10	; 0x0a
    3058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	9e 83       	std	Y+6, r25	; 0x06
    3062:	8d 83       	std	Y+5, r24	; 0x05
    3064:	8d 81       	ldd	r24, Y+5	; 0x05
    3066:	9e 81       	ldd	r25, Y+6	; 0x06
    3068:	9a 83       	std	Y+2, r25	; 0x02
    306a:	89 83       	std	Y+1, r24	; 0x01
    306c:	89 81       	ldd	r24, Y+1	; 0x01
    306e:	9a 81       	ldd	r25, Y+2	; 0x02
    3070:	01 97       	sbiw	r24, 0x01	; 1
    3072:	f1 f7       	brne	.-4      	; 0x3070 <LCD_init+0xf0>
    3074:	9a 83       	std	Y+2, r25	; 0x02
    3076:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	DIO_setPINDir(LCD_ctrl_port,RS,out);
    3078:	83 e4       	ldi	r24, 0x43	; 67
    307a:	60 e0       	ldi	r22, 0x00	; 0
    307c:	41 e0       	ldi	r20, 0x01	; 1
    307e:	0e 94 2d 0b 	call	0x165a	; 0x165a <DIO_setPINDir>
	DIO_setPINDir(LCD_ctrl_port,RW,out);
    3082:	83 e4       	ldi	r24, 0x43	; 67
    3084:	61 e0       	ldi	r22, 0x01	; 1
    3086:	41 e0       	ldi	r20, 0x01	; 1
    3088:	0e 94 2d 0b 	call	0x165a	; 0x165a <DIO_setPINDir>
	DIO_setPINDir(LCD_ctrl_port,EN,out);
    308c:	83 e4       	ldi	r24, 0x43	; 67
    308e:	62 e0       	ldi	r22, 0x02	; 2
    3090:	41 e0       	ldi	r20, 0x01	; 1
    3092:	0e 94 2d 0b 	call	0x165a	; 0x165a <DIO_setPINDir>
	DIO_write_high_nibbleDir(LCD_data_port,out);
    3096:	84 e4       	ldi	r24, 0x44	; 68
    3098:	61 e0       	ldi	r22, 0x01	; 1
    309a:	0e 94 c7 11 	call	0x238e	; 0x238e <DIO_write_high_nibbleDir>
	LCD_Command(LCD_Cursor_reset);
    309e:	82 e0       	ldi	r24, 0x02	; 2
    30a0:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <LCD_Command>
	LCD_Command(LCD_4bit_2line);
    30a4:	88 e2       	ldi	r24, 0x28	; 40
    30a6:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <LCD_Command>
	LCD_Command(LCD_displayOn_cursorOff);
    30aa:	8c e0       	ldi	r24, 0x0C	; 12
    30ac:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <LCD_Command>
	LCD_Command(LCD_clear_cmd);
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <LCD_Command>
}
    30b6:	2e 96       	adiw	r28, 0x0e	; 14
    30b8:	0f b6       	in	r0, 0x3f	; 63
    30ba:	f8 94       	cli
    30bc:	de bf       	out	0x3e, r29	; 62
    30be:	0f be       	out	0x3f, r0	; 63
    30c0:	cd bf       	out	0x3d, r28	; 61
    30c2:	cf 91       	pop	r28
    30c4:	df 91       	pop	r29
    30c6:	08 95       	ret

000030c8 <LCD_displayChar>:

void LCD_displayChar(uint8 data)
{
    30c8:	df 93       	push	r29
    30ca:	cf 93       	push	r28
    30cc:	cd b7       	in	r28, 0x3d	; 61
    30ce:	de b7       	in	r29, 0x3e	; 62
    30d0:	e9 97       	sbiw	r28, 0x39	; 57
    30d2:	0f b6       	in	r0, 0x3f	; 63
    30d4:	f8 94       	cli
    30d6:	de bf       	out	0x3e, r29	; 62
    30d8:	0f be       	out	0x3f, r0	; 63
    30da:	cd bf       	out	0x3d, r28	; 61
    30dc:	89 af       	std	Y+57, r24	; 0x39
	DIO_write_PIN(LCD_ctrl_port,RS,1);
    30de:	83 e4       	ldi	r24, 0x43	; 67
    30e0:	60 e0       	ldi	r22, 0x00	; 0
    30e2:	41 e0       	ldi	r20, 0x01	; 1
    30e4:	0e 94 11 0c 	call	0x1822	; 0x1822 <DIO_write_PIN>
    30e8:	80 e0       	ldi	r24, 0x00	; 0
    30ea:	90 e0       	ldi	r25, 0x00	; 0
    30ec:	a0 e8       	ldi	r26, 0x80	; 128
    30ee:	bf e3       	ldi	r27, 0x3F	; 63
    30f0:	8d ab       	std	Y+53, r24	; 0x35
    30f2:	9e ab       	std	Y+54, r25	; 0x36
    30f4:	af ab       	std	Y+55, r26	; 0x37
    30f6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30f8:	6d a9       	ldd	r22, Y+53	; 0x35
    30fa:	7e a9       	ldd	r23, Y+54	; 0x36
    30fc:	8f a9       	ldd	r24, Y+55	; 0x37
    30fe:	98 ad       	ldd	r25, Y+56	; 0x38
    3100:	20 e0       	ldi	r18, 0x00	; 0
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	4a e7       	ldi	r20, 0x7A	; 122
    3106:	53 e4       	ldi	r21, 0x43	; 67
    3108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	89 ab       	std	Y+49, r24	; 0x31
    3112:	9a ab       	std	Y+50, r25	; 0x32
    3114:	ab ab       	std	Y+51, r26	; 0x33
    3116:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3118:	69 a9       	ldd	r22, Y+49	; 0x31
    311a:	7a a9       	ldd	r23, Y+50	; 0x32
    311c:	8b a9       	ldd	r24, Y+51	; 0x33
    311e:	9c a9       	ldd	r25, Y+52	; 0x34
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	40 e8       	ldi	r20, 0x80	; 128
    3126:	5f e3       	ldi	r21, 0x3F	; 63
    3128:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    312c:	88 23       	and	r24, r24
    312e:	2c f4       	brge	.+10     	; 0x313a <LCD_displayChar+0x72>
		__ticks = 1;
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	98 ab       	std	Y+48, r25	; 0x30
    3136:	8f a7       	std	Y+47, r24	; 0x2f
    3138:	3f c0       	rjmp	.+126    	; 0x31b8 <LCD_displayChar+0xf0>
	else if (__tmp > 65535)
    313a:	69 a9       	ldd	r22, Y+49	; 0x31
    313c:	7a a9       	ldd	r23, Y+50	; 0x32
    313e:	8b a9       	ldd	r24, Y+51	; 0x33
    3140:	9c a9       	ldd	r25, Y+52	; 0x34
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	3f ef       	ldi	r19, 0xFF	; 255
    3146:	4f e7       	ldi	r20, 0x7F	; 127
    3148:	57 e4       	ldi	r21, 0x47	; 71
    314a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    314e:	18 16       	cp	r1, r24
    3150:	4c f5       	brge	.+82     	; 0x31a4 <LCD_displayChar+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3152:	6d a9       	ldd	r22, Y+53	; 0x35
    3154:	7e a9       	ldd	r23, Y+54	; 0x36
    3156:	8f a9       	ldd	r24, Y+55	; 0x37
    3158:	98 ad       	ldd	r25, Y+56	; 0x38
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	40 e2       	ldi	r20, 0x20	; 32
    3160:	51 e4       	ldi	r21, 0x41	; 65
    3162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	bc 01       	movw	r22, r24
    316c:	cd 01       	movw	r24, r26
    316e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22
    3176:	98 ab       	std	Y+48, r25	; 0x30
    3178:	8f a7       	std	Y+47, r24	; 0x2f
    317a:	0f c0       	rjmp	.+30     	; 0x319a <LCD_displayChar+0xd2>
    317c:	89 e1       	ldi	r24, 0x19	; 25
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	9e a7       	std	Y+46, r25	; 0x2e
    3182:	8d a7       	std	Y+45, r24	; 0x2d
    3184:	8d a5       	ldd	r24, Y+45	; 0x2d
    3186:	9e a5       	ldd	r25, Y+46	; 0x2e
    3188:	01 97       	sbiw	r24, 0x01	; 1
    318a:	f1 f7       	brne	.-4      	; 0x3188 <LCD_displayChar+0xc0>
    318c:	9e a7       	std	Y+46, r25	; 0x2e
    318e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3190:	8f a5       	ldd	r24, Y+47	; 0x2f
    3192:	98 a9       	ldd	r25, Y+48	; 0x30
    3194:	01 97       	sbiw	r24, 0x01	; 1
    3196:	98 ab       	std	Y+48, r25	; 0x30
    3198:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    319a:	8f a5       	ldd	r24, Y+47	; 0x2f
    319c:	98 a9       	ldd	r25, Y+48	; 0x30
    319e:	00 97       	sbiw	r24, 0x00	; 0
    31a0:	69 f7       	brne	.-38     	; 0x317c <LCD_displayChar+0xb4>
    31a2:	14 c0       	rjmp	.+40     	; 0x31cc <LCD_displayChar+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a4:	69 a9       	ldd	r22, Y+49	; 0x31
    31a6:	7a a9       	ldd	r23, Y+50	; 0x32
    31a8:	8b a9       	ldd	r24, Y+51	; 0x33
    31aa:	9c a9       	ldd	r25, Y+52	; 0x34
    31ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	98 ab       	std	Y+48, r25	; 0x30
    31b6:	8f a7       	std	Y+47, r24	; 0x2f
    31b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    31ba:	98 a9       	ldd	r25, Y+48	; 0x30
    31bc:	9c a7       	std	Y+44, r25	; 0x2c
    31be:	8b a7       	std	Y+43, r24	; 0x2b
    31c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    31c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    31c4:	01 97       	sbiw	r24, 0x01	; 1
    31c6:	f1 f7       	brne	.-4      	; 0x31c4 <LCD_displayChar+0xfc>
    31c8:	9c a7       	std	Y+44, r25	; 0x2c
    31ca:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,1);
    31cc:	83 e4       	ldi	r24, 0x43	; 67
    31ce:	62 e0       	ldi	r22, 0x02	; 2
    31d0:	41 e0       	ldi	r20, 0x01	; 1
    31d2:	0e 94 11 0c 	call	0x1822	; 0x1822 <DIO_write_PIN>
    31d6:	80 e0       	ldi	r24, 0x00	; 0
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	a0 e8       	ldi	r26, 0x80	; 128
    31dc:	bf e3       	ldi	r27, 0x3F	; 63
    31de:	8f a3       	std	Y+39, r24	; 0x27
    31e0:	98 a7       	std	Y+40, r25	; 0x28
    31e2:	a9 a7       	std	Y+41, r26	; 0x29
    31e4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31e6:	6f a1       	ldd	r22, Y+39	; 0x27
    31e8:	78 a5       	ldd	r23, Y+40	; 0x28
    31ea:	89 a5       	ldd	r24, Y+41	; 0x29
    31ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	4a e7       	ldi	r20, 0x7A	; 122
    31f4:	53 e4       	ldi	r21, 0x43	; 67
    31f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	8b a3       	std	Y+35, r24	; 0x23
    3200:	9c a3       	std	Y+36, r25	; 0x24
    3202:	ad a3       	std	Y+37, r26	; 0x25
    3204:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3206:	6b a1       	ldd	r22, Y+35	; 0x23
    3208:	7c a1       	ldd	r23, Y+36	; 0x24
    320a:	8d a1       	ldd	r24, Y+37	; 0x25
    320c:	9e a1       	ldd	r25, Y+38	; 0x26
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	40 e8       	ldi	r20, 0x80	; 128
    3214:	5f e3       	ldi	r21, 0x3F	; 63
    3216:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    321a:	88 23       	and	r24, r24
    321c:	2c f4       	brge	.+10     	; 0x3228 <LCD_displayChar+0x160>
		__ticks = 1;
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	9a a3       	std	Y+34, r25	; 0x22
    3224:	89 a3       	std	Y+33, r24	; 0x21
    3226:	3f c0       	rjmp	.+126    	; 0x32a6 <LCD_displayChar+0x1de>
	else if (__tmp > 65535)
    3228:	6b a1       	ldd	r22, Y+35	; 0x23
    322a:	7c a1       	ldd	r23, Y+36	; 0x24
    322c:	8d a1       	ldd	r24, Y+37	; 0x25
    322e:	9e a1       	ldd	r25, Y+38	; 0x26
    3230:	20 e0       	ldi	r18, 0x00	; 0
    3232:	3f ef       	ldi	r19, 0xFF	; 255
    3234:	4f e7       	ldi	r20, 0x7F	; 127
    3236:	57 e4       	ldi	r21, 0x47	; 71
    3238:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    323c:	18 16       	cp	r1, r24
    323e:	4c f5       	brge	.+82     	; 0x3292 <LCD_displayChar+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3240:	6f a1       	ldd	r22, Y+39	; 0x27
    3242:	78 a5       	ldd	r23, Y+40	; 0x28
    3244:	89 a5       	ldd	r24, Y+41	; 0x29
    3246:	9a a5       	ldd	r25, Y+42	; 0x2a
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	40 e2       	ldi	r20, 0x20	; 32
    324e:	51 e4       	ldi	r21, 0x41	; 65
    3250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	bc 01       	movw	r22, r24
    325a:	cd 01       	movw	r24, r26
    325c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3260:	dc 01       	movw	r26, r24
    3262:	cb 01       	movw	r24, r22
    3264:	9a a3       	std	Y+34, r25	; 0x22
    3266:	89 a3       	std	Y+33, r24	; 0x21
    3268:	0f c0       	rjmp	.+30     	; 0x3288 <LCD_displayChar+0x1c0>
    326a:	89 e1       	ldi	r24, 0x19	; 25
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	98 a3       	std	Y+32, r25	; 0x20
    3270:	8f 8f       	std	Y+31, r24	; 0x1f
    3272:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3274:	98 a1       	ldd	r25, Y+32	; 0x20
    3276:	01 97       	sbiw	r24, 0x01	; 1
    3278:	f1 f7       	brne	.-4      	; 0x3276 <LCD_displayChar+0x1ae>
    327a:	98 a3       	std	Y+32, r25	; 0x20
    327c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    327e:	89 a1       	ldd	r24, Y+33	; 0x21
    3280:	9a a1       	ldd	r25, Y+34	; 0x22
    3282:	01 97       	sbiw	r24, 0x01	; 1
    3284:	9a a3       	std	Y+34, r25	; 0x22
    3286:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3288:	89 a1       	ldd	r24, Y+33	; 0x21
    328a:	9a a1       	ldd	r25, Y+34	; 0x22
    328c:	00 97       	sbiw	r24, 0x00	; 0
    328e:	69 f7       	brne	.-38     	; 0x326a <LCD_displayChar+0x1a2>
    3290:	14 c0       	rjmp	.+40     	; 0x32ba <LCD_displayChar+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3292:	6b a1       	ldd	r22, Y+35	; 0x23
    3294:	7c a1       	ldd	r23, Y+36	; 0x24
    3296:	8d a1       	ldd	r24, Y+37	; 0x25
    3298:	9e a1       	ldd	r25, Y+38	; 0x26
    329a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    329e:	dc 01       	movw	r26, r24
    32a0:	cb 01       	movw	r24, r22
    32a2:	9a a3       	std	Y+34, r25	; 0x22
    32a4:	89 a3       	std	Y+33, r24	; 0x21
    32a6:	89 a1       	ldd	r24, Y+33	; 0x21
    32a8:	9a a1       	ldd	r25, Y+34	; 0x22
    32aa:	9e 8f       	std	Y+30, r25	; 0x1e
    32ac:	8d 8f       	std	Y+29, r24	; 0x1d
    32ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32b2:	01 97       	sbiw	r24, 0x01	; 1
    32b4:	f1 f7       	brne	.-4      	; 0x32b2 <LCD_displayChar+0x1ea>
    32b6:	9e 8f       	std	Y+30, r25	; 0x1e
    32b8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_write_high_nibble(LCD_data_port,HIGH_NIBBLE_OF(data));
    32ba:	89 ad       	ldd	r24, Y+57	; 0x39
    32bc:	98 2f       	mov	r25, r24
    32be:	92 95       	swap	r25
    32c0:	9f 70       	andi	r25, 0x0F	; 15
    32c2:	84 e4       	ldi	r24, 0x44	; 68
    32c4:	69 2f       	mov	r22, r25
    32c6:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_write_high_nibble>
	LCD_refresh();
    32ca:	0e 94 54 14 	call	0x28a8	; 0x28a8 <LCD_refresh>
	DIO_write_high_nibble(LCD_data_port,data);
    32ce:	84 e4       	ldi	r24, 0x44	; 68
    32d0:	69 ad       	ldd	r22, Y+57	; 0x39
    32d2:	0e 94 55 11 	call	0x22aa	; 0x22aa <DIO_write_high_nibble>
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	a0 e8       	ldi	r26, 0x80	; 128
    32dc:	bf e3       	ldi	r27, 0x3F	; 63
    32de:	89 8f       	std	Y+25, r24	; 0x19
    32e0:	9a 8f       	std	Y+26, r25	; 0x1a
    32e2:	ab 8f       	std	Y+27, r26	; 0x1b
    32e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e6:	69 8d       	ldd	r22, Y+25	; 0x19
    32e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	4a e7       	ldi	r20, 0x7A	; 122
    32f4:	53 e4       	ldi	r21, 0x43	; 67
    32f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32fa:	dc 01       	movw	r26, r24
    32fc:	cb 01       	movw	r24, r22
    32fe:	8d 8b       	std	Y+21, r24	; 0x15
    3300:	9e 8b       	std	Y+22, r25	; 0x16
    3302:	af 8b       	std	Y+23, r26	; 0x17
    3304:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3306:	6d 89       	ldd	r22, Y+21	; 0x15
    3308:	7e 89       	ldd	r23, Y+22	; 0x16
    330a:	8f 89       	ldd	r24, Y+23	; 0x17
    330c:	98 8d       	ldd	r25, Y+24	; 0x18
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	40 e8       	ldi	r20, 0x80	; 128
    3314:	5f e3       	ldi	r21, 0x3F	; 63
    3316:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    331a:	88 23       	and	r24, r24
    331c:	2c f4       	brge	.+10     	; 0x3328 <LCD_displayChar+0x260>
		__ticks = 1;
    331e:	81 e0       	ldi	r24, 0x01	; 1
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	9c 8b       	std	Y+20, r25	; 0x14
    3324:	8b 8b       	std	Y+19, r24	; 0x13
    3326:	3f c0       	rjmp	.+126    	; 0x33a6 <LCD_displayChar+0x2de>
	else if (__tmp > 65535)
    3328:	6d 89       	ldd	r22, Y+21	; 0x15
    332a:	7e 89       	ldd	r23, Y+22	; 0x16
    332c:	8f 89       	ldd	r24, Y+23	; 0x17
    332e:	98 8d       	ldd	r25, Y+24	; 0x18
    3330:	20 e0       	ldi	r18, 0x00	; 0
    3332:	3f ef       	ldi	r19, 0xFF	; 255
    3334:	4f e7       	ldi	r20, 0x7F	; 127
    3336:	57 e4       	ldi	r21, 0x47	; 71
    3338:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    333c:	18 16       	cp	r1, r24
    333e:	4c f5       	brge	.+82     	; 0x3392 <LCD_displayChar+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3340:	69 8d       	ldd	r22, Y+25	; 0x19
    3342:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3344:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3346:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	40 e2       	ldi	r20, 0x20	; 32
    334e:	51 e4       	ldi	r21, 0x41	; 65
    3350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	bc 01       	movw	r22, r24
    335a:	cd 01       	movw	r24, r26
    335c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3360:	dc 01       	movw	r26, r24
    3362:	cb 01       	movw	r24, r22
    3364:	9c 8b       	std	Y+20, r25	; 0x14
    3366:	8b 8b       	std	Y+19, r24	; 0x13
    3368:	0f c0       	rjmp	.+30     	; 0x3388 <LCD_displayChar+0x2c0>
    336a:	89 e1       	ldi	r24, 0x19	; 25
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	9a 8b       	std	Y+18, r25	; 0x12
    3370:	89 8b       	std	Y+17, r24	; 0x11
    3372:	89 89       	ldd	r24, Y+17	; 0x11
    3374:	9a 89       	ldd	r25, Y+18	; 0x12
    3376:	01 97       	sbiw	r24, 0x01	; 1
    3378:	f1 f7       	brne	.-4      	; 0x3376 <LCD_displayChar+0x2ae>
    337a:	9a 8b       	std	Y+18, r25	; 0x12
    337c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    337e:	8b 89       	ldd	r24, Y+19	; 0x13
    3380:	9c 89       	ldd	r25, Y+20	; 0x14
    3382:	01 97       	sbiw	r24, 0x01	; 1
    3384:	9c 8b       	std	Y+20, r25	; 0x14
    3386:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3388:	8b 89       	ldd	r24, Y+19	; 0x13
    338a:	9c 89       	ldd	r25, Y+20	; 0x14
    338c:	00 97       	sbiw	r24, 0x00	; 0
    338e:	69 f7       	brne	.-38     	; 0x336a <LCD_displayChar+0x2a2>
    3390:	14 c0       	rjmp	.+40     	; 0x33ba <LCD_displayChar+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3392:	6d 89       	ldd	r22, Y+21	; 0x15
    3394:	7e 89       	ldd	r23, Y+22	; 0x16
    3396:	8f 89       	ldd	r24, Y+23	; 0x17
    3398:	98 8d       	ldd	r25, Y+24	; 0x18
    339a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	9c 8b       	std	Y+20, r25	; 0x14
    33a4:	8b 8b       	std	Y+19, r24	; 0x13
    33a6:	8b 89       	ldd	r24, Y+19	; 0x13
    33a8:	9c 89       	ldd	r25, Y+20	; 0x14
    33aa:	98 8b       	std	Y+16, r25	; 0x10
    33ac:	8f 87       	std	Y+15, r24	; 0x0f
    33ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    33b0:	98 89       	ldd	r25, Y+16	; 0x10
    33b2:	01 97       	sbiw	r24, 0x01	; 1
    33b4:	f1 f7       	brne	.-4      	; 0x33b2 <LCD_displayChar+0x2ea>
    33b6:	98 8b       	std	Y+16, r25	; 0x10
    33b8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,0);
    33ba:	83 e4       	ldi	r24, 0x43	; 67
    33bc:	62 e0       	ldi	r22, 0x02	; 2
    33be:	40 e0       	ldi	r20, 0x00	; 0
    33c0:	0e 94 11 0c 	call	0x1822	; 0x1822 <DIO_write_PIN>
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	a0 e8       	ldi	r26, 0x80	; 128
    33ca:	bf e3       	ldi	r27, 0x3F	; 63
    33cc:	8b 87       	std	Y+11, r24	; 0x0b
    33ce:	9c 87       	std	Y+12, r25	; 0x0c
    33d0:	ad 87       	std	Y+13, r26	; 0x0d
    33d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    33d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    33d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    33da:	9e 85       	ldd	r25, Y+14	; 0x0e
    33dc:	20 e0       	ldi	r18, 0x00	; 0
    33de:	30 e0       	ldi	r19, 0x00	; 0
    33e0:	4a e7       	ldi	r20, 0x7A	; 122
    33e2:	53 e4       	ldi	r21, 0x43	; 67
    33e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e8:	dc 01       	movw	r26, r24
    33ea:	cb 01       	movw	r24, r22
    33ec:	8f 83       	std	Y+7, r24	; 0x07
    33ee:	98 87       	std	Y+8, r25	; 0x08
    33f0:	a9 87       	std	Y+9, r26	; 0x09
    33f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33f4:	6f 81       	ldd	r22, Y+7	; 0x07
    33f6:	78 85       	ldd	r23, Y+8	; 0x08
    33f8:	89 85       	ldd	r24, Y+9	; 0x09
    33fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	40 e8       	ldi	r20, 0x80	; 128
    3402:	5f e3       	ldi	r21, 0x3F	; 63
    3404:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3408:	88 23       	and	r24, r24
    340a:	2c f4       	brge	.+10     	; 0x3416 <LCD_displayChar+0x34e>
		__ticks = 1;
    340c:	81 e0       	ldi	r24, 0x01	; 1
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	9e 83       	std	Y+6, r25	; 0x06
    3412:	8d 83       	std	Y+5, r24	; 0x05
    3414:	3f c0       	rjmp	.+126    	; 0x3494 <LCD_displayChar+0x3cc>
	else if (__tmp > 65535)
    3416:	6f 81       	ldd	r22, Y+7	; 0x07
    3418:	78 85       	ldd	r23, Y+8	; 0x08
    341a:	89 85       	ldd	r24, Y+9	; 0x09
    341c:	9a 85       	ldd	r25, Y+10	; 0x0a
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	3f ef       	ldi	r19, 0xFF	; 255
    3422:	4f e7       	ldi	r20, 0x7F	; 127
    3424:	57 e4       	ldi	r21, 0x47	; 71
    3426:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    342a:	18 16       	cp	r1, r24
    342c:	4c f5       	brge	.+82     	; 0x3480 <LCD_displayChar+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    342e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3430:	7c 85       	ldd	r23, Y+12	; 0x0c
    3432:	8d 85       	ldd	r24, Y+13	; 0x0d
    3434:	9e 85       	ldd	r25, Y+14	; 0x0e
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	40 e2       	ldi	r20, 0x20	; 32
    343c:	51 e4       	ldi	r21, 0x41	; 65
    343e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3442:	dc 01       	movw	r26, r24
    3444:	cb 01       	movw	r24, r22
    3446:	bc 01       	movw	r22, r24
    3448:	cd 01       	movw	r24, r26
    344a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	9e 83       	std	Y+6, r25	; 0x06
    3454:	8d 83       	std	Y+5, r24	; 0x05
    3456:	0f c0       	rjmp	.+30     	; 0x3476 <LCD_displayChar+0x3ae>
    3458:	89 e1       	ldi	r24, 0x19	; 25
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	9c 83       	std	Y+4, r25	; 0x04
    345e:	8b 83       	std	Y+3, r24	; 0x03
    3460:	8b 81       	ldd	r24, Y+3	; 0x03
    3462:	9c 81       	ldd	r25, Y+4	; 0x04
    3464:	01 97       	sbiw	r24, 0x01	; 1
    3466:	f1 f7       	brne	.-4      	; 0x3464 <LCD_displayChar+0x39c>
    3468:	9c 83       	std	Y+4, r25	; 0x04
    346a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    346c:	8d 81       	ldd	r24, Y+5	; 0x05
    346e:	9e 81       	ldd	r25, Y+6	; 0x06
    3470:	01 97       	sbiw	r24, 0x01	; 1
    3472:	9e 83       	std	Y+6, r25	; 0x06
    3474:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3476:	8d 81       	ldd	r24, Y+5	; 0x05
    3478:	9e 81       	ldd	r25, Y+6	; 0x06
    347a:	00 97       	sbiw	r24, 0x00	; 0
    347c:	69 f7       	brne	.-38     	; 0x3458 <LCD_displayChar+0x390>
    347e:	14 c0       	rjmp	.+40     	; 0x34a8 <LCD_displayChar+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3480:	6f 81       	ldd	r22, Y+7	; 0x07
    3482:	78 85       	ldd	r23, Y+8	; 0x08
    3484:	89 85       	ldd	r24, Y+9	; 0x09
    3486:	9a 85       	ldd	r25, Y+10	; 0x0a
    3488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    348c:	dc 01       	movw	r26, r24
    348e:	cb 01       	movw	r24, r22
    3490:	9e 83       	std	Y+6, r25	; 0x06
    3492:	8d 83       	std	Y+5, r24	; 0x05
    3494:	8d 81       	ldd	r24, Y+5	; 0x05
    3496:	9e 81       	ldd	r25, Y+6	; 0x06
    3498:	9a 83       	std	Y+2, r25	; 0x02
    349a:	89 83       	std	Y+1, r24	; 0x01
    349c:	89 81       	ldd	r24, Y+1	; 0x01
    349e:	9a 81       	ldd	r25, Y+2	; 0x02
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	f1 f7       	brne	.-4      	; 0x34a0 <LCD_displayChar+0x3d8>
    34a4:	9a 83       	std	Y+2, r25	; 0x02
    34a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    34a8:	e9 96       	adiw	r28, 0x39	; 57
    34aa:	0f b6       	in	r0, 0x3f	; 63
    34ac:	f8 94       	cli
    34ae:	de bf       	out	0x3e, r29	; 62
    34b0:	0f be       	out	0x3f, r0	; 63
    34b2:	cd bf       	out	0x3d, r28	; 61
    34b4:	cf 91       	pop	r28
    34b6:	df 91       	pop	r29
    34b8:	08 95       	ret

000034ba <LCD_displayString>:


void LCD_displayString(const char *str)
{
    34ba:	df 93       	push	r29
    34bc:	cf 93       	push	r28
    34be:	00 d0       	rcall	.+0      	; 0x34c0 <LCD_displayString+0x6>
    34c0:	0f 92       	push	r0
    34c2:	cd b7       	in	r28, 0x3d	; 61
    34c4:	de b7       	in	r29, 0x3e	; 62
    34c6:	9b 83       	std	Y+3, r25	; 0x03
    34c8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    34ca:	19 82       	std	Y+1, r1	; 0x01
    34cc:	0e c0       	rjmp	.+28     	; 0x34ea <LCD_displayString+0x30>
	while(str[i]!='\0')
	{
		LCD_displayChar(str[i]);
    34ce:	89 81       	ldd	r24, Y+1	; 0x01
    34d0:	28 2f       	mov	r18, r24
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	8a 81       	ldd	r24, Y+2	; 0x02
    34d6:	9b 81       	ldd	r25, Y+3	; 0x03
    34d8:	fc 01       	movw	r30, r24
    34da:	e2 0f       	add	r30, r18
    34dc:	f3 1f       	adc	r31, r19
    34de:	80 81       	ld	r24, Z
    34e0:	0e 94 64 18 	call	0x30c8	; 0x30c8 <LCD_displayChar>
		i++;
    34e4:	89 81       	ldd	r24, Y+1	; 0x01
    34e6:	8f 5f       	subi	r24, 0xFF	; 255
    34e8:	89 83       	std	Y+1, r24	; 0x01


void LCD_displayString(const char *str)
{
	uint8 i=0;
	while(str[i]!='\0')
    34ea:	89 81       	ldd	r24, Y+1	; 0x01
    34ec:	28 2f       	mov	r18, r24
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	8a 81       	ldd	r24, Y+2	; 0x02
    34f2:	9b 81       	ldd	r25, Y+3	; 0x03
    34f4:	fc 01       	movw	r30, r24
    34f6:	e2 0f       	add	r30, r18
    34f8:	f3 1f       	adc	r31, r19
    34fa:	80 81       	ld	r24, Z
    34fc:	88 23       	and	r24, r24
    34fe:	39 f7       	brne	.-50     	; 0x34ce <LCD_displayString+0x14>
	{
		LCD_displayChar(str[i]);
		i++;
	}

}
    3500:	0f 90       	pop	r0
    3502:	0f 90       	pop	r0
    3504:	0f 90       	pop	r0
    3506:	cf 91       	pop	r28
    3508:	df 91       	pop	r29
    350a:	08 95       	ret

0000350c <LCD_MoveTo_Row_Column>:


void LCD_MoveTo_Row_Column(uint8 row, uint8 col)
{
    350c:	df 93       	push	r29
    350e:	cf 93       	push	r28
    3510:	00 d0       	rcall	.+0      	; 0x3512 <LCD_MoveTo_Row_Column+0x6>
    3512:	00 d0       	rcall	.+0      	; 0x3514 <LCD_MoveTo_Row_Column+0x8>
    3514:	0f 92       	push	r0
    3516:	cd b7       	in	r28, 0x3d	; 61
    3518:	de b7       	in	r29, 0x3e	; 62
    351a:	8a 83       	std	Y+2, r24	; 0x02
    351c:	6b 83       	std	Y+3, r22	; 0x03
	// The position is COL+ROW
	uint8 position;

	switch(row)
    351e:	8a 81       	ldd	r24, Y+2	; 0x02
    3520:	28 2f       	mov	r18, r24
    3522:	30 e0       	ldi	r19, 0x00	; 0
    3524:	3d 83       	std	Y+5, r19	; 0x05
    3526:	2c 83       	std	Y+4, r18	; 0x04
    3528:	8c 81       	ldd	r24, Y+4	; 0x04
    352a:	9d 81       	ldd	r25, Y+5	; 0x05
    352c:	00 97       	sbiw	r24, 0x00	; 0
    352e:	31 f0       	breq	.+12     	; 0x353c <LCD_MoveTo_Row_Column+0x30>
    3530:	2c 81       	ldd	r18, Y+4	; 0x04
    3532:	3d 81       	ldd	r19, Y+5	; 0x05
    3534:	21 30       	cpi	r18, 0x01	; 1
    3536:	31 05       	cpc	r19, r1
    3538:	21 f0       	breq	.+8      	; 0x3542 <LCD_MoveTo_Row_Column+0x36>
    353a:	06 c0       	rjmp	.+12     	; 0x3548 <LCD_MoveTo_Row_Column+0x3c>
	{
		case 0:
			position=col;
    353c:	8b 81       	ldd	r24, Y+3	; 0x03
    353e:	89 83       	std	Y+1, r24	; 0x01
    3540:	03 c0       	rjmp	.+6      	; 0x3548 <LCD_MoveTo_Row_Column+0x3c>
			break;
		case 1:
			position=col+0x40;
    3542:	8b 81       	ldd	r24, Y+3	; 0x03
    3544:	80 5c       	subi	r24, 0xC0	; 192
    3546:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	LCD_Command(position|LCD_Cursor_move_to);
    3548:	89 81       	ldd	r24, Y+1	; 0x01
    354a:	80 68       	ori	r24, 0x80	; 128
    354c:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <LCD_Command>
}
    3550:	0f 90       	pop	r0
    3552:	0f 90       	pop	r0
    3554:	0f 90       	pop	r0
    3556:	0f 90       	pop	r0
    3558:	0f 90       	pop	r0
    355a:	cf 91       	pop	r28
    355c:	df 91       	pop	r29
    355e:	08 95       	ret

00003560 <LCD_display_String_Row_Column>:


void LCD_display_String_Row_Column(uint8 row,uint8 col, const char *str)
{
    3560:	df 93       	push	r29
    3562:	cf 93       	push	r28
    3564:	00 d0       	rcall	.+0      	; 0x3566 <LCD_display_String_Row_Column+0x6>
    3566:	00 d0       	rcall	.+0      	; 0x3568 <LCD_display_String_Row_Column+0x8>
    3568:	cd b7       	in	r28, 0x3d	; 61
    356a:	de b7       	in	r29, 0x3e	; 62
    356c:	89 83       	std	Y+1, r24	; 0x01
    356e:	6a 83       	std	Y+2, r22	; 0x02
    3570:	5c 83       	std	Y+4, r21	; 0x04
    3572:	4b 83       	std	Y+3, r20	; 0x03
	LCD_MoveTo_Row_Column(row,col);
    3574:	89 81       	ldd	r24, Y+1	; 0x01
    3576:	6a 81       	ldd	r22, Y+2	; 0x02
    3578:	0e 94 86 1a 	call	0x350c	; 0x350c <LCD_MoveTo_Row_Column>
	LCD_displayString(str);
    357c:	8b 81       	ldd	r24, Y+3	; 0x03
    357e:	9c 81       	ldd	r25, Y+4	; 0x04
    3580:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <LCD_displayString>

}
    3584:	0f 90       	pop	r0
    3586:	0f 90       	pop	r0
    3588:	0f 90       	pop	r0
    358a:	0f 90       	pop	r0
    358c:	cf 91       	pop	r28
    358e:	df 91       	pop	r29
    3590:	08 95       	ret

00003592 <LCD_Clear>:



void LCD_Clear(void)
{
    3592:	df 93       	push	r29
    3594:	cf 93       	push	r28
    3596:	cd b7       	in	r28, 0x3d	; 61
    3598:	de b7       	in	r29, 0x3e	; 62
	LCD_Command(LCD_clear_cmd);
    359a:	81 e0       	ldi	r24, 0x01	; 1
    359c:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <LCD_Command>
}
    35a0:	cf 91       	pop	r28
    35a2:	df 91       	pop	r29
    35a4:	08 95       	ret

000035a6 <LCD_integerToString>:



void LCD_integerToString(sint8 data)
{
    35a6:	df 93       	push	r29
    35a8:	cf 93       	push	r28
    35aa:	cd b7       	in	r28, 0x3d	; 61
    35ac:	de b7       	in	r29, 0x3e	; 62
    35ae:	61 97       	sbiw	r28, 0x11	; 17
    35b0:	0f b6       	in	r0, 0x3f	; 63
    35b2:	f8 94       	cli
    35b4:	de bf       	out	0x3e, r29	; 62
    35b6:	0f be       	out	0x3f, r0	; 63
    35b8:	cd bf       	out	0x3d, r28	; 61
    35ba:	89 8b       	std	Y+17, r24	; 0x11

	char buff[16];
	itoa(data,buff,10);
    35bc:	89 89       	ldd	r24, Y+17	; 0x11
    35be:	99 27       	eor	r25, r25
    35c0:	87 fd       	sbrc	r24, 7
    35c2:	90 95       	com	r25
    35c4:	9e 01       	movw	r18, r28
    35c6:	2f 5f       	subi	r18, 0xFF	; 255
    35c8:	3f 4f       	sbci	r19, 0xFF	; 255
    35ca:	b9 01       	movw	r22, r18
    35cc:	4a e0       	ldi	r20, 0x0A	; 10
    35ce:	50 e0       	ldi	r21, 0x00	; 0
    35d0:	0e 94 31 1c 	call	0x3862	; 0x3862 <itoa>
	LCD_displayString( buff );
    35d4:	ce 01       	movw	r24, r28
    35d6:	01 96       	adiw	r24, 0x01	; 1
    35d8:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <LCD_displayString>
}
    35dc:	61 96       	adiw	r28, 0x11	; 17
    35de:	0f b6       	in	r0, 0x3f	; 63
    35e0:	f8 94       	cli
    35e2:	de bf       	out	0x3e, r29	; 62
    35e4:	0f be       	out	0x3f, r0	; 63
    35e6:	cd bf       	out	0x3d, r28	; 61
    35e8:	cf 91       	pop	r28
    35ea:	df 91       	pop	r29
    35ec:	08 95       	ret

000035ee <LCD_display_int>:


void LCD_display_int(uint8 data)
{
    35ee:	df 93       	push	r29
    35f0:	cf 93       	push	r28
    35f2:	cd b7       	in	r28, 0x3d	; 61
    35f4:	de b7       	in	r29, 0x3e	; 62
    35f6:	2f 97       	sbiw	r28, 0x0f	; 15
    35f8:	0f b6       	in	r0, 0x3f	; 63
    35fa:	f8 94       	cli
    35fc:	de bf       	out	0x3e, r29	; 62
    35fe:	0f be       	out	0x3f, r0	; 63
    3600:	cd bf       	out	0x3d, r28	; 61
    3602:	8f 87       	std	Y+15, r24	; 0x0f
	/* if any switch pressed for more than 500 ms it counts more than one press */
	if((data <= 9) && (data >= 0))
    3604:	8f 85       	ldd	r24, Y+15	; 0x0f
    3606:	8a 30       	cpi	r24, 0x0A	; 10
    3608:	20 f4       	brcc	.+8      	; 0x3612 <LCD_display_int+0x24>
	{
		LCD_integerToString(data); /* display the pressed keypad switch */
    360a:	8f 85       	ldd	r24, Y+15	; 0x0f
    360c:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <LCD_integerToString>
    3610:	03 c0       	rjmp	.+6      	; 0x3618 <LCD_display_int+0x2a>
	}
	else
	{
		LCD_displayChar(data); /* display the pressed keypad switch */
    3612:	8f 85       	ldd	r24, Y+15	; 0x0f
    3614:	0e 94 64 18 	call	0x30c8	; 0x30c8 <LCD_displayChar>
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	af ea       	ldi	r26, 0xAF	; 175
    361e:	b3 e4       	ldi	r27, 0x43	; 67
    3620:	8b 87       	std	Y+11, r24	; 0x0b
    3622:	9c 87       	std	Y+12, r25	; 0x0c
    3624:	ad 87       	std	Y+13, r26	; 0x0d
    3626:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3628:	6b 85       	ldd	r22, Y+11	; 0x0b
    362a:	7c 85       	ldd	r23, Y+12	; 0x0c
    362c:	8d 85       	ldd	r24, Y+13	; 0x0d
    362e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3630:	20 e0       	ldi	r18, 0x00	; 0
    3632:	30 e0       	ldi	r19, 0x00	; 0
    3634:	4a e7       	ldi	r20, 0x7A	; 122
    3636:	53 e4       	ldi	r21, 0x43	; 67
    3638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    363c:	dc 01       	movw	r26, r24
    363e:	cb 01       	movw	r24, r22
    3640:	8f 83       	std	Y+7, r24	; 0x07
    3642:	98 87       	std	Y+8, r25	; 0x08
    3644:	a9 87       	std	Y+9, r26	; 0x09
    3646:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3648:	6f 81       	ldd	r22, Y+7	; 0x07
    364a:	78 85       	ldd	r23, Y+8	; 0x08
    364c:	89 85       	ldd	r24, Y+9	; 0x09
    364e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	40 e8       	ldi	r20, 0x80	; 128
    3656:	5f e3       	ldi	r21, 0x3F	; 63
    3658:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    365c:	88 23       	and	r24, r24
    365e:	2c f4       	brge	.+10     	; 0x366a <LCD_display_int+0x7c>
		__ticks = 1;
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	9e 83       	std	Y+6, r25	; 0x06
    3666:	8d 83       	std	Y+5, r24	; 0x05
    3668:	3f c0       	rjmp	.+126    	; 0x36e8 <LCD_display_int+0xfa>
	else if (__tmp > 65535)
    366a:	6f 81       	ldd	r22, Y+7	; 0x07
    366c:	78 85       	ldd	r23, Y+8	; 0x08
    366e:	89 85       	ldd	r24, Y+9	; 0x09
    3670:	9a 85       	ldd	r25, Y+10	; 0x0a
    3672:	20 e0       	ldi	r18, 0x00	; 0
    3674:	3f ef       	ldi	r19, 0xFF	; 255
    3676:	4f e7       	ldi	r20, 0x7F	; 127
    3678:	57 e4       	ldi	r21, 0x47	; 71
    367a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    367e:	18 16       	cp	r1, r24
    3680:	4c f5       	brge	.+82     	; 0x36d4 <LCD_display_int+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3682:	6b 85       	ldd	r22, Y+11	; 0x0b
    3684:	7c 85       	ldd	r23, Y+12	; 0x0c
    3686:	8d 85       	ldd	r24, Y+13	; 0x0d
    3688:	9e 85       	ldd	r25, Y+14	; 0x0e
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	40 e2       	ldi	r20, 0x20	; 32
    3690:	51 e4       	ldi	r21, 0x41	; 65
    3692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	bc 01       	movw	r22, r24
    369c:	cd 01       	movw	r24, r26
    369e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a2:	dc 01       	movw	r26, r24
    36a4:	cb 01       	movw	r24, r22
    36a6:	9e 83       	std	Y+6, r25	; 0x06
    36a8:	8d 83       	std	Y+5, r24	; 0x05
    36aa:	0f c0       	rjmp	.+30     	; 0x36ca <LCD_display_int+0xdc>
    36ac:	89 e1       	ldi	r24, 0x19	; 25
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	9c 83       	std	Y+4, r25	; 0x04
    36b2:	8b 83       	std	Y+3, r24	; 0x03
    36b4:	8b 81       	ldd	r24, Y+3	; 0x03
    36b6:	9c 81       	ldd	r25, Y+4	; 0x04
    36b8:	01 97       	sbiw	r24, 0x01	; 1
    36ba:	f1 f7       	brne	.-4      	; 0x36b8 <LCD_display_int+0xca>
    36bc:	9c 83       	std	Y+4, r25	; 0x04
    36be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36c0:	8d 81       	ldd	r24, Y+5	; 0x05
    36c2:	9e 81       	ldd	r25, Y+6	; 0x06
    36c4:	01 97       	sbiw	r24, 0x01	; 1
    36c6:	9e 83       	std	Y+6, r25	; 0x06
    36c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ca:	8d 81       	ldd	r24, Y+5	; 0x05
    36cc:	9e 81       	ldd	r25, Y+6	; 0x06
    36ce:	00 97       	sbiw	r24, 0x00	; 0
    36d0:	69 f7       	brne	.-38     	; 0x36ac <LCD_display_int+0xbe>
    36d2:	14 c0       	rjmp	.+40     	; 0x36fc <LCD_display_int+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d4:	6f 81       	ldd	r22, Y+7	; 0x07
    36d6:	78 85       	ldd	r23, Y+8	; 0x08
    36d8:	89 85       	ldd	r24, Y+9	; 0x09
    36da:	9a 85       	ldd	r25, Y+10	; 0x0a
    36dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e0:	dc 01       	movw	r26, r24
    36e2:	cb 01       	movw	r24, r22
    36e4:	9e 83       	std	Y+6, r25	; 0x06
    36e6:	8d 83       	std	Y+5, r24	; 0x05
    36e8:	8d 81       	ldd	r24, Y+5	; 0x05
    36ea:	9e 81       	ldd	r25, Y+6	; 0x06
    36ec:	9a 83       	std	Y+2, r25	; 0x02
    36ee:	89 83       	std	Y+1, r24	; 0x01
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	9a 81       	ldd	r25, Y+2	; 0x02
    36f4:	01 97       	sbiw	r24, 0x01	; 1
    36f6:	f1 f7       	brne	.-4      	; 0x36f4 <LCD_display_int+0x106>
    36f8:	9a 83       	std	Y+2, r25	; 0x02
    36fa:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(350); /* Press time */

}
    36fc:	2f 96       	adiw	r28, 0x0f	; 15
    36fe:	0f b6       	in	r0, 0x3f	; 63
    3700:	f8 94       	cli
    3702:	de bf       	out	0x3e, r29	; 62
    3704:	0f be       	out	0x3f, r0	; 63
    3706:	cd bf       	out	0x3d, r28	; 61
    3708:	cf 91       	pop	r28
    370a:	df 91       	pop	r29
    370c:	08 95       	ret

0000370e <LCD_display_int_nodelay>:

void LCD_display_int_nodelay(sint8 data)
{
    370e:	df 93       	push	r29
    3710:	cf 93       	push	r28
    3712:	0f 92       	push	r0
    3714:	cd b7       	in	r28, 0x3d	; 61
    3716:	de b7       	in	r29, 0x3e	; 62
    3718:	89 83       	std	Y+1, r24	; 0x01
	/* if any switch pressed for more than 500 ms it counts more than one press */
	if((data <= 9) && (data >= 0))
    371a:	89 81       	ldd	r24, Y+1	; 0x01
    371c:	8a 30       	cpi	r24, 0x0A	; 10
    371e:	3c f4       	brge	.+14     	; 0x372e <LCD_display_int_nodelay+0x20>
    3720:	89 81       	ldd	r24, Y+1	; 0x01
    3722:	88 23       	and	r24, r24
    3724:	24 f0       	brlt	.+8      	; 0x372e <LCD_display_int_nodelay+0x20>
	{
		LCD_integerToString(data); /* display the pressed keypad switch */
    3726:	89 81       	ldd	r24, Y+1	; 0x01
    3728:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <LCD_integerToString>
    372c:	03 c0       	rjmp	.+6      	; 0x3734 <LCD_display_int_nodelay+0x26>
	}
	else
	{
		LCD_displayChar(data); /* display the pressed keypad switch */
    372e:	89 81       	ldd	r24, Y+1	; 0x01
    3730:	0e 94 64 18 	call	0x30c8	; 0x30c8 <LCD_displayChar>
	}

}
    3734:	0f 90       	pop	r0
    3736:	cf 91       	pop	r28
    3738:	df 91       	pop	r29
    373a:	08 95       	ret

0000373c <__mulsi3>:
    373c:	62 9f       	mul	r22, r18
    373e:	d0 01       	movw	r26, r0
    3740:	73 9f       	mul	r23, r19
    3742:	f0 01       	movw	r30, r0
    3744:	82 9f       	mul	r24, r18
    3746:	e0 0d       	add	r30, r0
    3748:	f1 1d       	adc	r31, r1
    374a:	64 9f       	mul	r22, r20
    374c:	e0 0d       	add	r30, r0
    374e:	f1 1d       	adc	r31, r1
    3750:	92 9f       	mul	r25, r18
    3752:	f0 0d       	add	r31, r0
    3754:	83 9f       	mul	r24, r19
    3756:	f0 0d       	add	r31, r0
    3758:	74 9f       	mul	r23, r20
    375a:	f0 0d       	add	r31, r0
    375c:	65 9f       	mul	r22, r21
    375e:	f0 0d       	add	r31, r0
    3760:	99 27       	eor	r25, r25
    3762:	72 9f       	mul	r23, r18
    3764:	b0 0d       	add	r27, r0
    3766:	e1 1d       	adc	r30, r1
    3768:	f9 1f       	adc	r31, r25
    376a:	63 9f       	mul	r22, r19
    376c:	b0 0d       	add	r27, r0
    376e:	e1 1d       	adc	r30, r1
    3770:	f9 1f       	adc	r31, r25
    3772:	bd 01       	movw	r22, r26
    3774:	cf 01       	movw	r24, r30
    3776:	11 24       	eor	r1, r1
    3778:	08 95       	ret

0000377a <__divmodsi4>:
    377a:	97 fb       	bst	r25, 7
    377c:	09 2e       	mov	r0, r25
    377e:	05 26       	eor	r0, r21
    3780:	0e d0       	rcall	.+28     	; 0x379e <__divmodsi4_neg1>
    3782:	57 fd       	sbrc	r21, 7
    3784:	04 d0       	rcall	.+8      	; 0x378e <__divmodsi4_neg2>
    3786:	14 d0       	rcall	.+40     	; 0x37b0 <__udivmodsi4>
    3788:	0a d0       	rcall	.+20     	; 0x379e <__divmodsi4_neg1>
    378a:	00 1c       	adc	r0, r0
    378c:	38 f4       	brcc	.+14     	; 0x379c <__divmodsi4_exit>

0000378e <__divmodsi4_neg2>:
    378e:	50 95       	com	r21
    3790:	40 95       	com	r20
    3792:	30 95       	com	r19
    3794:	21 95       	neg	r18
    3796:	3f 4f       	sbci	r19, 0xFF	; 255
    3798:	4f 4f       	sbci	r20, 0xFF	; 255
    379a:	5f 4f       	sbci	r21, 0xFF	; 255

0000379c <__divmodsi4_exit>:
    379c:	08 95       	ret

0000379e <__divmodsi4_neg1>:
    379e:	f6 f7       	brtc	.-4      	; 0x379c <__divmodsi4_exit>
    37a0:	90 95       	com	r25
    37a2:	80 95       	com	r24
    37a4:	70 95       	com	r23
    37a6:	61 95       	neg	r22
    37a8:	7f 4f       	sbci	r23, 0xFF	; 255
    37aa:	8f 4f       	sbci	r24, 0xFF	; 255
    37ac:	9f 4f       	sbci	r25, 0xFF	; 255
    37ae:	08 95       	ret

000037b0 <__udivmodsi4>:
    37b0:	a1 e2       	ldi	r26, 0x21	; 33
    37b2:	1a 2e       	mov	r1, r26
    37b4:	aa 1b       	sub	r26, r26
    37b6:	bb 1b       	sub	r27, r27
    37b8:	fd 01       	movw	r30, r26
    37ba:	0d c0       	rjmp	.+26     	; 0x37d6 <__udivmodsi4_ep>

000037bc <__udivmodsi4_loop>:
    37bc:	aa 1f       	adc	r26, r26
    37be:	bb 1f       	adc	r27, r27
    37c0:	ee 1f       	adc	r30, r30
    37c2:	ff 1f       	adc	r31, r31
    37c4:	a2 17       	cp	r26, r18
    37c6:	b3 07       	cpc	r27, r19
    37c8:	e4 07       	cpc	r30, r20
    37ca:	f5 07       	cpc	r31, r21
    37cc:	20 f0       	brcs	.+8      	; 0x37d6 <__udivmodsi4_ep>
    37ce:	a2 1b       	sub	r26, r18
    37d0:	b3 0b       	sbc	r27, r19
    37d2:	e4 0b       	sbc	r30, r20
    37d4:	f5 0b       	sbc	r31, r21

000037d6 <__udivmodsi4_ep>:
    37d6:	66 1f       	adc	r22, r22
    37d8:	77 1f       	adc	r23, r23
    37da:	88 1f       	adc	r24, r24
    37dc:	99 1f       	adc	r25, r25
    37de:	1a 94       	dec	r1
    37e0:	69 f7       	brne	.-38     	; 0x37bc <__udivmodsi4_loop>
    37e2:	60 95       	com	r22
    37e4:	70 95       	com	r23
    37e6:	80 95       	com	r24
    37e8:	90 95       	com	r25
    37ea:	9b 01       	movw	r18, r22
    37ec:	ac 01       	movw	r20, r24
    37ee:	bd 01       	movw	r22, r26
    37f0:	cf 01       	movw	r24, r30
    37f2:	08 95       	ret

000037f4 <__prologue_saves__>:
    37f4:	2f 92       	push	r2
    37f6:	3f 92       	push	r3
    37f8:	4f 92       	push	r4
    37fa:	5f 92       	push	r5
    37fc:	6f 92       	push	r6
    37fe:	7f 92       	push	r7
    3800:	8f 92       	push	r8
    3802:	9f 92       	push	r9
    3804:	af 92       	push	r10
    3806:	bf 92       	push	r11
    3808:	cf 92       	push	r12
    380a:	df 92       	push	r13
    380c:	ef 92       	push	r14
    380e:	ff 92       	push	r15
    3810:	0f 93       	push	r16
    3812:	1f 93       	push	r17
    3814:	cf 93       	push	r28
    3816:	df 93       	push	r29
    3818:	cd b7       	in	r28, 0x3d	; 61
    381a:	de b7       	in	r29, 0x3e	; 62
    381c:	ca 1b       	sub	r28, r26
    381e:	db 0b       	sbc	r29, r27
    3820:	0f b6       	in	r0, 0x3f	; 63
    3822:	f8 94       	cli
    3824:	de bf       	out	0x3e, r29	; 62
    3826:	0f be       	out	0x3f, r0	; 63
    3828:	cd bf       	out	0x3d, r28	; 61
    382a:	09 94       	ijmp

0000382c <__epilogue_restores__>:
    382c:	2a 88       	ldd	r2, Y+18	; 0x12
    382e:	39 88       	ldd	r3, Y+17	; 0x11
    3830:	48 88       	ldd	r4, Y+16	; 0x10
    3832:	5f 84       	ldd	r5, Y+15	; 0x0f
    3834:	6e 84       	ldd	r6, Y+14	; 0x0e
    3836:	7d 84       	ldd	r7, Y+13	; 0x0d
    3838:	8c 84       	ldd	r8, Y+12	; 0x0c
    383a:	9b 84       	ldd	r9, Y+11	; 0x0b
    383c:	aa 84       	ldd	r10, Y+10	; 0x0a
    383e:	b9 84       	ldd	r11, Y+9	; 0x09
    3840:	c8 84       	ldd	r12, Y+8	; 0x08
    3842:	df 80       	ldd	r13, Y+7	; 0x07
    3844:	ee 80       	ldd	r14, Y+6	; 0x06
    3846:	fd 80       	ldd	r15, Y+5	; 0x05
    3848:	0c 81       	ldd	r16, Y+4	; 0x04
    384a:	1b 81       	ldd	r17, Y+3	; 0x03
    384c:	aa 81       	ldd	r26, Y+2	; 0x02
    384e:	b9 81       	ldd	r27, Y+1	; 0x01
    3850:	ce 0f       	add	r28, r30
    3852:	d1 1d       	adc	r29, r1
    3854:	0f b6       	in	r0, 0x3f	; 63
    3856:	f8 94       	cli
    3858:	de bf       	out	0x3e, r29	; 62
    385a:	0f be       	out	0x3f, r0	; 63
    385c:	cd bf       	out	0x3d, r28	; 61
    385e:	ed 01       	movw	r28, r26
    3860:	08 95       	ret

00003862 <itoa>:
    3862:	fb 01       	movw	r30, r22
    3864:	9f 01       	movw	r18, r30
    3866:	e8 94       	clt
    3868:	42 30       	cpi	r20, 0x02	; 2
    386a:	c4 f0       	brlt	.+48     	; 0x389c <itoa+0x3a>
    386c:	45 32       	cpi	r20, 0x25	; 37
    386e:	b4 f4       	brge	.+44     	; 0x389c <itoa+0x3a>
    3870:	4a 30       	cpi	r20, 0x0A	; 10
    3872:	29 f4       	brne	.+10     	; 0x387e <itoa+0x1c>
    3874:	97 fb       	bst	r25, 7
    3876:	1e f4       	brtc	.+6      	; 0x387e <itoa+0x1c>
    3878:	90 95       	com	r25
    387a:	81 95       	neg	r24
    387c:	9f 4f       	sbci	r25, 0xFF	; 255
    387e:	64 2f       	mov	r22, r20
    3880:	77 27       	eor	r23, r23
    3882:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <__udivmodhi4>
    3886:	80 5d       	subi	r24, 0xD0	; 208
    3888:	8a 33       	cpi	r24, 0x3A	; 58
    388a:	0c f0       	brlt	.+2      	; 0x388e <itoa+0x2c>
    388c:	89 5d       	subi	r24, 0xD9	; 217
    388e:	81 93       	st	Z+, r24
    3890:	cb 01       	movw	r24, r22
    3892:	00 97       	sbiw	r24, 0x00	; 0
    3894:	a1 f7       	brne	.-24     	; 0x387e <itoa+0x1c>
    3896:	16 f4       	brtc	.+4      	; 0x389c <itoa+0x3a>
    3898:	5d e2       	ldi	r21, 0x2D	; 45
    389a:	51 93       	st	Z+, r21
    389c:	10 82       	st	Z, r1
    389e:	c9 01       	movw	r24, r18
    38a0:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <strrev>

000038a4 <strrev>:
    38a4:	dc 01       	movw	r26, r24
    38a6:	fc 01       	movw	r30, r24
    38a8:	67 2f       	mov	r22, r23
    38aa:	71 91       	ld	r23, Z+
    38ac:	77 23       	and	r23, r23
    38ae:	e1 f7       	brne	.-8      	; 0x38a8 <strrev+0x4>
    38b0:	32 97       	sbiw	r30, 0x02	; 2
    38b2:	04 c0       	rjmp	.+8      	; 0x38bc <strrev+0x18>
    38b4:	7c 91       	ld	r23, X
    38b6:	6d 93       	st	X+, r22
    38b8:	70 83       	st	Z, r23
    38ba:	62 91       	ld	r22, -Z
    38bc:	ae 17       	cp	r26, r30
    38be:	bf 07       	cpc	r27, r31
    38c0:	c8 f3       	brcs	.-14     	; 0x38b4 <strrev+0x10>
    38c2:	08 95       	ret

000038c4 <__udivmodhi4>:
    38c4:	aa 1b       	sub	r26, r26
    38c6:	bb 1b       	sub	r27, r27
    38c8:	51 e1       	ldi	r21, 0x11	; 17
    38ca:	07 c0       	rjmp	.+14     	; 0x38da <__udivmodhi4_ep>

000038cc <__udivmodhi4_loop>:
    38cc:	aa 1f       	adc	r26, r26
    38ce:	bb 1f       	adc	r27, r27
    38d0:	a6 17       	cp	r26, r22
    38d2:	b7 07       	cpc	r27, r23
    38d4:	10 f0       	brcs	.+4      	; 0x38da <__udivmodhi4_ep>
    38d6:	a6 1b       	sub	r26, r22
    38d8:	b7 0b       	sbc	r27, r23

000038da <__udivmodhi4_ep>:
    38da:	88 1f       	adc	r24, r24
    38dc:	99 1f       	adc	r25, r25
    38de:	5a 95       	dec	r21
    38e0:	a9 f7       	brne	.-22     	; 0x38cc <__udivmodhi4_loop>
    38e2:	80 95       	com	r24
    38e4:	90 95       	com	r25
    38e6:	bc 01       	movw	r22, r24
    38e8:	cd 01       	movw	r24, r26
    38ea:	08 95       	ret

000038ec <_exit>:
    38ec:	f8 94       	cli

000038ee <__stop_program>:
    38ee:	ff cf       	rjmp	.-2      	; 0x38ee <__stop_program>
