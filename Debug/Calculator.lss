
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fd2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002fd2  00003066  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800068  00800068  0000306e  2**0
                  ALLOC
  3 .stab         00002634  00000000  00000000  00003070  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d4b  00000000  00000000  000056a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000063ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000652f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000669f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000082e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000091d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009f80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a36d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ab3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ac 36       	cpi	r26, 0x6C	; 108
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e2 ed       	ldi	r30, 0xD2	; 210
      78:	ff e2       	ldi	r31, 0x2F	; 47
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 e7 17 	jmp	0x2fce	; 0x2fce <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6b 17 	jmp	0x2ed6	; 0x2ed6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 87 17 	jmp	0x2f0e	; 0x2f0e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 77 17 	jmp	0x2eee	; 0x2eee <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 77 17 	jmp	0x2eee	; 0x2eee <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6b 17 	jmp	0x2ed6	; 0x2ed6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 87 17 	jmp	0x2f0e	; 0x2f0e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 77 17 	jmp	0x2eee	; 0x2eee <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 77 17 	jmp	0x2eee	; 0x2eee <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 77 17 	jmp	0x2eee	; 0x2eee <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 93 17 	jmp	0x2f26	; 0x2f26 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7b 17 	jmp	0x2ef6	; 0x2ef6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void restart(void);

volatile uint8 op1,op2,operation,check;

int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	check=0;
     b4e:	10 92 6a 00 	sts	0x006A, r1
	LCD_init();
     b52:	0e 94 99 13 	call	0x2732	; 0x2732 <LCD_init>
	KeyPad_init();
     b56:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <KeyPad_init>
	GET_OP1();
     b5a:	0e 94 30 06 	call	0xc60	; 0xc60 <GET_OP1>

	if(check==1)
     b5e:	80 91 6a 00 	lds	r24, 0x006A
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	11 f4       	brne	.+4      	; 0xb6a <main+0x24>
	{
		main();
     b66:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
	}

//	GET_OPERATION();

	GET_OP2();
     b6a:	0e 94 d3 06 	call	0xda6	; 0xda6 <GET_OP2>

	if(check==1)
     b6e:	80 91 6a 00 	lds	r24, 0x006A
     b72:	81 30       	cpi	r24, 0x01	; 1
     b74:	11 f4       	brne	.+4      	; 0xb7a <main+0x34>
	{
		main();
     b76:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
	}

	LCD_Clear();
     b7a:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <LCD_Clear>

	calc(operation,op1,op2);
     b7e:	80 91 69 00 	lds	r24, 0x0069
     b82:	90 91 6b 00 	lds	r25, 0x006B
     b86:	20 91 68 00 	lds	r18, 0x0068
     b8a:	69 2f       	mov	r22, r25
     b8c:	42 2f       	mov	r20, r18
     b8e:	0e 94 ca 05 	call	0xb94	; 0xb94 <calc>
     b92:	ff cf       	rjmp	.-2      	; 0xb92 <main+0x4c>

00000b94 <calc>:

	}
}

void calc(uint8 operation,uint8 op1,uint8 op2)
{
     b94:	df 93       	push	r29
     b96:	cf 93       	push	r28
     b98:	00 d0       	rcall	.+0      	; 0xb9a <calc+0x6>
     b9a:	00 d0       	rcall	.+0      	; 0xb9c <calc+0x8>
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <calc+0xa>
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
     ba2:	8a 83       	std	Y+2, r24	; 0x02
     ba4:	6b 83       	std	Y+3, r22	; 0x03
     ba6:	4c 83       	std	Y+4, r20	; 0x04
	uint8 result;
	switch(operation)
     ba8:	8a 81       	ldd	r24, Y+2	; 0x02
     baa:	28 2f       	mov	r18, r24
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	3e 83       	std	Y+6, r19	; 0x06
     bb0:	2d 83       	std	Y+5, r18	; 0x05
     bb2:	8d 81       	ldd	r24, Y+5	; 0x05
     bb4:	9e 81       	ldd	r25, Y+6	; 0x06
     bb6:	8b 32       	cpi	r24, 0x2B	; 43
     bb8:	91 05       	cpc	r25, r1
     bba:	b1 f0       	breq	.+44     	; 0xbe8 <calc+0x54>
     bbc:	2d 81       	ldd	r18, Y+5	; 0x05
     bbe:	3e 81       	ldd	r19, Y+6	; 0x06
     bc0:	2c 32       	cpi	r18, 0x2C	; 44
     bc2:	31 05       	cpc	r19, r1
     bc4:	34 f4       	brge	.+12     	; 0xbd2 <calc+0x3e>
     bc6:	8d 81       	ldd	r24, Y+5	; 0x05
     bc8:	9e 81       	ldd	r25, Y+6	; 0x06
     bca:	8a 32       	cpi	r24, 0x2A	; 42
     bcc:	91 05       	cpc	r25, r1
     bce:	b1 f0       	breq	.+44     	; 0xbfc <calc+0x68>
     bd0:	22 c0       	rjmp	.+68     	; 0xc16 <calc+0x82>
     bd2:	2d 81       	ldd	r18, Y+5	; 0x05
     bd4:	3e 81       	ldd	r19, Y+6	; 0x06
     bd6:	2d 32       	cpi	r18, 0x2D	; 45
     bd8:	31 05       	cpc	r19, r1
     bda:	59 f0       	breq	.+22     	; 0xbf2 <calc+0x5e>
     bdc:	8d 81       	ldd	r24, Y+5	; 0x05
     bde:	9e 81       	ldd	r25, Y+6	; 0x06
     be0:	8f 32       	cpi	r24, 0x2F	; 47
     be2:	91 05       	cpc	r25, r1
     be4:	91 f0       	breq	.+36     	; 0xc0a <calc+0x76>
     be6:	17 c0       	rjmp	.+46     	; 0xc16 <calc+0x82>
	{
	case '+' :
		result=op1+op2;
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	9c 81       	ldd	r25, Y+4	; 0x04
     bec:	89 0f       	add	r24, r25
     bee:	89 83       	std	Y+1, r24	; 0x01
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <calc+0x82>
		break;
	case '-' :
		result=op1-op2;
     bf2:	8b 81       	ldd	r24, Y+3	; 0x03
     bf4:	9c 81       	ldd	r25, Y+4	; 0x04
     bf6:	89 1b       	sub	r24, r25
     bf8:	89 83       	std	Y+1, r24	; 0x01
     bfa:	0d c0       	rjmp	.+26     	; 0xc16 <calc+0x82>
		break;
	case '*' :
		result=op1*op2;
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	9c 81       	ldd	r25, Y+4	; 0x04
     c00:	89 9f       	mul	r24, r25
     c02:	80 2d       	mov	r24, r0
     c04:	11 24       	eor	r1, r1
     c06:	89 83       	std	Y+1, r24	; 0x01
     c08:	06 c0       	rjmp	.+12     	; 0xc16 <calc+0x82>
		break;
	case '/' :
		result=op1/op2;
     c0a:	8b 81       	ldd	r24, Y+3	; 0x03
     c0c:	9c 81       	ldd	r25, Y+4	; 0x04
     c0e:	69 2f       	mov	r22, r25
     c10:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <__udivmodqi4>
     c14:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	if(result>=0&&result<10)
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	8a 30       	cpi	r24, 0x0A	; 10
     c1a:	20 f4       	brcc	.+8      	; 0xc24 <calc+0x90>
	{
		LCD_display_int(result);
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_display_int>
     c22:	15 c0       	rjmp	.+42     	; 0xc4e <calc+0xba>
	}
	else if(result>=10&&result<100)
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	8a 30       	cpi	r24, 0x0A	; 10
     c28:	90 f0       	brcs	.+36     	; 0xc4e <calc+0xba>
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	84 36       	cpi	r24, 0x64	; 100
     c2e:	78 f4       	brcc	.+30     	; 0xc4e <calc+0xba>
	{
		LCD_display_int(result/10);
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	9a e0       	ldi	r25, 0x0A	; 10
     c34:	69 2f       	mov	r22, r25
     c36:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <__udivmodqi4>
     c3a:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_display_int>
		LCD_display_int(result%10);
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	9a e0       	ldi	r25, 0x0A	; 10
     c42:	69 2f       	mov	r22, r25
     c44:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <__udivmodqi4>
     c48:	89 2f       	mov	r24, r25
     c4a:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_display_int>
	}

}
     c4e:	26 96       	adiw	r28, 0x06	; 6
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
     c54:	de bf       	out	0x3e, r29	; 62
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	cd bf       	out	0x3d, r28	; 61
     c5a:	cf 91       	pop	r28
     c5c:	df 91       	pop	r29
     c5e:	08 95       	ret

00000c60 <GET_OP1>:

void GET_OP1(void)
{
     c60:	df 93       	push	r29
     c62:	cf 93       	push	r28
     c64:	00 d0       	rcall	.+0      	; 0xc66 <GET_OP1+0x6>
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
	volatile int key;
	key = KeyPad_getPressedKey(); /* get the pressed key number */
     c6a:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <KeyPad_getPressedKey>
     c6e:	88 2f       	mov	r24, r24
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	9a 83       	std	Y+2, r25	; 0x02
     c74:	89 83       	std	Y+1, r24	; 0x01
	if(key=='+'||key=='-'||key=='/'||key=='='||key=='A'||key=='*')
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	9a 81       	ldd	r25, Y+2	; 0x02
     c7a:	8b 32       	cpi	r24, 0x2B	; 43
     c7c:	91 05       	cpc	r25, r1
     c7e:	c9 f0       	breq	.+50     	; 0xcb2 <GET_OP1+0x52>
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	9a 81       	ldd	r25, Y+2	; 0x02
     c84:	8d 32       	cpi	r24, 0x2D	; 45
     c86:	91 05       	cpc	r25, r1
     c88:	a1 f0       	breq	.+40     	; 0xcb2 <GET_OP1+0x52>
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	9a 81       	ldd	r25, Y+2	; 0x02
     c8e:	8f 32       	cpi	r24, 0x2F	; 47
     c90:	91 05       	cpc	r25, r1
     c92:	79 f0       	breq	.+30     	; 0xcb2 <GET_OP1+0x52>
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	9a 81       	ldd	r25, Y+2	; 0x02
     c98:	8d 33       	cpi	r24, 0x3D	; 61
     c9a:	91 05       	cpc	r25, r1
     c9c:	51 f0       	breq	.+20     	; 0xcb2 <GET_OP1+0x52>
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	9a 81       	ldd	r25, Y+2	; 0x02
     ca2:	81 34       	cpi	r24, 0x41	; 65
     ca4:	91 05       	cpc	r25, r1
     ca6:	29 f0       	breq	.+10     	; 0xcb2 <GET_OP1+0x52>
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	9a 81       	ldd	r25, Y+2	; 0x02
     cac:	8a 32       	cpi	r24, 0x2A	; 42
     cae:	91 05       	cpc	r25, r1
     cb0:	31 f4       	brne	.+12     	; 0xcbe <GET_OP1+0x5e>
	{
		LCD_Clear();
     cb2:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <LCD_Clear>
		check=1;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	80 93 6a 00 	sts	0x006A, r24
     cbc:	6f c0       	rjmp	.+222    	; 0xd9c <GET_OP1+0x13c>
		return;
	}
	LCD_display_int(key);   /*Display the pressed key*/
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	9a 81       	ldd	r25, Y+2	; 0x02
     cc2:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_display_int>
	op1=key;
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	9a 81       	ldd	r25, Y+2	; 0x02
     cca:	80 93 6b 00 	sts	0x006B, r24
	key = KeyPad_getPressedKey();
     cce:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <KeyPad_getPressedKey>
     cd2:	88 2f       	mov	r24, r24
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	9a 83       	std	Y+2, r25	; 0x02
     cd8:	89 83       	std	Y+1, r24	; 0x01
	if(key=='+'||key=='-'||key=='/'||key=='*')   /*if the entered digit is an arthimetic operator*/
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	9a 81       	ldd	r25, Y+2	; 0x02
     cde:	8b 32       	cpi	r24, 0x2B	; 43
     ce0:	91 05       	cpc	r25, r1
     ce2:	79 f0       	breq	.+30     	; 0xd02 <GET_OP1+0xa2>
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	9a 81       	ldd	r25, Y+2	; 0x02
     ce8:	8d 32       	cpi	r24, 0x2D	; 45
     cea:	91 05       	cpc	r25, r1
     cec:	51 f0       	breq	.+20     	; 0xd02 <GET_OP1+0xa2>
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	9a 81       	ldd	r25, Y+2	; 0x02
     cf2:	8f 32       	cpi	r24, 0x2F	; 47
     cf4:	91 05       	cpc	r25, r1
     cf6:	29 f0       	breq	.+10     	; 0xd02 <GET_OP1+0xa2>
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	9a 81       	ldd	r25, Y+2	; 0x02
     cfc:	8a 32       	cpi	r24, 0x2A	; 42
     cfe:	91 05       	cpc	r25, r1
     d00:	49 f4       	brne	.+18     	; 0xd14 <GET_OP1+0xb4>
		{
			LCD_display_int(key);   /*Display the pressed key*/
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	9a 81       	ldd	r25, Y+2	; 0x02
     d06:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_display_int>
			operation=key;
     d0a:	89 81       	ldd	r24, Y+1	; 0x01
     d0c:	9a 81       	ldd	r25, Y+2	; 0x02
     d0e:	80 93 69 00 	sts	0x0069, r24
     d12:	44 c0       	rjmp	.+136    	; 0xd9c <GET_OP1+0x13c>
			return;
		}
	else if(key=='A'||key=='=')
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	9a 81       	ldd	r25, Y+2	; 0x02
     d18:	81 34       	cpi	r24, 0x41	; 65
     d1a:	91 05       	cpc	r25, r1
     d1c:	29 f0       	breq	.+10     	; 0xd28 <GET_OP1+0xc8>
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	9a 81       	ldd	r25, Y+2	; 0x02
     d22:	8d 33       	cpi	r24, 0x3D	; 61
     d24:	91 05       	cpc	r25, r1
     d26:	21 f4       	brne	.+8      	; 0xd30 <GET_OP1+0xd0>
	{
		check=1;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	80 93 6a 00 	sts	0x006A, r24
     d2e:	36 c0       	rjmp	.+108    	; 0xd9c <GET_OP1+0x13c>
		return;
	}
	else
	{
	op1=(op1*10)+key;
     d30:	80 91 6b 00 	lds	r24, 0x006B
     d34:	88 2f       	mov	r24, r24
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	9c 01       	movw	r18, r24
     d3a:	22 0f       	add	r18, r18
     d3c:	33 1f       	adc	r19, r19
     d3e:	c9 01       	movw	r24, r18
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	82 0f       	add	r24, r18
     d4a:	93 1f       	adc	r25, r19
     d4c:	28 2f       	mov	r18, r24
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	9a 81       	ldd	r25, Y+2	; 0x02
     d52:	82 0f       	add	r24, r18
     d54:	80 93 6b 00 	sts	0x006B, r24
	key = KeyPad_getPressedKey();
     d58:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <KeyPad_getPressedKey>
     d5c:	88 2f       	mov	r24, r24
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	9a 83       	std	Y+2, r25	; 0x02
     d62:	89 83       	std	Y+1, r24	; 0x01
	if(key=='+'||key=='-'||key=='/'||key=='*')   /*if the entered digit is an arthimetic operator*/
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	9a 81       	ldd	r25, Y+2	; 0x02
     d68:	8b 32       	cpi	r24, 0x2B	; 43
     d6a:	91 05       	cpc	r25, r1
     d6c:	79 f0       	breq	.+30     	; 0xd8c <GET_OP1+0x12c>
     d6e:	89 81       	ldd	r24, Y+1	; 0x01
     d70:	9a 81       	ldd	r25, Y+2	; 0x02
     d72:	8d 32       	cpi	r24, 0x2D	; 45
     d74:	91 05       	cpc	r25, r1
     d76:	51 f0       	breq	.+20     	; 0xd8c <GET_OP1+0x12c>
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	9a 81       	ldd	r25, Y+2	; 0x02
     d7c:	8f 32       	cpi	r24, 0x2F	; 47
     d7e:	91 05       	cpc	r25, r1
     d80:	29 f0       	breq	.+10     	; 0xd8c <GET_OP1+0x12c>
     d82:	89 81       	ldd	r24, Y+1	; 0x01
     d84:	9a 81       	ldd	r25, Y+2	; 0x02
     d86:	8a 32       	cpi	r24, 0x2A	; 42
     d88:	91 05       	cpc	r25, r1
     d8a:	41 f4       	brne	.+16     	; 0xd9c <GET_OP1+0x13c>
			{
				LCD_display_int(key);   /*Display the pressed key*/
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	9a 81       	ldd	r25, Y+2	; 0x02
     d90:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_display_int>
				operation=key;
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	9a 81       	ldd	r25, Y+2	; 0x02
     d98:	80 93 69 00 	sts	0x0069, r24
				return;
			}
	}


}
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	08 95       	ret

00000da6 <GET_OP2>:

void GET_OP2(void)
{
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	0f 92       	push	r0
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
	uint8 key;
	key =KeyPad_getPressedKey();
     db0:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <KeyPad_getPressedKey>
     db4:	89 83       	std	Y+1, r24	; 0x01
	if(key=='+'||key=='-'||key=='/'||key=='='||key=='A'||key=='*')
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	8b 32       	cpi	r24, 0x2B	; 43
     dba:	79 f0       	breq	.+30     	; 0xdda <GET_OP2+0x34>
     dbc:	89 81       	ldd	r24, Y+1	; 0x01
     dbe:	8d 32       	cpi	r24, 0x2D	; 45
     dc0:	61 f0       	breq	.+24     	; 0xdda <GET_OP2+0x34>
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	8f 32       	cpi	r24, 0x2F	; 47
     dc6:	49 f0       	breq	.+18     	; 0xdda <GET_OP2+0x34>
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	8d 33       	cpi	r24, 0x3D	; 61
     dcc:	31 f0       	breq	.+12     	; 0xdda <GET_OP2+0x34>
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	81 34       	cpi	r24, 0x41	; 65
     dd2:	19 f0       	breq	.+6      	; 0xdda <GET_OP2+0x34>
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	8a 32       	cpi	r24, 0x2A	; 42
     dd8:	19 f4       	brne	.+6      	; 0xde0 <GET_OP2+0x3a>
	{
		restart();
     dda:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <restart>
     dde:	06 c0       	rjmp	.+12     	; 0xdec <GET_OP2+0x46>
		return;
	}
	LCD_display_int(key);   /*Display the pressed key*/
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <LCD_display_int>
	op2=key;
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	80 93 68 00 	sts	0x0068, r24
}
     dec:	0f 90       	pop	r0
     dee:	cf 91       	pop	r28
     df0:	df 91       	pop	r29
     df2:	08 95       	ret

00000df4 <restart>:
//	LCD_display_int(key);   /*Display the pressed key*/
//	operation=key;
//}

void restart(void)
{
     df4:	df 93       	push	r29
     df6:	cf 93       	push	r28
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
	LCD_Clear();
     dfc:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <LCD_Clear>
	check=1;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	80 93 6a 00 	sts	0x006A, r24
}
     e06:	cf 91       	pop	r28
     e08:	df 91       	pop	r29
     e0a:	08 95       	ret

00000e0c <DIO_setPINDir>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void DIO_setPINDir(uint8 portname,uint8 pin,uint8 direction)
{
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	00 d0       	rcall	.+0      	; 0xe12 <DIO_setPINDir+0x6>
     e12:	00 d0       	rcall	.+0      	; 0xe14 <DIO_setPINDir+0x8>
     e14:	0f 92       	push	r0
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	89 83       	std	Y+1, r24	; 0x01
     e1c:	6a 83       	std	Y+2, r22	; 0x02
     e1e:	4b 83       	std	Y+3, r20	; 0x03

	switch(portname)
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	3d 83       	std	Y+5, r19	; 0x05
     e28:	2c 83       	std	Y+4, r18	; 0x04
     e2a:	8c 81       	ldd	r24, Y+4	; 0x04
     e2c:	9d 81       	ldd	r25, Y+5	; 0x05
     e2e:	82 34       	cpi	r24, 0x42	; 66
     e30:	91 05       	cpc	r25, r1
     e32:	09 f4       	brne	.+2      	; 0xe36 <DIO_setPINDir+0x2a>
     e34:	44 c0       	rjmp	.+136    	; 0xebe <DIO_setPINDir+0xb2>
     e36:	2c 81       	ldd	r18, Y+4	; 0x04
     e38:	3d 81       	ldd	r19, Y+5	; 0x05
     e3a:	23 34       	cpi	r18, 0x43	; 67
     e3c:	31 05       	cpc	r19, r1
     e3e:	34 f4       	brge	.+12     	; 0xe4c <DIO_setPINDir+0x40>
     e40:	8c 81       	ldd	r24, Y+4	; 0x04
     e42:	9d 81       	ldd	r25, Y+5	; 0x05
     e44:	81 34       	cpi	r24, 0x41	; 65
     e46:	91 05       	cpc	r25, r1
     e48:	71 f0       	breq	.+28     	; 0xe66 <DIO_setPINDir+0x5a>
     e4a:	bc c0       	rjmp	.+376    	; 0xfc4 <DIO_setPINDir+0x1b8>
     e4c:	2c 81       	ldd	r18, Y+4	; 0x04
     e4e:	3d 81       	ldd	r19, Y+5	; 0x05
     e50:	23 34       	cpi	r18, 0x43	; 67
     e52:	31 05       	cpc	r19, r1
     e54:	09 f4       	brne	.+2      	; 0xe58 <DIO_setPINDir+0x4c>
     e56:	5f c0       	rjmp	.+190    	; 0xf16 <DIO_setPINDir+0x10a>
     e58:	8c 81       	ldd	r24, Y+4	; 0x04
     e5a:	9d 81       	ldd	r25, Y+5	; 0x05
     e5c:	84 34       	cpi	r24, 0x44	; 68
     e5e:	91 05       	cpc	r25, r1
     e60:	09 f4       	brne	.+2      	; 0xe64 <DIO_setPINDir+0x58>
     e62:	85 c0       	rjmp	.+266    	; 0xf6e <DIO_setPINDir+0x162>
     e64:	af c0       	rjmp	.+350    	; 0xfc4 <DIO_setPINDir+0x1b8>
	{

	case 'A':
		if( direction==1 )
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	81 30       	cpi	r24, 0x01	; 1
     e6a:	a1 f4       	brne	.+40     	; 0xe94 <DIO_setPINDir+0x88>
		{
			SET_BIT(DDRA,pin);
     e6c:	aa e3       	ldi	r26, 0x3A	; 58
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	ea e3       	ldi	r30, 0x3A	; 58
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	48 2f       	mov	r20, r24
     e78:	8a 81       	ldd	r24, Y+2	; 0x02
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	02 2e       	mov	r0, r18
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <DIO_setPINDir+0x7e>
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	0a 94       	dec	r0
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <DIO_setPINDir+0x7a>
     e8e:	84 2b       	or	r24, r20
     e90:	8c 93       	st	X, r24
     e92:	98 c0       	rjmp	.+304    	; 0xfc4 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRA,pin);
     e94:	aa e3       	ldi	r26, 0x3A	; 58
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	ea e3       	ldi	r30, 0x3A	; 58
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	48 2f       	mov	r20, r24
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	02 2e       	mov	r0, r18
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <DIO_setPINDir+0xa6>
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	0a 94       	dec	r0
     eb4:	e2 f7       	brpl	.-8      	; 0xeae <DIO_setPINDir+0xa2>
     eb6:	80 95       	com	r24
     eb8:	84 23       	and	r24, r20
     eba:	8c 93       	st	X, r24
     ebc:	83 c0       	rjmp	.+262    	; 0xfc4 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'B':
		if( direction==1 )
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	a1 f4       	brne	.+40     	; 0xeec <DIO_setPINDir+0xe0>
		{
			SET_BIT(DDRB,pin);
     ec4:	a7 e3       	ldi	r26, 0x37	; 55
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e7 e3       	ldi	r30, 0x37	; 55
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	48 2f       	mov	r20, r24
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	02 2e       	mov	r0, r18
     edc:	02 c0       	rjmp	.+4      	; 0xee2 <DIO_setPINDir+0xd6>
     ede:	88 0f       	add	r24, r24
     ee0:	99 1f       	adc	r25, r25
     ee2:	0a 94       	dec	r0
     ee4:	e2 f7       	brpl	.-8      	; 0xede <DIO_setPINDir+0xd2>
     ee6:	84 2b       	or	r24, r20
     ee8:	8c 93       	st	X, r24
     eea:	6c c0       	rjmp	.+216    	; 0xfc4 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRB,pin);
     eec:	a7 e3       	ldi	r26, 0x37	; 55
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	e7 e3       	ldi	r30, 0x37	; 55
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <DIO_setPINDir+0xfe>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <DIO_setPINDir+0xfa>
     f0e:	80 95       	com	r24
     f10:	84 23       	and	r24, r20
     f12:	8c 93       	st	X, r24
     f14:	57 c0       	rjmp	.+174    	; 0xfc4 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'C':
		if( direction==1 )
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	81 30       	cpi	r24, 0x01	; 1
     f1a:	a1 f4       	brne	.+40     	; 0xf44 <DIO_setPINDir+0x138>
		{
			SET_BIT(DDRC,pin);
     f1c:	a4 e3       	ldi	r26, 0x34	; 52
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e4 e3       	ldi	r30, 0x34	; 52
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	48 2f       	mov	r20, r24
     f28:	8a 81       	ldd	r24, Y+2	; 0x02
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	02 2e       	mov	r0, r18
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <DIO_setPINDir+0x12e>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	0a 94       	dec	r0
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <DIO_setPINDir+0x12a>
     f3e:	84 2b       	or	r24, r20
     f40:	8c 93       	st	X, r24
     f42:	40 c0       	rjmp	.+128    	; 0xfc4 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRC,pin);
     f44:	a4 e3       	ldi	r26, 0x34	; 52
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e4 e3       	ldi	r30, 0x34	; 52
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 2e       	mov	r0, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <DIO_setPINDir+0x156>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <DIO_setPINDir+0x152>
     f66:	80 95       	com	r24
     f68:	84 23       	and	r24, r20
     f6a:	8c 93       	st	X, r24
     f6c:	2b c0       	rjmp	.+86     	; 0xfc4 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'D':
		if( direction==1)
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	a1 f4       	brne	.+40     	; 0xf9c <DIO_setPINDir+0x190>
		{
			SET_BIT(DDRD,pin);
     f74:	a1 e3       	ldi	r26, 0x31	; 49
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e1 e3       	ldi	r30, 0x31	; 49
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	48 2f       	mov	r20, r24
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 2e       	mov	r0, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <DIO_setPINDir+0x186>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	0a 94       	dec	r0
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <DIO_setPINDir+0x182>
     f96:	84 2b       	or	r24, r20
     f98:	8c 93       	st	X, r24
     f9a:	14 c0       	rjmp	.+40     	; 0xfc4 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRD,pin);
     f9c:	a1 e3       	ldi	r26, 0x31	; 49
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e1 e3       	ldi	r30, 0x31	; 49
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	48 2f       	mov	r20, r24
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	02 2e       	mov	r0, r18
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <DIO_setPINDir+0x1ae>
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	0a 94       	dec	r0
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <DIO_setPINDir+0x1aa>
     fbe:	80 95       	com	r24
     fc0:	84 23       	and	r24, r20
     fc2:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <DIO_write_PIN>:


void DIO_write_PIN(uint8 portname,uint8 pin,uint8 pinvalue)
{
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	00 d0       	rcall	.+0      	; 0xfda <DIO_write_PIN+0x6>
     fda:	00 d0       	rcall	.+0      	; 0xfdc <DIO_write_PIN+0x8>
     fdc:	0f 92       	push	r0
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	6a 83       	std	Y+2, r22	; 0x02
     fe6:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	3d 83       	std	Y+5, r19	; 0x05
     ff0:	2c 83       	std	Y+4, r18	; 0x04
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	9d 81       	ldd	r25, Y+5	; 0x05
     ff6:	82 34       	cpi	r24, 0x42	; 66
     ff8:	91 05       	cpc	r25, r1
     ffa:	09 f4       	brne	.+2      	; 0xffe <DIO_write_PIN+0x2a>
     ffc:	44 c0       	rjmp	.+136    	; 0x1086 <DIO_write_PIN+0xb2>
     ffe:	2c 81       	ldd	r18, Y+4	; 0x04
    1000:	3d 81       	ldd	r19, Y+5	; 0x05
    1002:	23 34       	cpi	r18, 0x43	; 67
    1004:	31 05       	cpc	r19, r1
    1006:	34 f4       	brge	.+12     	; 0x1014 <DIO_write_PIN+0x40>
    1008:	8c 81       	ldd	r24, Y+4	; 0x04
    100a:	9d 81       	ldd	r25, Y+5	; 0x05
    100c:	81 34       	cpi	r24, 0x41	; 65
    100e:	91 05       	cpc	r25, r1
    1010:	71 f0       	breq	.+28     	; 0x102e <DIO_write_PIN+0x5a>
    1012:	bc c0       	rjmp	.+376    	; 0x118c <DIO_write_PIN+0x1b8>
    1014:	2c 81       	ldd	r18, Y+4	; 0x04
    1016:	3d 81       	ldd	r19, Y+5	; 0x05
    1018:	23 34       	cpi	r18, 0x43	; 67
    101a:	31 05       	cpc	r19, r1
    101c:	09 f4       	brne	.+2      	; 0x1020 <DIO_write_PIN+0x4c>
    101e:	5f c0       	rjmp	.+190    	; 0x10de <DIO_write_PIN+0x10a>
    1020:	8c 81       	ldd	r24, Y+4	; 0x04
    1022:	9d 81       	ldd	r25, Y+5	; 0x05
    1024:	84 34       	cpi	r24, 0x44	; 68
    1026:	91 05       	cpc	r25, r1
    1028:	09 f4       	brne	.+2      	; 0x102c <DIO_write_PIN+0x58>
    102a:	85 c0       	rjmp	.+266    	; 0x1136 <DIO_write_PIN+0x162>
    102c:	af c0       	rjmp	.+350    	; 0x118c <DIO_write_PIN+0x1b8>
	{

	case 'A':
		if( pinvalue==1 )
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	a1 f4       	brne	.+40     	; 0x105c <DIO_write_PIN+0x88>
		{
			SET_BIT(PORTA,pin);
    1034:	ab e3       	ldi	r26, 0x3B	; 59
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	eb e3       	ldi	r30, 0x3B	; 59
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <DIO_write_PIN+0x7e>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <DIO_write_PIN+0x7a>
    1056:	84 2b       	or	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	98 c0       	rjmp	.+304    	; 0x118c <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
    105c:	ab e3       	ldi	r26, 0x3B	; 59
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	eb e3       	ldi	r30, 0x3B	; 59
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <DIO_write_PIN+0xa6>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <DIO_write_PIN+0xa2>
    107e:	80 95       	com	r24
    1080:	84 23       	and	r24, r20
    1082:	8c 93       	st	X, r24
    1084:	83 c0       	rjmp	.+262    	; 0x118c <DIO_write_PIN+0x1b8>
		}
		break;
	case 'B':
		if( pinvalue==1 )
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	a1 f4       	brne	.+40     	; 0x10b4 <DIO_write_PIN+0xe0>
		{
			SET_BIT(PORTB,pin);
    108c:	a8 e3       	ldi	r26, 0x38	; 56
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	e8 e3       	ldi	r30, 0x38	; 56
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <DIO_write_PIN+0xd6>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <DIO_write_PIN+0xd2>
    10ae:	84 2b       	or	r24, r20
    10b0:	8c 93       	st	X, r24
    10b2:	6c c0       	rjmp	.+216    	; 0x118c <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTB,pin);
    10b4:	a8 e3       	ldi	r26, 0x38	; 56
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e8 e3       	ldi	r30, 0x38	; 56
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	48 2f       	mov	r20, r24
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	02 2e       	mov	r0, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <DIO_write_PIN+0xfe>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <DIO_write_PIN+0xfa>
    10d6:	80 95       	com	r24
    10d8:	84 23       	and	r24, r20
    10da:	8c 93       	st	X, r24
    10dc:	57 c0       	rjmp	.+174    	; 0x118c <DIO_write_PIN+0x1b8>
		}
		break;
	case 'C':
		if( pinvalue==1 )
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	a1 f4       	brne	.+40     	; 0x110c <DIO_write_PIN+0x138>
		{
			SET_BIT(PORTC,pin);
    10e4:	a5 e3       	ldi	r26, 0x35	; 53
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e5 e3       	ldi	r30, 0x35	; 53
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_write_PIN+0x12e>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_write_PIN+0x12a>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	40 c0       	rjmp	.+128    	; 0x118c <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTC,pin);
    110c:	a5 e3       	ldi	r26, 0x35	; 53
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e5 e3       	ldi	r30, 0x35	; 53
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_write_PIN+0x156>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_write_PIN+0x152>
    112e:	80 95       	com	r24
    1130:	84 23       	and	r24, r20
    1132:	8c 93       	st	X, r24
    1134:	2b c0       	rjmp	.+86     	; 0x118c <DIO_write_PIN+0x1b8>
		}
		break;
	case 'D':
		if( pinvalue==1)
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	a1 f4       	brne	.+40     	; 0x1164 <DIO_write_PIN+0x190>
		{
			SET_BIT(PORTD,pin);
    113c:	a2 e3       	ldi	r26, 0x32	; 50
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e2 e3       	ldi	r30, 0x32	; 50
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	48 2f       	mov	r20, r24
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	02 2e       	mov	r0, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <DIO_write_PIN+0x186>
    1156:	88 0f       	add	r24, r24
    1158:	99 1f       	adc	r25, r25
    115a:	0a 94       	dec	r0
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <DIO_write_PIN+0x182>
    115e:	84 2b       	or	r24, r20
    1160:	8c 93       	st	X, r24
    1162:	14 c0       	rjmp	.+40     	; 0x118c <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTD,pin);
    1164:	a2 e3       	ldi	r26, 0x32	; 50
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e2 e3       	ldi	r30, 0x32	; 50
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <DIO_write_PIN+0x1ae>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <DIO_write_PIN+0x1aa>
    1186:	80 95       	com	r24
    1188:	84 23       	and	r24, r20
    118a:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	0f 90       	pop	r0
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <DIO_read_PIN>:

uint8 DIO_read_PIN(uint8 portname,uint8 pin)
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <DIO_read_PIN+0x6>
    11a2:	00 d0       	rcall	.+0      	; 0x11a4 <DIO_read_PIN+0x8>
    11a4:	0f 92       	push	r0
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	8a 83       	std	Y+2, r24	; 0x02
    11ac:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_val=0;
    11ae:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	3d 83       	std	Y+5, r19	; 0x05
    11b8:	2c 83       	std	Y+4, r18	; 0x04
    11ba:	8c 81       	ldd	r24, Y+4	; 0x04
    11bc:	9d 81       	ldd	r25, Y+5	; 0x05
    11be:	82 34       	cpi	r24, 0x42	; 66
    11c0:	91 05       	cpc	r25, r1
    11c2:	41 f1       	breq	.+80     	; 0x1214 <DIO_read_PIN+0x78>
    11c4:	2c 81       	ldd	r18, Y+4	; 0x04
    11c6:	3d 81       	ldd	r19, Y+5	; 0x05
    11c8:	23 34       	cpi	r18, 0x43	; 67
    11ca:	31 05       	cpc	r19, r1
    11cc:	34 f4       	brge	.+12     	; 0x11da <DIO_read_PIN+0x3e>
    11ce:	8c 81       	ldd	r24, Y+4	; 0x04
    11d0:	9d 81       	ldd	r25, Y+5	; 0x05
    11d2:	81 34       	cpi	r24, 0x41	; 65
    11d4:	91 05       	cpc	r25, r1
    11d6:	61 f0       	breq	.+24     	; 0x11f0 <DIO_read_PIN+0x54>
    11d8:	52 c0       	rjmp	.+164    	; 0x127e <DIO_read_PIN+0xe2>
    11da:	2c 81       	ldd	r18, Y+4	; 0x04
    11dc:	3d 81       	ldd	r19, Y+5	; 0x05
    11de:	23 34       	cpi	r18, 0x43	; 67
    11e0:	31 05       	cpc	r19, r1
    11e2:	51 f1       	breq	.+84     	; 0x1238 <DIO_read_PIN+0x9c>
    11e4:	8c 81       	ldd	r24, Y+4	; 0x04
    11e6:	9d 81       	ldd	r25, Y+5	; 0x05
    11e8:	84 34       	cpi	r24, 0x44	; 68
    11ea:	91 05       	cpc	r25, r1
    11ec:	b9 f1       	breq	.+110    	; 0x125c <DIO_read_PIN+0xc0>
    11ee:	47 c0       	rjmp	.+142    	; 0x127e <DIO_read_PIN+0xe2>
	{

	case 'A':
		pin_val=READ_BIT(PINA,pin);
    11f0:	e9 e3       	ldi	r30, 0x39	; 57
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	48 2f       	mov	r20, r24
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	28 2f       	mov	r18, r24
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 2e       	mov	r0, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <DIO_read_PIN+0x6e>
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	0a 94       	dec	r0
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <DIO_read_PIN+0x6a>
    120e:	84 23       	and	r24, r20
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	35 c0       	rjmp	.+106    	; 0x127e <DIO_read_PIN+0xe2>
		break;
	case 'B':
		pin_val=READ_BIT(PINB,pin);
    1214:	e6 e3       	ldi	r30, 0x36	; 54
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	48 2f       	mov	r20, r24
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	02 2e       	mov	r0, r18
    1228:	02 c0       	rjmp	.+4      	; 0x122e <DIO_read_PIN+0x92>
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	0a 94       	dec	r0
    1230:	e2 f7       	brpl	.-8      	; 0x122a <DIO_read_PIN+0x8e>
    1232:	84 23       	and	r24, r20
    1234:	89 83       	std	Y+1, r24	; 0x01
    1236:	23 c0       	rjmp	.+70     	; 0x127e <DIO_read_PIN+0xe2>
		break;
	case 'C':
		pin_val=READ_BIT(PINC,pin);
    1238:	e3 e3       	ldi	r30, 0x33	; 51
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <DIO_read_PIN+0xb6>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <DIO_read_PIN+0xb2>
    1256:	84 23       	and	r24, r20
    1258:	89 83       	std	Y+1, r24	; 0x01
    125a:	11 c0       	rjmp	.+34     	; 0x127e <DIO_read_PIN+0xe2>
		break;
	case 'D':
		pin_val=READ_BIT(PIND,pin);
    125c:	e0 e3       	ldi	r30, 0x30	; 48
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <DIO_read_PIN+0xda>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <DIO_read_PIN+0xd6>
    127a:	84 23       	and	r24, r20
    127c:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	return pin_val;
    127e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	08 95       	ret

00001290 <DIO_BIT_TOGGLE>:

void DIO_BIT_TOGGLE(uint8 portname,uint8 pin)
{
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	00 d0       	rcall	.+0      	; 0x1296 <DIO_BIT_TOGGLE+0x6>
    1296:	00 d0       	rcall	.+0      	; 0x1298 <DIO_BIT_TOGGLE+0x8>
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
    129c:	89 83       	std	Y+1, r24	; 0x01
    129e:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	3c 83       	std	Y+4, r19	; 0x04
    12a8:	2b 83       	std	Y+3, r18	; 0x03
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	82 34       	cpi	r24, 0x42	; 66
    12b0:	91 05       	cpc	r25, r1
    12b2:	51 f1       	breq	.+84     	; 0x1308 <DIO_BIT_TOGGLE+0x78>
    12b4:	2b 81       	ldd	r18, Y+3	; 0x03
    12b6:	3c 81       	ldd	r19, Y+4	; 0x04
    12b8:	23 34       	cpi	r18, 0x43	; 67
    12ba:	31 05       	cpc	r19, r1
    12bc:	34 f4       	brge	.+12     	; 0x12ca <DIO_BIT_TOGGLE+0x3a>
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	9c 81       	ldd	r25, Y+4	; 0x04
    12c2:	81 34       	cpi	r24, 0x41	; 65
    12c4:	91 05       	cpc	r25, r1
    12c6:	61 f0       	breq	.+24     	; 0x12e0 <DIO_BIT_TOGGLE+0x50>
    12c8:	5a c0       	rjmp	.+180    	; 0x137e <DIO_BIT_TOGGLE+0xee>
    12ca:	2b 81       	ldd	r18, Y+3	; 0x03
    12cc:	3c 81       	ldd	r19, Y+4	; 0x04
    12ce:	23 34       	cpi	r18, 0x43	; 67
    12d0:	31 05       	cpc	r19, r1
    12d2:	71 f1       	breq	.+92     	; 0x1330 <DIO_BIT_TOGGLE+0xa0>
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	9c 81       	ldd	r25, Y+4	; 0x04
    12d8:	84 34       	cpi	r24, 0x44	; 68
    12da:	91 05       	cpc	r25, r1
    12dc:	e9 f1       	breq	.+122    	; 0x1358 <DIO_BIT_TOGGLE+0xc8>
    12de:	4f c0       	rjmp	.+158    	; 0x137e <DIO_BIT_TOGGLE+0xee>
	{

	case 'A':
		TOGGLE_BIT(PORTA,pin);
    12e0:	ab e3       	ldi	r26, 0x3B	; 59
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	eb e3       	ldi	r30, 0x3B	; 59
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	48 2f       	mov	r20, r24
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	02 2e       	mov	r0, r18
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <DIO_BIT_TOGGLE+0x6e>
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	0a 94       	dec	r0
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <DIO_BIT_TOGGLE+0x6a>
    1302:	84 27       	eor	r24, r20
    1304:	8c 93       	st	X, r24
    1306:	3b c0       	rjmp	.+118    	; 0x137e <DIO_BIT_TOGGLE+0xee>
		break;
	case 'B':
		TOGGLE_BIT(PORTB,pin);
    1308:	a8 e3       	ldi	r26, 0x38	; 56
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e8 e3       	ldi	r30, 0x38	; 56
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	48 2f       	mov	r20, r24
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 2e       	mov	r0, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <DIO_BIT_TOGGLE+0x96>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	0a 94       	dec	r0
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <DIO_BIT_TOGGLE+0x92>
    132a:	84 27       	eor	r24, r20
    132c:	8c 93       	st	X, r24
    132e:	27 c0       	rjmp	.+78     	; 0x137e <DIO_BIT_TOGGLE+0xee>
		break;
	case 'C':
		TOGGLE_BIT(PORTC,pin);
    1330:	a5 e3       	ldi	r26, 0x35	; 53
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e5 e3       	ldi	r30, 0x35	; 53
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 2e       	mov	r0, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <DIO_BIT_TOGGLE+0xbe>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	0a 94       	dec	r0
    1350:	e2 f7       	brpl	.-8      	; 0x134a <DIO_BIT_TOGGLE+0xba>
    1352:	84 27       	eor	r24, r20
    1354:	8c 93       	st	X, r24
    1356:	13 c0       	rjmp	.+38     	; 0x137e <DIO_BIT_TOGGLE+0xee>
		break;
	case 'D':
		TOGGLE_BIT(PORTD,pin);
    1358:	a2 e3       	ldi	r26, 0x32	; 50
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	e2 e3       	ldi	r30, 0x32	; 50
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	48 2f       	mov	r20, r24
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 2e       	mov	r0, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <DIO_BIT_TOGGLE+0xe6>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	0a 94       	dec	r0
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <DIO_BIT_TOGGLE+0xe2>
    137a:	84 27       	eor	r24, r20
    137c:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <DIO_set_port_Dir>:

void DIO_set_port_Dir(uint8 portname,uint8 direction)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	00 d0       	rcall	.+0      	; 0x1392 <DIO_set_port_Dir+0x6>
    1392:	00 d0       	rcall	.+0      	; 0x1394 <DIO_set_port_Dir+0x8>
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	89 83       	std	Y+1, r24	; 0x01
    139a:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	3c 83       	std	Y+4, r19	; 0x04
    13a4:	2b 83       	std	Y+3, r18	; 0x03
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	9c 81       	ldd	r25, Y+4	; 0x04
    13aa:	82 34       	cpi	r24, 0x42	; 66
    13ac:	91 05       	cpc	r25, r1
    13ae:	11 f1       	breq	.+68     	; 0x13f4 <DIO_set_port_Dir+0x68>
    13b0:	2b 81       	ldd	r18, Y+3	; 0x03
    13b2:	3c 81       	ldd	r19, Y+4	; 0x04
    13b4:	23 34       	cpi	r18, 0x43	; 67
    13b6:	31 05       	cpc	r19, r1
    13b8:	34 f4       	brge	.+12     	; 0x13c6 <DIO_set_port_Dir+0x3a>
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	9c 81       	ldd	r25, Y+4	; 0x04
    13be:	81 34       	cpi	r24, 0x41	; 65
    13c0:	91 05       	cpc	r25, r1
    13c2:	61 f0       	breq	.+24     	; 0x13dc <DIO_set_port_Dir+0x50>
    13c4:	3a c0       	rjmp	.+116    	; 0x143a <DIO_set_port_Dir+0xae>
    13c6:	2b 81       	ldd	r18, Y+3	; 0x03
    13c8:	3c 81       	ldd	r19, Y+4	; 0x04
    13ca:	23 34       	cpi	r18, 0x43	; 67
    13cc:	31 05       	cpc	r19, r1
    13ce:	f1 f0       	breq	.+60     	; 0x140c <DIO_set_port_Dir+0x80>
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	9c 81       	ldd	r25, Y+4	; 0x04
    13d4:	84 34       	cpi	r24, 0x44	; 68
    13d6:	91 05       	cpc	r25, r1
    13d8:	29 f1       	breq	.+74     	; 0x1424 <DIO_set_port_Dir+0x98>
    13da:	2f c0       	rjmp	.+94     	; 0x143a <DIO_set_port_Dir+0xae>
	{
	case 'A':
		if(direction==1)
    13dc:	8a 81       	ldd	r24, Y+2	; 0x02
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	29 f4       	brne	.+10     	; 0x13ec <DIO_set_port_Dir+0x60>
		{
			DDRA=0xFF;
    13e2:	ea e3       	ldi	r30, 0x3A	; 58
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	8f ef       	ldi	r24, 0xFF	; 255
    13e8:	80 83       	st	Z, r24
    13ea:	27 c0       	rjmp	.+78     	; 0x143a <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRA=0;
    13ec:	ea e3       	ldi	r30, 0x3A	; 58
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	10 82       	st	Z, r1
    13f2:	23 c0       	rjmp	.+70     	; 0x143a <DIO_set_port_Dir+0xae>
		}
		break;
	case 'B':
		if(direction==1)
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	29 f4       	brne	.+10     	; 0x1404 <DIO_set_port_Dir+0x78>
		{
			DDRB=0xFF;
    13fa:	e7 e3       	ldi	r30, 0x37	; 55
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	8f ef       	ldi	r24, 0xFF	; 255
    1400:	80 83       	st	Z, r24
    1402:	1b c0       	rjmp	.+54     	; 0x143a <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRB=0;
    1404:	e7 e3       	ldi	r30, 0x37	; 55
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	10 82       	st	Z, r1
    140a:	17 c0       	rjmp	.+46     	; 0x143a <DIO_set_port_Dir+0xae>
		}
		break;
	case 'C':
		if(direction==1)
    140c:	8a 81       	ldd	r24, Y+2	; 0x02
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	29 f4       	brne	.+10     	; 0x141c <DIO_set_port_Dir+0x90>
		{
			DDRC=0XFF;
    1412:	e4 e3       	ldi	r30, 0x34	; 52
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	8f ef       	ldi	r24, 0xFF	; 255
    1418:	80 83       	st	Z, r24
    141a:	0f c0       	rjmp	.+30     	; 0x143a <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRC=0;
    141c:	e4 e3       	ldi	r30, 0x34	; 52
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	10 82       	st	Z, r1
    1422:	0b c0       	rjmp	.+22     	; 0x143a <DIO_set_port_Dir+0xae>
		}
		break;
	case 'D':
		if(direction==1)
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	81 30       	cpi	r24, 0x01	; 1
    1428:	29 f4       	brne	.+10     	; 0x1434 <DIO_set_port_Dir+0xa8>
		{
			DDRD=0XFF;
    142a:	e1 e3       	ldi	r30, 0x31	; 49
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	8f ef       	ldi	r24, 0xFF	; 255
    1430:	80 83       	st	Z, r24
    1432:	03 c0       	rjmp	.+6      	; 0x143a <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRD=0;
    1434:	e1 e3       	ldi	r30, 0x31	; 49
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	10 82       	st	Z, r1
		}
		break;
	default:
		break;
	}
}
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <DIO_write_port>:

void DIO_write_port(uint8 portname,uint8 portvalue)
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	00 d0       	rcall	.+0      	; 0x144e <DIO_write_port+0x6>
    144e:	00 d0       	rcall	.+0      	; 0x1450 <DIO_write_port+0x8>
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	89 83       	std	Y+1, r24	; 0x01
    1456:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	3c 83       	std	Y+4, r19	; 0x04
    1460:	2b 83       	std	Y+3, r18	; 0x03
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	9c 81       	ldd	r25, Y+4	; 0x04
    1466:	82 34       	cpi	r24, 0x42	; 66
    1468:	91 05       	cpc	r25, r1
    146a:	d9 f0       	breq	.+54     	; 0x14a2 <DIO_write_port+0x5a>
    146c:	2b 81       	ldd	r18, Y+3	; 0x03
    146e:	3c 81       	ldd	r19, Y+4	; 0x04
    1470:	23 34       	cpi	r18, 0x43	; 67
    1472:	31 05       	cpc	r19, r1
    1474:	34 f4       	brge	.+12     	; 0x1482 <DIO_write_port+0x3a>
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	9c 81       	ldd	r25, Y+4	; 0x04
    147a:	81 34       	cpi	r24, 0x41	; 65
    147c:	91 05       	cpc	r25, r1
    147e:	61 f0       	breq	.+24     	; 0x1498 <DIO_write_port+0x50>
    1480:	1e c0       	rjmp	.+60     	; 0x14be <DIO_write_port+0x76>
    1482:	2b 81       	ldd	r18, Y+3	; 0x03
    1484:	3c 81       	ldd	r19, Y+4	; 0x04
    1486:	23 34       	cpi	r18, 0x43	; 67
    1488:	31 05       	cpc	r19, r1
    148a:	81 f0       	breq	.+32     	; 0x14ac <DIO_write_port+0x64>
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	9c 81       	ldd	r25, Y+4	; 0x04
    1490:	84 34       	cpi	r24, 0x44	; 68
    1492:	91 05       	cpc	r25, r1
    1494:	81 f0       	breq	.+32     	; 0x14b6 <DIO_write_port+0x6e>
    1496:	13 c0       	rjmp	.+38     	; 0x14be <DIO_write_port+0x76>
	{
	case 'A':
		PORTA=portvalue;
    1498:	eb e3       	ldi	r30, 0x3B	; 59
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	80 83       	st	Z, r24
    14a0:	0e c0       	rjmp	.+28     	; 0x14be <DIO_write_port+0x76>
		break;
	case 'B':
		PORTB=portvalue;
    14a2:	e8 e3       	ldi	r30, 0x38	; 56
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	80 83       	st	Z, r24
    14aa:	09 c0       	rjmp	.+18     	; 0x14be <DIO_write_port+0x76>
		break;
	case 'C':
		PORTC=portvalue;
    14ac:	e5 e3       	ldi	r30, 0x35	; 53
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	80 83       	st	Z, r24
    14b4:	04 c0       	rjmp	.+8      	; 0x14be <DIO_write_port+0x76>
		break;
	case 'D':
		PORTD=portvalue;
    14b6:	e2 e3       	ldi	r30, 0x32	; 50
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	80 83       	st	Z, r24
	}
}
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	cf 91       	pop	r28
    14c8:	df 91       	pop	r29
    14ca:	08 95       	ret

000014cc <DIO_read_port>:

uint8 DIO_read_port(uint8 portname)
{
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <DIO_read_port+0x6>
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <DIO_read_port+0x8>
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_val=0;
    14da:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	3c 83       	std	Y+4, r19	; 0x04
    14e4:	2b 83       	std	Y+3, r18	; 0x03
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ea:	82 34       	cpi	r24, 0x42	; 66
    14ec:	91 05       	cpc	r25, r1
    14ee:	d9 f0       	breq	.+54     	; 0x1526 <DIO_read_port+0x5a>
    14f0:	2b 81       	ldd	r18, Y+3	; 0x03
    14f2:	3c 81       	ldd	r19, Y+4	; 0x04
    14f4:	23 34       	cpi	r18, 0x43	; 67
    14f6:	31 05       	cpc	r19, r1
    14f8:	34 f4       	brge	.+12     	; 0x1506 <DIO_read_port+0x3a>
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	9c 81       	ldd	r25, Y+4	; 0x04
    14fe:	81 34       	cpi	r24, 0x41	; 65
    1500:	91 05       	cpc	r25, r1
    1502:	61 f0       	breq	.+24     	; 0x151c <DIO_read_port+0x50>
    1504:	1e c0       	rjmp	.+60     	; 0x1542 <DIO_read_port+0x76>
    1506:	2b 81       	ldd	r18, Y+3	; 0x03
    1508:	3c 81       	ldd	r19, Y+4	; 0x04
    150a:	23 34       	cpi	r18, 0x43	; 67
    150c:	31 05       	cpc	r19, r1
    150e:	81 f0       	breq	.+32     	; 0x1530 <DIO_read_port+0x64>
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	84 34       	cpi	r24, 0x44	; 68
    1516:	91 05       	cpc	r25, r1
    1518:	81 f0       	breq	.+32     	; 0x153a <DIO_read_port+0x6e>
    151a:	13 c0       	rjmp	.+38     	; 0x1542 <DIO_read_port+0x76>
	{

	case 'A':
		port_val=PINA;
    151c:	e9 e3       	ldi	r30, 0x39	; 57
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	0e c0       	rjmp	.+28     	; 0x1542 <DIO_read_port+0x76>
		break;
	case 'B':
		port_val=PINB;
    1526:	e6 e3       	ldi	r30, 0x36	; 54
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	89 83       	std	Y+1, r24	; 0x01
    152e:	09 c0       	rjmp	.+18     	; 0x1542 <DIO_read_port+0x76>
		break;
	case 'C':
		port_val=PINC;
    1530:	e3 e3       	ldi	r30, 0x33	; 51
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	89 83       	std	Y+1, r24	; 0x01
    1538:	04 c0       	rjmp	.+8      	; 0x1542 <DIO_read_port+0x76>
		break;
	case 'D':
		port_val=PIND;
    153a:	e0 e3       	ldi	r30, 0x30	; 48
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	return port_val;
    1542:	89 81       	ldd	r24, Y+1	; 0x01
}
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <DIO_enablePullup_pin>:

void DIO_enablePullup_pin(uint8 portname,uint8 pin,uint8 status)
{
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	00 d0       	rcall	.+0      	; 0x1558 <DIO_enablePullup_pin+0x6>
    1558:	00 d0       	rcall	.+0      	; 0x155a <DIO_enablePullup_pin+0x8>
    155a:	0f 92       	push	r0
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	89 83       	std	Y+1, r24	; 0x01
    1562:	6a 83       	std	Y+2, r22	; 0x02
    1564:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	3d 83       	std	Y+5, r19	; 0x05
    156e:	2c 83       	std	Y+4, r18	; 0x04
    1570:	8c 81       	ldd	r24, Y+4	; 0x04
    1572:	9d 81       	ldd	r25, Y+5	; 0x05
    1574:	82 34       	cpi	r24, 0x42	; 66
    1576:	91 05       	cpc	r25, r1
    1578:	09 f4       	brne	.+2      	; 0x157c <DIO_enablePullup_pin+0x2a>
    157a:	44 c0       	rjmp	.+136    	; 0x1604 <DIO_enablePullup_pin+0xb2>
    157c:	2c 81       	ldd	r18, Y+4	; 0x04
    157e:	3d 81       	ldd	r19, Y+5	; 0x05
    1580:	23 34       	cpi	r18, 0x43	; 67
    1582:	31 05       	cpc	r19, r1
    1584:	34 f4       	brge	.+12     	; 0x1592 <DIO_enablePullup_pin+0x40>
    1586:	8c 81       	ldd	r24, Y+4	; 0x04
    1588:	9d 81       	ldd	r25, Y+5	; 0x05
    158a:	81 34       	cpi	r24, 0x41	; 65
    158c:	91 05       	cpc	r25, r1
    158e:	71 f0       	breq	.+28     	; 0x15ac <DIO_enablePullup_pin+0x5a>
    1590:	bc c0       	rjmp	.+376    	; 0x170a <DIO_enablePullup_pin+0x1b8>
    1592:	2c 81       	ldd	r18, Y+4	; 0x04
    1594:	3d 81       	ldd	r19, Y+5	; 0x05
    1596:	23 34       	cpi	r18, 0x43	; 67
    1598:	31 05       	cpc	r19, r1
    159a:	09 f4       	brne	.+2      	; 0x159e <DIO_enablePullup_pin+0x4c>
    159c:	5f c0       	rjmp	.+190    	; 0x165c <DIO_enablePullup_pin+0x10a>
    159e:	8c 81       	ldd	r24, Y+4	; 0x04
    15a0:	9d 81       	ldd	r25, Y+5	; 0x05
    15a2:	84 34       	cpi	r24, 0x44	; 68
    15a4:	91 05       	cpc	r25, r1
    15a6:	09 f4       	brne	.+2      	; 0x15aa <DIO_enablePullup_pin+0x58>
    15a8:	85 c0       	rjmp	.+266    	; 0x16b4 <DIO_enablePullup_pin+0x162>
    15aa:	af c0       	rjmp	.+350    	; 0x170a <DIO_enablePullup_pin+0x1b8>
	{
	case 'A':
		if(status==1)
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	81 30       	cpi	r24, 0x01	; 1
    15b0:	a1 f4       	brne	.+40     	; 0x15da <DIO_enablePullup_pin+0x88>
		{
			SET_BIT(PORTA,pin);
    15b2:	ab e3       	ldi	r26, 0x3B	; 59
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	eb e3       	ldi	r30, 0x3B	; 59
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	48 2f       	mov	r20, r24
    15be:	8a 81       	ldd	r24, Y+2	; 0x02
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	02 2e       	mov	r0, r18
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <DIO_enablePullup_pin+0x7e>
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	0a 94       	dec	r0
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <DIO_enablePullup_pin+0x7a>
    15d4:	84 2b       	or	r24, r20
    15d6:	8c 93       	st	X, r24
    15d8:	98 c0       	rjmp	.+304    	; 0x170a <DIO_enablePullup_pin+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
    15da:	ab e3       	ldi	r26, 0x3B	; 59
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	eb e3       	ldi	r30, 0x3B	; 59
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	48 2f       	mov	r20, r24
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	02 2e       	mov	r0, r18
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <DIO_enablePullup_pin+0xa6>
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	0a 94       	dec	r0
    15fa:	e2 f7       	brpl	.-8      	; 0x15f4 <DIO_enablePullup_pin+0xa2>
    15fc:	80 95       	com	r24
    15fe:	84 23       	and	r24, r20
    1600:	8c 93       	st	X, r24
    1602:	83 c0       	rjmp	.+262    	; 0x170a <DIO_enablePullup_pin+0x1b8>
		}
		break;
	case 'B':
		if(status==1)
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	a1 f4       	brne	.+40     	; 0x1632 <DIO_enablePullup_pin+0xe0>
				{
					SET_BIT(PORTB,pin);
    160a:	a8 e3       	ldi	r26, 0x38	; 56
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e8 e3       	ldi	r30, 0x38	; 56
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	48 2f       	mov	r20, r24
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	02 2e       	mov	r0, r18
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <DIO_enablePullup_pin+0xd6>
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	0a 94       	dec	r0
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <DIO_enablePullup_pin+0xd2>
    162c:	84 2b       	or	r24, r20
    162e:	8c 93       	st	X, r24
    1630:	6c c0       	rjmp	.+216    	; 0x170a <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTB,pin);
    1632:	a8 e3       	ldi	r26, 0x38	; 56
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e8 e3       	ldi	r30, 0x38	; 56
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	48 2f       	mov	r20, r24
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	02 2e       	mov	r0, r18
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <DIO_enablePullup_pin+0xfe>
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	0a 94       	dec	r0
    1652:	e2 f7       	brpl	.-8      	; 0x164c <DIO_enablePullup_pin+0xfa>
    1654:	80 95       	com	r24
    1656:	84 23       	and	r24, r20
    1658:	8c 93       	st	X, r24
    165a:	57 c0       	rjmp	.+174    	; 0x170a <DIO_enablePullup_pin+0x1b8>
				}
				break;
	case 'C':
		if(status==1)
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	a1 f4       	brne	.+40     	; 0x168a <DIO_enablePullup_pin+0x138>
				{
					SET_BIT(PORTC,pin);
    1662:	a5 e3       	ldi	r26, 0x35	; 53
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e5 e3       	ldi	r30, 0x35	; 53
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	48 2f       	mov	r20, r24
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	28 2f       	mov	r18, r24
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	02 2e       	mov	r0, r18
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <DIO_enablePullup_pin+0x12e>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	0a 94       	dec	r0
    1682:	e2 f7       	brpl	.-8      	; 0x167c <DIO_enablePullup_pin+0x12a>
    1684:	84 2b       	or	r24, r20
    1686:	8c 93       	st	X, r24
    1688:	40 c0       	rjmp	.+128    	; 0x170a <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTC,pin);
    168a:	a5 e3       	ldi	r26, 0x35	; 53
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e5 e3       	ldi	r30, 0x35	; 53
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	48 2f       	mov	r20, r24
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	02 2e       	mov	r0, r18
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <DIO_enablePullup_pin+0x156>
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	0a 94       	dec	r0
    16aa:	e2 f7       	brpl	.-8      	; 0x16a4 <DIO_enablePullup_pin+0x152>
    16ac:	80 95       	com	r24
    16ae:	84 23       	and	r24, r20
    16b0:	8c 93       	st	X, r24
    16b2:	2b c0       	rjmp	.+86     	; 0x170a <DIO_enablePullup_pin+0x1b8>
				}
				break;
	case 'D':
		if(status==1)
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	81 30       	cpi	r24, 0x01	; 1
    16b8:	a1 f4       	brne	.+40     	; 0x16e2 <DIO_enablePullup_pin+0x190>
				{
					SET_BIT(PORTD,pin);
    16ba:	a2 e3       	ldi	r26, 0x32	; 50
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	e2 e3       	ldi	r30, 0x32	; 50
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <DIO_enablePullup_pin+0x186>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <DIO_enablePullup_pin+0x182>
    16dc:	84 2b       	or	r24, r20
    16de:	8c 93       	st	X, r24
    16e0:	14 c0       	rjmp	.+40     	; 0x170a <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTD,pin);
    16e2:	a2 e3       	ldi	r26, 0x32	; 50
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e2 e3       	ldi	r30, 0x32	; 50
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	48 2f       	mov	r20, r24
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 2e       	mov	r0, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <DIO_enablePullup_pin+0x1ae>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	0a 94       	dec	r0
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <DIO_enablePullup_pin+0x1aa>
    1704:	80 95       	com	r24
    1706:	84 23       	and	r24, r20
    1708:	8c 93       	st	X, r24
				}
				break;
	}
}
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <DIO_write_low_nibble>:

void DIO_write_low_nibble(uint8 portname,uint8 value)
{
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	00 d0       	rcall	.+0      	; 0x1720 <DIO_write_low_nibble+0x6>
    1720:	00 d0       	rcall	.+0      	; 0x1722 <DIO_write_low_nibble+0x8>
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	89 83       	std	Y+1, r24	; 0x01
    1728:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	8f 70       	andi	r24, 0x0F	; 15
    172e:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	3c 83       	std	Y+4, r19	; 0x04
    1738:	2b 83       	std	Y+3, r18	; 0x03
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	82 34       	cpi	r24, 0x42	; 66
    1740:	91 05       	cpc	r25, r1
    1742:	31 f1       	breq	.+76     	; 0x1790 <DIO_write_low_nibble+0x76>
    1744:	2b 81       	ldd	r18, Y+3	; 0x03
    1746:	3c 81       	ldd	r19, Y+4	; 0x04
    1748:	23 34       	cpi	r18, 0x43	; 67
    174a:	31 05       	cpc	r19, r1
    174c:	34 f4       	brge	.+12     	; 0x175a <DIO_write_low_nibble+0x40>
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	9c 81       	ldd	r25, Y+4	; 0x04
    1752:	81 34       	cpi	r24, 0x41	; 65
    1754:	91 05       	cpc	r25, r1
    1756:	61 f0       	breq	.+24     	; 0x1770 <DIO_write_low_nibble+0x56>
    1758:	4a c0       	rjmp	.+148    	; 0x17ee <DIO_write_low_nibble+0xd4>
    175a:	2b 81       	ldd	r18, Y+3	; 0x03
    175c:	3c 81       	ldd	r19, Y+4	; 0x04
    175e:	23 34       	cpi	r18, 0x43	; 67
    1760:	31 05       	cpc	r19, r1
    1762:	31 f1       	breq	.+76     	; 0x17b0 <DIO_write_low_nibble+0x96>
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	9c 81       	ldd	r25, Y+4	; 0x04
    1768:	84 34       	cpi	r24, 0x44	; 68
    176a:	91 05       	cpc	r25, r1
    176c:	89 f1       	breq	.+98     	; 0x17d0 <DIO_write_low_nibble+0xb6>
    176e:	3f c0       	rjmp	.+126    	; 0x17ee <DIO_write_low_nibble+0xd4>
	{
	case 'A':
		PORTA&=0xf0;
    1770:	ab e3       	ldi	r26, 0x3B	; 59
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	eb e3       	ldi	r30, 0x3B	; 59
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	80 7f       	andi	r24, 0xF0	; 240
    177c:	8c 93       	st	X, r24
		PORTA|=value;
    177e:	ab e3       	ldi	r26, 0x3B	; 59
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	eb e3       	ldi	r30, 0x3B	; 59
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	90 81       	ld	r25, Z
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	89 2b       	or	r24, r25
    178c:	8c 93       	st	X, r24
    178e:	2f c0       	rjmp	.+94     	; 0x17ee <DIO_write_low_nibble+0xd4>
		break;
	case 'B':
		PORTB&=0xf0;
    1790:	a8 e3       	ldi	r26, 0x38	; 56
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e8 e3       	ldi	r30, 0x38	; 56
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	80 7f       	andi	r24, 0xF0	; 240
    179c:	8c 93       	st	X, r24
		PORTA|=value;
    179e:	ab e3       	ldi	r26, 0x3B	; 59
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	eb e3       	ldi	r30, 0x3B	; 59
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	90 81       	ld	r25, Z
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	89 2b       	or	r24, r25
    17ac:	8c 93       	st	X, r24
    17ae:	1f c0       	rjmp	.+62     	; 0x17ee <DIO_write_low_nibble+0xd4>
		break;
	case 'C':
		PORTC&=0xf0;
    17b0:	a5 e3       	ldi	r26, 0x35	; 53
    17b2:	b0 e0       	ldi	r27, 0x00	; 0
    17b4:	e5 e3       	ldi	r30, 0x35	; 53
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	80 7f       	andi	r24, 0xF0	; 240
    17bc:	8c 93       	st	X, r24
		PORTA|=value;
    17be:	ab e3       	ldi	r26, 0x3B	; 59
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	eb e3       	ldi	r30, 0x3B	; 59
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	90 81       	ld	r25, Z
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	89 2b       	or	r24, r25
    17cc:	8c 93       	st	X, r24
    17ce:	0f c0       	rjmp	.+30     	; 0x17ee <DIO_write_low_nibble+0xd4>
		break;
	case 'D':
		PORTD&=0xf0;
    17d0:	a2 e3       	ldi	r26, 0x32	; 50
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e2 e3       	ldi	r30, 0x32	; 50
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	80 81       	ld	r24, Z
    17da:	80 7f       	andi	r24, 0xF0	; 240
    17dc:	8c 93       	st	X, r24
		PORTD|=value;
    17de:	a2 e3       	ldi	r26, 0x32	; 50
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	e2 e3       	ldi	r30, 0x32	; 50
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	90 81       	ld	r25, Z
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	89 2b       	or	r24, r25
    17ec:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <DIO_set_low_nibble>:

void DIO_set_low_nibble(uint8 portname)
{
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	00 d0       	rcall	.+0      	; 0x1802 <DIO_set_low_nibble+0x6>
    1802:	0f 92       	push	r0
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    180a:	89 81       	ldd	r24, Y+1	; 0x01
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	3b 83       	std	Y+3, r19	; 0x03
    1812:	2a 83       	std	Y+2, r18	; 0x02
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	9b 81       	ldd	r25, Y+3	; 0x03
    1818:	82 34       	cpi	r24, 0x42	; 66
    181a:	91 05       	cpc	r25, r1
    181c:	f1 f0       	breq	.+60     	; 0x185a <DIO_set_low_nibble+0x5e>
    181e:	2a 81       	ldd	r18, Y+2	; 0x02
    1820:	3b 81       	ldd	r19, Y+3	; 0x03
    1822:	23 34       	cpi	r18, 0x43	; 67
    1824:	31 05       	cpc	r19, r1
    1826:	34 f4       	brge	.+12     	; 0x1834 <DIO_set_low_nibble+0x38>
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	9b 81       	ldd	r25, Y+3	; 0x03
    182c:	81 34       	cpi	r24, 0x41	; 65
    182e:	91 05       	cpc	r25, r1
    1830:	61 f0       	breq	.+24     	; 0x184a <DIO_set_low_nibble+0x4e>
    1832:	2a c0       	rjmp	.+84     	; 0x1888 <DIO_set_low_nibble+0x8c>
    1834:	2a 81       	ldd	r18, Y+2	; 0x02
    1836:	3b 81       	ldd	r19, Y+3	; 0x03
    1838:	23 34       	cpi	r18, 0x43	; 67
    183a:	31 05       	cpc	r19, r1
    183c:	b1 f0       	breq	.+44     	; 0x186a <DIO_set_low_nibble+0x6e>
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	9b 81       	ldd	r25, Y+3	; 0x03
    1842:	84 34       	cpi	r24, 0x44	; 68
    1844:	91 05       	cpc	r25, r1
    1846:	c9 f0       	breq	.+50     	; 0x187a <DIO_set_low_nibble+0x7e>
    1848:	1f c0       	rjmp	.+62     	; 0x1888 <DIO_set_low_nibble+0x8c>
	{
	case 'A':
		PORTA|=0x0f;
    184a:	ab e3       	ldi	r26, 0x3B	; 59
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	eb e3       	ldi	r30, 0x3B	; 59
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	8f 60       	ori	r24, 0x0F	; 15
    1856:	8c 93       	st	X, r24
    1858:	17 c0       	rjmp	.+46     	; 0x1888 <DIO_set_low_nibble+0x8c>
		break;
	case 'B':
		PORTB|=0x0f;
    185a:	a8 e3       	ldi	r26, 0x38	; 56
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e8 e3       	ldi	r30, 0x38	; 56
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	8f 60       	ori	r24, 0x0F	; 15
    1866:	8c 93       	st	X, r24
    1868:	0f c0       	rjmp	.+30     	; 0x1888 <DIO_set_low_nibble+0x8c>
		break;
	case 'C':
		PORTC|=0x0f;
    186a:	a5 e3       	ldi	r26, 0x35	; 53
    186c:	b0 e0       	ldi	r27, 0x00	; 0
    186e:	e5 e3       	ldi	r30, 0x35	; 53
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	80 81       	ld	r24, Z
    1874:	8f 60       	ori	r24, 0x0F	; 15
    1876:	8c 93       	st	X, r24
    1878:	07 c0       	rjmp	.+14     	; 0x1888 <DIO_set_low_nibble+0x8c>
		break;
	case 'D':
		PORTD|=0x0f;
    187a:	a2 e3       	ldi	r26, 0x32	; 50
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e2 e3       	ldi	r30, 0x32	; 50
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	8f 60       	ori	r24, 0x0F	; 15
    1886:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	cf 91       	pop	r28
    1890:	df 91       	pop	r29
    1892:	08 95       	ret

00001894 <DIO_clear_low_nibble>:

void DIO_clear_low_nibble(uint8 portname)
{
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	00 d0       	rcall	.+0      	; 0x189a <DIO_clear_low_nibble+0x6>
    189a:	0f 92       	push	r0
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	3b 83       	std	Y+3, r19	; 0x03
    18aa:	2a 83       	std	Y+2, r18	; 0x02
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	9b 81       	ldd	r25, Y+3	; 0x03
    18b0:	82 34       	cpi	r24, 0x42	; 66
    18b2:	91 05       	cpc	r25, r1
    18b4:	f1 f0       	breq	.+60     	; 0x18f2 <DIO_clear_low_nibble+0x5e>
    18b6:	2a 81       	ldd	r18, Y+2	; 0x02
    18b8:	3b 81       	ldd	r19, Y+3	; 0x03
    18ba:	23 34       	cpi	r18, 0x43	; 67
    18bc:	31 05       	cpc	r19, r1
    18be:	34 f4       	brge	.+12     	; 0x18cc <DIO_clear_low_nibble+0x38>
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	9b 81       	ldd	r25, Y+3	; 0x03
    18c4:	81 34       	cpi	r24, 0x41	; 65
    18c6:	91 05       	cpc	r25, r1
    18c8:	61 f0       	breq	.+24     	; 0x18e2 <DIO_clear_low_nibble+0x4e>
    18ca:	2a c0       	rjmp	.+84     	; 0x1920 <DIO_clear_low_nibble+0x8c>
    18cc:	2a 81       	ldd	r18, Y+2	; 0x02
    18ce:	3b 81       	ldd	r19, Y+3	; 0x03
    18d0:	23 34       	cpi	r18, 0x43	; 67
    18d2:	31 05       	cpc	r19, r1
    18d4:	b1 f0       	breq	.+44     	; 0x1902 <DIO_clear_low_nibble+0x6e>
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	9b 81       	ldd	r25, Y+3	; 0x03
    18da:	84 34       	cpi	r24, 0x44	; 68
    18dc:	91 05       	cpc	r25, r1
    18de:	c9 f0       	breq	.+50     	; 0x1912 <DIO_clear_low_nibble+0x7e>
    18e0:	1f c0       	rjmp	.+62     	; 0x1920 <DIO_clear_low_nibble+0x8c>
	{
	case 'A':
		PORTA&=~(0x0f);
    18e2:	ab e3       	ldi	r26, 0x3B	; 59
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	eb e3       	ldi	r30, 0x3B	; 59
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	80 7f       	andi	r24, 0xF0	; 240
    18ee:	8c 93       	st	X, r24
    18f0:	17 c0       	rjmp	.+46     	; 0x1920 <DIO_clear_low_nibble+0x8c>
		break;
	case 'B':
		PORTB&=~(0x0f);
    18f2:	a8 e3       	ldi	r26, 0x38	; 56
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	e8 e3       	ldi	r30, 0x38	; 56
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	80 7f       	andi	r24, 0xF0	; 240
    18fe:	8c 93       	st	X, r24
    1900:	0f c0       	rjmp	.+30     	; 0x1920 <DIO_clear_low_nibble+0x8c>
		break;
	case 'C':
		PORTC&=~(0x0f);
    1902:	a5 e3       	ldi	r26, 0x35	; 53
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e5 e3       	ldi	r30, 0x35	; 53
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	80 7f       	andi	r24, 0xF0	; 240
    190e:	8c 93       	st	X, r24
    1910:	07 c0       	rjmp	.+14     	; 0x1920 <DIO_clear_low_nibble+0x8c>
		break;
	case 'D':
		PORTD&=~(0x0f);
    1912:	a2 e3       	ldi	r26, 0x32	; 50
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e2 e3       	ldi	r30, 0x32	; 50
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	80 7f       	andi	r24, 0xF0	; 240
    191e:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <DIO_set_high_nibble>:

void DIO_set_high_nibble(uint8 portname)
{
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	00 d0       	rcall	.+0      	; 0x1932 <DIO_set_high_nibble+0x6>
    1932:	0f 92       	push	r0
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	3b 83       	std	Y+3, r19	; 0x03
    1942:	2a 83       	std	Y+2, r18	; 0x02
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	9b 81       	ldd	r25, Y+3	; 0x03
    1948:	82 34       	cpi	r24, 0x42	; 66
    194a:	91 05       	cpc	r25, r1
    194c:	f1 f0       	breq	.+60     	; 0x198a <DIO_set_high_nibble+0x5e>
    194e:	2a 81       	ldd	r18, Y+2	; 0x02
    1950:	3b 81       	ldd	r19, Y+3	; 0x03
    1952:	23 34       	cpi	r18, 0x43	; 67
    1954:	31 05       	cpc	r19, r1
    1956:	34 f4       	brge	.+12     	; 0x1964 <DIO_set_high_nibble+0x38>
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	9b 81       	ldd	r25, Y+3	; 0x03
    195c:	81 34       	cpi	r24, 0x41	; 65
    195e:	91 05       	cpc	r25, r1
    1960:	61 f0       	breq	.+24     	; 0x197a <DIO_set_high_nibble+0x4e>
    1962:	2a c0       	rjmp	.+84     	; 0x19b8 <DIO_set_high_nibble+0x8c>
    1964:	2a 81       	ldd	r18, Y+2	; 0x02
    1966:	3b 81       	ldd	r19, Y+3	; 0x03
    1968:	23 34       	cpi	r18, 0x43	; 67
    196a:	31 05       	cpc	r19, r1
    196c:	b1 f0       	breq	.+44     	; 0x199a <DIO_set_high_nibble+0x6e>
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	9b 81       	ldd	r25, Y+3	; 0x03
    1972:	84 34       	cpi	r24, 0x44	; 68
    1974:	91 05       	cpc	r25, r1
    1976:	c9 f0       	breq	.+50     	; 0x19aa <DIO_set_high_nibble+0x7e>
    1978:	1f c0       	rjmp	.+62     	; 0x19b8 <DIO_set_high_nibble+0x8c>
	{
	case 'A':
		PORTA|=0xf0;
    197a:	ab e3       	ldi	r26, 0x3B	; 59
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	eb e3       	ldi	r30, 0x3B	; 59
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	80 6f       	ori	r24, 0xF0	; 240
    1986:	8c 93       	st	X, r24
    1988:	17 c0       	rjmp	.+46     	; 0x19b8 <DIO_set_high_nibble+0x8c>
		break;
	case 'B':
		PORTB|=0xf0;
    198a:	a8 e3       	ldi	r26, 0x38	; 56
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	e8 e3       	ldi	r30, 0x38	; 56
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	80 6f       	ori	r24, 0xF0	; 240
    1996:	8c 93       	st	X, r24
    1998:	0f c0       	rjmp	.+30     	; 0x19b8 <DIO_set_high_nibble+0x8c>
		break;
	case 'C':
		PORTC|=0xf0;
    199a:	a5 e3       	ldi	r26, 0x35	; 53
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e5 e3       	ldi	r30, 0x35	; 53
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	80 6f       	ori	r24, 0xF0	; 240
    19a6:	8c 93       	st	X, r24
    19a8:	07 c0       	rjmp	.+14     	; 0x19b8 <DIO_set_high_nibble+0x8c>
		break;
	case 'D':
		PORTD|=0xf0;
    19aa:	a2 e3       	ldi	r26, 0x32	; 50
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	e2 e3       	ldi	r30, 0x32	; 50
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	80 6f       	ori	r24, 0xF0	; 240
    19b6:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <DIO_clear_high_nibble>:

void DIO_clear_high_nibble(uint8 portname)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <DIO_clear_high_nibble+0x6>
    19ca:	0f 92       	push	r0
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	3b 83       	std	Y+3, r19	; 0x03
    19da:	2a 83       	std	Y+2, r18	; 0x02
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	9b 81       	ldd	r25, Y+3	; 0x03
    19e0:	82 34       	cpi	r24, 0x42	; 66
    19e2:	91 05       	cpc	r25, r1
    19e4:	f1 f0       	breq	.+60     	; 0x1a22 <DIO_clear_high_nibble+0x5e>
    19e6:	2a 81       	ldd	r18, Y+2	; 0x02
    19e8:	3b 81       	ldd	r19, Y+3	; 0x03
    19ea:	23 34       	cpi	r18, 0x43	; 67
    19ec:	31 05       	cpc	r19, r1
    19ee:	34 f4       	brge	.+12     	; 0x19fc <DIO_clear_high_nibble+0x38>
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	9b 81       	ldd	r25, Y+3	; 0x03
    19f4:	81 34       	cpi	r24, 0x41	; 65
    19f6:	91 05       	cpc	r25, r1
    19f8:	61 f0       	breq	.+24     	; 0x1a12 <DIO_clear_high_nibble+0x4e>
    19fa:	2a c0       	rjmp	.+84     	; 0x1a50 <DIO_clear_high_nibble+0x8c>
    19fc:	2a 81       	ldd	r18, Y+2	; 0x02
    19fe:	3b 81       	ldd	r19, Y+3	; 0x03
    1a00:	23 34       	cpi	r18, 0x43	; 67
    1a02:	31 05       	cpc	r19, r1
    1a04:	b1 f0       	breq	.+44     	; 0x1a32 <DIO_clear_high_nibble+0x6e>
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	9b 81       	ldd	r25, Y+3	; 0x03
    1a0a:	84 34       	cpi	r24, 0x44	; 68
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	c9 f0       	breq	.+50     	; 0x1a42 <DIO_clear_high_nibble+0x7e>
    1a10:	1f c0       	rjmp	.+62     	; 0x1a50 <DIO_clear_high_nibble+0x8c>
	{
	case 'A':
		PORTA&=~(0xf0);
    1a12:	ab e3       	ldi	r26, 0x3B	; 59
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	eb e3       	ldi	r30, 0x3B	; 59
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	8f 70       	andi	r24, 0x0F	; 15
    1a1e:	8c 93       	st	X, r24
    1a20:	17 c0       	rjmp	.+46     	; 0x1a50 <DIO_clear_high_nibble+0x8c>
		break;
	case 'B':
		PORTB&=~(0xf0);
    1a22:	a8 e3       	ldi	r26, 0x38	; 56
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	e8 e3       	ldi	r30, 0x38	; 56
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	8f 70       	andi	r24, 0x0F	; 15
    1a2e:	8c 93       	st	X, r24
    1a30:	0f c0       	rjmp	.+30     	; 0x1a50 <DIO_clear_high_nibble+0x8c>
		break;
	case 'C':
		PORTC&=~(0xf0);
    1a32:	a5 e3       	ldi	r26, 0x35	; 53
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e5 e3       	ldi	r30, 0x35	; 53
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	8f 70       	andi	r24, 0x0F	; 15
    1a3e:	8c 93       	st	X, r24
    1a40:	07 c0       	rjmp	.+14     	; 0x1a50 <DIO_clear_high_nibble+0x8c>
		break;
	case 'D':
		PORTD&=~(0xf0);
    1a42:	a2 e3       	ldi	r26, 0x32	; 50
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e2 e3       	ldi	r30, 0x32	; 50
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	8f 70       	andi	r24, 0x0F	; 15
    1a4e:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1a50:	0f 90       	pop	r0
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <DIO_write_high_nibble>:

void DIO_write_high_nibble(uint8 portname,uint8 value)
{
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <DIO_write_high_nibble+0x6>
    1a62:	00 d0       	rcall	.+0      	; 0x1a64 <DIO_write_high_nibble+0x8>
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	82 95       	swap	r24
    1a70:	80 7f       	andi	r24, 0xF0	; 240
    1a72:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	3c 83       	std	Y+4, r19	; 0x04
    1a7c:	2b 83       	std	Y+3, r18	; 0x03
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	9c 81       	ldd	r25, Y+4	; 0x04
    1a82:	82 34       	cpi	r24, 0x42	; 66
    1a84:	91 05       	cpc	r25, r1
    1a86:	31 f1       	breq	.+76     	; 0x1ad4 <DIO_write_high_nibble+0x78>
    1a88:	2b 81       	ldd	r18, Y+3	; 0x03
    1a8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a8c:	23 34       	cpi	r18, 0x43	; 67
    1a8e:	31 05       	cpc	r19, r1
    1a90:	34 f4       	brge	.+12     	; 0x1a9e <DIO_write_high_nibble+0x42>
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	9c 81       	ldd	r25, Y+4	; 0x04
    1a96:	81 34       	cpi	r24, 0x41	; 65
    1a98:	91 05       	cpc	r25, r1
    1a9a:	61 f0       	breq	.+24     	; 0x1ab4 <DIO_write_high_nibble+0x58>
    1a9c:	4a c0       	rjmp	.+148    	; 0x1b32 <DIO_write_high_nibble+0xd6>
    1a9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa0:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa2:	23 34       	cpi	r18, 0x43	; 67
    1aa4:	31 05       	cpc	r19, r1
    1aa6:	31 f1       	breq	.+76     	; 0x1af4 <DIO_write_high_nibble+0x98>
    1aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1aac:	84 34       	cpi	r24, 0x44	; 68
    1aae:	91 05       	cpc	r25, r1
    1ab0:	89 f1       	breq	.+98     	; 0x1b14 <DIO_write_high_nibble+0xb8>
    1ab2:	3f c0       	rjmp	.+126    	; 0x1b32 <DIO_write_high_nibble+0xd6>
	{
	case 'A':
		PORTA&=0x0f;
    1ab4:	ab e3       	ldi	r26, 0x3B	; 59
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	eb e3       	ldi	r30, 0x3B	; 59
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	8f 70       	andi	r24, 0x0F	; 15
    1ac0:	8c 93       	st	X, r24
		PORTA|=value;
    1ac2:	ab e3       	ldi	r26, 0x3B	; 59
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	eb e3       	ldi	r30, 0x3B	; 59
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	90 81       	ld	r25, Z
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	89 2b       	or	r24, r25
    1ad0:	8c 93       	st	X, r24
    1ad2:	2f c0       	rjmp	.+94     	; 0x1b32 <DIO_write_high_nibble+0xd6>
		break;
	case 'B':
		PORTB&=0x0f;
    1ad4:	a8 e3       	ldi	r26, 0x38	; 56
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e8 e3       	ldi	r30, 0x38	; 56
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	8f 70       	andi	r24, 0x0F	; 15
    1ae0:	8c 93       	st	X, r24
		PORTA|=value;
    1ae2:	ab e3       	ldi	r26, 0x3B	; 59
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	eb e3       	ldi	r30, 0x3B	; 59
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	90 81       	ld	r25, Z
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	89 2b       	or	r24, r25
    1af0:	8c 93       	st	X, r24
    1af2:	1f c0       	rjmp	.+62     	; 0x1b32 <DIO_write_high_nibble+0xd6>
		break;
	case 'C':
		PORTC&=0x0f;
    1af4:	a5 e3       	ldi	r26, 0x35	; 53
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e5 e3       	ldi	r30, 0x35	; 53
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	8f 70       	andi	r24, 0x0F	; 15
    1b00:	8c 93       	st	X, r24
		PORTA|=value;
    1b02:	ab e3       	ldi	r26, 0x3B	; 59
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	eb e3       	ldi	r30, 0x3B	; 59
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	90 81       	ld	r25, Z
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	89 2b       	or	r24, r25
    1b10:	8c 93       	st	X, r24
    1b12:	0f c0       	rjmp	.+30     	; 0x1b32 <DIO_write_high_nibble+0xd6>
		break;
	case 'D':
		PORTD&=0x0f;
    1b14:	a2 e3       	ldi	r26, 0x32	; 50
    1b16:	b0 e0       	ldi	r27, 0x00	; 0
    1b18:	e2 e3       	ldi	r30, 0x32	; 50
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	8f 70       	andi	r24, 0x0F	; 15
    1b20:	8c 93       	st	X, r24
		PORTD|=value;
    1b22:	a2 e3       	ldi	r26, 0x32	; 50
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
    1b26:	e2 e3       	ldi	r30, 0x32	; 50
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	90 81       	ld	r25, Z
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	89 2b       	or	r24, r25
    1b30:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <DIO_write_high_nibbleDir>:

void DIO_write_high_nibbleDir(uint8 portname,uint8 direction)
{
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <DIO_write_high_nibbleDir+0x6>
    1b46:	00 d0       	rcall	.+0      	; 0x1b48 <DIO_write_high_nibbleDir+0x8>
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	3c 83       	std	Y+4, r19	; 0x04
    1b58:	2b 83       	std	Y+3, r18	; 0x03
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5e:	82 34       	cpi	r24, 0x42	; 66
    1b60:	91 05       	cpc	r25, r1
    1b62:	49 f1       	breq	.+82     	; 0x1bb6 <DIO_write_high_nibbleDir+0x76>
    1b64:	2b 81       	ldd	r18, Y+3	; 0x03
    1b66:	3c 81       	ldd	r19, Y+4	; 0x04
    1b68:	23 34       	cpi	r18, 0x43	; 67
    1b6a:	31 05       	cpc	r19, r1
    1b6c:	34 f4       	brge	.+12     	; 0x1b7a <DIO_write_high_nibbleDir+0x3a>
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	9c 81       	ldd	r25, Y+4	; 0x04
    1b72:	81 34       	cpi	r24, 0x41	; 65
    1b74:	91 05       	cpc	r25, r1
    1b76:	61 f0       	breq	.+24     	; 0x1b90 <DIO_write_high_nibbleDir+0x50>
    1b78:	56 c0       	rjmp	.+172    	; 0x1c26 <DIO_write_high_nibbleDir+0xe6>
    1b7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b7e:	23 34       	cpi	r18, 0x43	; 67
    1b80:	31 05       	cpc	r19, r1
    1b82:	61 f1       	breq	.+88     	; 0x1bdc <DIO_write_high_nibbleDir+0x9c>
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	9c 81       	ldd	r25, Y+4	; 0x04
    1b88:	84 34       	cpi	r24, 0x44	; 68
    1b8a:	91 05       	cpc	r25, r1
    1b8c:	d1 f1       	breq	.+116    	; 0x1c02 <DIO_write_high_nibbleDir+0xc2>
    1b8e:	4b c0       	rjmp	.+150    	; 0x1c26 <DIO_write_high_nibbleDir+0xe6>
	{
	case 'A':
		if(direction==1)
    1b90:	8a 81       	ldd	r24, Y+2	; 0x02
    1b92:	81 30       	cpi	r24, 0x01	; 1
    1b94:	41 f4       	brne	.+16     	; 0x1ba6 <DIO_write_high_nibbleDir+0x66>
			DDRA|=0xf0;
    1b96:	aa e3       	ldi	r26, 0x3A	; 58
    1b98:	b0 e0       	ldi	r27, 0x00	; 0
    1b9a:	ea e3       	ldi	r30, 0x3A	; 58
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	80 6f       	ori	r24, 0xF0	; 240
    1ba2:	8c 93       	st	X, r24
    1ba4:	40 c0       	rjmp	.+128    	; 0x1c26 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRA&=~(0xf0);
    1ba6:	aa e3       	ldi	r26, 0x3A	; 58
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	ea e3       	ldi	r30, 0x3A	; 58
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	8f 70       	andi	r24, 0x0F	; 15
    1bb2:	8c 93       	st	X, r24
    1bb4:	38 c0       	rjmp	.+112    	; 0x1c26 <DIO_write_high_nibbleDir+0xe6>
		break;
	case 'B':
		if(direction==1)
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	81 30       	cpi	r24, 0x01	; 1
    1bba:	41 f4       	brne	.+16     	; 0x1bcc <DIO_write_high_nibbleDir+0x8c>
			DDRB|=0xf0;
    1bbc:	a7 e3       	ldi	r26, 0x37	; 55
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	e7 e3       	ldi	r30, 0x37	; 55
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	80 6f       	ori	r24, 0xF0	; 240
    1bc8:	8c 93       	st	X, r24
    1bca:	2d c0       	rjmp	.+90     	; 0x1c26 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRB&=~(0xf0);
    1bcc:	a7 e3       	ldi	r26, 0x37	; 55
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e7 e3       	ldi	r30, 0x37	; 55
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	8f 70       	andi	r24, 0x0F	; 15
    1bd8:	8c 93       	st	X, r24
    1bda:	25 c0       	rjmp	.+74     	; 0x1c26 <DIO_write_high_nibbleDir+0xe6>
		break;
	case 'C':
		if(direction==1)
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	81 30       	cpi	r24, 0x01	; 1
    1be0:	41 f4       	brne	.+16     	; 0x1bf2 <DIO_write_high_nibbleDir+0xb2>
			DDRC|=0xf0;
    1be2:	a4 e3       	ldi	r26, 0x34	; 52
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e4 e3       	ldi	r30, 0x34	; 52
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	80 6f       	ori	r24, 0xF0	; 240
    1bee:	8c 93       	st	X, r24
    1bf0:	1a c0       	rjmp	.+52     	; 0x1c26 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRC&=~(0xf0);
    1bf2:	a4 e3       	ldi	r26, 0x34	; 52
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e4 e3       	ldi	r30, 0x34	; 52
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	8f 70       	andi	r24, 0x0F	; 15
    1bfe:	8c 93       	st	X, r24
    1c00:	12 c0       	rjmp	.+36     	; 0x1c26 <DIO_write_high_nibbleDir+0xe6>
		break;
	case 'D':
		if(direction==1)
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	81 30       	cpi	r24, 0x01	; 1
    1c06:	41 f4       	brne	.+16     	; 0x1c18 <DIO_write_high_nibbleDir+0xd8>
			DDRD|=0xf0;
    1c08:	a1 e3       	ldi	r26, 0x31	; 49
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e1 e3       	ldi	r30, 0x31	; 49
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	80 6f       	ori	r24, 0xF0	; 240
    1c14:	8c 93       	st	X, r24
    1c16:	07 c0       	rjmp	.+14     	; 0x1c26 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRD&=~(0xf0);
    1c18:	a1 e3       	ldi	r26, 0x31	; 49
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e1 e3       	ldi	r30, 0x31	; 49
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	8f 70       	andi	r24, 0x0F	; 15
    1c24:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret

00001c34 <DIO_write_low_nibbleDir>:

void DIO_write_low_nibbleDir(uint8 portname,uint8 direction)
{
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <DIO_write_low_nibbleDir+0x6>
    1c3a:	00 d0       	rcall	.+0      	; 0x1c3c <DIO_write_low_nibbleDir+0x8>
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	89 83       	std	Y+1, r24	; 0x01
    1c42:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	3c 83       	std	Y+4, r19	; 0x04
    1c4c:	2b 83       	std	Y+3, r18	; 0x03
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	9c 81       	ldd	r25, Y+4	; 0x04
    1c52:	82 34       	cpi	r24, 0x42	; 66
    1c54:	91 05       	cpc	r25, r1
    1c56:	49 f1       	breq	.+82     	; 0x1caa <DIO_write_low_nibbleDir+0x76>
    1c58:	2b 81       	ldd	r18, Y+3	; 0x03
    1c5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c5c:	23 34       	cpi	r18, 0x43	; 67
    1c5e:	31 05       	cpc	r19, r1
    1c60:	34 f4       	brge	.+12     	; 0x1c6e <DIO_write_low_nibbleDir+0x3a>
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	9c 81       	ldd	r25, Y+4	; 0x04
    1c66:	81 34       	cpi	r24, 0x41	; 65
    1c68:	91 05       	cpc	r25, r1
    1c6a:	61 f0       	breq	.+24     	; 0x1c84 <DIO_write_low_nibbleDir+0x50>
    1c6c:	56 c0       	rjmp	.+172    	; 0x1d1a <DIO_write_low_nibbleDir+0xe6>
    1c6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c70:	3c 81       	ldd	r19, Y+4	; 0x04
    1c72:	23 34       	cpi	r18, 0x43	; 67
    1c74:	31 05       	cpc	r19, r1
    1c76:	61 f1       	breq	.+88     	; 0x1cd0 <DIO_write_low_nibbleDir+0x9c>
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7c:	84 34       	cpi	r24, 0x44	; 68
    1c7e:	91 05       	cpc	r25, r1
    1c80:	d1 f1       	breq	.+116    	; 0x1cf6 <DIO_write_low_nibbleDir+0xc2>
    1c82:	4b c0       	rjmp	.+150    	; 0x1d1a <DIO_write_low_nibbleDir+0xe6>
	{
	case 'A':
		if(direction==1)
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	81 30       	cpi	r24, 0x01	; 1
    1c88:	41 f4       	brne	.+16     	; 0x1c9a <DIO_write_low_nibbleDir+0x66>
			DDRA|=0x0f;
    1c8a:	aa e3       	ldi	r26, 0x3A	; 58
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	ea e3       	ldi	r30, 0x3A	; 58
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	8f 60       	ori	r24, 0x0F	; 15
    1c96:	8c 93       	st	X, r24
    1c98:	40 c0       	rjmp	.+128    	; 0x1d1a <DIO_write_low_nibbleDir+0xe6>
		else
			DDRA&=~(0x0f);
    1c9a:	aa e3       	ldi	r26, 0x3A	; 58
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	ea e3       	ldi	r30, 0x3A	; 58
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	80 7f       	andi	r24, 0xF0	; 240
    1ca6:	8c 93       	st	X, r24
    1ca8:	38 c0       	rjmp	.+112    	; 0x1d1a <DIO_write_low_nibbleDir+0xe6>
		break;
	case 'B':
		if(direction==1)
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	81 30       	cpi	r24, 0x01	; 1
    1cae:	41 f4       	brne	.+16     	; 0x1cc0 <DIO_write_low_nibbleDir+0x8c>
			DDRB|=0x0f;
    1cb0:	a7 e3       	ldi	r26, 0x37	; 55
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e7 e3       	ldi	r30, 0x37	; 55
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	8f 60       	ori	r24, 0x0F	; 15
    1cbc:	8c 93       	st	X, r24
    1cbe:	2d c0       	rjmp	.+90     	; 0x1d1a <DIO_write_low_nibbleDir+0xe6>
		else
			DDRB&=~(0x0f);
    1cc0:	a7 e3       	ldi	r26, 0x37	; 55
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e7 e3       	ldi	r30, 0x37	; 55
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	80 7f       	andi	r24, 0xF0	; 240
    1ccc:	8c 93       	st	X, r24
    1cce:	25 c0       	rjmp	.+74     	; 0x1d1a <DIO_write_low_nibbleDir+0xe6>
		break;
	case 'C':
		if(direction==1)
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	81 30       	cpi	r24, 0x01	; 1
    1cd4:	41 f4       	brne	.+16     	; 0x1ce6 <DIO_write_low_nibbleDir+0xb2>
			DDRC|=0x0f;
    1cd6:	a4 e3       	ldi	r26, 0x34	; 52
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e4 e3       	ldi	r30, 0x34	; 52
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	8f 60       	ori	r24, 0x0F	; 15
    1ce2:	8c 93       	st	X, r24
    1ce4:	1a c0       	rjmp	.+52     	; 0x1d1a <DIO_write_low_nibbleDir+0xe6>
		else
			DDRC&=~(0x0f);
    1ce6:	a4 e3       	ldi	r26, 0x34	; 52
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e4 e3       	ldi	r30, 0x34	; 52
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	80 81       	ld	r24, Z
    1cf0:	80 7f       	andi	r24, 0xF0	; 240
    1cf2:	8c 93       	st	X, r24
    1cf4:	12 c0       	rjmp	.+36     	; 0x1d1a <DIO_write_low_nibbleDir+0xe6>
		break;
	case 'D':
		if(direction==1)
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	81 30       	cpi	r24, 0x01	; 1
    1cfa:	41 f4       	brne	.+16     	; 0x1d0c <DIO_write_low_nibbleDir+0xd8>
			DDRD|=0x0f;
    1cfc:	a1 e3       	ldi	r26, 0x31	; 49
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e1 e3       	ldi	r30, 0x31	; 49
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	8f 60       	ori	r24, 0x0F	; 15
    1d08:	8c 93       	st	X, r24
    1d0a:	07 c0       	rjmp	.+14     	; 0x1d1a <DIO_write_low_nibbleDir+0xe6>
		else
			DDRD&=~(0x0f);
    1d0c:	a1 e3       	ldi	r26, 0x31	; 49
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e1 e3       	ldi	r30, 0x31	; 49
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	80 7f       	andi	r24, 0xF0	; 240
    1d18:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <KeyPad_init>:
#endif
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void KeyPad_init(void)
{
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
	DIO_setPINDir( KEYPAD_PORT_OUT,0,in);
    1d30:	82 e4       	ldi	r24, 0x42	; 66
    1d32:	60 e0       	ldi	r22, 0x00	; 0
    1d34:	40 e0       	ldi	r20, 0x00	; 0
    1d36:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_OUT,1,in);
    1d3a:	82 e4       	ldi	r24, 0x42	; 66
    1d3c:	61 e0       	ldi	r22, 0x01	; 1
    1d3e:	40 e0       	ldi	r20, 0x00	; 0
    1d40:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_OUT,2,in);
    1d44:	82 e4       	ldi	r24, 0x42	; 66
    1d46:	62 e0       	ldi	r22, 0x02	; 2
    1d48:	40 e0       	ldi	r20, 0x00	; 0
    1d4a:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_OUT,3,in);
    1d4e:	82 e4       	ldi	r24, 0x42	; 66
    1d50:	63 e0       	ldi	r22, 0x03	; 3
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,0,in);
    1d58:	81 e4       	ldi	r24, 0x41	; 65
    1d5a:	60 e0       	ldi	r22, 0x00	; 0
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,1,in);
    1d62:	81 e4       	ldi	r24, 0x41	; 65
    1d64:	61 e0       	ldi	r22, 0x01	; 1
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,2,in);
    1d6c:	81 e4       	ldi	r24, 0x41	; 65
    1d6e:	62 e0       	ldi	r22, 0x02	; 2
    1d70:	40 e0       	ldi	r20, 0x00	; 0
    1d72:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,3,in);
    1d76:	81 e4       	ldi	r24, 0x41	; 65
    1d78:	63 e0       	ldi	r22, 0x03	; 3
    1d7a:	40 e0       	ldi	r20, 0x00	; 0
    1d7c:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_setPINDir>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,0,1);
    1d80:	81 e4       	ldi	r24, 0x41	; 65
    1d82:	60 e0       	ldi	r22, 0x00	; 0
    1d84:	41 e0       	ldi	r20, 0x01	; 1
    1d86:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_enablePullup_pin>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,1,1);
    1d8a:	81 e4       	ldi	r24, 0x41	; 65
    1d8c:	61 e0       	ldi	r22, 0x01	; 1
    1d8e:	41 e0       	ldi	r20, 0x01	; 1
    1d90:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_enablePullup_pin>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,2,1);
    1d94:	81 e4       	ldi	r24, 0x41	; 65
    1d96:	62 e0       	ldi	r22, 0x02	; 2
    1d98:	41 e0       	ldi	r20, 0x01	; 1
    1d9a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_enablePullup_pin>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,3,1);
    1d9e:	81 e4       	ldi	r24, 0x41	; 65
    1da0:	63 e0       	ldi	r22, 0x03	; 3
    1da2:	41 e0       	ldi	r20, 0x01	; 1
    1da4:	0e 94 a9 0a 	call	0x1552	; 0x1552 <DIO_enablePullup_pin>
}
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <KeyPad_getPressedKey>:

uint8 KeyPad_getPressedKey(void)
{
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <KeyPad_getPressedKey+0x6>
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		KeyPad_init();
    1db8:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <KeyPad_init>
		for(row=0;row<N_row;row++)
    1dbc:	19 82       	std	Y+1, r1	; 0x01
    1dbe:	38 c0       	rjmp	.+112    	; 0x1e30 <KeyPad_getPressedKey+0x82>
		{
			if(row>0)
    1dc0:	89 81       	ldd	r24, Y+1	; 0x01
    1dc2:	88 23       	and	r24, r24
    1dc4:	41 f0       	breq	.+16     	; 0x1dd6 <KeyPad_getPressedKey+0x28>
			{
				DIO_setPINDir( KEYPAD_PORT_OUT,row-1,in);
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	98 2f       	mov	r25, r24
    1dca:	91 50       	subi	r25, 0x01	; 1
    1dcc:	82 e4       	ldi	r24, 0x42	; 66
    1dce:	69 2f       	mov	r22, r25
    1dd0:	40 e0       	ldi	r20, 0x00	; 0
    1dd2:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_setPINDir>
			}
			DIO_setPINDir( KEYPAD_PORT_OUT,row,out);
    1dd6:	82 e4       	ldi	r24, 0x42	; 66
    1dd8:	69 81       	ldd	r22, Y+1	; 0x01
    1dda:	41 e0       	ldi	r20, 0x01	; 1
    1ddc:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_setPINDir>
			DIO_write_PIN(KEYPAD_PORT_OUT,row,0);
    1de0:	82 e4       	ldi	r24, 0x42	; 66
    1de2:	69 81       	ldd	r22, Y+1	; 0x01
    1de4:	40 e0       	ldi	r20, 0x00	; 0
    1de6:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_write_PIN>
			for(col=0;col<N_col;col++)
    1dea:	1a 82       	std	Y+2, r1	; 0x02
    1dec:	1b c0       	rjmp	.+54     	; 0x1e24 <KeyPad_getPressedKey+0x76>
			{
				if(DIO_read_PIN(KEYPAD_PORT_IN,col)==0)
    1dee:	81 e4       	ldi	r24, 0x41	; 65
    1df0:	6a 81       	ldd	r22, Y+2	; 0x02
    1df2:	0e 94 ce 08 	call	0x119c	; 0x119c <DIO_read_PIN>
    1df6:	88 23       	and	r24, r24
    1df8:	91 f4       	brne	.+36     	; 0x1e1e <KeyPad_getPressedKey+0x70>
				{
					#if (N_col==3)
					return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col==4)
					return KeyPad_4x4_adjustKeyNumber((col*N_col)+row+1);
    1dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfc:	88 2f       	mov	r24, r24
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	88 0f       	add	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	88 0f       	add	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	98 2f       	mov	r25, r24
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	89 0f       	add	r24, r25
    1e0e:	8f 5f       	subi	r24, 0xFF	; 255
    1e10:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <KeyPad_4x4_adjustKeyNumber>
				}
			}
		}
	}

}
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	08 95       	ret
			{
				DIO_setPINDir( KEYPAD_PORT_OUT,row-1,in);
			}
			DIO_setPINDir( KEYPAD_PORT_OUT,row,out);
			DIO_write_PIN(KEYPAD_PORT_OUT,row,0);
			for(col=0;col<N_col;col++)
    1e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e20:	8f 5f       	subi	r24, 0xFF	; 255
    1e22:	8a 83       	std	Y+2, r24	; 0x02
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	84 30       	cpi	r24, 0x04	; 4
    1e28:	10 f3       	brcs	.-60     	; 0x1dee <KeyPad_getPressedKey+0x40>
{
	uint8 col,row;
	while(1)
	{
		KeyPad_init();
		for(row=0;row<N_row;row++)
    1e2a:	89 81       	ldd	r24, Y+1	; 0x01
    1e2c:	8f 5f       	subi	r24, 0xFF	; 255
    1e2e:	89 83       	std	Y+1, r24	; 0x01
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	84 30       	cpi	r24, 0x04	; 4
    1e34:	28 f2       	brcs	.-118    	; 0x1dc0 <KeyPad_getPressedKey+0x12>
    1e36:	c0 cf       	rjmp	.-128    	; 0x1db8 <KeyPad_getPressedKey+0xa>

00001e38 <KeyPad_4x3_adjustKeyNumber>:

}


uint8 KeyPad_4x3_adjustKeyNumber(uint8 button_number)
{
    1e38:	df 93       	push	r29
    1e3a:	cf 93       	push	r28
    1e3c:	00 d0       	rcall	.+0      	; 0x1e3e <KeyPad_4x3_adjustKeyNumber+0x6>
    1e3e:	00 d0       	rcall	.+0      	; 0x1e40 <KeyPad_4x3_adjustKeyNumber+0x8>
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	28 2f       	mov	r18, r24
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	3c 83       	std	Y+4, r19	; 0x04
    1e4e:	2b 83       	std	Y+3, r18	; 0x03
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	85 30       	cpi	r24, 0x05	; 5
    1e56:	91 05       	cpc	r25, r1
    1e58:	09 f4       	brne	.+2      	; 0x1e5c <KeyPad_4x3_adjustKeyNumber+0x24>
    1e5a:	41 c0       	rjmp	.+130    	; 0x1ede <KeyPad_4x3_adjustKeyNumber+0xa6>
    1e5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e60:	26 30       	cpi	r18, 0x06	; 6
    1e62:	31 05       	cpc	r19, r1
    1e64:	dc f4       	brge	.+54     	; 0x1e9c <KeyPad_4x3_adjustKeyNumber+0x64>
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6a:	82 30       	cpi	r24, 0x02	; 2
    1e6c:	91 05       	cpc	r25, r1
    1e6e:	71 f1       	breq	.+92     	; 0x1ecc <KeyPad_4x3_adjustKeyNumber+0x94>
    1e70:	2b 81       	ldd	r18, Y+3	; 0x03
    1e72:	3c 81       	ldd	r19, Y+4	; 0x04
    1e74:	23 30       	cpi	r18, 0x03	; 3
    1e76:	31 05       	cpc	r19, r1
    1e78:	34 f4       	brge	.+12     	; 0x1e86 <KeyPad_4x3_adjustKeyNumber+0x4e>
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7e:	81 30       	cpi	r24, 0x01	; 1
    1e80:	91 05       	cpc	r25, r1
    1e82:	09 f1       	breq	.+66     	; 0x1ec6 <KeyPad_4x3_adjustKeyNumber+0x8e>
    1e84:	3b c0       	rjmp	.+118    	; 0x1efc <KeyPad_4x3_adjustKeyNumber+0xc4>
    1e86:	2b 81       	ldd	r18, Y+3	; 0x03
    1e88:	3c 81       	ldd	r19, Y+4	; 0x04
    1e8a:	23 30       	cpi	r18, 0x03	; 3
    1e8c:	31 05       	cpc	r19, r1
    1e8e:	09 f1       	breq	.+66     	; 0x1ed2 <KeyPad_4x3_adjustKeyNumber+0x9a>
    1e90:	8b 81       	ldd	r24, Y+3	; 0x03
    1e92:	9c 81       	ldd	r25, Y+4	; 0x04
    1e94:	84 30       	cpi	r24, 0x04	; 4
    1e96:	91 05       	cpc	r25, r1
    1e98:	f9 f0       	breq	.+62     	; 0x1ed8 <KeyPad_4x3_adjustKeyNumber+0xa0>
    1e9a:	30 c0       	rjmp	.+96     	; 0x1efc <KeyPad_4x3_adjustKeyNumber+0xc4>
    1e9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea0:	27 30       	cpi	r18, 0x07	; 7
    1ea2:	31 05       	cpc	r19, r1
    1ea4:	11 f1       	breq	.+68     	; 0x1eea <KeyPad_4x3_adjustKeyNumber+0xb2>
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eaa:	87 30       	cpi	r24, 0x07	; 7
    1eac:	91 05       	cpc	r25, r1
    1eae:	d4 f0       	brlt	.+52     	; 0x1ee4 <KeyPad_4x3_adjustKeyNumber+0xac>
    1eb0:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb2:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb4:	28 30       	cpi	r18, 0x08	; 8
    1eb6:	31 05       	cpc	r19, r1
    1eb8:	d9 f0       	breq	.+54     	; 0x1ef0 <KeyPad_4x3_adjustKeyNumber+0xb8>
    1eba:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebe:	89 30       	cpi	r24, 0x09	; 9
    1ec0:	91 05       	cpc	r25, r1
    1ec2:	c9 f0       	breq	.+50     	; 0x1ef6 <KeyPad_4x3_adjustKeyNumber+0xbe>
    1ec4:	1b c0       	rjmp	.+54     	; 0x1efc <KeyPad_4x3_adjustKeyNumber+0xc4>
	{
	case 1:
		return '1';
    1ec6:	91 e3       	ldi	r25, 0x31	; 49
    1ec8:	9a 83       	std	Y+2, r25	; 0x02
    1eca:	1a c0       	rjmp	.+52     	; 0x1f00 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 2:
		return '2';
    1ecc:	22 e3       	ldi	r18, 0x32	; 50
    1ece:	2a 83       	std	Y+2, r18	; 0x02
    1ed0:	17 c0       	rjmp	.+46     	; 0x1f00 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 3:
		return '3';
    1ed2:	33 e3       	ldi	r19, 0x33	; 51
    1ed4:	3a 83       	std	Y+2, r19	; 0x02
    1ed6:	14 c0       	rjmp	.+40     	; 0x1f00 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 4:
		return '4';
    1ed8:	84 e3       	ldi	r24, 0x34	; 52
    1eda:	8a 83       	std	Y+2, r24	; 0x02
    1edc:	11 c0       	rjmp	.+34     	; 0x1f00 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 5:
		return '5';
    1ede:	95 e3       	ldi	r25, 0x35	; 53
    1ee0:	9a 83       	std	Y+2, r25	; 0x02
    1ee2:	0e c0       	rjmp	.+28     	; 0x1f00 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 6:
		return '6';
    1ee4:	26 e3       	ldi	r18, 0x36	; 54
    1ee6:	2a 83       	std	Y+2, r18	; 0x02
    1ee8:	0b c0       	rjmp	.+22     	; 0x1f00 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 7:
		return '7';
    1eea:	37 e3       	ldi	r19, 0x37	; 55
    1eec:	3a 83       	std	Y+2, r19	; 0x02
    1eee:	08 c0       	rjmp	.+16     	; 0x1f00 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 8:
		return '8';
    1ef0:	88 e3       	ldi	r24, 0x38	; 56
    1ef2:	8a 83       	std	Y+2, r24	; 0x02
    1ef4:	05 c0       	rjmp	.+10     	; 0x1f00 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 9:
		return '9';
    1ef6:	99 e3       	ldi	r25, 0x39	; 57
    1ef8:	9a 83       	std	Y+2, r25	; 0x02
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	default:
		return '0';
    1efc:	20 e3       	ldi	r18, 0x30	; 48
    1efe:	2a 83       	std	Y+2, r18	; 0x02
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
		break;

	}

}
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	08 95       	ret

00001f10 <KeyPad_4x4_adjustKeyNumber>:

uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1f10:	df 93       	push	r29
    1f12:	cf 93       	push	r28
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <KeyPad_4x4_adjustKeyNumber+0x6>
    1f16:	00 d0       	rcall	.+0      	; 0x1f18 <KeyPad_4x4_adjustKeyNumber+0x8>
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	28 2f       	mov	r18, r24
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	3c 83       	std	Y+4, r19	; 0x04
    1f26:	2b 83       	std	Y+3, r18	; 0x03
    1f28:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2c:	88 30       	cpi	r24, 0x08	; 8
    1f2e:	91 05       	cpc	r25, r1
    1f30:	09 f4       	brne	.+2      	; 0x1f34 <KeyPad_4x4_adjustKeyNumber+0x24>
    1f32:	70 c0       	rjmp	.+224    	; 0x2014 <KeyPad_4x4_adjustKeyNumber+0x104>
    1f34:	2b 81       	ldd	r18, Y+3	; 0x03
    1f36:	3c 81       	ldd	r19, Y+4	; 0x04
    1f38:	29 30       	cpi	r18, 0x09	; 9
    1f3a:	31 05       	cpc	r19, r1
    1f3c:	5c f5       	brge	.+86     	; 0x1f94 <KeyPad_4x4_adjustKeyNumber+0x84>
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	9c 81       	ldd	r25, Y+4	; 0x04
    1f42:	84 30       	cpi	r24, 0x04	; 4
    1f44:	91 05       	cpc	r25, r1
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <KeyPad_4x4_adjustKeyNumber+0x3a>
    1f48:	59 c0       	rjmp	.+178    	; 0x1ffc <KeyPad_4x4_adjustKeyNumber+0xec>
    1f4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f4e:	25 30       	cpi	r18, 0x05	; 5
    1f50:	31 05       	cpc	r19, r1
    1f52:	9c f4       	brge	.+38     	; 0x1f7a <KeyPad_4x4_adjustKeyNumber+0x6a>
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	9c 81       	ldd	r25, Y+4	; 0x04
    1f58:	82 30       	cpi	r24, 0x02	; 2
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	09 f4       	brne	.+2      	; 0x1f60 <KeyPad_4x4_adjustKeyNumber+0x50>
    1f5e:	48 c0       	rjmp	.+144    	; 0x1ff0 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1f60:	2b 81       	ldd	r18, Y+3	; 0x03
    1f62:	3c 81       	ldd	r19, Y+4	; 0x04
    1f64:	23 30       	cpi	r18, 0x03	; 3
    1f66:	31 05       	cpc	r19, r1
    1f68:	0c f0       	brlt	.+2      	; 0x1f6c <KeyPad_4x4_adjustKeyNumber+0x5c>
    1f6a:	45 c0       	rjmp	.+138    	; 0x1ff6 <KeyPad_4x4_adjustKeyNumber+0xe6>
    1f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f70:	81 30       	cpi	r24, 0x01	; 1
    1f72:	91 05       	cpc	r25, r1
    1f74:	09 f4       	brne	.+2      	; 0x1f78 <KeyPad_4x4_adjustKeyNumber+0x68>
    1f76:	39 c0       	rjmp	.+114    	; 0x1fea <KeyPad_4x4_adjustKeyNumber+0xda>
    1f78:	67 c0       	rjmp	.+206    	; 0x2048 <KeyPad_4x4_adjustKeyNumber+0x138>
    1f7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1f7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1f7e:	26 30       	cpi	r18, 0x06	; 6
    1f80:	31 05       	cpc	r19, r1
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <KeyPad_4x4_adjustKeyNumber+0x76>
    1f84:	41 c0       	rjmp	.+130    	; 0x2008 <KeyPad_4x4_adjustKeyNumber+0xf8>
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8a:	87 30       	cpi	r24, 0x07	; 7
    1f8c:	91 05       	cpc	r25, r1
    1f8e:	0c f0       	brlt	.+2      	; 0x1f92 <KeyPad_4x4_adjustKeyNumber+0x82>
    1f90:	3e c0       	rjmp	.+124    	; 0x200e <KeyPad_4x4_adjustKeyNumber+0xfe>
    1f92:	37 c0       	rjmp	.+110    	; 0x2002 <KeyPad_4x4_adjustKeyNumber+0xf2>
    1f94:	2b 81       	ldd	r18, Y+3	; 0x03
    1f96:	3c 81       	ldd	r19, Y+4	; 0x04
    1f98:	2c 30       	cpi	r18, 0x0C	; 12
    1f9a:	31 05       	cpc	r19, r1
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <KeyPad_4x4_adjustKeyNumber+0x90>
    1f9e:	46 c0       	rjmp	.+140    	; 0x202c <KeyPad_4x4_adjustKeyNumber+0x11c>
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa4:	8d 30       	cpi	r24, 0x0D	; 13
    1fa6:	91 05       	cpc	r25, r1
    1fa8:	5c f4       	brge	.+22     	; 0x1fc0 <KeyPad_4x4_adjustKeyNumber+0xb0>
    1faa:	2b 81       	ldd	r18, Y+3	; 0x03
    1fac:	3c 81       	ldd	r19, Y+4	; 0x04
    1fae:	2a 30       	cpi	r18, 0x0A	; 10
    1fb0:	31 05       	cpc	r19, r1
    1fb2:	b1 f1       	breq	.+108    	; 0x2020 <KeyPad_4x4_adjustKeyNumber+0x110>
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb8:	8b 30       	cpi	r24, 0x0B	; 11
    1fba:	91 05       	cpc	r25, r1
    1fbc:	a4 f5       	brge	.+104    	; 0x2026 <KeyPad_4x4_adjustKeyNumber+0x116>
    1fbe:	2d c0       	rjmp	.+90     	; 0x201a <KeyPad_4x4_adjustKeyNumber+0x10a>
    1fc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc2:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc4:	2e 30       	cpi	r18, 0x0E	; 14
    1fc6:	31 05       	cpc	r19, r1
    1fc8:	b9 f1       	breq	.+110    	; 0x2038 <KeyPad_4x4_adjustKeyNumber+0x128>
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fce:	8e 30       	cpi	r24, 0x0E	; 14
    1fd0:	91 05       	cpc	r25, r1
    1fd2:	7c f1       	brlt	.+94     	; 0x2032 <KeyPad_4x4_adjustKeyNumber+0x122>
    1fd4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fd6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fd8:	2f 30       	cpi	r18, 0x0F	; 15
    1fda:	31 05       	cpc	r19, r1
    1fdc:	79 f1       	breq	.+94     	; 0x203c <KeyPad_4x4_adjustKeyNumber+0x12c>
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe2:	80 31       	cpi	r24, 0x10	; 16
    1fe4:	91 05       	cpc	r25, r1
    1fe6:	69 f1       	breq	.+90     	; 0x2042 <KeyPad_4x4_adjustKeyNumber+0x132>
    1fe8:	2f c0       	rjmp	.+94     	; 0x2048 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
	case 1:
		return 7;
    1fea:	97 e0       	ldi	r25, 0x07	; 7
    1fec:	9a 83       	std	Y+2, r25	; 0x02
    1fee:	2d c0       	rjmp	.+90     	; 0x204a <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 2:
		return 8;
    1ff0:	28 e0       	ldi	r18, 0x08	; 8
    1ff2:	2a 83       	std	Y+2, r18	; 0x02
    1ff4:	2a c0       	rjmp	.+84     	; 0x204a <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 3:
		return 9;
    1ff6:	39 e0       	ldi	r19, 0x09	; 9
    1ff8:	3a 83       	std	Y+2, r19	; 0x02
    1ffa:	27 c0       	rjmp	.+78     	; 0x204a <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 4:
		return '/';
    1ffc:	8f e2       	ldi	r24, 0x2F	; 47
    1ffe:	8a 83       	std	Y+2, r24	; 0x02
    2000:	24 c0       	rjmp	.+72     	; 0x204a <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 5:
		return 4;
    2002:	94 e0       	ldi	r25, 0x04	; 4
    2004:	9a 83       	std	Y+2, r25	; 0x02
    2006:	21 c0       	rjmp	.+66     	; 0x204a <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 6:
		return 5;
    2008:	25 e0       	ldi	r18, 0x05	; 5
    200a:	2a 83       	std	Y+2, r18	; 0x02
    200c:	1e c0       	rjmp	.+60     	; 0x204a <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 7:
		return 6;
    200e:	36 e0       	ldi	r19, 0x06	; 6
    2010:	3a 83       	std	Y+2, r19	; 0x02
    2012:	1b c0       	rjmp	.+54     	; 0x204a <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 8:
		return '*';
    2014:	8a e2       	ldi	r24, 0x2A	; 42
    2016:	8a 83       	std	Y+2, r24	; 0x02
    2018:	18 c0       	rjmp	.+48     	; 0x204a <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 9:
		return 1;
    201a:	91 e0       	ldi	r25, 0x01	; 1
    201c:	9a 83       	std	Y+2, r25	; 0x02
    201e:	15 c0       	rjmp	.+42     	; 0x204a <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 10:
		return 2;
    2020:	22 e0       	ldi	r18, 0x02	; 2
    2022:	2a 83       	std	Y+2, r18	; 0x02
    2024:	12 c0       	rjmp	.+36     	; 0x204a <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 11:
		return 3;
    2026:	33 e0       	ldi	r19, 0x03	; 3
    2028:	3a 83       	std	Y+2, r19	; 0x02
    202a:	0f c0       	rjmp	.+30     	; 0x204a <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 12:
		return '-';
    202c:	8d e2       	ldi	r24, 0x2D	; 45
    202e:	8a 83       	std	Y+2, r24	; 0x02
    2030:	0c c0       	rjmp	.+24     	; 0x204a <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 13:
		return 'A';
    2032:	91 e4       	ldi	r25, 0x41	; 65
    2034:	9a 83       	std	Y+2, r25	; 0x02
    2036:	09 c0       	rjmp	.+18     	; 0x204a <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 14:
		return 0;
    2038:	1a 82       	std	Y+2, r1	; 0x02
    203a:	07 c0       	rjmp	.+14     	; 0x204a <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 15:
		return '=';
    203c:	2d e3       	ldi	r18, 0x3D	; 61
    203e:	2a 83       	std	Y+2, r18	; 0x02
    2040:	04 c0       	rjmp	.+8      	; 0x204a <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 16:
		return '+';
    2042:	3b e2       	ldi	r19, 0x2B	; 43
    2044:	3a 83       	std	Y+2, r19	; 0x02
    2046:	01 c0       	rjmp	.+2      	; 0x204a <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;

	default:
		return 0 ;
    2048:	1a 82       	std	Y+2, r1	; 0x02
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
		break;


	}

}
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <LCD_refresh>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_refresh(void)
{
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    2062:	aa 97       	sbiw	r28, 0x2a	; 42
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	f8 94       	cli
    2068:	de bf       	out	0x3e, r29	; 62
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	cd bf       	out	0x3d, r28	; 61
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	a0 e8       	ldi	r26, 0x80	; 128
    2074:	bf e3       	ldi	r27, 0x3F	; 63
    2076:	8f a3       	std	Y+39, r24	; 0x27
    2078:	98 a7       	std	Y+40, r25	; 0x28
    207a:	a9 a7       	std	Y+41, r26	; 0x29
    207c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207e:	6f a1       	ldd	r22, Y+39	; 0x27
    2080:	78 a5       	ldd	r23, Y+40	; 0x28
    2082:	89 a5       	ldd	r24, Y+41	; 0x29
    2084:	9a a5       	ldd	r25, Y+42	; 0x2a
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	4a e7       	ldi	r20, 0x7A	; 122
    208c:	53 e4       	ldi	r21, 0x43	; 67
    208e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	8b a3       	std	Y+35, r24	; 0x23
    2098:	9c a3       	std	Y+36, r25	; 0x24
    209a:	ad a3       	std	Y+37, r26	; 0x25
    209c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    209e:	6b a1       	ldd	r22, Y+35	; 0x23
    20a0:	7c a1       	ldd	r23, Y+36	; 0x24
    20a2:	8d a1       	ldd	r24, Y+37	; 0x25
    20a4:	9e a1       	ldd	r25, Y+38	; 0x26
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	40 e8       	ldi	r20, 0x80	; 128
    20ac:	5f e3       	ldi	r21, 0x3F	; 63
    20ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b2:	88 23       	and	r24, r24
    20b4:	2c f4       	brge	.+10     	; 0x20c0 <LCD_refresh+0x66>
		__ticks = 1;
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	9a a3       	std	Y+34, r25	; 0x22
    20bc:	89 a3       	std	Y+33, r24	; 0x21
    20be:	3f c0       	rjmp	.+126    	; 0x213e <LCD_refresh+0xe4>
	else if (__tmp > 65535)
    20c0:	6b a1       	ldd	r22, Y+35	; 0x23
    20c2:	7c a1       	ldd	r23, Y+36	; 0x24
    20c4:	8d a1       	ldd	r24, Y+37	; 0x25
    20c6:	9e a1       	ldd	r25, Y+38	; 0x26
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	3f ef       	ldi	r19, 0xFF	; 255
    20cc:	4f e7       	ldi	r20, 0x7F	; 127
    20ce:	57 e4       	ldi	r21, 0x47	; 71
    20d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d4:	18 16       	cp	r1, r24
    20d6:	4c f5       	brge	.+82     	; 0x212a <LCD_refresh+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d8:	6f a1       	ldd	r22, Y+39	; 0x27
    20da:	78 a5       	ldd	r23, Y+40	; 0x28
    20dc:	89 a5       	ldd	r24, Y+41	; 0x29
    20de:	9a a5       	ldd	r25, Y+42	; 0x2a
    20e0:	20 e0       	ldi	r18, 0x00	; 0
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	40 e2       	ldi	r20, 0x20	; 32
    20e6:	51 e4       	ldi	r21, 0x41	; 65
    20e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	bc 01       	movw	r22, r24
    20f2:	cd 01       	movw	r24, r26
    20f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	9a a3       	std	Y+34, r25	; 0x22
    20fe:	89 a3       	std	Y+33, r24	; 0x21
    2100:	0f c0       	rjmp	.+30     	; 0x2120 <LCD_refresh+0xc6>
    2102:	89 e1       	ldi	r24, 0x19	; 25
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	98 a3       	std	Y+32, r25	; 0x20
    2108:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    210a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    210c:	98 a1       	ldd	r25, Y+32	; 0x20
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	f1 f7       	brne	.-4      	; 0x210e <LCD_refresh+0xb4>
    2112:	98 a3       	std	Y+32, r25	; 0x20
    2114:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2116:	89 a1       	ldd	r24, Y+33	; 0x21
    2118:	9a a1       	ldd	r25, Y+34	; 0x22
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	9a a3       	std	Y+34, r25	; 0x22
    211e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2120:	89 a1       	ldd	r24, Y+33	; 0x21
    2122:	9a a1       	ldd	r25, Y+34	; 0x22
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	69 f7       	brne	.-38     	; 0x2102 <LCD_refresh+0xa8>
    2128:	14 c0       	rjmp	.+40     	; 0x2152 <LCD_refresh+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212a:	6b a1       	ldd	r22, Y+35	; 0x23
    212c:	7c a1       	ldd	r23, Y+36	; 0x24
    212e:	8d a1       	ldd	r24, Y+37	; 0x25
    2130:	9e a1       	ldd	r25, Y+38	; 0x26
    2132:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	9a a3       	std	Y+34, r25	; 0x22
    213c:	89 a3       	std	Y+33, r24	; 0x21
    213e:	89 a1       	ldd	r24, Y+33	; 0x21
    2140:	9a a1       	ldd	r25, Y+34	; 0x22
    2142:	9e 8f       	std	Y+30, r25	; 0x1e
    2144:	8d 8f       	std	Y+29, r24	; 0x1d
    2146:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2148:	9e 8d       	ldd	r25, Y+30	; 0x1e
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	f1 f7       	brne	.-4      	; 0x214a <LCD_refresh+0xf0>
    214e:	9e 8f       	std	Y+30, r25	; 0x1e
    2150:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,0);
    2152:	83 e4       	ldi	r24, 0x43	; 67
    2154:	62 e0       	ldi	r22, 0x02	; 2
    2156:	40 e0       	ldi	r20, 0x00	; 0
    2158:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_write_PIN>
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	a0 e8       	ldi	r26, 0x80	; 128
    2162:	bf e3       	ldi	r27, 0x3F	; 63
    2164:	89 8f       	std	Y+25, r24	; 0x19
    2166:	9a 8f       	std	Y+26, r25	; 0x1a
    2168:	ab 8f       	std	Y+27, r26	; 0x1b
    216a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216c:	69 8d       	ldd	r22, Y+25	; 0x19
    216e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2170:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2172:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	4a e7       	ldi	r20, 0x7A	; 122
    217a:	53 e4       	ldi	r21, 0x43	; 67
    217c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	8d 8b       	std	Y+21, r24	; 0x15
    2186:	9e 8b       	std	Y+22, r25	; 0x16
    2188:	af 8b       	std	Y+23, r26	; 0x17
    218a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    218c:	6d 89       	ldd	r22, Y+21	; 0x15
    218e:	7e 89       	ldd	r23, Y+22	; 0x16
    2190:	8f 89       	ldd	r24, Y+23	; 0x17
    2192:	98 8d       	ldd	r25, Y+24	; 0x18
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e8       	ldi	r20, 0x80	; 128
    219a:	5f e3       	ldi	r21, 0x3F	; 63
    219c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21a0:	88 23       	and	r24, r24
    21a2:	2c f4       	brge	.+10     	; 0x21ae <LCD_refresh+0x154>
		__ticks = 1;
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	9c 8b       	std	Y+20, r25	; 0x14
    21aa:	8b 8b       	std	Y+19, r24	; 0x13
    21ac:	3f c0       	rjmp	.+126    	; 0x222c <LCD_refresh+0x1d2>
	else if (__tmp > 65535)
    21ae:	6d 89       	ldd	r22, Y+21	; 0x15
    21b0:	7e 89       	ldd	r23, Y+22	; 0x16
    21b2:	8f 89       	ldd	r24, Y+23	; 0x17
    21b4:	98 8d       	ldd	r25, Y+24	; 0x18
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	3f ef       	ldi	r19, 0xFF	; 255
    21ba:	4f e7       	ldi	r20, 0x7F	; 127
    21bc:	57 e4       	ldi	r21, 0x47	; 71
    21be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21c2:	18 16       	cp	r1, r24
    21c4:	4c f5       	brge	.+82     	; 0x2218 <LCD_refresh+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c6:	69 8d       	ldd	r22, Y+25	; 0x19
    21c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	40 e2       	ldi	r20, 0x20	; 32
    21d4:	51 e4       	ldi	r21, 0x41	; 65
    21d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	bc 01       	movw	r22, r24
    21e0:	cd 01       	movw	r24, r26
    21e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	9c 8b       	std	Y+20, r25	; 0x14
    21ec:	8b 8b       	std	Y+19, r24	; 0x13
    21ee:	0f c0       	rjmp	.+30     	; 0x220e <LCD_refresh+0x1b4>
    21f0:	89 e1       	ldi	r24, 0x19	; 25
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	9a 8b       	std	Y+18, r25	; 0x12
    21f6:	89 8b       	std	Y+17, r24	; 0x11
    21f8:	89 89       	ldd	r24, Y+17	; 0x11
    21fa:	9a 89       	ldd	r25, Y+18	; 0x12
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	f1 f7       	brne	.-4      	; 0x21fc <LCD_refresh+0x1a2>
    2200:	9a 8b       	std	Y+18, r25	; 0x12
    2202:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2204:	8b 89       	ldd	r24, Y+19	; 0x13
    2206:	9c 89       	ldd	r25, Y+20	; 0x14
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	9c 8b       	std	Y+20, r25	; 0x14
    220c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220e:	8b 89       	ldd	r24, Y+19	; 0x13
    2210:	9c 89       	ldd	r25, Y+20	; 0x14
    2212:	00 97       	sbiw	r24, 0x00	; 0
    2214:	69 f7       	brne	.-38     	; 0x21f0 <LCD_refresh+0x196>
    2216:	14 c0       	rjmp	.+40     	; 0x2240 <LCD_refresh+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2218:	6d 89       	ldd	r22, Y+21	; 0x15
    221a:	7e 89       	ldd	r23, Y+22	; 0x16
    221c:	8f 89       	ldd	r24, Y+23	; 0x17
    221e:	98 8d       	ldd	r25, Y+24	; 0x18
    2220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	9c 8b       	std	Y+20, r25	; 0x14
    222a:	8b 8b       	std	Y+19, r24	; 0x13
    222c:	8b 89       	ldd	r24, Y+19	; 0x13
    222e:	9c 89       	ldd	r25, Y+20	; 0x14
    2230:	98 8b       	std	Y+16, r25	; 0x10
    2232:	8f 87       	std	Y+15, r24	; 0x0f
    2234:	8f 85       	ldd	r24, Y+15	; 0x0f
    2236:	98 89       	ldd	r25, Y+16	; 0x10
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	f1 f7       	brne	.-4      	; 0x2238 <LCD_refresh+0x1de>
    223c:	98 8b       	std	Y+16, r25	; 0x10
    223e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,1);
    2240:	83 e4       	ldi	r24, 0x43	; 67
    2242:	62 e0       	ldi	r22, 0x02	; 2
    2244:	41 e0       	ldi	r20, 0x01	; 1
    2246:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_write_PIN>
    224a:	80 e0       	ldi	r24, 0x00	; 0
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	a0 e8       	ldi	r26, 0x80	; 128
    2250:	bf e3       	ldi	r27, 0x3F	; 63
    2252:	8b 87       	std	Y+11, r24	; 0x0b
    2254:	9c 87       	std	Y+12, r25	; 0x0c
    2256:	ad 87       	std	Y+13, r26	; 0x0d
    2258:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    225a:	6b 85       	ldd	r22, Y+11	; 0x0b
    225c:	7c 85       	ldd	r23, Y+12	; 0x0c
    225e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2260:	9e 85       	ldd	r25, Y+14	; 0x0e
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	4a e7       	ldi	r20, 0x7A	; 122
    2268:	53 e4       	ldi	r21, 0x43	; 67
    226a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	8f 83       	std	Y+7, r24	; 0x07
    2274:	98 87       	std	Y+8, r25	; 0x08
    2276:	a9 87       	std	Y+9, r26	; 0x09
    2278:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    227a:	6f 81       	ldd	r22, Y+7	; 0x07
    227c:	78 85       	ldd	r23, Y+8	; 0x08
    227e:	89 85       	ldd	r24, Y+9	; 0x09
    2280:	9a 85       	ldd	r25, Y+10	; 0x0a
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e8       	ldi	r20, 0x80	; 128
    2288:	5f e3       	ldi	r21, 0x3F	; 63
    228a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    228e:	88 23       	and	r24, r24
    2290:	2c f4       	brge	.+10     	; 0x229c <LCD_refresh+0x242>
		__ticks = 1;
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	9e 83       	std	Y+6, r25	; 0x06
    2298:	8d 83       	std	Y+5, r24	; 0x05
    229a:	3f c0       	rjmp	.+126    	; 0x231a <LCD_refresh+0x2c0>
	else if (__tmp > 65535)
    229c:	6f 81       	ldd	r22, Y+7	; 0x07
    229e:	78 85       	ldd	r23, Y+8	; 0x08
    22a0:	89 85       	ldd	r24, Y+9	; 0x09
    22a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	3f ef       	ldi	r19, 0xFF	; 255
    22a8:	4f e7       	ldi	r20, 0x7F	; 127
    22aa:	57 e4       	ldi	r21, 0x47	; 71
    22ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22b0:	18 16       	cp	r1, r24
    22b2:	4c f5       	brge	.+82     	; 0x2306 <LCD_refresh+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	40 e2       	ldi	r20, 0x20	; 32
    22c2:	51 e4       	ldi	r21, 0x41	; 65
    22c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	bc 01       	movw	r22, r24
    22ce:	cd 01       	movw	r24, r26
    22d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	9e 83       	std	Y+6, r25	; 0x06
    22da:	8d 83       	std	Y+5, r24	; 0x05
    22dc:	0f c0       	rjmp	.+30     	; 0x22fc <LCD_refresh+0x2a2>
    22de:	89 e1       	ldi	r24, 0x19	; 25
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	9c 83       	std	Y+4, r25	; 0x04
    22e4:	8b 83       	std	Y+3, r24	; 0x03
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	f1 f7       	brne	.-4      	; 0x22ea <LCD_refresh+0x290>
    22ee:	9c 83       	std	Y+4, r25	; 0x04
    22f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f2:	8d 81       	ldd	r24, Y+5	; 0x05
    22f4:	9e 81       	ldd	r25, Y+6	; 0x06
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	9e 83       	std	Y+6, r25	; 0x06
    22fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22fc:	8d 81       	ldd	r24, Y+5	; 0x05
    22fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	69 f7       	brne	.-38     	; 0x22de <LCD_refresh+0x284>
    2304:	14 c0       	rjmp	.+40     	; 0x232e <LCD_refresh+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2306:	6f 81       	ldd	r22, Y+7	; 0x07
    2308:	78 85       	ldd	r23, Y+8	; 0x08
    230a:	89 85       	ldd	r24, Y+9	; 0x09
    230c:	9a 85       	ldd	r25, Y+10	; 0x0a
    230e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	9e 83       	std	Y+6, r25	; 0x06
    2318:	8d 83       	std	Y+5, r24	; 0x05
    231a:	8d 81       	ldd	r24, Y+5	; 0x05
    231c:	9e 81       	ldd	r25, Y+6	; 0x06
    231e:	9a 83       	std	Y+2, r25	; 0x02
    2320:	89 83       	std	Y+1, r24	; 0x01
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	9a 81       	ldd	r25, Y+2	; 0x02
    2326:	01 97       	sbiw	r24, 0x01	; 1
    2328:	f1 f7       	brne	.-4      	; 0x2326 <LCD_refresh+0x2cc>
    232a:	9a 83       	std	Y+2, r25	; 0x02
    232c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    232e:	aa 96       	adiw	r28, 0x2a	; 42
    2330:	0f b6       	in	r0, 0x3f	; 63
    2332:	f8 94       	cli
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	cd bf       	out	0x3d, r28	; 61
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	08 95       	ret

00002340 <LCD_Command>:
void LCD_Command(uint8 cmd)
{
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	e9 97       	sbiw	r28, 0x39	; 57
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	89 af       	std	Y+57, r24	; 0x39
	DIO_write_PIN(LCD_ctrl_port,RS,0);
    2356:	83 e4       	ldi	r24, 0x43	; 67
    2358:	60 e0       	ldi	r22, 0x00	; 0
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_write_PIN>
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	a0 e8       	ldi	r26, 0x80	; 128
    2366:	bf e3       	ldi	r27, 0x3F	; 63
    2368:	8d ab       	std	Y+53, r24	; 0x35
    236a:	9e ab       	std	Y+54, r25	; 0x36
    236c:	af ab       	std	Y+55, r26	; 0x37
    236e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2370:	6d a9       	ldd	r22, Y+53	; 0x35
    2372:	7e a9       	ldd	r23, Y+54	; 0x36
    2374:	8f a9       	ldd	r24, Y+55	; 0x37
    2376:	98 ad       	ldd	r25, Y+56	; 0x38
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	4a e7       	ldi	r20, 0x7A	; 122
    237e:	53 e4       	ldi	r21, 0x43	; 67
    2380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	89 ab       	std	Y+49, r24	; 0x31
    238a:	9a ab       	std	Y+50, r25	; 0x32
    238c:	ab ab       	std	Y+51, r26	; 0x33
    238e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2390:	69 a9       	ldd	r22, Y+49	; 0x31
    2392:	7a a9       	ldd	r23, Y+50	; 0x32
    2394:	8b a9       	ldd	r24, Y+51	; 0x33
    2396:	9c a9       	ldd	r25, Y+52	; 0x34
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	40 e8       	ldi	r20, 0x80	; 128
    239e:	5f e3       	ldi	r21, 0x3F	; 63
    23a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23a4:	88 23       	and	r24, r24
    23a6:	2c f4       	brge	.+10     	; 0x23b2 <LCD_Command+0x72>
		__ticks = 1;
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	98 ab       	std	Y+48, r25	; 0x30
    23ae:	8f a7       	std	Y+47, r24	; 0x2f
    23b0:	3f c0       	rjmp	.+126    	; 0x2430 <LCD_Command+0xf0>
	else if (__tmp > 65535)
    23b2:	69 a9       	ldd	r22, Y+49	; 0x31
    23b4:	7a a9       	ldd	r23, Y+50	; 0x32
    23b6:	8b a9       	ldd	r24, Y+51	; 0x33
    23b8:	9c a9       	ldd	r25, Y+52	; 0x34
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	3f ef       	ldi	r19, 0xFF	; 255
    23be:	4f e7       	ldi	r20, 0x7F	; 127
    23c0:	57 e4       	ldi	r21, 0x47	; 71
    23c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23c6:	18 16       	cp	r1, r24
    23c8:	4c f5       	brge	.+82     	; 0x241c <LCD_Command+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ca:	6d a9       	ldd	r22, Y+53	; 0x35
    23cc:	7e a9       	ldd	r23, Y+54	; 0x36
    23ce:	8f a9       	ldd	r24, Y+55	; 0x37
    23d0:	98 ad       	ldd	r25, Y+56	; 0x38
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e2       	ldi	r20, 0x20	; 32
    23d8:	51 e4       	ldi	r21, 0x41	; 65
    23da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	bc 01       	movw	r22, r24
    23e4:	cd 01       	movw	r24, r26
    23e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	98 ab       	std	Y+48, r25	; 0x30
    23f0:	8f a7       	std	Y+47, r24	; 0x2f
    23f2:	0f c0       	rjmp	.+30     	; 0x2412 <LCD_Command+0xd2>
    23f4:	89 e1       	ldi	r24, 0x19	; 25
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	9e a7       	std	Y+46, r25	; 0x2e
    23fa:	8d a7       	std	Y+45, r24	; 0x2d
    23fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    23fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <LCD_Command+0xc0>
    2404:	9e a7       	std	Y+46, r25	; 0x2e
    2406:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2408:	8f a5       	ldd	r24, Y+47	; 0x2f
    240a:	98 a9       	ldd	r25, Y+48	; 0x30
    240c:	01 97       	sbiw	r24, 0x01	; 1
    240e:	98 ab       	std	Y+48, r25	; 0x30
    2410:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2412:	8f a5       	ldd	r24, Y+47	; 0x2f
    2414:	98 a9       	ldd	r25, Y+48	; 0x30
    2416:	00 97       	sbiw	r24, 0x00	; 0
    2418:	69 f7       	brne	.-38     	; 0x23f4 <LCD_Command+0xb4>
    241a:	14 c0       	rjmp	.+40     	; 0x2444 <LCD_Command+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    241c:	69 a9       	ldd	r22, Y+49	; 0x31
    241e:	7a a9       	ldd	r23, Y+50	; 0x32
    2420:	8b a9       	ldd	r24, Y+51	; 0x33
    2422:	9c a9       	ldd	r25, Y+52	; 0x34
    2424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	98 ab       	std	Y+48, r25	; 0x30
    242e:	8f a7       	std	Y+47, r24	; 0x2f
    2430:	8f a5       	ldd	r24, Y+47	; 0x2f
    2432:	98 a9       	ldd	r25, Y+48	; 0x30
    2434:	9c a7       	std	Y+44, r25	; 0x2c
    2436:	8b a7       	std	Y+43, r24	; 0x2b
    2438:	8b a5       	ldd	r24, Y+43	; 0x2b
    243a:	9c a5       	ldd	r25, Y+44	; 0x2c
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	f1 f7       	brne	.-4      	; 0x243c <LCD_Command+0xfc>
    2440:	9c a7       	std	Y+44, r25	; 0x2c
    2442:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,1);
    2444:	83 e4       	ldi	r24, 0x43	; 67
    2446:	62 e0       	ldi	r22, 0x02	; 2
    2448:	41 e0       	ldi	r20, 0x01	; 1
    244a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_write_PIN>
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	a0 e8       	ldi	r26, 0x80	; 128
    2454:	bf e3       	ldi	r27, 0x3F	; 63
    2456:	8f a3       	std	Y+39, r24	; 0x27
    2458:	98 a7       	std	Y+40, r25	; 0x28
    245a:	a9 a7       	std	Y+41, r26	; 0x29
    245c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    245e:	6f a1       	ldd	r22, Y+39	; 0x27
    2460:	78 a5       	ldd	r23, Y+40	; 0x28
    2462:	89 a5       	ldd	r24, Y+41	; 0x29
    2464:	9a a5       	ldd	r25, Y+42	; 0x2a
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	4a e7       	ldi	r20, 0x7A	; 122
    246c:	53 e4       	ldi	r21, 0x43	; 67
    246e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	8b a3       	std	Y+35, r24	; 0x23
    2478:	9c a3       	std	Y+36, r25	; 0x24
    247a:	ad a3       	std	Y+37, r26	; 0x25
    247c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    247e:	6b a1       	ldd	r22, Y+35	; 0x23
    2480:	7c a1       	ldd	r23, Y+36	; 0x24
    2482:	8d a1       	ldd	r24, Y+37	; 0x25
    2484:	9e a1       	ldd	r25, Y+38	; 0x26
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	40 e8       	ldi	r20, 0x80	; 128
    248c:	5f e3       	ldi	r21, 0x3F	; 63
    248e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2492:	88 23       	and	r24, r24
    2494:	2c f4       	brge	.+10     	; 0x24a0 <LCD_Command+0x160>
		__ticks = 1;
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	9a a3       	std	Y+34, r25	; 0x22
    249c:	89 a3       	std	Y+33, r24	; 0x21
    249e:	3f c0       	rjmp	.+126    	; 0x251e <LCD_Command+0x1de>
	else if (__tmp > 65535)
    24a0:	6b a1       	ldd	r22, Y+35	; 0x23
    24a2:	7c a1       	ldd	r23, Y+36	; 0x24
    24a4:	8d a1       	ldd	r24, Y+37	; 0x25
    24a6:	9e a1       	ldd	r25, Y+38	; 0x26
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	3f ef       	ldi	r19, 0xFF	; 255
    24ac:	4f e7       	ldi	r20, 0x7F	; 127
    24ae:	57 e4       	ldi	r21, 0x47	; 71
    24b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24b4:	18 16       	cp	r1, r24
    24b6:	4c f5       	brge	.+82     	; 0x250a <LCD_Command+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b8:	6f a1       	ldd	r22, Y+39	; 0x27
    24ba:	78 a5       	ldd	r23, Y+40	; 0x28
    24bc:	89 a5       	ldd	r24, Y+41	; 0x29
    24be:	9a a5       	ldd	r25, Y+42	; 0x2a
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	40 e2       	ldi	r20, 0x20	; 32
    24c6:	51 e4       	ldi	r21, 0x41	; 65
    24c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	bc 01       	movw	r22, r24
    24d2:	cd 01       	movw	r24, r26
    24d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	9a a3       	std	Y+34, r25	; 0x22
    24de:	89 a3       	std	Y+33, r24	; 0x21
    24e0:	0f c0       	rjmp	.+30     	; 0x2500 <LCD_Command+0x1c0>
    24e2:	89 e1       	ldi	r24, 0x19	; 25
    24e4:	90 e0       	ldi	r25, 0x00	; 0
    24e6:	98 a3       	std	Y+32, r25	; 0x20
    24e8:	8f 8f       	std	Y+31, r24	; 0x1f
    24ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24ec:	98 a1       	ldd	r25, Y+32	; 0x20
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	f1 f7       	brne	.-4      	; 0x24ee <LCD_Command+0x1ae>
    24f2:	98 a3       	std	Y+32, r25	; 0x20
    24f4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f6:	89 a1       	ldd	r24, Y+33	; 0x21
    24f8:	9a a1       	ldd	r25, Y+34	; 0x22
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	9a a3       	std	Y+34, r25	; 0x22
    24fe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2500:	89 a1       	ldd	r24, Y+33	; 0x21
    2502:	9a a1       	ldd	r25, Y+34	; 0x22
    2504:	00 97       	sbiw	r24, 0x00	; 0
    2506:	69 f7       	brne	.-38     	; 0x24e2 <LCD_Command+0x1a2>
    2508:	14 c0       	rjmp	.+40     	; 0x2532 <LCD_Command+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250a:	6b a1       	ldd	r22, Y+35	; 0x23
    250c:	7c a1       	ldd	r23, Y+36	; 0x24
    250e:	8d a1       	ldd	r24, Y+37	; 0x25
    2510:	9e a1       	ldd	r25, Y+38	; 0x26
    2512:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	9a a3       	std	Y+34, r25	; 0x22
    251c:	89 a3       	std	Y+33, r24	; 0x21
    251e:	89 a1       	ldd	r24, Y+33	; 0x21
    2520:	9a a1       	ldd	r25, Y+34	; 0x22
    2522:	9e 8f       	std	Y+30, r25	; 0x1e
    2524:	8d 8f       	std	Y+29, r24	; 0x1d
    2526:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2528:	9e 8d       	ldd	r25, Y+30	; 0x1e
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	f1 f7       	brne	.-4      	; 0x252a <LCD_Command+0x1ea>
    252e:	9e 8f       	std	Y+30, r25	; 0x1e
    2530:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_write_high_nibble(LCD_data_port,cmd>>4);
    2532:	89 ad       	ldd	r24, Y+57	; 0x39
    2534:	98 2f       	mov	r25, r24
    2536:	92 95       	swap	r25
    2538:	9f 70       	andi	r25, 0x0F	; 15
    253a:	84 e4       	ldi	r24, 0x44	; 68
    253c:	69 2f       	mov	r22, r25
    253e:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <DIO_write_high_nibble>
	LCD_refresh();
    2542:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_refresh>
	DIO_write_high_nibble(LCD_data_port,cmd);
    2546:	84 e4       	ldi	r24, 0x44	; 68
    2548:	69 ad       	ldd	r22, Y+57	; 0x39
    254a:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <DIO_write_high_nibble>
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	a0 e8       	ldi	r26, 0x80	; 128
    2554:	bf e3       	ldi	r27, 0x3F	; 63
    2556:	89 8f       	std	Y+25, r24	; 0x19
    2558:	9a 8f       	std	Y+26, r25	; 0x1a
    255a:	ab 8f       	std	Y+27, r26	; 0x1b
    255c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    255e:	69 8d       	ldd	r22, Y+25	; 0x19
    2560:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2562:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2564:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	4a e7       	ldi	r20, 0x7A	; 122
    256c:	53 e4       	ldi	r21, 0x43	; 67
    256e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	8d 8b       	std	Y+21, r24	; 0x15
    2578:	9e 8b       	std	Y+22, r25	; 0x16
    257a:	af 8b       	std	Y+23, r26	; 0x17
    257c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    257e:	6d 89       	ldd	r22, Y+21	; 0x15
    2580:	7e 89       	ldd	r23, Y+22	; 0x16
    2582:	8f 89       	ldd	r24, Y+23	; 0x17
    2584:	98 8d       	ldd	r25, Y+24	; 0x18
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	40 e8       	ldi	r20, 0x80	; 128
    258c:	5f e3       	ldi	r21, 0x3F	; 63
    258e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2592:	88 23       	and	r24, r24
    2594:	2c f4       	brge	.+10     	; 0x25a0 <LCD_Command+0x260>
		__ticks = 1;
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	9c 8b       	std	Y+20, r25	; 0x14
    259c:	8b 8b       	std	Y+19, r24	; 0x13
    259e:	3f c0       	rjmp	.+126    	; 0x261e <LCD_Command+0x2de>
	else if (__tmp > 65535)
    25a0:	6d 89       	ldd	r22, Y+21	; 0x15
    25a2:	7e 89       	ldd	r23, Y+22	; 0x16
    25a4:	8f 89       	ldd	r24, Y+23	; 0x17
    25a6:	98 8d       	ldd	r25, Y+24	; 0x18
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	3f ef       	ldi	r19, 0xFF	; 255
    25ac:	4f e7       	ldi	r20, 0x7F	; 127
    25ae:	57 e4       	ldi	r21, 0x47	; 71
    25b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25b4:	18 16       	cp	r1, r24
    25b6:	4c f5       	brge	.+82     	; 0x260a <LCD_Command+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b8:	69 8d       	ldd	r22, Y+25	; 0x19
    25ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	40 e2       	ldi	r20, 0x20	; 32
    25c6:	51 e4       	ldi	r21, 0x41	; 65
    25c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	bc 01       	movw	r22, r24
    25d2:	cd 01       	movw	r24, r26
    25d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	9c 8b       	std	Y+20, r25	; 0x14
    25de:	8b 8b       	std	Y+19, r24	; 0x13
    25e0:	0f c0       	rjmp	.+30     	; 0x2600 <LCD_Command+0x2c0>
    25e2:	89 e1       	ldi	r24, 0x19	; 25
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	9a 8b       	std	Y+18, r25	; 0x12
    25e8:	89 8b       	std	Y+17, r24	; 0x11
    25ea:	89 89       	ldd	r24, Y+17	; 0x11
    25ec:	9a 89       	ldd	r25, Y+18	; 0x12
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	f1 f7       	brne	.-4      	; 0x25ee <LCD_Command+0x2ae>
    25f2:	9a 8b       	std	Y+18, r25	; 0x12
    25f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f6:	8b 89       	ldd	r24, Y+19	; 0x13
    25f8:	9c 89       	ldd	r25, Y+20	; 0x14
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	9c 8b       	std	Y+20, r25	; 0x14
    25fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2600:	8b 89       	ldd	r24, Y+19	; 0x13
    2602:	9c 89       	ldd	r25, Y+20	; 0x14
    2604:	00 97       	sbiw	r24, 0x00	; 0
    2606:	69 f7       	brne	.-38     	; 0x25e2 <LCD_Command+0x2a2>
    2608:	14 c0       	rjmp	.+40     	; 0x2632 <LCD_Command+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    260a:	6d 89       	ldd	r22, Y+21	; 0x15
    260c:	7e 89       	ldd	r23, Y+22	; 0x16
    260e:	8f 89       	ldd	r24, Y+23	; 0x17
    2610:	98 8d       	ldd	r25, Y+24	; 0x18
    2612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	9c 8b       	std	Y+20, r25	; 0x14
    261c:	8b 8b       	std	Y+19, r24	; 0x13
    261e:	8b 89       	ldd	r24, Y+19	; 0x13
    2620:	9c 89       	ldd	r25, Y+20	; 0x14
    2622:	98 8b       	std	Y+16, r25	; 0x10
    2624:	8f 87       	std	Y+15, r24	; 0x0f
    2626:	8f 85       	ldd	r24, Y+15	; 0x0f
    2628:	98 89       	ldd	r25, Y+16	; 0x10
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	f1 f7       	brne	.-4      	; 0x262a <LCD_Command+0x2ea>
    262e:	98 8b       	std	Y+16, r25	; 0x10
    2630:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,0);
    2632:	83 e4       	ldi	r24, 0x43	; 67
    2634:	62 e0       	ldi	r22, 0x02	; 2
    2636:	40 e0       	ldi	r20, 0x00	; 0
    2638:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_write_PIN>
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	a0 e8       	ldi	r26, 0x80	; 128
    2642:	bf e3       	ldi	r27, 0x3F	; 63
    2644:	8b 87       	std	Y+11, r24	; 0x0b
    2646:	9c 87       	std	Y+12, r25	; 0x0c
    2648:	ad 87       	std	Y+13, r26	; 0x0d
    264a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    264c:	6b 85       	ldd	r22, Y+11	; 0x0b
    264e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2650:	8d 85       	ldd	r24, Y+13	; 0x0d
    2652:	9e 85       	ldd	r25, Y+14	; 0x0e
    2654:	20 e0       	ldi	r18, 0x00	; 0
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	4a e7       	ldi	r20, 0x7A	; 122
    265a:	53 e4       	ldi	r21, 0x43	; 67
    265c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	8f 83       	std	Y+7, r24	; 0x07
    2666:	98 87       	std	Y+8, r25	; 0x08
    2668:	a9 87       	std	Y+9, r26	; 0x09
    266a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    266c:	6f 81       	ldd	r22, Y+7	; 0x07
    266e:	78 85       	ldd	r23, Y+8	; 0x08
    2670:	89 85       	ldd	r24, Y+9	; 0x09
    2672:	9a 85       	ldd	r25, Y+10	; 0x0a
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	40 e8       	ldi	r20, 0x80	; 128
    267a:	5f e3       	ldi	r21, 0x3F	; 63
    267c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2680:	88 23       	and	r24, r24
    2682:	2c f4       	brge	.+10     	; 0x268e <LCD_Command+0x34e>
		__ticks = 1;
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	9e 83       	std	Y+6, r25	; 0x06
    268a:	8d 83       	std	Y+5, r24	; 0x05
    268c:	3f c0       	rjmp	.+126    	; 0x270c <LCD_Command+0x3cc>
	else if (__tmp > 65535)
    268e:	6f 81       	ldd	r22, Y+7	; 0x07
    2690:	78 85       	ldd	r23, Y+8	; 0x08
    2692:	89 85       	ldd	r24, Y+9	; 0x09
    2694:	9a 85       	ldd	r25, Y+10	; 0x0a
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	3f ef       	ldi	r19, 0xFF	; 255
    269a:	4f e7       	ldi	r20, 0x7F	; 127
    269c:	57 e4       	ldi	r21, 0x47	; 71
    269e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26a2:	18 16       	cp	r1, r24
    26a4:	4c f5       	brge	.+82     	; 0x26f8 <LCD_Command+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	40 e2       	ldi	r20, 0x20	; 32
    26b4:	51 e4       	ldi	r21, 0x41	; 65
    26b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	bc 01       	movw	r22, r24
    26c0:	cd 01       	movw	r24, r26
    26c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	9e 83       	std	Y+6, r25	; 0x06
    26cc:	8d 83       	std	Y+5, r24	; 0x05
    26ce:	0f c0       	rjmp	.+30     	; 0x26ee <LCD_Command+0x3ae>
    26d0:	89 e1       	ldi	r24, 0x19	; 25
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	9c 83       	std	Y+4, r25	; 0x04
    26d6:	8b 83       	std	Y+3, r24	; 0x03
    26d8:	8b 81       	ldd	r24, Y+3	; 0x03
    26da:	9c 81       	ldd	r25, Y+4	; 0x04
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	f1 f7       	brne	.-4      	; 0x26dc <LCD_Command+0x39c>
    26e0:	9c 83       	std	Y+4, r25	; 0x04
    26e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e4:	8d 81       	ldd	r24, Y+5	; 0x05
    26e6:	9e 81       	ldd	r25, Y+6	; 0x06
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	9e 83       	std	Y+6, r25	; 0x06
    26ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ee:	8d 81       	ldd	r24, Y+5	; 0x05
    26f0:	9e 81       	ldd	r25, Y+6	; 0x06
    26f2:	00 97       	sbiw	r24, 0x00	; 0
    26f4:	69 f7       	brne	.-38     	; 0x26d0 <LCD_Command+0x390>
    26f6:	14 c0       	rjmp	.+40     	; 0x2720 <LCD_Command+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f8:	6f 81       	ldd	r22, Y+7	; 0x07
    26fa:	78 85       	ldd	r23, Y+8	; 0x08
    26fc:	89 85       	ldd	r24, Y+9	; 0x09
    26fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	9e 83       	std	Y+6, r25	; 0x06
    270a:	8d 83       	std	Y+5, r24	; 0x05
    270c:	8d 81       	ldd	r24, Y+5	; 0x05
    270e:	9e 81       	ldd	r25, Y+6	; 0x06
    2710:	9a 83       	std	Y+2, r25	; 0x02
    2712:	89 83       	std	Y+1, r24	; 0x01
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	9a 81       	ldd	r25, Y+2	; 0x02
    2718:	01 97       	sbiw	r24, 0x01	; 1
    271a:	f1 f7       	brne	.-4      	; 0x2718 <LCD_Command+0x3d8>
    271c:	9a 83       	std	Y+2, r25	; 0x02
    271e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2720:	e9 96       	adiw	r28, 0x39	; 57
    2722:	0f b6       	in	r0, 0x3f	; 63
    2724:	f8 94       	cli
    2726:	de bf       	out	0x3e, r29	; 62
    2728:	0f be       	out	0x3f, r0	; 63
    272a:	cd bf       	out	0x3d, r28	; 61
    272c:	cf 91       	pop	r28
    272e:	df 91       	pop	r29
    2730:	08 95       	ret

00002732 <LCD_init>:
void LCD_init(void)
{
    2732:	df 93       	push	r29
    2734:	cf 93       	push	r28
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
    273a:	2e 97       	sbiw	r28, 0x0e	; 14
    273c:	0f b6       	in	r0, 0x3f	; 63
    273e:	f8 94       	cli
    2740:	de bf       	out	0x3e, r29	; 62
    2742:	0f be       	out	0x3f, r0	; 63
    2744:	cd bf       	out	0x3d, r28	; 61
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	a8 e4       	ldi	r26, 0x48	; 72
    274c:	b3 e4       	ldi	r27, 0x43	; 67
    274e:	8b 87       	std	Y+11, r24	; 0x0b
    2750:	9c 87       	std	Y+12, r25	; 0x0c
    2752:	ad 87       	std	Y+13, r26	; 0x0d
    2754:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2756:	6b 85       	ldd	r22, Y+11	; 0x0b
    2758:	7c 85       	ldd	r23, Y+12	; 0x0c
    275a:	8d 85       	ldd	r24, Y+13	; 0x0d
    275c:	9e 85       	ldd	r25, Y+14	; 0x0e
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	4a e7       	ldi	r20, 0x7A	; 122
    2764:	53 e4       	ldi	r21, 0x43	; 67
    2766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	8f 83       	std	Y+7, r24	; 0x07
    2770:	98 87       	std	Y+8, r25	; 0x08
    2772:	a9 87       	std	Y+9, r26	; 0x09
    2774:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2776:	6f 81       	ldd	r22, Y+7	; 0x07
    2778:	78 85       	ldd	r23, Y+8	; 0x08
    277a:	89 85       	ldd	r24, Y+9	; 0x09
    277c:	9a 85       	ldd	r25, Y+10	; 0x0a
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e8       	ldi	r20, 0x80	; 128
    2784:	5f e3       	ldi	r21, 0x3F	; 63
    2786:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    278a:	88 23       	and	r24, r24
    278c:	2c f4       	brge	.+10     	; 0x2798 <LCD_init+0x66>
		__ticks = 1;
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	9e 83       	std	Y+6, r25	; 0x06
    2794:	8d 83       	std	Y+5, r24	; 0x05
    2796:	3f c0       	rjmp	.+126    	; 0x2816 <LCD_init+0xe4>
	else if (__tmp > 65535)
    2798:	6f 81       	ldd	r22, Y+7	; 0x07
    279a:	78 85       	ldd	r23, Y+8	; 0x08
    279c:	89 85       	ldd	r24, Y+9	; 0x09
    279e:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	3f ef       	ldi	r19, 0xFF	; 255
    27a4:	4f e7       	ldi	r20, 0x7F	; 127
    27a6:	57 e4       	ldi	r21, 0x47	; 71
    27a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ac:	18 16       	cp	r1, r24
    27ae:	4c f5       	brge	.+82     	; 0x2802 <LCD_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	40 e2       	ldi	r20, 0x20	; 32
    27be:	51 e4       	ldi	r21, 0x41	; 65
    27c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	bc 01       	movw	r22, r24
    27ca:	cd 01       	movw	r24, r26
    27cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	9e 83       	std	Y+6, r25	; 0x06
    27d6:	8d 83       	std	Y+5, r24	; 0x05
    27d8:	0f c0       	rjmp	.+30     	; 0x27f8 <LCD_init+0xc6>
    27da:	89 e1       	ldi	r24, 0x19	; 25
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	9c 83       	std	Y+4, r25	; 0x04
    27e0:	8b 83       	std	Y+3, r24	; 0x03
    27e2:	8b 81       	ldd	r24, Y+3	; 0x03
    27e4:	9c 81       	ldd	r25, Y+4	; 0x04
    27e6:	01 97       	sbiw	r24, 0x01	; 1
    27e8:	f1 f7       	brne	.-4      	; 0x27e6 <LCD_init+0xb4>
    27ea:	9c 83       	std	Y+4, r25	; 0x04
    27ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ee:	8d 81       	ldd	r24, Y+5	; 0x05
    27f0:	9e 81       	ldd	r25, Y+6	; 0x06
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	9e 83       	std	Y+6, r25	; 0x06
    27f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f8:	8d 81       	ldd	r24, Y+5	; 0x05
    27fa:	9e 81       	ldd	r25, Y+6	; 0x06
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	69 f7       	brne	.-38     	; 0x27da <LCD_init+0xa8>
    2800:	14 c0       	rjmp	.+40     	; 0x282a <LCD_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2802:	6f 81       	ldd	r22, Y+7	; 0x07
    2804:	78 85       	ldd	r23, Y+8	; 0x08
    2806:	89 85       	ldd	r24, Y+9	; 0x09
    2808:	9a 85       	ldd	r25, Y+10	; 0x0a
    280a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	9e 83       	std	Y+6, r25	; 0x06
    2814:	8d 83       	std	Y+5, r24	; 0x05
    2816:	8d 81       	ldd	r24, Y+5	; 0x05
    2818:	9e 81       	ldd	r25, Y+6	; 0x06
    281a:	9a 83       	std	Y+2, r25	; 0x02
    281c:	89 83       	std	Y+1, r24	; 0x01
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	9a 81       	ldd	r25, Y+2	; 0x02
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	f1 f7       	brne	.-4      	; 0x2822 <LCD_init+0xf0>
    2826:	9a 83       	std	Y+2, r25	; 0x02
    2828:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	DIO_setPINDir(LCD_ctrl_port,RS,out);
    282a:	83 e4       	ldi	r24, 0x43	; 67
    282c:	60 e0       	ldi	r22, 0x00	; 0
    282e:	41 e0       	ldi	r20, 0x01	; 1
    2830:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_setPINDir>
	DIO_setPINDir(LCD_ctrl_port,RW,out);
    2834:	83 e4       	ldi	r24, 0x43	; 67
    2836:	61 e0       	ldi	r22, 0x01	; 1
    2838:	41 e0       	ldi	r20, 0x01	; 1
    283a:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_setPINDir>
	DIO_setPINDir(LCD_ctrl_port,EN,out);
    283e:	83 e4       	ldi	r24, 0x43	; 67
    2840:	62 e0       	ldi	r22, 0x02	; 2
    2842:	41 e0       	ldi	r20, 0x01	; 1
    2844:	0e 94 06 07 	call	0xe0c	; 0xe0c <DIO_setPINDir>
	DIO_write_high_nibbleDir(LCD_data_port,out);
    2848:	84 e4       	ldi	r24, 0x44	; 68
    284a:	61 e0       	ldi	r22, 0x01	; 1
    284c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <DIO_write_high_nibbleDir>
	LCD_Command(LCD_Cursor_reset);
    2850:	82 e0       	ldi	r24, 0x02	; 2
    2852:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_Command>
	LCD_Command(LCD_4bit_2line);
    2856:	88 e2       	ldi	r24, 0x28	; 40
    2858:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_Command>
	LCD_Command(LCD_displayOn_cursorOn);
    285c:	8e e0       	ldi	r24, 0x0E	; 14
    285e:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_Command>
	LCD_Command(LCD_clear_cmd);
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_Command>
}
    2868:	2e 96       	adiw	r28, 0x0e	; 14
    286a:	0f b6       	in	r0, 0x3f	; 63
    286c:	f8 94       	cli
    286e:	de bf       	out	0x3e, r29	; 62
    2870:	0f be       	out	0x3f, r0	; 63
    2872:	cd bf       	out	0x3d, r28	; 61
    2874:	cf 91       	pop	r28
    2876:	df 91       	pop	r29
    2878:	08 95       	ret

0000287a <LCD_displayChar>:

void LCD_displayChar(uint8 data)
{
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
    2882:	e9 97       	sbiw	r28, 0x39	; 57
    2884:	0f b6       	in	r0, 0x3f	; 63
    2886:	f8 94       	cli
    2888:	de bf       	out	0x3e, r29	; 62
    288a:	0f be       	out	0x3f, r0	; 63
    288c:	cd bf       	out	0x3d, r28	; 61
    288e:	89 af       	std	Y+57, r24	; 0x39
	DIO_write_PIN(LCD_ctrl_port,RS,1);
    2890:	83 e4       	ldi	r24, 0x43	; 67
    2892:	60 e0       	ldi	r22, 0x00	; 0
    2894:	41 e0       	ldi	r20, 0x01	; 1
    2896:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_write_PIN>
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	a0 e8       	ldi	r26, 0x80	; 128
    28a0:	bf e3       	ldi	r27, 0x3F	; 63
    28a2:	8d ab       	std	Y+53, r24	; 0x35
    28a4:	9e ab       	std	Y+54, r25	; 0x36
    28a6:	af ab       	std	Y+55, r26	; 0x37
    28a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28aa:	6d a9       	ldd	r22, Y+53	; 0x35
    28ac:	7e a9       	ldd	r23, Y+54	; 0x36
    28ae:	8f a9       	ldd	r24, Y+55	; 0x37
    28b0:	98 ad       	ldd	r25, Y+56	; 0x38
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	4a e7       	ldi	r20, 0x7A	; 122
    28b8:	53 e4       	ldi	r21, 0x43	; 67
    28ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	89 ab       	std	Y+49, r24	; 0x31
    28c4:	9a ab       	std	Y+50, r25	; 0x32
    28c6:	ab ab       	std	Y+51, r26	; 0x33
    28c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    28ca:	69 a9       	ldd	r22, Y+49	; 0x31
    28cc:	7a a9       	ldd	r23, Y+50	; 0x32
    28ce:	8b a9       	ldd	r24, Y+51	; 0x33
    28d0:	9c a9       	ldd	r25, Y+52	; 0x34
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	40 e8       	ldi	r20, 0x80	; 128
    28d8:	5f e3       	ldi	r21, 0x3F	; 63
    28da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28de:	88 23       	and	r24, r24
    28e0:	2c f4       	brge	.+10     	; 0x28ec <LCD_displayChar+0x72>
		__ticks = 1;
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	98 ab       	std	Y+48, r25	; 0x30
    28e8:	8f a7       	std	Y+47, r24	; 0x2f
    28ea:	3f c0       	rjmp	.+126    	; 0x296a <LCD_displayChar+0xf0>
	else if (__tmp > 65535)
    28ec:	69 a9       	ldd	r22, Y+49	; 0x31
    28ee:	7a a9       	ldd	r23, Y+50	; 0x32
    28f0:	8b a9       	ldd	r24, Y+51	; 0x33
    28f2:	9c a9       	ldd	r25, Y+52	; 0x34
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	3f ef       	ldi	r19, 0xFF	; 255
    28f8:	4f e7       	ldi	r20, 0x7F	; 127
    28fa:	57 e4       	ldi	r21, 0x47	; 71
    28fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2900:	18 16       	cp	r1, r24
    2902:	4c f5       	brge	.+82     	; 0x2956 <LCD_displayChar+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2904:	6d a9       	ldd	r22, Y+53	; 0x35
    2906:	7e a9       	ldd	r23, Y+54	; 0x36
    2908:	8f a9       	ldd	r24, Y+55	; 0x37
    290a:	98 ad       	ldd	r25, Y+56	; 0x38
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e2       	ldi	r20, 0x20	; 32
    2912:	51 e4       	ldi	r21, 0x41	; 65
    2914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	bc 01       	movw	r22, r24
    291e:	cd 01       	movw	r24, r26
    2920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	98 ab       	std	Y+48, r25	; 0x30
    292a:	8f a7       	std	Y+47, r24	; 0x2f
    292c:	0f c0       	rjmp	.+30     	; 0x294c <LCD_displayChar+0xd2>
    292e:	89 e1       	ldi	r24, 0x19	; 25
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	9e a7       	std	Y+46, r25	; 0x2e
    2934:	8d a7       	std	Y+45, r24	; 0x2d
    2936:	8d a5       	ldd	r24, Y+45	; 0x2d
    2938:	9e a5       	ldd	r25, Y+46	; 0x2e
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	f1 f7       	brne	.-4      	; 0x293a <LCD_displayChar+0xc0>
    293e:	9e a7       	std	Y+46, r25	; 0x2e
    2940:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2942:	8f a5       	ldd	r24, Y+47	; 0x2f
    2944:	98 a9       	ldd	r25, Y+48	; 0x30
    2946:	01 97       	sbiw	r24, 0x01	; 1
    2948:	98 ab       	std	Y+48, r25	; 0x30
    294a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    294c:	8f a5       	ldd	r24, Y+47	; 0x2f
    294e:	98 a9       	ldd	r25, Y+48	; 0x30
    2950:	00 97       	sbiw	r24, 0x00	; 0
    2952:	69 f7       	brne	.-38     	; 0x292e <LCD_displayChar+0xb4>
    2954:	14 c0       	rjmp	.+40     	; 0x297e <LCD_displayChar+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2956:	69 a9       	ldd	r22, Y+49	; 0x31
    2958:	7a a9       	ldd	r23, Y+50	; 0x32
    295a:	8b a9       	ldd	r24, Y+51	; 0x33
    295c:	9c a9       	ldd	r25, Y+52	; 0x34
    295e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	98 ab       	std	Y+48, r25	; 0x30
    2968:	8f a7       	std	Y+47, r24	; 0x2f
    296a:	8f a5       	ldd	r24, Y+47	; 0x2f
    296c:	98 a9       	ldd	r25, Y+48	; 0x30
    296e:	9c a7       	std	Y+44, r25	; 0x2c
    2970:	8b a7       	std	Y+43, r24	; 0x2b
    2972:	8b a5       	ldd	r24, Y+43	; 0x2b
    2974:	9c a5       	ldd	r25, Y+44	; 0x2c
    2976:	01 97       	sbiw	r24, 0x01	; 1
    2978:	f1 f7       	brne	.-4      	; 0x2976 <LCD_displayChar+0xfc>
    297a:	9c a7       	std	Y+44, r25	; 0x2c
    297c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,1);
    297e:	83 e4       	ldi	r24, 0x43	; 67
    2980:	62 e0       	ldi	r22, 0x02	; 2
    2982:	41 e0       	ldi	r20, 0x01	; 1
    2984:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_write_PIN>
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	a0 e8       	ldi	r26, 0x80	; 128
    298e:	bf e3       	ldi	r27, 0x3F	; 63
    2990:	8f a3       	std	Y+39, r24	; 0x27
    2992:	98 a7       	std	Y+40, r25	; 0x28
    2994:	a9 a7       	std	Y+41, r26	; 0x29
    2996:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2998:	6f a1       	ldd	r22, Y+39	; 0x27
    299a:	78 a5       	ldd	r23, Y+40	; 0x28
    299c:	89 a5       	ldd	r24, Y+41	; 0x29
    299e:	9a a5       	ldd	r25, Y+42	; 0x2a
    29a0:	20 e0       	ldi	r18, 0x00	; 0
    29a2:	30 e0       	ldi	r19, 0x00	; 0
    29a4:	4a e7       	ldi	r20, 0x7A	; 122
    29a6:	53 e4       	ldi	r21, 0x43	; 67
    29a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	8b a3       	std	Y+35, r24	; 0x23
    29b2:	9c a3       	std	Y+36, r25	; 0x24
    29b4:	ad a3       	std	Y+37, r26	; 0x25
    29b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29b8:	6b a1       	ldd	r22, Y+35	; 0x23
    29ba:	7c a1       	ldd	r23, Y+36	; 0x24
    29bc:	8d a1       	ldd	r24, Y+37	; 0x25
    29be:	9e a1       	ldd	r25, Y+38	; 0x26
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	40 e8       	ldi	r20, 0x80	; 128
    29c6:	5f e3       	ldi	r21, 0x3F	; 63
    29c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29cc:	88 23       	and	r24, r24
    29ce:	2c f4       	brge	.+10     	; 0x29da <LCD_displayChar+0x160>
		__ticks = 1;
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	9a a3       	std	Y+34, r25	; 0x22
    29d6:	89 a3       	std	Y+33, r24	; 0x21
    29d8:	3f c0       	rjmp	.+126    	; 0x2a58 <LCD_displayChar+0x1de>
	else if (__tmp > 65535)
    29da:	6b a1       	ldd	r22, Y+35	; 0x23
    29dc:	7c a1       	ldd	r23, Y+36	; 0x24
    29de:	8d a1       	ldd	r24, Y+37	; 0x25
    29e0:	9e a1       	ldd	r25, Y+38	; 0x26
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	3f ef       	ldi	r19, 0xFF	; 255
    29e6:	4f e7       	ldi	r20, 0x7F	; 127
    29e8:	57 e4       	ldi	r21, 0x47	; 71
    29ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ee:	18 16       	cp	r1, r24
    29f0:	4c f5       	brge	.+82     	; 0x2a44 <LCD_displayChar+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f2:	6f a1       	ldd	r22, Y+39	; 0x27
    29f4:	78 a5       	ldd	r23, Y+40	; 0x28
    29f6:	89 a5       	ldd	r24, Y+41	; 0x29
    29f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	40 e2       	ldi	r20, 0x20	; 32
    2a00:	51 e4       	ldi	r21, 0x41	; 65
    2a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	bc 01       	movw	r22, r24
    2a0c:	cd 01       	movw	r24, r26
    2a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	9a a3       	std	Y+34, r25	; 0x22
    2a18:	89 a3       	std	Y+33, r24	; 0x21
    2a1a:	0f c0       	rjmp	.+30     	; 0x2a3a <LCD_displayChar+0x1c0>
    2a1c:	89 e1       	ldi	r24, 0x19	; 25
    2a1e:	90 e0       	ldi	r25, 0x00	; 0
    2a20:	98 a3       	std	Y+32, r25	; 0x20
    2a22:	8f 8f       	std	Y+31, r24	; 0x1f
    2a24:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a26:	98 a1       	ldd	r25, Y+32	; 0x20
    2a28:	01 97       	sbiw	r24, 0x01	; 1
    2a2a:	f1 f7       	brne	.-4      	; 0x2a28 <LCD_displayChar+0x1ae>
    2a2c:	98 a3       	std	Y+32, r25	; 0x20
    2a2e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a30:	89 a1       	ldd	r24, Y+33	; 0x21
    2a32:	9a a1       	ldd	r25, Y+34	; 0x22
    2a34:	01 97       	sbiw	r24, 0x01	; 1
    2a36:	9a a3       	std	Y+34, r25	; 0x22
    2a38:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a3a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a3c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a3e:	00 97       	sbiw	r24, 0x00	; 0
    2a40:	69 f7       	brne	.-38     	; 0x2a1c <LCD_displayChar+0x1a2>
    2a42:	14 c0       	rjmp	.+40     	; 0x2a6c <LCD_displayChar+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a44:	6b a1       	ldd	r22, Y+35	; 0x23
    2a46:	7c a1       	ldd	r23, Y+36	; 0x24
    2a48:	8d a1       	ldd	r24, Y+37	; 0x25
    2a4a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	9a a3       	std	Y+34, r25	; 0x22
    2a56:	89 a3       	std	Y+33, r24	; 0x21
    2a58:	89 a1       	ldd	r24, Y+33	; 0x21
    2a5a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a5c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a5e:	8d 8f       	std	Y+29, r24	; 0x1d
    2a60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	f1 f7       	brne	.-4      	; 0x2a64 <LCD_displayChar+0x1ea>
    2a68:	9e 8f       	std	Y+30, r25	; 0x1e
    2a6a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_write_high_nibble(LCD_data_port,HIGH_NIBBLE_OF(data));
    2a6c:	89 ad       	ldd	r24, Y+57	; 0x39
    2a6e:	98 2f       	mov	r25, r24
    2a70:	92 95       	swap	r25
    2a72:	9f 70       	andi	r25, 0x0F	; 15
    2a74:	84 e4       	ldi	r24, 0x44	; 68
    2a76:	69 2f       	mov	r22, r25
    2a78:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <DIO_write_high_nibble>
	LCD_refresh();
    2a7c:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_refresh>
	DIO_write_high_nibble(LCD_data_port,data);
    2a80:	84 e4       	ldi	r24, 0x44	; 68
    2a82:	69 ad       	ldd	r22, Y+57	; 0x39
    2a84:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <DIO_write_high_nibble>
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	a0 e8       	ldi	r26, 0x80	; 128
    2a8e:	bf e3       	ldi	r27, 0x3F	; 63
    2a90:	89 8f       	std	Y+25, r24	; 0x19
    2a92:	9a 8f       	std	Y+26, r25	; 0x1a
    2a94:	ab 8f       	std	Y+27, r26	; 0x1b
    2a96:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a98:	69 8d       	ldd	r22, Y+25	; 0x19
    2a9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	4a e7       	ldi	r20, 0x7A	; 122
    2aa6:	53 e4       	ldi	r21, 0x43	; 67
    2aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	8d 8b       	std	Y+21, r24	; 0x15
    2ab2:	9e 8b       	std	Y+22, r25	; 0x16
    2ab4:	af 8b       	std	Y+23, r26	; 0x17
    2ab6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ab8:	6d 89       	ldd	r22, Y+21	; 0x15
    2aba:	7e 89       	ldd	r23, Y+22	; 0x16
    2abc:	8f 89       	ldd	r24, Y+23	; 0x17
    2abe:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	40 e8       	ldi	r20, 0x80	; 128
    2ac6:	5f e3       	ldi	r21, 0x3F	; 63
    2ac8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2acc:	88 23       	and	r24, r24
    2ace:	2c f4       	brge	.+10     	; 0x2ada <LCD_displayChar+0x260>
		__ticks = 1;
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	9c 8b       	std	Y+20, r25	; 0x14
    2ad6:	8b 8b       	std	Y+19, r24	; 0x13
    2ad8:	3f c0       	rjmp	.+126    	; 0x2b58 <LCD_displayChar+0x2de>
	else if (__tmp > 65535)
    2ada:	6d 89       	ldd	r22, Y+21	; 0x15
    2adc:	7e 89       	ldd	r23, Y+22	; 0x16
    2ade:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	3f ef       	ldi	r19, 0xFF	; 255
    2ae6:	4f e7       	ldi	r20, 0x7F	; 127
    2ae8:	57 e4       	ldi	r21, 0x47	; 71
    2aea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aee:	18 16       	cp	r1, r24
    2af0:	4c f5       	brge	.+82     	; 0x2b44 <LCD_displayChar+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af2:	69 8d       	ldd	r22, Y+25	; 0x19
    2af4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2af6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2af8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	40 e2       	ldi	r20, 0x20	; 32
    2b00:	51 e4       	ldi	r21, 0x41	; 65
    2b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	9c 8b       	std	Y+20, r25	; 0x14
    2b18:	8b 8b       	std	Y+19, r24	; 0x13
    2b1a:	0f c0       	rjmp	.+30     	; 0x2b3a <LCD_displayChar+0x2c0>
    2b1c:	89 e1       	ldi	r24, 0x19	; 25
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	9a 8b       	std	Y+18, r25	; 0x12
    2b22:	89 8b       	std	Y+17, r24	; 0x11
    2b24:	89 89       	ldd	r24, Y+17	; 0x11
    2b26:	9a 89       	ldd	r25, Y+18	; 0x12
    2b28:	01 97       	sbiw	r24, 0x01	; 1
    2b2a:	f1 f7       	brne	.-4      	; 0x2b28 <LCD_displayChar+0x2ae>
    2b2c:	9a 8b       	std	Y+18, r25	; 0x12
    2b2e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b30:	8b 89       	ldd	r24, Y+19	; 0x13
    2b32:	9c 89       	ldd	r25, Y+20	; 0x14
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	9c 8b       	std	Y+20, r25	; 0x14
    2b38:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b3c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b3e:	00 97       	sbiw	r24, 0x00	; 0
    2b40:	69 f7       	brne	.-38     	; 0x2b1c <LCD_displayChar+0x2a2>
    2b42:	14 c0       	rjmp	.+40     	; 0x2b6c <LCD_displayChar+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b44:	6d 89       	ldd	r22, Y+21	; 0x15
    2b46:	7e 89       	ldd	r23, Y+22	; 0x16
    2b48:	8f 89       	ldd	r24, Y+23	; 0x17
    2b4a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	9c 8b       	std	Y+20, r25	; 0x14
    2b56:	8b 8b       	std	Y+19, r24	; 0x13
    2b58:	8b 89       	ldd	r24, Y+19	; 0x13
    2b5a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b5c:	98 8b       	std	Y+16, r25	; 0x10
    2b5e:	8f 87       	std	Y+15, r24	; 0x0f
    2b60:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b62:	98 89       	ldd	r25, Y+16	; 0x10
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <LCD_displayChar+0x2ea>
    2b68:	98 8b       	std	Y+16, r25	; 0x10
    2b6a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,0);
    2b6c:	83 e4       	ldi	r24, 0x43	; 67
    2b6e:	62 e0       	ldi	r22, 0x02	; 2
    2b70:	40 e0       	ldi	r20, 0x00	; 0
    2b72:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <DIO_write_PIN>
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	a0 e8       	ldi	r26, 0x80	; 128
    2b7c:	bf e3       	ldi	r27, 0x3F	; 63
    2b7e:	8b 87       	std	Y+11, r24	; 0x0b
    2b80:	9c 87       	std	Y+12, r25	; 0x0c
    2b82:	ad 87       	std	Y+13, r26	; 0x0d
    2b84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b86:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b88:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	4a e7       	ldi	r20, 0x7A	; 122
    2b94:	53 e4       	ldi	r21, 0x43	; 67
    2b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	8f 83       	std	Y+7, r24	; 0x07
    2ba0:	98 87       	std	Y+8, r25	; 0x08
    2ba2:	a9 87       	std	Y+9, r26	; 0x09
    2ba4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ba6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba8:	78 85       	ldd	r23, Y+8	; 0x08
    2baa:	89 85       	ldd	r24, Y+9	; 0x09
    2bac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	40 e8       	ldi	r20, 0x80	; 128
    2bb4:	5f e3       	ldi	r21, 0x3F	; 63
    2bb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bba:	88 23       	and	r24, r24
    2bbc:	2c f4       	brge	.+10     	; 0x2bc8 <LCD_displayChar+0x34e>
		__ticks = 1;
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	9e 83       	std	Y+6, r25	; 0x06
    2bc4:	8d 83       	std	Y+5, r24	; 0x05
    2bc6:	3f c0       	rjmp	.+126    	; 0x2c46 <LCD_displayChar+0x3cc>
	else if (__tmp > 65535)
    2bc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bca:	78 85       	ldd	r23, Y+8	; 0x08
    2bcc:	89 85       	ldd	r24, Y+9	; 0x09
    2bce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	3f ef       	ldi	r19, 0xFF	; 255
    2bd4:	4f e7       	ldi	r20, 0x7F	; 127
    2bd6:	57 e4       	ldi	r21, 0x47	; 71
    2bd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bdc:	18 16       	cp	r1, r24
    2bde:	4c f5       	brge	.+82     	; 0x2c32 <LCD_displayChar+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	40 e2       	ldi	r20, 0x20	; 32
    2bee:	51 e4       	ldi	r21, 0x41	; 65
    2bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	bc 01       	movw	r22, r24
    2bfa:	cd 01       	movw	r24, r26
    2bfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	9e 83       	std	Y+6, r25	; 0x06
    2c06:	8d 83       	std	Y+5, r24	; 0x05
    2c08:	0f c0       	rjmp	.+30     	; 0x2c28 <LCD_displayChar+0x3ae>
    2c0a:	89 e1       	ldi	r24, 0x19	; 25
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	9c 83       	std	Y+4, r25	; 0x04
    2c10:	8b 83       	std	Y+3, r24	; 0x03
    2c12:	8b 81       	ldd	r24, Y+3	; 0x03
    2c14:	9c 81       	ldd	r25, Y+4	; 0x04
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	f1 f7       	brne	.-4      	; 0x2c16 <LCD_displayChar+0x39c>
    2c1a:	9c 83       	std	Y+4, r25	; 0x04
    2c1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c20:	9e 81       	ldd	r25, Y+6	; 0x06
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	9e 83       	std	Y+6, r25	; 0x06
    2c26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c28:	8d 81       	ldd	r24, Y+5	; 0x05
    2c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2c:	00 97       	sbiw	r24, 0x00	; 0
    2c2e:	69 f7       	brne	.-38     	; 0x2c0a <LCD_displayChar+0x390>
    2c30:	14 c0       	rjmp	.+40     	; 0x2c5a <LCD_displayChar+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c32:	6f 81       	ldd	r22, Y+7	; 0x07
    2c34:	78 85       	ldd	r23, Y+8	; 0x08
    2c36:	89 85       	ldd	r24, Y+9	; 0x09
    2c38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	9e 83       	std	Y+6, r25	; 0x06
    2c44:	8d 83       	std	Y+5, r24	; 0x05
    2c46:	8d 81       	ldd	r24, Y+5	; 0x05
    2c48:	9e 81       	ldd	r25, Y+6	; 0x06
    2c4a:	9a 83       	std	Y+2, r25	; 0x02
    2c4c:	89 83       	std	Y+1, r24	; 0x01
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
    2c50:	9a 81       	ldd	r25, Y+2	; 0x02
    2c52:	01 97       	sbiw	r24, 0x01	; 1
    2c54:	f1 f7       	brne	.-4      	; 0x2c52 <LCD_displayChar+0x3d8>
    2c56:	9a 83       	std	Y+2, r25	; 0x02
    2c58:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2c5a:	e9 96       	adiw	r28, 0x39	; 57
    2c5c:	0f b6       	in	r0, 0x3f	; 63
    2c5e:	f8 94       	cli
    2c60:	de bf       	out	0x3e, r29	; 62
    2c62:	0f be       	out	0x3f, r0	; 63
    2c64:	cd bf       	out	0x3d, r28	; 61
    2c66:	cf 91       	pop	r28
    2c68:	df 91       	pop	r29
    2c6a:	08 95       	ret

00002c6c <LCD_displayString>:


void LCD_displayString(const char *str)
{
    2c6c:	df 93       	push	r29
    2c6e:	cf 93       	push	r28
    2c70:	00 d0       	rcall	.+0      	; 0x2c72 <LCD_displayString+0x6>
    2c72:	0f 92       	push	r0
    2c74:	cd b7       	in	r28, 0x3d	; 61
    2c76:	de b7       	in	r29, 0x3e	; 62
    2c78:	9b 83       	std	Y+3, r25	; 0x03
    2c7a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2c7c:	19 82       	std	Y+1, r1	; 0x01
    2c7e:	0e c0       	rjmp	.+28     	; 0x2c9c <LCD_displayString+0x30>
	while(str[i]!='\0')
	{
		LCD_displayChar(str[i]);
    2c80:	89 81       	ldd	r24, Y+1	; 0x01
    2c82:	28 2f       	mov	r18, r24
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	8a 81       	ldd	r24, Y+2	; 0x02
    2c88:	9b 81       	ldd	r25, Y+3	; 0x03
    2c8a:	fc 01       	movw	r30, r24
    2c8c:	e2 0f       	add	r30, r18
    2c8e:	f3 1f       	adc	r31, r19
    2c90:	80 81       	ld	r24, Z
    2c92:	0e 94 3d 14 	call	0x287a	; 0x287a <LCD_displayChar>
		i++;
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
    2c98:	8f 5f       	subi	r24, 0xFF	; 255
    2c9a:	89 83       	std	Y+1, r24	; 0x01


void LCD_displayString(const char *str)
{
	uint8 i=0;
	while(str[i]!='\0')
    2c9c:	89 81       	ldd	r24, Y+1	; 0x01
    2c9e:	28 2f       	mov	r18, r24
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	e2 0f       	add	r30, r18
    2caa:	f3 1f       	adc	r31, r19
    2cac:	80 81       	ld	r24, Z
    2cae:	88 23       	and	r24, r24
    2cb0:	39 f7       	brne	.-50     	; 0x2c80 <LCD_displayString+0x14>
	{
		LCD_displayChar(str[i]);
		i++;
	}

}
    2cb2:	0f 90       	pop	r0
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	cf 91       	pop	r28
    2cba:	df 91       	pop	r29
    2cbc:	08 95       	ret

00002cbe <LCD_MoveTo_Row_Column>:


void LCD_MoveTo_Row_Column(uint8 row, uint8 col)
{
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	00 d0       	rcall	.+0      	; 0x2cc4 <LCD_MoveTo_Row_Column+0x6>
    2cc4:	00 d0       	rcall	.+0      	; 0x2cc6 <LCD_MoveTo_Row_Column+0x8>
    2cc6:	0f 92       	push	r0
    2cc8:	cd b7       	in	r28, 0x3d	; 61
    2cca:	de b7       	in	r29, 0x3e	; 62
    2ccc:	8a 83       	std	Y+2, r24	; 0x02
    2cce:	6b 83       	std	Y+3, r22	; 0x03
	// The position is COL+ROW
	uint8 position;

	switch(row)
    2cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd2:	28 2f       	mov	r18, r24
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	3d 83       	std	Y+5, r19	; 0x05
    2cd8:	2c 83       	std	Y+4, r18	; 0x04
    2cda:	8c 81       	ldd	r24, Y+4	; 0x04
    2cdc:	9d 81       	ldd	r25, Y+5	; 0x05
    2cde:	00 97       	sbiw	r24, 0x00	; 0
    2ce0:	31 f0       	breq	.+12     	; 0x2cee <LCD_MoveTo_Row_Column+0x30>
    2ce2:	2c 81       	ldd	r18, Y+4	; 0x04
    2ce4:	3d 81       	ldd	r19, Y+5	; 0x05
    2ce6:	21 30       	cpi	r18, 0x01	; 1
    2ce8:	31 05       	cpc	r19, r1
    2cea:	21 f0       	breq	.+8      	; 0x2cf4 <LCD_MoveTo_Row_Column+0x36>
    2cec:	06 c0       	rjmp	.+12     	; 0x2cfa <LCD_MoveTo_Row_Column+0x3c>
	{
		case 0:
			position=col;
    2cee:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf0:	89 83       	std	Y+1, r24	; 0x01
    2cf2:	03 c0       	rjmp	.+6      	; 0x2cfa <LCD_MoveTo_Row_Column+0x3c>
			break;
		case 1:
			position=col+0x40;
    2cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf6:	80 5c       	subi	r24, 0xC0	; 192
    2cf8:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	LCD_Command(position|LCD_Cursor_move_to);
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	80 68       	ori	r24, 0x80	; 128
    2cfe:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_Command>
}
    2d02:	0f 90       	pop	r0
    2d04:	0f 90       	pop	r0
    2d06:	0f 90       	pop	r0
    2d08:	0f 90       	pop	r0
    2d0a:	0f 90       	pop	r0
    2d0c:	cf 91       	pop	r28
    2d0e:	df 91       	pop	r29
    2d10:	08 95       	ret

00002d12 <LCD_display_String_Row_Column>:


void LCD_display_String_Row_Column(uint8 row,uint8 col, const char *str)
{
    2d12:	df 93       	push	r29
    2d14:	cf 93       	push	r28
    2d16:	00 d0       	rcall	.+0      	; 0x2d18 <LCD_display_String_Row_Column+0x6>
    2d18:	00 d0       	rcall	.+0      	; 0x2d1a <LCD_display_String_Row_Column+0x8>
    2d1a:	cd b7       	in	r28, 0x3d	; 61
    2d1c:	de b7       	in	r29, 0x3e	; 62
    2d1e:	89 83       	std	Y+1, r24	; 0x01
    2d20:	6a 83       	std	Y+2, r22	; 0x02
    2d22:	5c 83       	std	Y+4, r21	; 0x04
    2d24:	4b 83       	std	Y+3, r20	; 0x03
	LCD_MoveTo_Row_Column(row,col);
    2d26:	89 81       	ldd	r24, Y+1	; 0x01
    2d28:	6a 81       	ldd	r22, Y+2	; 0x02
    2d2a:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <LCD_MoveTo_Row_Column>
	LCD_displayString(str);
    2d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d30:	9c 81       	ldd	r25, Y+4	; 0x04
    2d32:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <LCD_displayString>

}
    2d36:	0f 90       	pop	r0
    2d38:	0f 90       	pop	r0
    2d3a:	0f 90       	pop	r0
    2d3c:	0f 90       	pop	r0
    2d3e:	cf 91       	pop	r28
    2d40:	df 91       	pop	r29
    2d42:	08 95       	ret

00002d44 <LCD_Clear>:



void LCD_Clear(void)
{
    2d44:	df 93       	push	r29
    2d46:	cf 93       	push	r28
    2d48:	cd b7       	in	r28, 0x3d	; 61
    2d4a:	de b7       	in	r29, 0x3e	; 62
	LCD_Command(LCD_clear_cmd);
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	0e 94 a0 11 	call	0x2340	; 0x2340 <LCD_Command>
}
    2d52:	cf 91       	pop	r28
    2d54:	df 91       	pop	r29
    2d56:	08 95       	ret

00002d58 <LCD_integerToString>:



void LCD_integerToString(uint8 data)
{
    2d58:	df 93       	push	r29
    2d5a:	cf 93       	push	r28
    2d5c:	cd b7       	in	r28, 0x3d	; 61
    2d5e:	de b7       	in	r29, 0x3e	; 62
    2d60:	61 97       	sbiw	r28, 0x11	; 17
    2d62:	0f b6       	in	r0, 0x3f	; 63
    2d64:	f8 94       	cli
    2d66:	de bf       	out	0x3e, r29	; 62
    2d68:	0f be       	out	0x3f, r0	; 63
    2d6a:	cd bf       	out	0x3d, r28	; 61
    2d6c:	89 8b       	std	Y+17, r24	; 0x11

	char buff[16];
	itoa(data,buff,10);
    2d6e:	89 89       	ldd	r24, Y+17	; 0x11
    2d70:	88 2f       	mov	r24, r24
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	9e 01       	movw	r18, r28
    2d76:	2f 5f       	subi	r18, 0xFF	; 255
    2d78:	3f 4f       	sbci	r19, 0xFF	; 255
    2d7a:	b9 01       	movw	r22, r18
    2d7c:	4a e0       	ldi	r20, 0x0A	; 10
    2d7e:	50 e0       	ldi	r21, 0x00	; 0
    2d80:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <itoa>
	LCD_displayString( buff );
    2d84:	ce 01       	movw	r24, r28
    2d86:	01 96       	adiw	r24, 0x01	; 1
    2d88:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <LCD_displayString>
}
    2d8c:	61 96       	adiw	r28, 0x11	; 17
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	f8 94       	cli
    2d92:	de bf       	out	0x3e, r29	; 62
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	cd bf       	out	0x3d, r28	; 61
    2d98:	cf 91       	pop	r28
    2d9a:	df 91       	pop	r29
    2d9c:	08 95       	ret

00002d9e <LCD_display_int>:


void LCD_display_int(uint8 data)
{
    2d9e:	df 93       	push	r29
    2da0:	cf 93       	push	r28
    2da2:	cd b7       	in	r28, 0x3d	; 61
    2da4:	de b7       	in	r29, 0x3e	; 62
    2da6:	2f 97       	sbiw	r28, 0x0f	; 15
    2da8:	0f b6       	in	r0, 0x3f	; 63
    2daa:	f8 94       	cli
    2dac:	de bf       	out	0x3e, r29	; 62
    2dae:	0f be       	out	0x3f, r0	; 63
    2db0:	cd bf       	out	0x3d, r28	; 61
    2db2:	8f 87       	std	Y+15, r24	; 0x0f
	/* if any switch pressed for more than 500 ms it counts more than one press */
	if((data <= 9) && (data >= 0))
    2db4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2db6:	8a 30       	cpi	r24, 0x0A	; 10
    2db8:	20 f4       	brcc	.+8      	; 0x2dc2 <LCD_display_int+0x24>
	{
		LCD_integerToString(data); /* display the pressed keypad switch */
    2dba:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dbc:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <LCD_integerToString>
    2dc0:	03 c0       	rjmp	.+6      	; 0x2dc8 <LCD_display_int+0x2a>
	}
	else
	{
		LCD_displayChar(data); /* display the pressed keypad switch */
    2dc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dc4:	0e 94 3d 14 	call	0x287a	; 0x287a <LCD_displayChar>
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	aa ef       	ldi	r26, 0xFA	; 250
    2dce:	b3 e4       	ldi	r27, 0x43	; 67
    2dd0:	8b 87       	std	Y+11, r24	; 0x0b
    2dd2:	9c 87       	std	Y+12, r25	; 0x0c
    2dd4:	ad 87       	std	Y+13, r26	; 0x0d
    2dd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dda:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ddc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dde:	9e 85       	ldd	r25, Y+14	; 0x0e
    2de0:	20 e0       	ldi	r18, 0x00	; 0
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	4a e7       	ldi	r20, 0x7A	; 122
    2de6:	53 e4       	ldi	r21, 0x43	; 67
    2de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dec:	dc 01       	movw	r26, r24
    2dee:	cb 01       	movw	r24, r22
    2df0:	8f 83       	std	Y+7, r24	; 0x07
    2df2:	98 87       	std	Y+8, r25	; 0x08
    2df4:	a9 87       	std	Y+9, r26	; 0x09
    2df6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2df8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dfa:	78 85       	ldd	r23, Y+8	; 0x08
    2dfc:	89 85       	ldd	r24, Y+9	; 0x09
    2dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	40 e8       	ldi	r20, 0x80	; 128
    2e06:	5f e3       	ldi	r21, 0x3F	; 63
    2e08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e0c:	88 23       	and	r24, r24
    2e0e:	2c f4       	brge	.+10     	; 0x2e1a <LCD_display_int+0x7c>
		__ticks = 1;
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	9e 83       	std	Y+6, r25	; 0x06
    2e16:	8d 83       	std	Y+5, r24	; 0x05
    2e18:	3f c0       	rjmp	.+126    	; 0x2e98 <LCD_display_int+0xfa>
	else if (__tmp > 65535)
    2e1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e1c:	78 85       	ldd	r23, Y+8	; 0x08
    2e1e:	89 85       	ldd	r24, Y+9	; 0x09
    2e20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	3f ef       	ldi	r19, 0xFF	; 255
    2e26:	4f e7       	ldi	r20, 0x7F	; 127
    2e28:	57 e4       	ldi	r21, 0x47	; 71
    2e2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e2e:	18 16       	cp	r1, r24
    2e30:	4c f5       	brge	.+82     	; 0x2e84 <LCD_display_int+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e32:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e34:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e38:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e3a:	20 e0       	ldi	r18, 0x00	; 0
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	40 e2       	ldi	r20, 0x20	; 32
    2e40:	51 e4       	ldi	r21, 0x41	; 65
    2e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e46:	dc 01       	movw	r26, r24
    2e48:	cb 01       	movw	r24, r22
    2e4a:	bc 01       	movw	r22, r24
    2e4c:	cd 01       	movw	r24, r26
    2e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	9e 83       	std	Y+6, r25	; 0x06
    2e58:	8d 83       	std	Y+5, r24	; 0x05
    2e5a:	0f c0       	rjmp	.+30     	; 0x2e7a <LCD_display_int+0xdc>
    2e5c:	89 e1       	ldi	r24, 0x19	; 25
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	9c 83       	std	Y+4, r25	; 0x04
    2e62:	8b 83       	std	Y+3, r24	; 0x03
    2e64:	8b 81       	ldd	r24, Y+3	; 0x03
    2e66:	9c 81       	ldd	r25, Y+4	; 0x04
    2e68:	01 97       	sbiw	r24, 0x01	; 1
    2e6a:	f1 f7       	brne	.-4      	; 0x2e68 <LCD_display_int+0xca>
    2e6c:	9c 83       	std	Y+4, r25	; 0x04
    2e6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e70:	8d 81       	ldd	r24, Y+5	; 0x05
    2e72:	9e 81       	ldd	r25, Y+6	; 0x06
    2e74:	01 97       	sbiw	r24, 0x01	; 1
    2e76:	9e 83       	std	Y+6, r25	; 0x06
    2e78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e7e:	00 97       	sbiw	r24, 0x00	; 0
    2e80:	69 f7       	brne	.-38     	; 0x2e5c <LCD_display_int+0xbe>
    2e82:	14 c0       	rjmp	.+40     	; 0x2eac <LCD_display_int+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e84:	6f 81       	ldd	r22, Y+7	; 0x07
    2e86:	78 85       	ldd	r23, Y+8	; 0x08
    2e88:	89 85       	ldd	r24, Y+9	; 0x09
    2e8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	9e 83       	std	Y+6, r25	; 0x06
    2e96:	8d 83       	std	Y+5, r24	; 0x05
    2e98:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9c:	9a 83       	std	Y+2, r25	; 0x02
    2e9e:	89 83       	std	Y+1, r24	; 0x01
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
    2ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea4:	01 97       	sbiw	r24, 0x01	; 1
    2ea6:	f1 f7       	brne	.-4      	; 0x2ea4 <LCD_display_int+0x106>
    2ea8:	9a 83       	std	Y+2, r25	; 0x02
    2eaa:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(500); /* Press time */

}
    2eac:	2f 96       	adiw	r28, 0x0f	; 15
    2eae:	0f b6       	in	r0, 0x3f	; 63
    2eb0:	f8 94       	cli
    2eb2:	de bf       	out	0x3e, r29	; 62
    2eb4:	0f be       	out	0x3f, r0	; 63
    2eb6:	cd bf       	out	0x3d, r28	; 61
    2eb8:	cf 91       	pop	r28
    2eba:	df 91       	pop	r29
    2ebc:	08 95       	ret

00002ebe <__udivmodqi4>:
    2ebe:	99 1b       	sub	r25, r25
    2ec0:	79 e0       	ldi	r23, 0x09	; 9
    2ec2:	04 c0       	rjmp	.+8      	; 0x2ecc <__udivmodqi4_ep>

00002ec4 <__udivmodqi4_loop>:
    2ec4:	99 1f       	adc	r25, r25
    2ec6:	96 17       	cp	r25, r22
    2ec8:	08 f0       	brcs	.+2      	; 0x2ecc <__udivmodqi4_ep>
    2eca:	96 1b       	sub	r25, r22

00002ecc <__udivmodqi4_ep>:
    2ecc:	88 1f       	adc	r24, r24
    2ece:	7a 95       	dec	r23
    2ed0:	c9 f7       	brne	.-14     	; 0x2ec4 <__udivmodqi4_loop>
    2ed2:	80 95       	com	r24
    2ed4:	08 95       	ret

00002ed6 <__prologue_saves__>:
    2ed6:	2f 92       	push	r2
    2ed8:	3f 92       	push	r3
    2eda:	4f 92       	push	r4
    2edc:	5f 92       	push	r5
    2ede:	6f 92       	push	r6
    2ee0:	7f 92       	push	r7
    2ee2:	8f 92       	push	r8
    2ee4:	9f 92       	push	r9
    2ee6:	af 92       	push	r10
    2ee8:	bf 92       	push	r11
    2eea:	cf 92       	push	r12
    2eec:	df 92       	push	r13
    2eee:	ef 92       	push	r14
    2ef0:	ff 92       	push	r15
    2ef2:	0f 93       	push	r16
    2ef4:	1f 93       	push	r17
    2ef6:	cf 93       	push	r28
    2ef8:	df 93       	push	r29
    2efa:	cd b7       	in	r28, 0x3d	; 61
    2efc:	de b7       	in	r29, 0x3e	; 62
    2efe:	ca 1b       	sub	r28, r26
    2f00:	db 0b       	sbc	r29, r27
    2f02:	0f b6       	in	r0, 0x3f	; 63
    2f04:	f8 94       	cli
    2f06:	de bf       	out	0x3e, r29	; 62
    2f08:	0f be       	out	0x3f, r0	; 63
    2f0a:	cd bf       	out	0x3d, r28	; 61
    2f0c:	09 94       	ijmp

00002f0e <__epilogue_restores__>:
    2f0e:	2a 88       	ldd	r2, Y+18	; 0x12
    2f10:	39 88       	ldd	r3, Y+17	; 0x11
    2f12:	48 88       	ldd	r4, Y+16	; 0x10
    2f14:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f16:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f18:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f1a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f1c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f1e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f20:	b9 84       	ldd	r11, Y+9	; 0x09
    2f22:	c8 84       	ldd	r12, Y+8	; 0x08
    2f24:	df 80       	ldd	r13, Y+7	; 0x07
    2f26:	ee 80       	ldd	r14, Y+6	; 0x06
    2f28:	fd 80       	ldd	r15, Y+5	; 0x05
    2f2a:	0c 81       	ldd	r16, Y+4	; 0x04
    2f2c:	1b 81       	ldd	r17, Y+3	; 0x03
    2f2e:	aa 81       	ldd	r26, Y+2	; 0x02
    2f30:	b9 81       	ldd	r27, Y+1	; 0x01
    2f32:	ce 0f       	add	r28, r30
    2f34:	d1 1d       	adc	r29, r1
    2f36:	0f b6       	in	r0, 0x3f	; 63
    2f38:	f8 94       	cli
    2f3a:	de bf       	out	0x3e, r29	; 62
    2f3c:	0f be       	out	0x3f, r0	; 63
    2f3e:	cd bf       	out	0x3d, r28	; 61
    2f40:	ed 01       	movw	r28, r26
    2f42:	08 95       	ret

00002f44 <itoa>:
    2f44:	fb 01       	movw	r30, r22
    2f46:	9f 01       	movw	r18, r30
    2f48:	e8 94       	clt
    2f4a:	42 30       	cpi	r20, 0x02	; 2
    2f4c:	c4 f0       	brlt	.+48     	; 0x2f7e <itoa+0x3a>
    2f4e:	45 32       	cpi	r20, 0x25	; 37
    2f50:	b4 f4       	brge	.+44     	; 0x2f7e <itoa+0x3a>
    2f52:	4a 30       	cpi	r20, 0x0A	; 10
    2f54:	29 f4       	brne	.+10     	; 0x2f60 <itoa+0x1c>
    2f56:	97 fb       	bst	r25, 7
    2f58:	1e f4       	brtc	.+6      	; 0x2f60 <itoa+0x1c>
    2f5a:	90 95       	com	r25
    2f5c:	81 95       	neg	r24
    2f5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f60:	64 2f       	mov	r22, r20
    2f62:	77 27       	eor	r23, r23
    2f64:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <__udivmodhi4>
    2f68:	80 5d       	subi	r24, 0xD0	; 208
    2f6a:	8a 33       	cpi	r24, 0x3A	; 58
    2f6c:	0c f0       	brlt	.+2      	; 0x2f70 <itoa+0x2c>
    2f6e:	89 5d       	subi	r24, 0xD9	; 217
    2f70:	81 93       	st	Z+, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	00 97       	sbiw	r24, 0x00	; 0
    2f76:	a1 f7       	brne	.-24     	; 0x2f60 <itoa+0x1c>
    2f78:	16 f4       	brtc	.+4      	; 0x2f7e <itoa+0x3a>
    2f7a:	5d e2       	ldi	r21, 0x2D	; 45
    2f7c:	51 93       	st	Z+, r21
    2f7e:	10 82       	st	Z, r1
    2f80:	c9 01       	movw	r24, r18
    2f82:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <strrev>

00002f86 <strrev>:
    2f86:	dc 01       	movw	r26, r24
    2f88:	fc 01       	movw	r30, r24
    2f8a:	67 2f       	mov	r22, r23
    2f8c:	71 91       	ld	r23, Z+
    2f8e:	77 23       	and	r23, r23
    2f90:	e1 f7       	brne	.-8      	; 0x2f8a <strrev+0x4>
    2f92:	32 97       	sbiw	r30, 0x02	; 2
    2f94:	04 c0       	rjmp	.+8      	; 0x2f9e <strrev+0x18>
    2f96:	7c 91       	ld	r23, X
    2f98:	6d 93       	st	X+, r22
    2f9a:	70 83       	st	Z, r23
    2f9c:	62 91       	ld	r22, -Z
    2f9e:	ae 17       	cp	r26, r30
    2fa0:	bf 07       	cpc	r27, r31
    2fa2:	c8 f3       	brcs	.-14     	; 0x2f96 <strrev+0x10>
    2fa4:	08 95       	ret

00002fa6 <__udivmodhi4>:
    2fa6:	aa 1b       	sub	r26, r26
    2fa8:	bb 1b       	sub	r27, r27
    2faa:	51 e1       	ldi	r21, 0x11	; 17
    2fac:	07 c0       	rjmp	.+14     	; 0x2fbc <__udivmodhi4_ep>

00002fae <__udivmodhi4_loop>:
    2fae:	aa 1f       	adc	r26, r26
    2fb0:	bb 1f       	adc	r27, r27
    2fb2:	a6 17       	cp	r26, r22
    2fb4:	b7 07       	cpc	r27, r23
    2fb6:	10 f0       	brcs	.+4      	; 0x2fbc <__udivmodhi4_ep>
    2fb8:	a6 1b       	sub	r26, r22
    2fba:	b7 0b       	sbc	r27, r23

00002fbc <__udivmodhi4_ep>:
    2fbc:	88 1f       	adc	r24, r24
    2fbe:	99 1f       	adc	r25, r25
    2fc0:	5a 95       	dec	r21
    2fc2:	a9 f7       	brne	.-22     	; 0x2fae <__udivmodhi4_loop>
    2fc4:	80 95       	com	r24
    2fc6:	90 95       	com	r25
    2fc8:	bc 01       	movw	r22, r24
    2fca:	cd 01       	movw	r24, r26
    2fcc:	08 95       	ret

00002fce <_exit>:
    2fce:	f8 94       	cli

00002fd0 <__stop_program>:
    2fd0:	ff cf       	rjmp	.-2      	; 0x2fd0 <__stop_program>
