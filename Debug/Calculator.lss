
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000303a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000303a  000030ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002664  00000000  00000000  000030b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d0f  00000000  00000000  0000571c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000642b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000656b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000066db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00008324  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000920f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000a11c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000a3a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ab77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 1b 18 	jmp	0x3036	; 0x3036 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 9f 17 	jmp	0x2f3e	; 0x2f3e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ab 17 	jmp	0x2f56	; 0x2f56 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ab 17 	jmp	0x2f56	; 0x2f56 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 9f 17 	jmp	0x2f3e	; 0x2f3e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ab 17 	jmp	0x2f56	; 0x2f56 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 ab 17 	jmp	0x2f56	; 0x2f56 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 ab 17 	jmp	0x2f56	; 0x2f56 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 af 17 	jmp	0x2f5e	; 0x2f5e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:

uint8 calc(uint8 operation,uint8 op1,uint8 op2);


int main(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	af 97       	sbiw	r28, 0x2f	; 47
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61

	volatile uint8 key,last_val,op1,op2,operation;
	LCD_init();
     b4a:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <LCD_init>
	KeyPad_init();
     b4e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <KeyPad_init>

	 key = KeyPad_getPressedKey(); /* get the pressed key number */
     b52:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <KeyPad_getPressedKey>
     b56:	8b a7       	std	Y+43, r24	; 0x2b
	 LCD_display_int(key);   /*Display the pressed key*/
     b58:	8b a5       	ldd	r24, Y+43	; 0x2b
     b5a:	88 2f       	mov	r24, r24
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_display_int>
	 op1=key;
     b62:	8b a5       	ldd	r24, Y+43	; 0x2b
     b64:	8d a7       	std	Y+45, r24	; 0x2d
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a6 e9       	ldi	r26, 0x96	; 150
     b6c:	b3 e4       	ldi	r27, 0x43	; 67
     b6e:	8f a3       	std	Y+39, r24	; 0x27
     b70:	98 a7       	std	Y+40, r25	; 0x28
     b72:	a9 a7       	std	Y+41, r26	; 0x29
     b74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b76:	6f a1       	ldd	r22, Y+39	; 0x27
     b78:	78 a5       	ldd	r23, Y+40	; 0x28
     b7a:	89 a5       	ldd	r24, Y+41	; 0x29
     b7c:	9a a5       	ldd	r25, Y+42	; 0x2a
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	4a e7       	ldi	r20, 0x7A	; 122
     b84:	53 e4       	ldi	r21, 0x43	; 67
     b86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b8a:	dc 01       	movw	r26, r24
     b8c:	cb 01       	movw	r24, r22
     b8e:	8b a3       	std	Y+35, r24	; 0x23
     b90:	9c a3       	std	Y+36, r25	; 0x24
     b92:	ad a3       	std	Y+37, r26	; 0x25
     b94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     b96:	6b a1       	ldd	r22, Y+35	; 0x23
     b98:	7c a1       	ldd	r23, Y+36	; 0x24
     b9a:	8d a1       	ldd	r24, Y+37	; 0x25
     b9c:	9e a1       	ldd	r25, Y+38	; 0x26
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e8       	ldi	r20, 0x80	; 128
     ba4:	5f e3       	ldi	r21, 0x3F	; 63
     ba6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     baa:	88 23       	and	r24, r24
     bac:	2c f4       	brge	.+10     	; 0xbb8 <main+0x82>
		__ticks = 1;
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	9a a3       	std	Y+34, r25	; 0x22
     bb4:	89 a3       	std	Y+33, r24	; 0x21
     bb6:	3f c0       	rjmp	.+126    	; 0xc36 <main+0x100>
	else if (__tmp > 65535)
     bb8:	6b a1       	ldd	r22, Y+35	; 0x23
     bba:	7c a1       	ldd	r23, Y+36	; 0x24
     bbc:	8d a1       	ldd	r24, Y+37	; 0x25
     bbe:	9e a1       	ldd	r25, Y+38	; 0x26
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	3f ef       	ldi	r19, 0xFF	; 255
     bc4:	4f e7       	ldi	r20, 0x7F	; 127
     bc6:	57 e4       	ldi	r21, 0x47	; 71
     bc8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bcc:	18 16       	cp	r1, r24
     bce:	4c f5       	brge	.+82     	; 0xc22 <main+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd0:	6f a1       	ldd	r22, Y+39	; 0x27
     bd2:	78 a5       	ldd	r23, Y+40	; 0x28
     bd4:	89 a5       	ldd	r24, Y+41	; 0x29
     bd6:	9a a5       	ldd	r25, Y+42	; 0x2a
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e2       	ldi	r20, 0x20	; 32
     bde:	51 e4       	ldi	r21, 0x41	; 65
     be0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     be4:	dc 01       	movw	r26, r24
     be6:	cb 01       	movw	r24, r22
     be8:	bc 01       	movw	r22, r24
     bea:	cd 01       	movw	r24, r26
     bec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	9a a3       	std	Y+34, r25	; 0x22
     bf6:	89 a3       	std	Y+33, r24	; 0x21
     bf8:	0f c0       	rjmp	.+30     	; 0xc18 <main+0xe2>
     bfa:	89 e1       	ldi	r24, 0x19	; 25
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	98 a3       	std	Y+32, r25	; 0x20
     c00:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c02:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c04:	98 a1       	ldd	r25, Y+32	; 0x20
     c06:	01 97       	sbiw	r24, 0x01	; 1
     c08:	f1 f7       	brne	.-4      	; 0xc06 <main+0xd0>
     c0a:	98 a3       	std	Y+32, r25	; 0x20
     c0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c0e:	89 a1       	ldd	r24, Y+33	; 0x21
     c10:	9a a1       	ldd	r25, Y+34	; 0x22
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	9a a3       	std	Y+34, r25	; 0x22
     c16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c18:	89 a1       	ldd	r24, Y+33	; 0x21
     c1a:	9a a1       	ldd	r25, Y+34	; 0x22
     c1c:	00 97       	sbiw	r24, 0x00	; 0
     c1e:	69 f7       	brne	.-38     	; 0xbfa <main+0xc4>
     c20:	14 c0       	rjmp	.+40     	; 0xc4a <main+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c22:	6b a1       	ldd	r22, Y+35	; 0x23
     c24:	7c a1       	ldd	r23, Y+36	; 0x24
     c26:	8d a1       	ldd	r24, Y+37	; 0x25
     c28:	9e a1       	ldd	r25, Y+38	; 0x26
     c2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	9a a3       	std	Y+34, r25	; 0x22
     c34:	89 a3       	std	Y+33, r24	; 0x21
     c36:	89 a1       	ldd	r24, Y+33	; 0x21
     c38:	9a a1       	ldd	r25, Y+34	; 0x22
     c3a:	9e 8f       	std	Y+30, r25	; 0x1e
     c3c:	8d 8f       	std	Y+29, r24	; 0x1d
     c3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c40:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	f1 f7       	brne	.-4      	; 0xc42 <main+0x10c>
     c46:	9e 8f       	std	Y+30, r25	; 0x1e
     c48:	8d 8f       	std	Y+29, r24	; 0x1d
	 _delay_ms(300);

	 key =KeyPad_getPressedKey();
     c4a:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <KeyPad_getPressedKey>
     c4e:	8b a7       	std	Y+43, r24	; 0x2b
	 LCD_display_int(key);   /*Display the pressed key*/
     c50:	8b a5       	ldd	r24, Y+43	; 0x2b
     c52:	88 2f       	mov	r24, r24
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_display_int>
	 operation=key;
     c5a:	8b a5       	ldd	r24, Y+43	; 0x2b
     c5c:	8f a7       	std	Y+47, r24	; 0x2f
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	a6 e9       	ldi	r26, 0x96	; 150
     c64:	b3 e4       	ldi	r27, 0x43	; 67
     c66:	89 8f       	std	Y+25, r24	; 0x19
     c68:	9a 8f       	std	Y+26, r25	; 0x1a
     c6a:	ab 8f       	std	Y+27, r26	; 0x1b
     c6c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c6e:	69 8d       	ldd	r22, Y+25	; 0x19
     c70:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c72:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c74:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	4a e7       	ldi	r20, 0x7A	; 122
     c7c:	53 e4       	ldi	r21, 0x43	; 67
     c7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c82:	dc 01       	movw	r26, r24
     c84:	cb 01       	movw	r24, r22
     c86:	8d 8b       	std	Y+21, r24	; 0x15
     c88:	9e 8b       	std	Y+22, r25	; 0x16
     c8a:	af 8b       	std	Y+23, r26	; 0x17
     c8c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c8e:	6d 89       	ldd	r22, Y+21	; 0x15
     c90:	7e 89       	ldd	r23, Y+22	; 0x16
     c92:	8f 89       	ldd	r24, Y+23	; 0x17
     c94:	98 8d       	ldd	r25, Y+24	; 0x18
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	40 e8       	ldi	r20, 0x80	; 128
     c9c:	5f e3       	ldi	r21, 0x3F	; 63
     c9e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ca2:	88 23       	and	r24, r24
     ca4:	2c f4       	brge	.+10     	; 0xcb0 <main+0x17a>
		__ticks = 1;
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	9c 8b       	std	Y+20, r25	; 0x14
     cac:	8b 8b       	std	Y+19, r24	; 0x13
     cae:	3f c0       	rjmp	.+126    	; 0xd2e <main+0x1f8>
	else if (__tmp > 65535)
     cb0:	6d 89       	ldd	r22, Y+21	; 0x15
     cb2:	7e 89       	ldd	r23, Y+22	; 0x16
     cb4:	8f 89       	ldd	r24, Y+23	; 0x17
     cb6:	98 8d       	ldd	r25, Y+24	; 0x18
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	3f ef       	ldi	r19, 0xFF	; 255
     cbc:	4f e7       	ldi	r20, 0x7F	; 127
     cbe:	57 e4       	ldi	r21, 0x47	; 71
     cc0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     cc4:	18 16       	cp	r1, r24
     cc6:	4c f5       	brge	.+82     	; 0xd1a <main+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cc8:	69 8d       	ldd	r22, Y+25	; 0x19
     cca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ccc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	40 e2       	ldi	r20, 0x20	; 32
     cd6:	51 e4       	ldi	r21, 0x41	; 65
     cd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	bc 01       	movw	r22, r24
     ce2:	cd 01       	movw	r24, r26
     ce4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ce8:	dc 01       	movw	r26, r24
     cea:	cb 01       	movw	r24, r22
     cec:	9c 8b       	std	Y+20, r25	; 0x14
     cee:	8b 8b       	std	Y+19, r24	; 0x13
     cf0:	0f c0       	rjmp	.+30     	; 0xd10 <main+0x1da>
     cf2:	89 e1       	ldi	r24, 0x19	; 25
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	9a 8b       	std	Y+18, r25	; 0x12
     cf8:	89 8b       	std	Y+17, r24	; 0x11
     cfa:	89 89       	ldd	r24, Y+17	; 0x11
     cfc:	9a 89       	ldd	r25, Y+18	; 0x12
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	f1 f7       	brne	.-4      	; 0xcfe <main+0x1c8>
     d02:	9a 8b       	std	Y+18, r25	; 0x12
     d04:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d06:	8b 89       	ldd	r24, Y+19	; 0x13
     d08:	9c 89       	ldd	r25, Y+20	; 0x14
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	9c 8b       	std	Y+20, r25	; 0x14
     d0e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d10:	8b 89       	ldd	r24, Y+19	; 0x13
     d12:	9c 89       	ldd	r25, Y+20	; 0x14
     d14:	00 97       	sbiw	r24, 0x00	; 0
     d16:	69 f7       	brne	.-38     	; 0xcf2 <main+0x1bc>
     d18:	14 c0       	rjmp	.+40     	; 0xd42 <main+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d1a:	6d 89       	ldd	r22, Y+21	; 0x15
     d1c:	7e 89       	ldd	r23, Y+22	; 0x16
     d1e:	8f 89       	ldd	r24, Y+23	; 0x17
     d20:	98 8d       	ldd	r25, Y+24	; 0x18
     d22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d26:	dc 01       	movw	r26, r24
     d28:	cb 01       	movw	r24, r22
     d2a:	9c 8b       	std	Y+20, r25	; 0x14
     d2c:	8b 8b       	std	Y+19, r24	; 0x13
     d2e:	8b 89       	ldd	r24, Y+19	; 0x13
     d30:	9c 89       	ldd	r25, Y+20	; 0x14
     d32:	98 8b       	std	Y+16, r25	; 0x10
     d34:	8f 87       	std	Y+15, r24	; 0x0f
     d36:	8f 85       	ldd	r24, Y+15	; 0x0f
     d38:	98 89       	ldd	r25, Y+16	; 0x10
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	f1 f7       	brne	.-4      	; 0xd3a <main+0x204>
     d3e:	98 8b       	std	Y+16, r25	; 0x10
     d40:	8f 87       	std	Y+15, r24	; 0x0f
	 _delay_ms(300);

	 key =KeyPad_getPressedKey();
     d42:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <KeyPad_getPressedKey>
     d46:	8b a7       	std	Y+43, r24	; 0x2b
	 LCD_display_int(key);   /*Display the pressed key*/
     d48:	8b a5       	ldd	r24, Y+43	; 0x2b
     d4a:	88 2f       	mov	r24, r24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_display_int>
	 op2=key;
     d52:	8b a5       	ldd	r24, Y+43	; 0x2b
     d54:	8e a7       	std	Y+46, r24	; 0x2e
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	a6 e9       	ldi	r26, 0x96	; 150
     d5c:	b3 e4       	ldi	r27, 0x43	; 67
     d5e:	8b 87       	std	Y+11, r24	; 0x0b
     d60:	9c 87       	std	Y+12, r25	; 0x0c
     d62:	ad 87       	std	Y+13, r26	; 0x0d
     d64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d66:	6b 85       	ldd	r22, Y+11	; 0x0b
     d68:	7c 85       	ldd	r23, Y+12	; 0x0c
     d6a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d6c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	4a e7       	ldi	r20, 0x7A	; 122
     d74:	53 e4       	ldi	r21, 0x43	; 67
     d76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d7a:	dc 01       	movw	r26, r24
     d7c:	cb 01       	movw	r24, r22
     d7e:	8f 83       	std	Y+7, r24	; 0x07
     d80:	98 87       	std	Y+8, r25	; 0x08
     d82:	a9 87       	std	Y+9, r26	; 0x09
     d84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d86:	6f 81       	ldd	r22, Y+7	; 0x07
     d88:	78 85       	ldd	r23, Y+8	; 0x08
     d8a:	89 85       	ldd	r24, Y+9	; 0x09
     d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	40 e8       	ldi	r20, 0x80	; 128
     d94:	5f e3       	ldi	r21, 0x3F	; 63
     d96:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d9a:	88 23       	and	r24, r24
     d9c:	2c f4       	brge	.+10     	; 0xda8 <main+0x272>
		__ticks = 1;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	9e 83       	std	Y+6, r25	; 0x06
     da4:	8d 83       	std	Y+5, r24	; 0x05
     da6:	3f c0       	rjmp	.+126    	; 0xe26 <main+0x2f0>
	else if (__tmp > 65535)
     da8:	6f 81       	ldd	r22, Y+7	; 0x07
     daa:	78 85       	ldd	r23, Y+8	; 0x08
     dac:	89 85       	ldd	r24, Y+9	; 0x09
     dae:	9a 85       	ldd	r25, Y+10	; 0x0a
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	3f ef       	ldi	r19, 0xFF	; 255
     db4:	4f e7       	ldi	r20, 0x7F	; 127
     db6:	57 e4       	ldi	r21, 0x47	; 71
     db8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     dbc:	18 16       	cp	r1, r24
     dbe:	4c f5       	brge	.+82     	; 0xe12 <main+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc0:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc2:	7c 85       	ldd	r23, Y+12	; 0x0c
     dc4:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc6:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	40 e2       	ldi	r20, 0x20	; 32
     dce:	51 e4       	ldi	r21, 0x41	; 65
     dd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	bc 01       	movw	r22, r24
     dda:	cd 01       	movw	r24, r26
     ddc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
     de4:	9e 83       	std	Y+6, r25	; 0x06
     de6:	8d 83       	std	Y+5, r24	; 0x05
     de8:	0f c0       	rjmp	.+30     	; 0xe08 <main+0x2d2>
     dea:	89 e1       	ldi	r24, 0x19	; 25
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	9c 83       	std	Y+4, r25	; 0x04
     df0:	8b 83       	std	Y+3, r24	; 0x03
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	9c 81       	ldd	r25, Y+4	; 0x04
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	f1 f7       	brne	.-4      	; 0xdf6 <main+0x2c0>
     dfa:	9c 83       	std	Y+4, r25	; 0x04
     dfc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dfe:	8d 81       	ldd	r24, Y+5	; 0x05
     e00:	9e 81       	ldd	r25, Y+6	; 0x06
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	9e 83       	std	Y+6, r25	; 0x06
     e06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e08:	8d 81       	ldd	r24, Y+5	; 0x05
     e0a:	9e 81       	ldd	r25, Y+6	; 0x06
     e0c:	00 97       	sbiw	r24, 0x00	; 0
     e0e:	69 f7       	brne	.-38     	; 0xdea <main+0x2b4>
     e10:	14 c0       	rjmp	.+40     	; 0xe3a <main+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e12:	6f 81       	ldd	r22, Y+7	; 0x07
     e14:	78 85       	ldd	r23, Y+8	; 0x08
     e16:	89 85       	ldd	r24, Y+9	; 0x09
     e18:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e1e:	dc 01       	movw	r26, r24
     e20:	cb 01       	movw	r24, r22
     e22:	9e 83       	std	Y+6, r25	; 0x06
     e24:	8d 83       	std	Y+5, r24	; 0x05
     e26:	8d 81       	ldd	r24, Y+5	; 0x05
     e28:	9e 81       	ldd	r25, Y+6	; 0x06
     e2a:	9a 83       	std	Y+2, r25	; 0x02
     e2c:	89 83       	std	Y+1, r24	; 0x01
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	9a 81       	ldd	r25, Y+2	; 0x02
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	f1 f7       	brne	.-4      	; 0xe32 <main+0x2fc>
     e36:	9a 83       	std	Y+2, r25	; 0x02
     e38:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(300);

	 LCD_Clear();
     e3a:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_Clear>
	 LCD_display_int(calc(operation,op1,op2));
     e3e:	8f a5       	ldd	r24, Y+47	; 0x2f
     e40:	9d a5       	ldd	r25, Y+45	; 0x2d
     e42:	2e a5       	ldd	r18, Y+46	; 0x2e
     e44:	69 2f       	mov	r22, r25
     e46:	42 2f       	mov	r20, r18
     e48:	0e 94 2b 07 	call	0xe56	; 0xe56 <calc>
     e4c:	88 2f       	mov	r24, r24
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_display_int>
     e54:	ff cf       	rjmp	.-2      	; 0xe54 <main+0x31e>

00000e56 <calc>:

	    }
}

uint8 calc(uint8 operation,uint8 op1,uint8 op2)
{
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <calc+0x6>
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <calc+0x8>
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	8a 83       	std	Y+2, r24	; 0x02
     e64:	6b 83       	std	Y+3, r22	; 0x03
     e66:	4c 83       	std	Y+4, r20	; 0x04
	uint8 result;
	switch(operation)
     e68:	8a 81       	ldd	r24, Y+2	; 0x02
     e6a:	88 2f       	mov	r24, r24
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	8b 32       	cpi	r24, 0x2B	; 43
     e70:	91 05       	cpc	r25, r1
     e72:	21 f4       	brne	.+8      	; 0xe7c <calc+0x26>
	{
	case '+' :
		result=op1+op2;
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	9c 81       	ldd	r25, Y+4	; 0x04
     e78:	89 0f       	add	r24, r25
     e7a:	89 83       	std	Y+1, r24	; 0x01


	}
	return result;
     e7c:	89 81       	ldd	r24, Y+1	; 0x01

}
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	cf 91       	pop	r28
     e88:	df 91       	pop	r29
     e8a:	08 95       	ret

00000e8c <DIO_setPINDir>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void DIO_setPINDir(uint8 portname,uint8 pin,uint8 direction)
{
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	00 d0       	rcall	.+0      	; 0xe92 <DIO_setPINDir+0x6>
     e92:	00 d0       	rcall	.+0      	; 0xe94 <DIO_setPINDir+0x8>
     e94:	0f 92       	push	r0
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	89 83       	std	Y+1, r24	; 0x01
     e9c:	6a 83       	std	Y+2, r22	; 0x02
     e9e:	4b 83       	std	Y+3, r20	; 0x03

	switch(portname)
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	3d 83       	std	Y+5, r19	; 0x05
     ea8:	2c 83       	std	Y+4, r18	; 0x04
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	9d 81       	ldd	r25, Y+5	; 0x05
     eae:	82 34       	cpi	r24, 0x42	; 66
     eb0:	91 05       	cpc	r25, r1
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <DIO_setPINDir+0x2a>
     eb4:	44 c0       	rjmp	.+136    	; 0xf3e <DIO_setPINDir+0xb2>
     eb6:	2c 81       	ldd	r18, Y+4	; 0x04
     eb8:	3d 81       	ldd	r19, Y+5	; 0x05
     eba:	23 34       	cpi	r18, 0x43	; 67
     ebc:	31 05       	cpc	r19, r1
     ebe:	34 f4       	brge	.+12     	; 0xecc <DIO_setPINDir+0x40>
     ec0:	8c 81       	ldd	r24, Y+4	; 0x04
     ec2:	9d 81       	ldd	r25, Y+5	; 0x05
     ec4:	81 34       	cpi	r24, 0x41	; 65
     ec6:	91 05       	cpc	r25, r1
     ec8:	71 f0       	breq	.+28     	; 0xee6 <DIO_setPINDir+0x5a>
     eca:	bc c0       	rjmp	.+376    	; 0x1044 <DIO_setPINDir+0x1b8>
     ecc:	2c 81       	ldd	r18, Y+4	; 0x04
     ece:	3d 81       	ldd	r19, Y+5	; 0x05
     ed0:	23 34       	cpi	r18, 0x43	; 67
     ed2:	31 05       	cpc	r19, r1
     ed4:	09 f4       	brne	.+2      	; 0xed8 <DIO_setPINDir+0x4c>
     ed6:	5f c0       	rjmp	.+190    	; 0xf96 <DIO_setPINDir+0x10a>
     ed8:	8c 81       	ldd	r24, Y+4	; 0x04
     eda:	9d 81       	ldd	r25, Y+5	; 0x05
     edc:	84 34       	cpi	r24, 0x44	; 68
     ede:	91 05       	cpc	r25, r1
     ee0:	09 f4       	brne	.+2      	; 0xee4 <DIO_setPINDir+0x58>
     ee2:	85 c0       	rjmp	.+266    	; 0xfee <DIO_setPINDir+0x162>
     ee4:	af c0       	rjmp	.+350    	; 0x1044 <DIO_setPINDir+0x1b8>
	{

	case 'A':
		if( direction==1 )
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	81 30       	cpi	r24, 0x01	; 1
     eea:	a1 f4       	brne	.+40     	; 0xf14 <DIO_setPINDir+0x88>
		{
			SET_BIT(DDRA,pin);
     eec:	aa e3       	ldi	r26, 0x3A	; 58
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	ea e3       	ldi	r30, 0x3A	; 58
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	80 81       	ld	r24, Z
     ef6:	48 2f       	mov	r20, r24
     ef8:	8a 81       	ldd	r24, Y+2	; 0x02
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	02 2e       	mov	r0, r18
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <DIO_setPINDir+0x7e>
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	0a 94       	dec	r0
     f0c:	e2 f7       	brpl	.-8      	; 0xf06 <DIO_setPINDir+0x7a>
     f0e:	84 2b       	or	r24, r20
     f10:	8c 93       	st	X, r24
     f12:	98 c0       	rjmp	.+304    	; 0x1044 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRA,pin);
     f14:	aa e3       	ldi	r26, 0x3A	; 58
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	ea e3       	ldi	r30, 0x3A	; 58
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	48 2f       	mov	r20, r24
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 2e       	mov	r0, r18
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_setPINDir+0xa6>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	0a 94       	dec	r0
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_setPINDir+0xa2>
     f36:	80 95       	com	r24
     f38:	84 23       	and	r24, r20
     f3a:	8c 93       	st	X, r24
     f3c:	83 c0       	rjmp	.+262    	; 0x1044 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'B':
		if( direction==1 )
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	a1 f4       	brne	.+40     	; 0xf6c <DIO_setPINDir+0xe0>
		{
			SET_BIT(DDRB,pin);
     f44:	a7 e3       	ldi	r26, 0x37	; 55
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e7 e3       	ldi	r30, 0x37	; 55
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 2e       	mov	r0, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <DIO_setPINDir+0xd6>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <DIO_setPINDir+0xd2>
     f66:	84 2b       	or	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	6c c0       	rjmp	.+216    	; 0x1044 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRB,pin);
     f6c:	a7 e3       	ldi	r26, 0x37	; 55
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e7 e3       	ldi	r30, 0x37	; 55
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <DIO_setPINDir+0xfe>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <DIO_setPINDir+0xfa>
     f8e:	80 95       	com	r24
     f90:	84 23       	and	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	57 c0       	rjmp	.+174    	; 0x1044 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'C':
		if( direction==1 )
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	81 30       	cpi	r24, 0x01	; 1
     f9a:	a1 f4       	brne	.+40     	; 0xfc4 <DIO_setPINDir+0x138>
		{
			SET_BIT(DDRC,pin);
     f9c:	a4 e3       	ldi	r26, 0x34	; 52
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e4 e3       	ldi	r30, 0x34	; 52
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	48 2f       	mov	r20, r24
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	02 2e       	mov	r0, r18
     fb4:	02 c0       	rjmp	.+4      	; 0xfba <DIO_setPINDir+0x12e>
     fb6:	88 0f       	add	r24, r24
     fb8:	99 1f       	adc	r25, r25
     fba:	0a 94       	dec	r0
     fbc:	e2 f7       	brpl	.-8      	; 0xfb6 <DIO_setPINDir+0x12a>
     fbe:	84 2b       	or	r24, r20
     fc0:	8c 93       	st	X, r24
     fc2:	40 c0       	rjmp	.+128    	; 0x1044 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRC,pin);
     fc4:	a4 e3       	ldi	r26, 0x34	; 52
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e4 e3       	ldi	r30, 0x34	; 52
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_setPINDir+0x156>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_setPINDir+0x152>
     fe6:	80 95       	com	r24
     fe8:	84 23       	and	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	2b c0       	rjmp	.+86     	; 0x1044 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'D':
		if( direction==1)
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	a1 f4       	brne	.+40     	; 0x101c <DIO_setPINDir+0x190>
		{
			SET_BIT(DDRD,pin);
     ff4:	a1 e3       	ldi	r26, 0x31	; 49
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e1 e3       	ldi	r30, 0x31	; 49
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	48 2f       	mov	r20, r24
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 2e       	mov	r0, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DIO_setPINDir+0x186>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	0a 94       	dec	r0
    1014:	e2 f7       	brpl	.-8      	; 0x100e <DIO_setPINDir+0x182>
    1016:	84 2b       	or	r24, r20
    1018:	8c 93       	st	X, r24
    101a:	14 c0       	rjmp	.+40     	; 0x1044 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRD,pin);
    101c:	a1 e3       	ldi	r26, 0x31	; 49
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e1 e3       	ldi	r30, 0x31	; 49
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	48 2f       	mov	r20, r24
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	02 2e       	mov	r0, r18
    1034:	02 c0       	rjmp	.+4      	; 0x103a <DIO_setPINDir+0x1ae>
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	0a 94       	dec	r0
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <DIO_setPINDir+0x1aa>
    103e:	80 95       	com	r24
    1040:	84 23       	and	r24, r20
    1042:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <DIO_write_PIN>:


void DIO_write_PIN(uint8 portname,uint8 pin,uint8 pinvalue)
{
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	00 d0       	rcall	.+0      	; 0x105a <DIO_write_PIN+0x6>
    105a:	00 d0       	rcall	.+0      	; 0x105c <DIO_write_PIN+0x8>
    105c:	0f 92       	push	r0
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	6a 83       	std	Y+2, r22	; 0x02
    1066:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	3d 83       	std	Y+5, r19	; 0x05
    1070:	2c 83       	std	Y+4, r18	; 0x04
    1072:	8c 81       	ldd	r24, Y+4	; 0x04
    1074:	9d 81       	ldd	r25, Y+5	; 0x05
    1076:	82 34       	cpi	r24, 0x42	; 66
    1078:	91 05       	cpc	r25, r1
    107a:	09 f4       	brne	.+2      	; 0x107e <DIO_write_PIN+0x2a>
    107c:	44 c0       	rjmp	.+136    	; 0x1106 <DIO_write_PIN+0xb2>
    107e:	2c 81       	ldd	r18, Y+4	; 0x04
    1080:	3d 81       	ldd	r19, Y+5	; 0x05
    1082:	23 34       	cpi	r18, 0x43	; 67
    1084:	31 05       	cpc	r19, r1
    1086:	34 f4       	brge	.+12     	; 0x1094 <DIO_write_PIN+0x40>
    1088:	8c 81       	ldd	r24, Y+4	; 0x04
    108a:	9d 81       	ldd	r25, Y+5	; 0x05
    108c:	81 34       	cpi	r24, 0x41	; 65
    108e:	91 05       	cpc	r25, r1
    1090:	71 f0       	breq	.+28     	; 0x10ae <DIO_write_PIN+0x5a>
    1092:	bc c0       	rjmp	.+376    	; 0x120c <DIO_write_PIN+0x1b8>
    1094:	2c 81       	ldd	r18, Y+4	; 0x04
    1096:	3d 81       	ldd	r19, Y+5	; 0x05
    1098:	23 34       	cpi	r18, 0x43	; 67
    109a:	31 05       	cpc	r19, r1
    109c:	09 f4       	brne	.+2      	; 0x10a0 <DIO_write_PIN+0x4c>
    109e:	5f c0       	rjmp	.+190    	; 0x115e <DIO_write_PIN+0x10a>
    10a0:	8c 81       	ldd	r24, Y+4	; 0x04
    10a2:	9d 81       	ldd	r25, Y+5	; 0x05
    10a4:	84 34       	cpi	r24, 0x44	; 68
    10a6:	91 05       	cpc	r25, r1
    10a8:	09 f4       	brne	.+2      	; 0x10ac <DIO_write_PIN+0x58>
    10aa:	85 c0       	rjmp	.+266    	; 0x11b6 <DIO_write_PIN+0x162>
    10ac:	af c0       	rjmp	.+350    	; 0x120c <DIO_write_PIN+0x1b8>
	{

	case 'A':
		if( pinvalue==1 )
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	81 30       	cpi	r24, 0x01	; 1
    10b2:	a1 f4       	brne	.+40     	; 0x10dc <DIO_write_PIN+0x88>
		{
			SET_BIT(PORTA,pin);
    10b4:	ab e3       	ldi	r26, 0x3B	; 59
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	eb e3       	ldi	r30, 0x3B	; 59
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	48 2f       	mov	r20, r24
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	02 2e       	mov	r0, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <DIO_write_PIN+0x7e>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <DIO_write_PIN+0x7a>
    10d6:	84 2b       	or	r24, r20
    10d8:	8c 93       	st	X, r24
    10da:	98 c0       	rjmp	.+304    	; 0x120c <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
    10dc:	ab e3       	ldi	r26, 0x3B	; 59
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	eb e3       	ldi	r30, 0x3B	; 59
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	48 2f       	mov	r20, r24
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 2e       	mov	r0, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <DIO_write_PIN+0xa6>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	0a 94       	dec	r0
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <DIO_write_PIN+0xa2>
    10fe:	80 95       	com	r24
    1100:	84 23       	and	r24, r20
    1102:	8c 93       	st	X, r24
    1104:	83 c0       	rjmp	.+262    	; 0x120c <DIO_write_PIN+0x1b8>
		}
		break;
	case 'B':
		if( pinvalue==1 )
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	a1 f4       	brne	.+40     	; 0x1134 <DIO_write_PIN+0xe0>
		{
			SET_BIT(PORTB,pin);
    110c:	a8 e3       	ldi	r26, 0x38	; 56
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e8 e3       	ldi	r30, 0x38	; 56
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_write_PIN+0xd6>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_write_PIN+0xd2>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	6c c0       	rjmp	.+216    	; 0x120c <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTB,pin);
    1134:	a8 e3       	ldi	r26, 0x38	; 56
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e8 e3       	ldi	r30, 0x38	; 56
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <DIO_write_PIN+0xfe>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <DIO_write_PIN+0xfa>
    1156:	80 95       	com	r24
    1158:	84 23       	and	r24, r20
    115a:	8c 93       	st	X, r24
    115c:	57 c0       	rjmp	.+174    	; 0x120c <DIO_write_PIN+0x1b8>
		}
		break;
	case 'C':
		if( pinvalue==1 )
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	81 30       	cpi	r24, 0x01	; 1
    1162:	a1 f4       	brne	.+40     	; 0x118c <DIO_write_PIN+0x138>
		{
			SET_BIT(PORTC,pin);
    1164:	a5 e3       	ldi	r26, 0x35	; 53
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e5 e3       	ldi	r30, 0x35	; 53
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <DIO_write_PIN+0x12e>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <DIO_write_PIN+0x12a>
    1186:	84 2b       	or	r24, r20
    1188:	8c 93       	st	X, r24
    118a:	40 c0       	rjmp	.+128    	; 0x120c <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTC,pin);
    118c:	a5 e3       	ldi	r26, 0x35	; 53
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e5 e3       	ldi	r30, 0x35	; 53
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <DIO_write_PIN+0x156>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <DIO_write_PIN+0x152>
    11ae:	80 95       	com	r24
    11b0:	84 23       	and	r24, r20
    11b2:	8c 93       	st	X, r24
    11b4:	2b c0       	rjmp	.+86     	; 0x120c <DIO_write_PIN+0x1b8>
		}
		break;
	case 'D':
		if( pinvalue==1)
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	a1 f4       	brne	.+40     	; 0x11e4 <DIO_write_PIN+0x190>
		{
			SET_BIT(PORTD,pin);
    11bc:	a2 e3       	ldi	r26, 0x32	; 50
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e2 e3       	ldi	r30, 0x32	; 50
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 2e       	mov	r0, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <DIO_write_PIN+0x186>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <DIO_write_PIN+0x182>
    11de:	84 2b       	or	r24, r20
    11e0:	8c 93       	st	X, r24
    11e2:	14 c0       	rjmp	.+40     	; 0x120c <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTD,pin);
    11e4:	a2 e3       	ldi	r26, 0x32	; 50
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e2 e3       	ldi	r30, 0x32	; 50
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	48 2f       	mov	r20, r24
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 2e       	mov	r0, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <DIO_write_PIN+0x1ae>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	0a 94       	dec	r0
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <DIO_write_PIN+0x1aa>
    1206:	80 95       	com	r24
    1208:	84 23       	and	r24, r20
    120a:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <DIO_read_PIN>:

uint8 DIO_read_PIN(uint8 portname,uint8 pin)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	00 d0       	rcall	.+0      	; 0x1222 <DIO_read_PIN+0x6>
    1222:	00 d0       	rcall	.+0      	; 0x1224 <DIO_read_PIN+0x8>
    1224:	0f 92       	push	r0
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	8a 83       	std	Y+2, r24	; 0x02
    122c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_val=0;
    122e:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	3d 83       	std	Y+5, r19	; 0x05
    1238:	2c 83       	std	Y+4, r18	; 0x04
    123a:	8c 81       	ldd	r24, Y+4	; 0x04
    123c:	9d 81       	ldd	r25, Y+5	; 0x05
    123e:	82 34       	cpi	r24, 0x42	; 66
    1240:	91 05       	cpc	r25, r1
    1242:	41 f1       	breq	.+80     	; 0x1294 <DIO_read_PIN+0x78>
    1244:	2c 81       	ldd	r18, Y+4	; 0x04
    1246:	3d 81       	ldd	r19, Y+5	; 0x05
    1248:	23 34       	cpi	r18, 0x43	; 67
    124a:	31 05       	cpc	r19, r1
    124c:	34 f4       	brge	.+12     	; 0x125a <DIO_read_PIN+0x3e>
    124e:	8c 81       	ldd	r24, Y+4	; 0x04
    1250:	9d 81       	ldd	r25, Y+5	; 0x05
    1252:	81 34       	cpi	r24, 0x41	; 65
    1254:	91 05       	cpc	r25, r1
    1256:	61 f0       	breq	.+24     	; 0x1270 <DIO_read_PIN+0x54>
    1258:	52 c0       	rjmp	.+164    	; 0x12fe <DIO_read_PIN+0xe2>
    125a:	2c 81       	ldd	r18, Y+4	; 0x04
    125c:	3d 81       	ldd	r19, Y+5	; 0x05
    125e:	23 34       	cpi	r18, 0x43	; 67
    1260:	31 05       	cpc	r19, r1
    1262:	51 f1       	breq	.+84     	; 0x12b8 <DIO_read_PIN+0x9c>
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
    1266:	9d 81       	ldd	r25, Y+5	; 0x05
    1268:	84 34       	cpi	r24, 0x44	; 68
    126a:	91 05       	cpc	r25, r1
    126c:	b9 f1       	breq	.+110    	; 0x12dc <DIO_read_PIN+0xc0>
    126e:	47 c0       	rjmp	.+142    	; 0x12fe <DIO_read_PIN+0xe2>
	{

	case 'A':
		pin_val=READ_BIT(PINA,pin);
    1270:	e9 e3       	ldi	r30, 0x39	; 57
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <DIO_read_PIN+0x6e>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <DIO_read_PIN+0x6a>
    128e:	84 23       	and	r24, r20
    1290:	89 83       	std	Y+1, r24	; 0x01
    1292:	35 c0       	rjmp	.+106    	; 0x12fe <DIO_read_PIN+0xe2>
		break;
	case 'B':
		pin_val=READ_BIT(PINB,pin);
    1294:	e6 e3       	ldi	r30, 0x36	; 54
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	80 81       	ld	r24, Z
    129a:	48 2f       	mov	r20, r24
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 2e       	mov	r0, r18
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <DIO_read_PIN+0x92>
    12aa:	88 0f       	add	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	0a 94       	dec	r0
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <DIO_read_PIN+0x8e>
    12b2:	84 23       	and	r24, r20
    12b4:	89 83       	std	Y+1, r24	; 0x01
    12b6:	23 c0       	rjmp	.+70     	; 0x12fe <DIO_read_PIN+0xe2>
		break;
	case 'C':
		pin_val=READ_BIT(PINC,pin);
    12b8:	e3 e3       	ldi	r30, 0x33	; 51
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_read_PIN+0xb6>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_read_PIN+0xb2>
    12d6:	84 23       	and	r24, r20
    12d8:	89 83       	std	Y+1, r24	; 0x01
    12da:	11 c0       	rjmp	.+34     	; 0x12fe <DIO_read_PIN+0xe2>
		break;
	case 'D':
		pin_val=READ_BIT(PIND,pin);
    12dc:	e0 e3       	ldi	r30, 0x30	; 48
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	48 2f       	mov	r20, r24
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	02 2e       	mov	r0, r18
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <DIO_read_PIN+0xda>
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	0a 94       	dec	r0
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <DIO_read_PIN+0xd6>
    12fa:	84 23       	and	r24, r20
    12fc:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	return pin_val;
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <DIO_BIT_TOGGLE>:

void DIO_BIT_TOGGLE(uint8 portname,uint8 pin)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	00 d0       	rcall	.+0      	; 0x1316 <DIO_BIT_TOGGLE+0x6>
    1316:	00 d0       	rcall	.+0      	; 0x1318 <DIO_BIT_TOGGLE+0x8>
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	89 83       	std	Y+1, r24	; 0x01
    131e:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	3c 83       	std	Y+4, r19	; 0x04
    1328:	2b 83       	std	Y+3, r18	; 0x03
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	9c 81       	ldd	r25, Y+4	; 0x04
    132e:	82 34       	cpi	r24, 0x42	; 66
    1330:	91 05       	cpc	r25, r1
    1332:	51 f1       	breq	.+84     	; 0x1388 <DIO_BIT_TOGGLE+0x78>
    1334:	2b 81       	ldd	r18, Y+3	; 0x03
    1336:	3c 81       	ldd	r19, Y+4	; 0x04
    1338:	23 34       	cpi	r18, 0x43	; 67
    133a:	31 05       	cpc	r19, r1
    133c:	34 f4       	brge	.+12     	; 0x134a <DIO_BIT_TOGGLE+0x3a>
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	81 34       	cpi	r24, 0x41	; 65
    1344:	91 05       	cpc	r25, r1
    1346:	61 f0       	breq	.+24     	; 0x1360 <DIO_BIT_TOGGLE+0x50>
    1348:	5a c0       	rjmp	.+180    	; 0x13fe <DIO_BIT_TOGGLE+0xee>
    134a:	2b 81       	ldd	r18, Y+3	; 0x03
    134c:	3c 81       	ldd	r19, Y+4	; 0x04
    134e:	23 34       	cpi	r18, 0x43	; 67
    1350:	31 05       	cpc	r19, r1
    1352:	71 f1       	breq	.+92     	; 0x13b0 <DIO_BIT_TOGGLE+0xa0>
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	9c 81       	ldd	r25, Y+4	; 0x04
    1358:	84 34       	cpi	r24, 0x44	; 68
    135a:	91 05       	cpc	r25, r1
    135c:	e9 f1       	breq	.+122    	; 0x13d8 <DIO_BIT_TOGGLE+0xc8>
    135e:	4f c0       	rjmp	.+158    	; 0x13fe <DIO_BIT_TOGGLE+0xee>
	{

	case 'A':
		TOGGLE_BIT(PORTA,pin);
    1360:	ab e3       	ldi	r26, 0x3B	; 59
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	eb e3       	ldi	r30, 0x3B	; 59
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	48 2f       	mov	r20, r24
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	02 2e       	mov	r0, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_BIT_TOGGLE+0x6e>
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	0a 94       	dec	r0
    1380:	e2 f7       	brpl	.-8      	; 0x137a <DIO_BIT_TOGGLE+0x6a>
    1382:	84 27       	eor	r24, r20
    1384:	8c 93       	st	X, r24
    1386:	3b c0       	rjmp	.+118    	; 0x13fe <DIO_BIT_TOGGLE+0xee>
		break;
	case 'B':
		TOGGLE_BIT(PORTB,pin);
    1388:	a8 e3       	ldi	r26, 0x38	; 56
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e8 e3       	ldi	r30, 0x38	; 56
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	48 2f       	mov	r20, r24
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	02 2e       	mov	r0, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <DIO_BIT_TOGGLE+0x96>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	0a 94       	dec	r0
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <DIO_BIT_TOGGLE+0x92>
    13aa:	84 27       	eor	r24, r20
    13ac:	8c 93       	st	X, r24
    13ae:	27 c0       	rjmp	.+78     	; 0x13fe <DIO_BIT_TOGGLE+0xee>
		break;
	case 'C':
		TOGGLE_BIT(PORTC,pin);
    13b0:	a5 e3       	ldi	r26, 0x35	; 53
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e5 e3       	ldi	r30, 0x35	; 53
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	48 2f       	mov	r20, r24
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	02 2e       	mov	r0, r18
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <DIO_BIT_TOGGLE+0xbe>
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	0a 94       	dec	r0
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <DIO_BIT_TOGGLE+0xba>
    13d2:	84 27       	eor	r24, r20
    13d4:	8c 93       	st	X, r24
    13d6:	13 c0       	rjmp	.+38     	; 0x13fe <DIO_BIT_TOGGLE+0xee>
		break;
	case 'D':
		TOGGLE_BIT(PORTD,pin);
    13d8:	a2 e3       	ldi	r26, 0x32	; 50
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e2 e3       	ldi	r30, 0x32	; 50
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	48 2f       	mov	r20, r24
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	02 2e       	mov	r0, r18
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <DIO_BIT_TOGGLE+0xe6>
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	0a 94       	dec	r0
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <DIO_BIT_TOGGLE+0xe2>
    13fa:	84 27       	eor	r24, r20
    13fc:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <DIO_set_port_Dir>:

void DIO_set_port_Dir(uint8 portname,uint8 direction)
{
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	00 d0       	rcall	.+0      	; 0x1412 <DIO_set_port_Dir+0x6>
    1412:	00 d0       	rcall	.+0      	; 0x1414 <DIO_set_port_Dir+0x8>
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	3c 83       	std	Y+4, r19	; 0x04
    1424:	2b 83       	std	Y+3, r18	; 0x03
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	9c 81       	ldd	r25, Y+4	; 0x04
    142a:	82 34       	cpi	r24, 0x42	; 66
    142c:	91 05       	cpc	r25, r1
    142e:	11 f1       	breq	.+68     	; 0x1474 <DIO_set_port_Dir+0x68>
    1430:	2b 81       	ldd	r18, Y+3	; 0x03
    1432:	3c 81       	ldd	r19, Y+4	; 0x04
    1434:	23 34       	cpi	r18, 0x43	; 67
    1436:	31 05       	cpc	r19, r1
    1438:	34 f4       	brge	.+12     	; 0x1446 <DIO_set_port_Dir+0x3a>
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	81 34       	cpi	r24, 0x41	; 65
    1440:	91 05       	cpc	r25, r1
    1442:	61 f0       	breq	.+24     	; 0x145c <DIO_set_port_Dir+0x50>
    1444:	3a c0       	rjmp	.+116    	; 0x14ba <DIO_set_port_Dir+0xae>
    1446:	2b 81       	ldd	r18, Y+3	; 0x03
    1448:	3c 81       	ldd	r19, Y+4	; 0x04
    144a:	23 34       	cpi	r18, 0x43	; 67
    144c:	31 05       	cpc	r19, r1
    144e:	f1 f0       	breq	.+60     	; 0x148c <DIO_set_port_Dir+0x80>
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	84 34       	cpi	r24, 0x44	; 68
    1456:	91 05       	cpc	r25, r1
    1458:	29 f1       	breq	.+74     	; 0x14a4 <DIO_set_port_Dir+0x98>
    145a:	2f c0       	rjmp	.+94     	; 0x14ba <DIO_set_port_Dir+0xae>
	{
	case 'A':
		if(direction==1)
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	29 f4       	brne	.+10     	; 0x146c <DIO_set_port_Dir+0x60>
		{
			DDRA=0xFF;
    1462:	ea e3       	ldi	r30, 0x3A	; 58
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	8f ef       	ldi	r24, 0xFF	; 255
    1468:	80 83       	st	Z, r24
    146a:	27 c0       	rjmp	.+78     	; 0x14ba <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRA=0;
    146c:	ea e3       	ldi	r30, 0x3A	; 58
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	10 82       	st	Z, r1
    1472:	23 c0       	rjmp	.+70     	; 0x14ba <DIO_set_port_Dir+0xae>
		}
		break;
	case 'B':
		if(direction==1)
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	29 f4       	brne	.+10     	; 0x1484 <DIO_set_port_Dir+0x78>
		{
			DDRB=0xFF;
    147a:	e7 e3       	ldi	r30, 0x37	; 55
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	8f ef       	ldi	r24, 0xFF	; 255
    1480:	80 83       	st	Z, r24
    1482:	1b c0       	rjmp	.+54     	; 0x14ba <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRB=0;
    1484:	e7 e3       	ldi	r30, 0x37	; 55
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	10 82       	st	Z, r1
    148a:	17 c0       	rjmp	.+46     	; 0x14ba <DIO_set_port_Dir+0xae>
		}
		break;
	case 'C':
		if(direction==1)
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	29 f4       	brne	.+10     	; 0x149c <DIO_set_port_Dir+0x90>
		{
			DDRC=0XFF;
    1492:	e4 e3       	ldi	r30, 0x34	; 52
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	8f ef       	ldi	r24, 0xFF	; 255
    1498:	80 83       	st	Z, r24
    149a:	0f c0       	rjmp	.+30     	; 0x14ba <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRC=0;
    149c:	e4 e3       	ldi	r30, 0x34	; 52
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	10 82       	st	Z, r1
    14a2:	0b c0       	rjmp	.+22     	; 0x14ba <DIO_set_port_Dir+0xae>
		}
		break;
	case 'D':
		if(direction==1)
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	29 f4       	brne	.+10     	; 0x14b4 <DIO_set_port_Dir+0xa8>
		{
			DDRD=0XFF;
    14aa:	e1 e3       	ldi	r30, 0x31	; 49
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	8f ef       	ldi	r24, 0xFF	; 255
    14b0:	80 83       	st	Z, r24
    14b2:	03 c0       	rjmp	.+6      	; 0x14ba <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRD=0;
    14b4:	e1 e3       	ldi	r30, 0x31	; 49
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	10 82       	st	Z, r1
		}
		break;
	default:
		break;
	}
}
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	08 95       	ret

000014c8 <DIO_write_port>:

void DIO_write_port(uint8 portname,uint8 portvalue)
{
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	00 d0       	rcall	.+0      	; 0x14ce <DIO_write_port+0x6>
    14ce:	00 d0       	rcall	.+0      	; 0x14d0 <DIO_write_port+0x8>
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	3c 83       	std	Y+4, r19	; 0x04
    14e0:	2b 83       	std	Y+3, r18	; 0x03
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	9c 81       	ldd	r25, Y+4	; 0x04
    14e6:	82 34       	cpi	r24, 0x42	; 66
    14e8:	91 05       	cpc	r25, r1
    14ea:	d9 f0       	breq	.+54     	; 0x1522 <DIO_write_port+0x5a>
    14ec:	2b 81       	ldd	r18, Y+3	; 0x03
    14ee:	3c 81       	ldd	r19, Y+4	; 0x04
    14f0:	23 34       	cpi	r18, 0x43	; 67
    14f2:	31 05       	cpc	r19, r1
    14f4:	34 f4       	brge	.+12     	; 0x1502 <DIO_write_port+0x3a>
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	9c 81       	ldd	r25, Y+4	; 0x04
    14fa:	81 34       	cpi	r24, 0x41	; 65
    14fc:	91 05       	cpc	r25, r1
    14fe:	61 f0       	breq	.+24     	; 0x1518 <DIO_write_port+0x50>
    1500:	1e c0       	rjmp	.+60     	; 0x153e <DIO_write_port+0x76>
    1502:	2b 81       	ldd	r18, Y+3	; 0x03
    1504:	3c 81       	ldd	r19, Y+4	; 0x04
    1506:	23 34       	cpi	r18, 0x43	; 67
    1508:	31 05       	cpc	r19, r1
    150a:	81 f0       	breq	.+32     	; 0x152c <DIO_write_port+0x64>
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	9c 81       	ldd	r25, Y+4	; 0x04
    1510:	84 34       	cpi	r24, 0x44	; 68
    1512:	91 05       	cpc	r25, r1
    1514:	81 f0       	breq	.+32     	; 0x1536 <DIO_write_port+0x6e>
    1516:	13 c0       	rjmp	.+38     	; 0x153e <DIO_write_port+0x76>
	{
	case 'A':
		PORTA=portvalue;
    1518:	eb e3       	ldi	r30, 0x3B	; 59
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	80 83       	st	Z, r24
    1520:	0e c0       	rjmp	.+28     	; 0x153e <DIO_write_port+0x76>
		break;
	case 'B':
		PORTB=portvalue;
    1522:	e8 e3       	ldi	r30, 0x38	; 56
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	8a 81       	ldd	r24, Y+2	; 0x02
    1528:	80 83       	st	Z, r24
    152a:	09 c0       	rjmp	.+18     	; 0x153e <DIO_write_port+0x76>
		break;
	case 'C':
		PORTC=portvalue;
    152c:	e5 e3       	ldi	r30, 0x35	; 53
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	80 83       	st	Z, r24
    1534:	04 c0       	rjmp	.+8      	; 0x153e <DIO_write_port+0x76>
		break;
	case 'D':
		PORTD=portvalue;
    1536:	e2 e3       	ldi	r30, 0x32	; 50
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	80 83       	st	Z, r24
	}
}
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <DIO_read_port>:

uint8 DIO_read_port(uint8 portname)
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	00 d0       	rcall	.+0      	; 0x1552 <DIO_read_port+0x6>
    1552:	00 d0       	rcall	.+0      	; 0x1554 <DIO_read_port+0x8>
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
    1558:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_val=0;
    155a:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	3c 83       	std	Y+4, r19	; 0x04
    1564:	2b 83       	std	Y+3, r18	; 0x03
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	9c 81       	ldd	r25, Y+4	; 0x04
    156a:	82 34       	cpi	r24, 0x42	; 66
    156c:	91 05       	cpc	r25, r1
    156e:	d9 f0       	breq	.+54     	; 0x15a6 <DIO_read_port+0x5a>
    1570:	2b 81       	ldd	r18, Y+3	; 0x03
    1572:	3c 81       	ldd	r19, Y+4	; 0x04
    1574:	23 34       	cpi	r18, 0x43	; 67
    1576:	31 05       	cpc	r19, r1
    1578:	34 f4       	brge	.+12     	; 0x1586 <DIO_read_port+0x3a>
    157a:	8b 81       	ldd	r24, Y+3	; 0x03
    157c:	9c 81       	ldd	r25, Y+4	; 0x04
    157e:	81 34       	cpi	r24, 0x41	; 65
    1580:	91 05       	cpc	r25, r1
    1582:	61 f0       	breq	.+24     	; 0x159c <DIO_read_port+0x50>
    1584:	1e c0       	rjmp	.+60     	; 0x15c2 <DIO_read_port+0x76>
    1586:	2b 81       	ldd	r18, Y+3	; 0x03
    1588:	3c 81       	ldd	r19, Y+4	; 0x04
    158a:	23 34       	cpi	r18, 0x43	; 67
    158c:	31 05       	cpc	r19, r1
    158e:	81 f0       	breq	.+32     	; 0x15b0 <DIO_read_port+0x64>
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	84 34       	cpi	r24, 0x44	; 68
    1596:	91 05       	cpc	r25, r1
    1598:	81 f0       	breq	.+32     	; 0x15ba <DIO_read_port+0x6e>
    159a:	13 c0       	rjmp	.+38     	; 0x15c2 <DIO_read_port+0x76>
	{

	case 'A':
		port_val=PINA;
    159c:	e9 e3       	ldi	r30, 0x39	; 57
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	89 83       	std	Y+1, r24	; 0x01
    15a4:	0e c0       	rjmp	.+28     	; 0x15c2 <DIO_read_port+0x76>
		break;
	case 'B':
		port_val=PINB;
    15a6:	e6 e3       	ldi	r30, 0x36	; 54
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	09 c0       	rjmp	.+18     	; 0x15c2 <DIO_read_port+0x76>
		break;
	case 'C':
		port_val=PINC;
    15b0:	e3 e3       	ldi	r30, 0x33	; 51
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	89 83       	std	Y+1, r24	; 0x01
    15b8:	04 c0       	rjmp	.+8      	; 0x15c2 <DIO_read_port+0x76>
		break;
	case 'D':
		port_val=PIND;
    15ba:	e0 e3       	ldi	r30, 0x30	; 48
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	return port_val;
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <DIO_enablePullup_pin>:

void DIO_enablePullup_pin(uint8 portname,uint8 pin,uint8 status)
{
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <DIO_enablePullup_pin+0x6>
    15d8:	00 d0       	rcall	.+0      	; 0x15da <DIO_enablePullup_pin+0x8>
    15da:	0f 92       	push	r0
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    15e0:	89 83       	std	Y+1, r24	; 0x01
    15e2:	6a 83       	std	Y+2, r22	; 0x02
    15e4:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	3d 83       	std	Y+5, r19	; 0x05
    15ee:	2c 83       	std	Y+4, r18	; 0x04
    15f0:	8c 81       	ldd	r24, Y+4	; 0x04
    15f2:	9d 81       	ldd	r25, Y+5	; 0x05
    15f4:	82 34       	cpi	r24, 0x42	; 66
    15f6:	91 05       	cpc	r25, r1
    15f8:	09 f4       	brne	.+2      	; 0x15fc <DIO_enablePullup_pin+0x2a>
    15fa:	44 c0       	rjmp	.+136    	; 0x1684 <DIO_enablePullup_pin+0xb2>
    15fc:	2c 81       	ldd	r18, Y+4	; 0x04
    15fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1600:	23 34       	cpi	r18, 0x43	; 67
    1602:	31 05       	cpc	r19, r1
    1604:	34 f4       	brge	.+12     	; 0x1612 <DIO_enablePullup_pin+0x40>
    1606:	8c 81       	ldd	r24, Y+4	; 0x04
    1608:	9d 81       	ldd	r25, Y+5	; 0x05
    160a:	81 34       	cpi	r24, 0x41	; 65
    160c:	91 05       	cpc	r25, r1
    160e:	71 f0       	breq	.+28     	; 0x162c <DIO_enablePullup_pin+0x5a>
    1610:	bc c0       	rjmp	.+376    	; 0x178a <DIO_enablePullup_pin+0x1b8>
    1612:	2c 81       	ldd	r18, Y+4	; 0x04
    1614:	3d 81       	ldd	r19, Y+5	; 0x05
    1616:	23 34       	cpi	r18, 0x43	; 67
    1618:	31 05       	cpc	r19, r1
    161a:	09 f4       	brne	.+2      	; 0x161e <DIO_enablePullup_pin+0x4c>
    161c:	5f c0       	rjmp	.+190    	; 0x16dc <DIO_enablePullup_pin+0x10a>
    161e:	8c 81       	ldd	r24, Y+4	; 0x04
    1620:	9d 81       	ldd	r25, Y+5	; 0x05
    1622:	84 34       	cpi	r24, 0x44	; 68
    1624:	91 05       	cpc	r25, r1
    1626:	09 f4       	brne	.+2      	; 0x162a <DIO_enablePullup_pin+0x58>
    1628:	85 c0       	rjmp	.+266    	; 0x1734 <DIO_enablePullup_pin+0x162>
    162a:	af c0       	rjmp	.+350    	; 0x178a <DIO_enablePullup_pin+0x1b8>
	{
	case 'A':
		if(status==1)
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	a1 f4       	brne	.+40     	; 0x165a <DIO_enablePullup_pin+0x88>
		{
			SET_BIT(PORTA,pin);
    1632:	ab e3       	ldi	r26, 0x3B	; 59
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	eb e3       	ldi	r30, 0x3B	; 59
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	48 2f       	mov	r20, r24
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	02 2e       	mov	r0, r18
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <DIO_enablePullup_pin+0x7e>
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	0a 94       	dec	r0
    1652:	e2 f7       	brpl	.-8      	; 0x164c <DIO_enablePullup_pin+0x7a>
    1654:	84 2b       	or	r24, r20
    1656:	8c 93       	st	X, r24
    1658:	98 c0       	rjmp	.+304    	; 0x178a <DIO_enablePullup_pin+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
    165a:	ab e3       	ldi	r26, 0x3B	; 59
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	eb e3       	ldi	r30, 0x3B	; 59
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	48 2f       	mov	r20, r24
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	02 2e       	mov	r0, r18
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <DIO_enablePullup_pin+0xa6>
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	0a 94       	dec	r0
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <DIO_enablePullup_pin+0xa2>
    167c:	80 95       	com	r24
    167e:	84 23       	and	r24, r20
    1680:	8c 93       	st	X, r24
    1682:	83 c0       	rjmp	.+262    	; 0x178a <DIO_enablePullup_pin+0x1b8>
		}
		break;
	case 'B':
		if(status==1)
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	81 30       	cpi	r24, 0x01	; 1
    1688:	a1 f4       	brne	.+40     	; 0x16b2 <DIO_enablePullup_pin+0xe0>
				{
					SET_BIT(PORTB,pin);
    168a:	a8 e3       	ldi	r26, 0x38	; 56
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e8 e3       	ldi	r30, 0x38	; 56
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	48 2f       	mov	r20, r24
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	02 2e       	mov	r0, r18
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <DIO_enablePullup_pin+0xd6>
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	0a 94       	dec	r0
    16aa:	e2 f7       	brpl	.-8      	; 0x16a4 <DIO_enablePullup_pin+0xd2>
    16ac:	84 2b       	or	r24, r20
    16ae:	8c 93       	st	X, r24
    16b0:	6c c0       	rjmp	.+216    	; 0x178a <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTB,pin);
    16b2:	a8 e3       	ldi	r26, 0x38	; 56
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e8 e3       	ldi	r30, 0x38	; 56
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	48 2f       	mov	r20, r24
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	02 2e       	mov	r0, r18
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <DIO_enablePullup_pin+0xfe>
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	0a 94       	dec	r0
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <DIO_enablePullup_pin+0xfa>
    16d4:	80 95       	com	r24
    16d6:	84 23       	and	r24, r20
    16d8:	8c 93       	st	X, r24
    16da:	57 c0       	rjmp	.+174    	; 0x178a <DIO_enablePullup_pin+0x1b8>
				}
				break;
	case 'C':
		if(status==1)
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	81 30       	cpi	r24, 0x01	; 1
    16e0:	a1 f4       	brne	.+40     	; 0x170a <DIO_enablePullup_pin+0x138>
				{
					SET_BIT(PORTC,pin);
    16e2:	a5 e3       	ldi	r26, 0x35	; 53
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e5 e3       	ldi	r30, 0x35	; 53
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	48 2f       	mov	r20, r24
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 2e       	mov	r0, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <DIO_enablePullup_pin+0x12e>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	0a 94       	dec	r0
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <DIO_enablePullup_pin+0x12a>
    1704:	84 2b       	or	r24, r20
    1706:	8c 93       	st	X, r24
    1708:	40 c0       	rjmp	.+128    	; 0x178a <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTC,pin);
    170a:	a5 e3       	ldi	r26, 0x35	; 53
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e5 e3       	ldi	r30, 0x35	; 53
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	48 2f       	mov	r20, r24
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	02 2e       	mov	r0, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <DIO_enablePullup_pin+0x156>
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	0a 94       	dec	r0
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <DIO_enablePullup_pin+0x152>
    172c:	80 95       	com	r24
    172e:	84 23       	and	r24, r20
    1730:	8c 93       	st	X, r24
    1732:	2b c0       	rjmp	.+86     	; 0x178a <DIO_enablePullup_pin+0x1b8>
				}
				break;
	case 'D':
		if(status==1)
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	a1 f4       	brne	.+40     	; 0x1762 <DIO_enablePullup_pin+0x190>
				{
					SET_BIT(PORTD,pin);
    173a:	a2 e3       	ldi	r26, 0x32	; 50
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e2 e3       	ldi	r30, 0x32	; 50
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	48 2f       	mov	r20, r24
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	02 2e       	mov	r0, r18
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <DIO_enablePullup_pin+0x186>
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	0a 94       	dec	r0
    175a:	e2 f7       	brpl	.-8      	; 0x1754 <DIO_enablePullup_pin+0x182>
    175c:	84 2b       	or	r24, r20
    175e:	8c 93       	st	X, r24
    1760:	14 c0       	rjmp	.+40     	; 0x178a <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTD,pin);
    1762:	a2 e3       	ldi	r26, 0x32	; 50
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e2 e3       	ldi	r30, 0x32	; 50
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	48 2f       	mov	r20, r24
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	02 2e       	mov	r0, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <DIO_enablePullup_pin+0x1ae>
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	0a 94       	dec	r0
    1782:	e2 f7       	brpl	.-8      	; 0x177c <DIO_enablePullup_pin+0x1aa>
    1784:	80 95       	com	r24
    1786:	84 23       	and	r24, r20
    1788:	8c 93       	st	X, r24
				}
				break;
	}
}
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	08 95       	ret

0000179a <DIO_write_low_nibble>:

void DIO_write_low_nibble(uint8 portname,uint8 value)
{
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	00 d0       	rcall	.+0      	; 0x17a0 <DIO_write_low_nibble+0x6>
    17a0:	00 d0       	rcall	.+0      	; 0x17a2 <DIO_write_low_nibble+0x8>
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	8f 70       	andi	r24, 0x0F	; 15
    17ae:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	28 2f       	mov	r18, r24
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	3c 83       	std	Y+4, r19	; 0x04
    17b8:	2b 83       	std	Y+3, r18	; 0x03
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	9c 81       	ldd	r25, Y+4	; 0x04
    17be:	82 34       	cpi	r24, 0x42	; 66
    17c0:	91 05       	cpc	r25, r1
    17c2:	31 f1       	breq	.+76     	; 0x1810 <DIO_write_low_nibble+0x76>
    17c4:	2b 81       	ldd	r18, Y+3	; 0x03
    17c6:	3c 81       	ldd	r19, Y+4	; 0x04
    17c8:	23 34       	cpi	r18, 0x43	; 67
    17ca:	31 05       	cpc	r19, r1
    17cc:	34 f4       	brge	.+12     	; 0x17da <DIO_write_low_nibble+0x40>
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	81 34       	cpi	r24, 0x41	; 65
    17d4:	91 05       	cpc	r25, r1
    17d6:	61 f0       	breq	.+24     	; 0x17f0 <DIO_write_low_nibble+0x56>
    17d8:	4a c0       	rjmp	.+148    	; 0x186e <DIO_write_low_nibble+0xd4>
    17da:	2b 81       	ldd	r18, Y+3	; 0x03
    17dc:	3c 81       	ldd	r19, Y+4	; 0x04
    17de:	23 34       	cpi	r18, 0x43	; 67
    17e0:	31 05       	cpc	r19, r1
    17e2:	31 f1       	breq	.+76     	; 0x1830 <DIO_write_low_nibble+0x96>
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	9c 81       	ldd	r25, Y+4	; 0x04
    17e8:	84 34       	cpi	r24, 0x44	; 68
    17ea:	91 05       	cpc	r25, r1
    17ec:	89 f1       	breq	.+98     	; 0x1850 <DIO_write_low_nibble+0xb6>
    17ee:	3f c0       	rjmp	.+126    	; 0x186e <DIO_write_low_nibble+0xd4>
	{
	case 'A':
		PORTA&=0xf0;
    17f0:	ab e3       	ldi	r26, 0x3B	; 59
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	eb e3       	ldi	r30, 0x3B	; 59
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	80 7f       	andi	r24, 0xF0	; 240
    17fc:	8c 93       	st	X, r24
		PORTA|=value;
    17fe:	ab e3       	ldi	r26, 0x3B	; 59
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	eb e3       	ldi	r30, 0x3B	; 59
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	90 81       	ld	r25, Z
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	89 2b       	or	r24, r25
    180c:	8c 93       	st	X, r24
    180e:	2f c0       	rjmp	.+94     	; 0x186e <DIO_write_low_nibble+0xd4>
		break;
	case 'B':
		PORTB&=0xf0;
    1810:	a8 e3       	ldi	r26, 0x38	; 56
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e8 e3       	ldi	r30, 0x38	; 56
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	80 7f       	andi	r24, 0xF0	; 240
    181c:	8c 93       	st	X, r24
		PORTA|=value;
    181e:	ab e3       	ldi	r26, 0x3B	; 59
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	eb e3       	ldi	r30, 0x3B	; 59
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	90 81       	ld	r25, Z
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	89 2b       	or	r24, r25
    182c:	8c 93       	st	X, r24
    182e:	1f c0       	rjmp	.+62     	; 0x186e <DIO_write_low_nibble+0xd4>
		break;
	case 'C':
		PORTC&=0xf0;
    1830:	a5 e3       	ldi	r26, 0x35	; 53
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e5 e3       	ldi	r30, 0x35	; 53
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	80 7f       	andi	r24, 0xF0	; 240
    183c:	8c 93       	st	X, r24
		PORTA|=value;
    183e:	ab e3       	ldi	r26, 0x3B	; 59
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	eb e3       	ldi	r30, 0x3B	; 59
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	90 81       	ld	r25, Z
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	89 2b       	or	r24, r25
    184c:	8c 93       	st	X, r24
    184e:	0f c0       	rjmp	.+30     	; 0x186e <DIO_write_low_nibble+0xd4>
		break;
	case 'D':
		PORTD&=0xf0;
    1850:	a2 e3       	ldi	r26, 0x32	; 50
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e2 e3       	ldi	r30, 0x32	; 50
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	80 7f       	andi	r24, 0xF0	; 240
    185c:	8c 93       	st	X, r24
		PORTD|=value;
    185e:	a2 e3       	ldi	r26, 0x32	; 50
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e2 e3       	ldi	r30, 0x32	; 50
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	90 81       	ld	r25, Z
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	89 2b       	or	r24, r25
    186c:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <DIO_set_low_nibble>:

void DIO_set_low_nibble(uint8 portname)
{
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	00 d0       	rcall	.+0      	; 0x1882 <DIO_set_low_nibble+0x6>
    1882:	0f 92       	push	r0
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
    1888:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	3b 83       	std	Y+3, r19	; 0x03
    1892:	2a 83       	std	Y+2, r18	; 0x02
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	9b 81       	ldd	r25, Y+3	; 0x03
    1898:	82 34       	cpi	r24, 0x42	; 66
    189a:	91 05       	cpc	r25, r1
    189c:	f1 f0       	breq	.+60     	; 0x18da <DIO_set_low_nibble+0x5e>
    189e:	2a 81       	ldd	r18, Y+2	; 0x02
    18a0:	3b 81       	ldd	r19, Y+3	; 0x03
    18a2:	23 34       	cpi	r18, 0x43	; 67
    18a4:	31 05       	cpc	r19, r1
    18a6:	34 f4       	brge	.+12     	; 0x18b4 <DIO_set_low_nibble+0x38>
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	9b 81       	ldd	r25, Y+3	; 0x03
    18ac:	81 34       	cpi	r24, 0x41	; 65
    18ae:	91 05       	cpc	r25, r1
    18b0:	61 f0       	breq	.+24     	; 0x18ca <DIO_set_low_nibble+0x4e>
    18b2:	2a c0       	rjmp	.+84     	; 0x1908 <DIO_set_low_nibble+0x8c>
    18b4:	2a 81       	ldd	r18, Y+2	; 0x02
    18b6:	3b 81       	ldd	r19, Y+3	; 0x03
    18b8:	23 34       	cpi	r18, 0x43	; 67
    18ba:	31 05       	cpc	r19, r1
    18bc:	b1 f0       	breq	.+44     	; 0x18ea <DIO_set_low_nibble+0x6e>
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	9b 81       	ldd	r25, Y+3	; 0x03
    18c2:	84 34       	cpi	r24, 0x44	; 68
    18c4:	91 05       	cpc	r25, r1
    18c6:	c9 f0       	breq	.+50     	; 0x18fa <DIO_set_low_nibble+0x7e>
    18c8:	1f c0       	rjmp	.+62     	; 0x1908 <DIO_set_low_nibble+0x8c>
	{
	case 'A':
		PORTA|=0x0f;
    18ca:	ab e3       	ldi	r26, 0x3B	; 59
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	eb e3       	ldi	r30, 0x3B	; 59
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	80 81       	ld	r24, Z
    18d4:	8f 60       	ori	r24, 0x0F	; 15
    18d6:	8c 93       	st	X, r24
    18d8:	17 c0       	rjmp	.+46     	; 0x1908 <DIO_set_low_nibble+0x8c>
		break;
	case 'B':
		PORTB|=0x0f;
    18da:	a8 e3       	ldi	r26, 0x38	; 56
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e8 e3       	ldi	r30, 0x38	; 56
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	8f 60       	ori	r24, 0x0F	; 15
    18e6:	8c 93       	st	X, r24
    18e8:	0f c0       	rjmp	.+30     	; 0x1908 <DIO_set_low_nibble+0x8c>
		break;
	case 'C':
		PORTC|=0x0f;
    18ea:	a5 e3       	ldi	r26, 0x35	; 53
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e5 e3       	ldi	r30, 0x35	; 53
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	8f 60       	ori	r24, 0x0F	; 15
    18f6:	8c 93       	st	X, r24
    18f8:	07 c0       	rjmp	.+14     	; 0x1908 <DIO_set_low_nibble+0x8c>
		break;
	case 'D':
		PORTD|=0x0f;
    18fa:	a2 e3       	ldi	r26, 0x32	; 50
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e2 e3       	ldi	r30, 0x32	; 50
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	8f 60       	ori	r24, 0x0F	; 15
    1906:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <DIO_clear_low_nibble>:

void DIO_clear_low_nibble(uint8 portname)
{
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	00 d0       	rcall	.+0      	; 0x191a <DIO_clear_low_nibble+0x6>
    191a:	0f 92       	push	r0
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	3b 83       	std	Y+3, r19	; 0x03
    192a:	2a 83       	std	Y+2, r18	; 0x02
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	9b 81       	ldd	r25, Y+3	; 0x03
    1930:	82 34       	cpi	r24, 0x42	; 66
    1932:	91 05       	cpc	r25, r1
    1934:	f1 f0       	breq	.+60     	; 0x1972 <DIO_clear_low_nibble+0x5e>
    1936:	2a 81       	ldd	r18, Y+2	; 0x02
    1938:	3b 81       	ldd	r19, Y+3	; 0x03
    193a:	23 34       	cpi	r18, 0x43	; 67
    193c:	31 05       	cpc	r19, r1
    193e:	34 f4       	brge	.+12     	; 0x194c <DIO_clear_low_nibble+0x38>
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	9b 81       	ldd	r25, Y+3	; 0x03
    1944:	81 34       	cpi	r24, 0x41	; 65
    1946:	91 05       	cpc	r25, r1
    1948:	61 f0       	breq	.+24     	; 0x1962 <DIO_clear_low_nibble+0x4e>
    194a:	2a c0       	rjmp	.+84     	; 0x19a0 <DIO_clear_low_nibble+0x8c>
    194c:	2a 81       	ldd	r18, Y+2	; 0x02
    194e:	3b 81       	ldd	r19, Y+3	; 0x03
    1950:	23 34       	cpi	r18, 0x43	; 67
    1952:	31 05       	cpc	r19, r1
    1954:	b1 f0       	breq	.+44     	; 0x1982 <DIO_clear_low_nibble+0x6e>
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	9b 81       	ldd	r25, Y+3	; 0x03
    195a:	84 34       	cpi	r24, 0x44	; 68
    195c:	91 05       	cpc	r25, r1
    195e:	c9 f0       	breq	.+50     	; 0x1992 <DIO_clear_low_nibble+0x7e>
    1960:	1f c0       	rjmp	.+62     	; 0x19a0 <DIO_clear_low_nibble+0x8c>
	{
	case 'A':
		PORTA&=~(0x0f);
    1962:	ab e3       	ldi	r26, 0x3B	; 59
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	eb e3       	ldi	r30, 0x3B	; 59
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	80 7f       	andi	r24, 0xF0	; 240
    196e:	8c 93       	st	X, r24
    1970:	17 c0       	rjmp	.+46     	; 0x19a0 <DIO_clear_low_nibble+0x8c>
		break;
	case 'B':
		PORTB&=~(0x0f);
    1972:	a8 e3       	ldi	r26, 0x38	; 56
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e8 e3       	ldi	r30, 0x38	; 56
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	80 7f       	andi	r24, 0xF0	; 240
    197e:	8c 93       	st	X, r24
    1980:	0f c0       	rjmp	.+30     	; 0x19a0 <DIO_clear_low_nibble+0x8c>
		break;
	case 'C':
		PORTC&=~(0x0f);
    1982:	a5 e3       	ldi	r26, 0x35	; 53
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e5 e3       	ldi	r30, 0x35	; 53
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	80 7f       	andi	r24, 0xF0	; 240
    198e:	8c 93       	st	X, r24
    1990:	07 c0       	rjmp	.+14     	; 0x19a0 <DIO_clear_low_nibble+0x8c>
		break;
	case 'D':
		PORTD&=~(0x0f);
    1992:	a2 e3       	ldi	r26, 0x32	; 50
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	e2 e3       	ldi	r30, 0x32	; 50
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	80 7f       	andi	r24, 0xF0	; 240
    199e:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	cf 91       	pop	r28
    19a8:	df 91       	pop	r29
    19aa:	08 95       	ret

000019ac <DIO_set_high_nibble>:

void DIO_set_high_nibble(uint8 portname)
{
    19ac:	df 93       	push	r29
    19ae:	cf 93       	push	r28
    19b0:	00 d0       	rcall	.+0      	; 0x19b2 <DIO_set_high_nibble+0x6>
    19b2:	0f 92       	push	r0
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	3b 83       	std	Y+3, r19	; 0x03
    19c2:	2a 83       	std	Y+2, r18	; 0x02
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	9b 81       	ldd	r25, Y+3	; 0x03
    19c8:	82 34       	cpi	r24, 0x42	; 66
    19ca:	91 05       	cpc	r25, r1
    19cc:	f1 f0       	breq	.+60     	; 0x1a0a <DIO_set_high_nibble+0x5e>
    19ce:	2a 81       	ldd	r18, Y+2	; 0x02
    19d0:	3b 81       	ldd	r19, Y+3	; 0x03
    19d2:	23 34       	cpi	r18, 0x43	; 67
    19d4:	31 05       	cpc	r19, r1
    19d6:	34 f4       	brge	.+12     	; 0x19e4 <DIO_set_high_nibble+0x38>
    19d8:	8a 81       	ldd	r24, Y+2	; 0x02
    19da:	9b 81       	ldd	r25, Y+3	; 0x03
    19dc:	81 34       	cpi	r24, 0x41	; 65
    19de:	91 05       	cpc	r25, r1
    19e0:	61 f0       	breq	.+24     	; 0x19fa <DIO_set_high_nibble+0x4e>
    19e2:	2a c0       	rjmp	.+84     	; 0x1a38 <DIO_set_high_nibble+0x8c>
    19e4:	2a 81       	ldd	r18, Y+2	; 0x02
    19e6:	3b 81       	ldd	r19, Y+3	; 0x03
    19e8:	23 34       	cpi	r18, 0x43	; 67
    19ea:	31 05       	cpc	r19, r1
    19ec:	b1 f0       	breq	.+44     	; 0x1a1a <DIO_set_high_nibble+0x6e>
    19ee:	8a 81       	ldd	r24, Y+2	; 0x02
    19f0:	9b 81       	ldd	r25, Y+3	; 0x03
    19f2:	84 34       	cpi	r24, 0x44	; 68
    19f4:	91 05       	cpc	r25, r1
    19f6:	c9 f0       	breq	.+50     	; 0x1a2a <DIO_set_high_nibble+0x7e>
    19f8:	1f c0       	rjmp	.+62     	; 0x1a38 <DIO_set_high_nibble+0x8c>
	{
	case 'A':
		PORTA|=0xf0;
    19fa:	ab e3       	ldi	r26, 0x3B	; 59
    19fc:	b0 e0       	ldi	r27, 0x00	; 0
    19fe:	eb e3       	ldi	r30, 0x3B	; 59
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	80 6f       	ori	r24, 0xF0	; 240
    1a06:	8c 93       	st	X, r24
    1a08:	17 c0       	rjmp	.+46     	; 0x1a38 <DIO_set_high_nibble+0x8c>
		break;
	case 'B':
		PORTB|=0xf0;
    1a0a:	a8 e3       	ldi	r26, 0x38	; 56
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e8 e3       	ldi	r30, 0x38	; 56
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	80 6f       	ori	r24, 0xF0	; 240
    1a16:	8c 93       	st	X, r24
    1a18:	0f c0       	rjmp	.+30     	; 0x1a38 <DIO_set_high_nibble+0x8c>
		break;
	case 'C':
		PORTC|=0xf0;
    1a1a:	a5 e3       	ldi	r26, 0x35	; 53
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e5 e3       	ldi	r30, 0x35	; 53
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	80 6f       	ori	r24, 0xF0	; 240
    1a26:	8c 93       	st	X, r24
    1a28:	07 c0       	rjmp	.+14     	; 0x1a38 <DIO_set_high_nibble+0x8c>
		break;
	case 'D':
		PORTD|=0xf0;
    1a2a:	a2 e3       	ldi	r26, 0x32	; 50
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e2 e3       	ldi	r30, 0x32	; 50
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	80 6f       	ori	r24, 0xF0	; 240
    1a36:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	08 95       	ret

00001a44 <DIO_clear_high_nibble>:

void DIO_clear_high_nibble(uint8 portname)
{
    1a44:	df 93       	push	r29
    1a46:	cf 93       	push	r28
    1a48:	00 d0       	rcall	.+0      	; 0x1a4a <DIO_clear_high_nibble+0x6>
    1a4a:	0f 92       	push	r0
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	3b 83       	std	Y+3, r19	; 0x03
    1a5a:	2a 83       	std	Y+2, r18	; 0x02
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a60:	82 34       	cpi	r24, 0x42	; 66
    1a62:	91 05       	cpc	r25, r1
    1a64:	f1 f0       	breq	.+60     	; 0x1aa2 <DIO_clear_high_nibble+0x5e>
    1a66:	2a 81       	ldd	r18, Y+2	; 0x02
    1a68:	3b 81       	ldd	r19, Y+3	; 0x03
    1a6a:	23 34       	cpi	r18, 0x43	; 67
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	34 f4       	brge	.+12     	; 0x1a7c <DIO_clear_high_nibble+0x38>
    1a70:	8a 81       	ldd	r24, Y+2	; 0x02
    1a72:	9b 81       	ldd	r25, Y+3	; 0x03
    1a74:	81 34       	cpi	r24, 0x41	; 65
    1a76:	91 05       	cpc	r25, r1
    1a78:	61 f0       	breq	.+24     	; 0x1a92 <DIO_clear_high_nibble+0x4e>
    1a7a:	2a c0       	rjmp	.+84     	; 0x1ad0 <DIO_clear_high_nibble+0x8c>
    1a7c:	2a 81       	ldd	r18, Y+2	; 0x02
    1a7e:	3b 81       	ldd	r19, Y+3	; 0x03
    1a80:	23 34       	cpi	r18, 0x43	; 67
    1a82:	31 05       	cpc	r19, r1
    1a84:	b1 f0       	breq	.+44     	; 0x1ab2 <DIO_clear_high_nibble+0x6e>
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8a:	84 34       	cpi	r24, 0x44	; 68
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	c9 f0       	breq	.+50     	; 0x1ac2 <DIO_clear_high_nibble+0x7e>
    1a90:	1f c0       	rjmp	.+62     	; 0x1ad0 <DIO_clear_high_nibble+0x8c>
	{
	case 'A':
		PORTA&=~(0xf0);
    1a92:	ab e3       	ldi	r26, 0x3B	; 59
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	eb e3       	ldi	r30, 0x3B	; 59
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	8f 70       	andi	r24, 0x0F	; 15
    1a9e:	8c 93       	st	X, r24
    1aa0:	17 c0       	rjmp	.+46     	; 0x1ad0 <DIO_clear_high_nibble+0x8c>
		break;
	case 'B':
		PORTB&=~(0xf0);
    1aa2:	a8 e3       	ldi	r26, 0x38	; 56
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	e8 e3       	ldi	r30, 0x38	; 56
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	8f 70       	andi	r24, 0x0F	; 15
    1aae:	8c 93       	st	X, r24
    1ab0:	0f c0       	rjmp	.+30     	; 0x1ad0 <DIO_clear_high_nibble+0x8c>
		break;
	case 'C':
		PORTC&=~(0xf0);
    1ab2:	a5 e3       	ldi	r26, 0x35	; 53
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e5 e3       	ldi	r30, 0x35	; 53
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	8f 70       	andi	r24, 0x0F	; 15
    1abe:	8c 93       	st	X, r24
    1ac0:	07 c0       	rjmp	.+14     	; 0x1ad0 <DIO_clear_high_nibble+0x8c>
		break;
	case 'D':
		PORTD&=~(0xf0);
    1ac2:	a2 e3       	ldi	r26, 0x32	; 50
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e2 e3       	ldi	r30, 0x32	; 50
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	8f 70       	andi	r24, 0x0F	; 15
    1ace:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	08 95       	ret

00001adc <DIO_write_high_nibble>:

void DIO_write_high_nibble(uint8 portname,uint8 value)
{
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <DIO_write_high_nibble+0x6>
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <DIO_write_high_nibble+0x8>
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	89 83       	std	Y+1, r24	; 0x01
    1aea:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	82 95       	swap	r24
    1af0:	80 7f       	andi	r24, 0xF0	; 240
    1af2:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	3c 83       	std	Y+4, r19	; 0x04
    1afc:	2b 83       	std	Y+3, r18	; 0x03
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	9c 81       	ldd	r25, Y+4	; 0x04
    1b02:	82 34       	cpi	r24, 0x42	; 66
    1b04:	91 05       	cpc	r25, r1
    1b06:	31 f1       	breq	.+76     	; 0x1b54 <DIO_write_high_nibble+0x78>
    1b08:	2b 81       	ldd	r18, Y+3	; 0x03
    1b0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b0c:	23 34       	cpi	r18, 0x43	; 67
    1b0e:	31 05       	cpc	r19, r1
    1b10:	34 f4       	brge	.+12     	; 0x1b1e <DIO_write_high_nibble+0x42>
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	9c 81       	ldd	r25, Y+4	; 0x04
    1b16:	81 34       	cpi	r24, 0x41	; 65
    1b18:	91 05       	cpc	r25, r1
    1b1a:	61 f0       	breq	.+24     	; 0x1b34 <DIO_write_high_nibble+0x58>
    1b1c:	4a c0       	rjmp	.+148    	; 0x1bb2 <DIO_write_high_nibble+0xd6>
    1b1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b20:	3c 81       	ldd	r19, Y+4	; 0x04
    1b22:	23 34       	cpi	r18, 0x43	; 67
    1b24:	31 05       	cpc	r19, r1
    1b26:	31 f1       	breq	.+76     	; 0x1b74 <DIO_write_high_nibble+0x98>
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2c:	84 34       	cpi	r24, 0x44	; 68
    1b2e:	91 05       	cpc	r25, r1
    1b30:	89 f1       	breq	.+98     	; 0x1b94 <DIO_write_high_nibble+0xb8>
    1b32:	3f c0       	rjmp	.+126    	; 0x1bb2 <DIO_write_high_nibble+0xd6>
	{
	case 'A':
		PORTA&=0x0f;
    1b34:	ab e3       	ldi	r26, 0x3B	; 59
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	eb e3       	ldi	r30, 0x3B	; 59
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	8f 70       	andi	r24, 0x0F	; 15
    1b40:	8c 93       	st	X, r24
		PORTA|=value;
    1b42:	ab e3       	ldi	r26, 0x3B	; 59
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	eb e3       	ldi	r30, 0x3B	; 59
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	90 81       	ld	r25, Z
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	89 2b       	or	r24, r25
    1b50:	8c 93       	st	X, r24
    1b52:	2f c0       	rjmp	.+94     	; 0x1bb2 <DIO_write_high_nibble+0xd6>
		break;
	case 'B':
		PORTB&=0x0f;
    1b54:	a8 e3       	ldi	r26, 0x38	; 56
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e8 e3       	ldi	r30, 0x38	; 56
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	8f 70       	andi	r24, 0x0F	; 15
    1b60:	8c 93       	st	X, r24
		PORTA|=value;
    1b62:	ab e3       	ldi	r26, 0x3B	; 59
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	eb e3       	ldi	r30, 0x3B	; 59
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	90 81       	ld	r25, Z
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	89 2b       	or	r24, r25
    1b70:	8c 93       	st	X, r24
    1b72:	1f c0       	rjmp	.+62     	; 0x1bb2 <DIO_write_high_nibble+0xd6>
		break;
	case 'C':
		PORTC&=0x0f;
    1b74:	a5 e3       	ldi	r26, 0x35	; 53
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e5 e3       	ldi	r30, 0x35	; 53
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	8f 70       	andi	r24, 0x0F	; 15
    1b80:	8c 93       	st	X, r24
		PORTA|=value;
    1b82:	ab e3       	ldi	r26, 0x3B	; 59
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	eb e3       	ldi	r30, 0x3B	; 59
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	90 81       	ld	r25, Z
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	89 2b       	or	r24, r25
    1b90:	8c 93       	st	X, r24
    1b92:	0f c0       	rjmp	.+30     	; 0x1bb2 <DIO_write_high_nibble+0xd6>
		break;
	case 'D':
		PORTD&=0x0f;
    1b94:	a2 e3       	ldi	r26, 0x32	; 50
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e2 e3       	ldi	r30, 0x32	; 50
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	8f 70       	andi	r24, 0x0F	; 15
    1ba0:	8c 93       	st	X, r24
		PORTD|=value;
    1ba2:	a2 e3       	ldi	r26, 0x32	; 50
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e2 e3       	ldi	r30, 0x32	; 50
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	90 81       	ld	r25, Z
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	89 2b       	or	r24, r25
    1bb0:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <DIO_write_high_nibbleDir>:

void DIO_write_high_nibbleDir(uint8 portname,uint8 direction)
{
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	00 d0       	rcall	.+0      	; 0x1bc6 <DIO_write_high_nibbleDir+0x6>
    1bc6:	00 d0       	rcall	.+0      	; 0x1bc8 <DIO_write_high_nibbleDir+0x8>
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    1bcc:	89 83       	std	Y+1, r24	; 0x01
    1bce:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	28 2f       	mov	r18, r24
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	3c 83       	std	Y+4, r19	; 0x04
    1bd8:	2b 83       	std	Y+3, r18	; 0x03
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bde:	82 34       	cpi	r24, 0x42	; 66
    1be0:	91 05       	cpc	r25, r1
    1be2:	49 f1       	breq	.+82     	; 0x1c36 <DIO_write_high_nibbleDir+0x76>
    1be4:	2b 81       	ldd	r18, Y+3	; 0x03
    1be6:	3c 81       	ldd	r19, Y+4	; 0x04
    1be8:	23 34       	cpi	r18, 0x43	; 67
    1bea:	31 05       	cpc	r19, r1
    1bec:	34 f4       	brge	.+12     	; 0x1bfa <DIO_write_high_nibbleDir+0x3a>
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf2:	81 34       	cpi	r24, 0x41	; 65
    1bf4:	91 05       	cpc	r25, r1
    1bf6:	61 f0       	breq	.+24     	; 0x1c10 <DIO_write_high_nibbleDir+0x50>
    1bf8:	56 c0       	rjmp	.+172    	; 0x1ca6 <DIO_write_high_nibbleDir+0xe6>
    1bfa:	2b 81       	ldd	r18, Y+3	; 0x03
    1bfc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bfe:	23 34       	cpi	r18, 0x43	; 67
    1c00:	31 05       	cpc	r19, r1
    1c02:	61 f1       	breq	.+88     	; 0x1c5c <DIO_write_high_nibbleDir+0x9c>
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	9c 81       	ldd	r25, Y+4	; 0x04
    1c08:	84 34       	cpi	r24, 0x44	; 68
    1c0a:	91 05       	cpc	r25, r1
    1c0c:	d1 f1       	breq	.+116    	; 0x1c82 <DIO_write_high_nibbleDir+0xc2>
    1c0e:	4b c0       	rjmp	.+150    	; 0x1ca6 <DIO_write_high_nibbleDir+0xe6>
	{
	case 'A':
		if(direction==1)
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	81 30       	cpi	r24, 0x01	; 1
    1c14:	41 f4       	brne	.+16     	; 0x1c26 <DIO_write_high_nibbleDir+0x66>
			DDRA|=0xf0;
    1c16:	aa e3       	ldi	r26, 0x3A	; 58
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	ea e3       	ldi	r30, 0x3A	; 58
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	80 6f       	ori	r24, 0xF0	; 240
    1c22:	8c 93       	st	X, r24
    1c24:	40 c0       	rjmp	.+128    	; 0x1ca6 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRA&=~(0xf0);
    1c26:	aa e3       	ldi	r26, 0x3A	; 58
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	ea e3       	ldi	r30, 0x3A	; 58
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	8f 70       	andi	r24, 0x0F	; 15
    1c32:	8c 93       	st	X, r24
    1c34:	38 c0       	rjmp	.+112    	; 0x1ca6 <DIO_write_high_nibbleDir+0xe6>
		break;
	case 'B':
		if(direction==1)
    1c36:	8a 81       	ldd	r24, Y+2	; 0x02
    1c38:	81 30       	cpi	r24, 0x01	; 1
    1c3a:	41 f4       	brne	.+16     	; 0x1c4c <DIO_write_high_nibbleDir+0x8c>
			DDRB|=0xf0;
    1c3c:	a7 e3       	ldi	r26, 0x37	; 55
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e7 e3       	ldi	r30, 0x37	; 55
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	80 6f       	ori	r24, 0xF0	; 240
    1c48:	8c 93       	st	X, r24
    1c4a:	2d c0       	rjmp	.+90     	; 0x1ca6 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRB&=~(0xf0);
    1c4c:	a7 e3       	ldi	r26, 0x37	; 55
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e7 e3       	ldi	r30, 0x37	; 55
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	8f 70       	andi	r24, 0x0F	; 15
    1c58:	8c 93       	st	X, r24
    1c5a:	25 c0       	rjmp	.+74     	; 0x1ca6 <DIO_write_high_nibbleDir+0xe6>
		break;
	case 'C':
		if(direction==1)
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	81 30       	cpi	r24, 0x01	; 1
    1c60:	41 f4       	brne	.+16     	; 0x1c72 <DIO_write_high_nibbleDir+0xb2>
			DDRC|=0xf0;
    1c62:	a4 e3       	ldi	r26, 0x34	; 52
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e4 e3       	ldi	r30, 0x34	; 52
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	80 6f       	ori	r24, 0xF0	; 240
    1c6e:	8c 93       	st	X, r24
    1c70:	1a c0       	rjmp	.+52     	; 0x1ca6 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRC&=~(0xf0);
    1c72:	a4 e3       	ldi	r26, 0x34	; 52
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e4 e3       	ldi	r30, 0x34	; 52
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	8f 70       	andi	r24, 0x0F	; 15
    1c7e:	8c 93       	st	X, r24
    1c80:	12 c0       	rjmp	.+36     	; 0x1ca6 <DIO_write_high_nibbleDir+0xe6>
		break;
	case 'D':
		if(direction==1)
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	41 f4       	brne	.+16     	; 0x1c98 <DIO_write_high_nibbleDir+0xd8>
			DDRD|=0xf0;
    1c88:	a1 e3       	ldi	r26, 0x31	; 49
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e1 e3       	ldi	r30, 0x31	; 49
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	80 6f       	ori	r24, 0xF0	; 240
    1c94:	8c 93       	st	X, r24
    1c96:	07 c0       	rjmp	.+14     	; 0x1ca6 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRD&=~(0xf0);
    1c98:	a1 e3       	ldi	r26, 0x31	; 49
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e1 e3       	ldi	r30, 0x31	; 49
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	8f 70       	andi	r24, 0x0F	; 15
    1ca4:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	08 95       	ret

00001cb4 <DIO_write_low_nibbleDir>:

void DIO_write_low_nibbleDir(uint8 portname,uint8 direction)
{
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	00 d0       	rcall	.+0      	; 0x1cba <DIO_write_low_nibbleDir+0x6>
    1cba:	00 d0       	rcall	.+0      	; 0x1cbc <DIO_write_low_nibbleDir+0x8>
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	89 83       	std	Y+1, r24	; 0x01
    1cc2:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	3c 83       	std	Y+4, r19	; 0x04
    1ccc:	2b 83       	std	Y+3, r18	; 0x03
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd2:	82 34       	cpi	r24, 0x42	; 66
    1cd4:	91 05       	cpc	r25, r1
    1cd6:	49 f1       	breq	.+82     	; 0x1d2a <DIO_write_low_nibbleDir+0x76>
    1cd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cda:	3c 81       	ldd	r19, Y+4	; 0x04
    1cdc:	23 34       	cpi	r18, 0x43	; 67
    1cde:	31 05       	cpc	r19, r1
    1ce0:	34 f4       	brge	.+12     	; 0x1cee <DIO_write_low_nibbleDir+0x3a>
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce6:	81 34       	cpi	r24, 0x41	; 65
    1ce8:	91 05       	cpc	r25, r1
    1cea:	61 f0       	breq	.+24     	; 0x1d04 <DIO_write_low_nibbleDir+0x50>
    1cec:	56 c0       	rjmp	.+172    	; 0x1d9a <DIO_write_low_nibbleDir+0xe6>
    1cee:	2b 81       	ldd	r18, Y+3	; 0x03
    1cf0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf2:	23 34       	cpi	r18, 0x43	; 67
    1cf4:	31 05       	cpc	r19, r1
    1cf6:	61 f1       	breq	.+88     	; 0x1d50 <DIO_write_low_nibbleDir+0x9c>
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfc:	84 34       	cpi	r24, 0x44	; 68
    1cfe:	91 05       	cpc	r25, r1
    1d00:	d1 f1       	breq	.+116    	; 0x1d76 <DIO_write_low_nibbleDir+0xc2>
    1d02:	4b c0       	rjmp	.+150    	; 0x1d9a <DIO_write_low_nibbleDir+0xe6>
	{
	case 'A':
		if(direction==1)
    1d04:	8a 81       	ldd	r24, Y+2	; 0x02
    1d06:	81 30       	cpi	r24, 0x01	; 1
    1d08:	41 f4       	brne	.+16     	; 0x1d1a <DIO_write_low_nibbleDir+0x66>
			DDRA|=0x0f;
    1d0a:	aa e3       	ldi	r26, 0x3A	; 58
    1d0c:	b0 e0       	ldi	r27, 0x00	; 0
    1d0e:	ea e3       	ldi	r30, 0x3A	; 58
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	8f 60       	ori	r24, 0x0F	; 15
    1d16:	8c 93       	st	X, r24
    1d18:	40 c0       	rjmp	.+128    	; 0x1d9a <DIO_write_low_nibbleDir+0xe6>
		else
			DDRA&=~(0x0f);
    1d1a:	aa e3       	ldi	r26, 0x3A	; 58
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	ea e3       	ldi	r30, 0x3A	; 58
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	80 7f       	andi	r24, 0xF0	; 240
    1d26:	8c 93       	st	X, r24
    1d28:	38 c0       	rjmp	.+112    	; 0x1d9a <DIO_write_low_nibbleDir+0xe6>
		break;
	case 'B':
		if(direction==1)
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	41 f4       	brne	.+16     	; 0x1d40 <DIO_write_low_nibbleDir+0x8c>
			DDRB|=0x0f;
    1d30:	a7 e3       	ldi	r26, 0x37	; 55
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e7 e3       	ldi	r30, 0x37	; 55
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	8f 60       	ori	r24, 0x0F	; 15
    1d3c:	8c 93       	st	X, r24
    1d3e:	2d c0       	rjmp	.+90     	; 0x1d9a <DIO_write_low_nibbleDir+0xe6>
		else
			DDRB&=~(0x0f);
    1d40:	a7 e3       	ldi	r26, 0x37	; 55
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e7 e3       	ldi	r30, 0x37	; 55
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	80 7f       	andi	r24, 0xF0	; 240
    1d4c:	8c 93       	st	X, r24
    1d4e:	25 c0       	rjmp	.+74     	; 0x1d9a <DIO_write_low_nibbleDir+0xe6>
		break;
	case 'C':
		if(direction==1)
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	81 30       	cpi	r24, 0x01	; 1
    1d54:	41 f4       	brne	.+16     	; 0x1d66 <DIO_write_low_nibbleDir+0xb2>
			DDRC|=0x0f;
    1d56:	a4 e3       	ldi	r26, 0x34	; 52
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e4 e3       	ldi	r30, 0x34	; 52
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	8f 60       	ori	r24, 0x0F	; 15
    1d62:	8c 93       	st	X, r24
    1d64:	1a c0       	rjmp	.+52     	; 0x1d9a <DIO_write_low_nibbleDir+0xe6>
		else
			DDRC&=~(0x0f);
    1d66:	a4 e3       	ldi	r26, 0x34	; 52
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	e4 e3       	ldi	r30, 0x34	; 52
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	80 7f       	andi	r24, 0xF0	; 240
    1d72:	8c 93       	st	X, r24
    1d74:	12 c0       	rjmp	.+36     	; 0x1d9a <DIO_write_low_nibbleDir+0xe6>
		break;
	case 'D':
		if(direction==1)
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	81 30       	cpi	r24, 0x01	; 1
    1d7a:	41 f4       	brne	.+16     	; 0x1d8c <DIO_write_low_nibbleDir+0xd8>
			DDRD|=0x0f;
    1d7c:	a1 e3       	ldi	r26, 0x31	; 49
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e1 e3       	ldi	r30, 0x31	; 49
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	8f 60       	ori	r24, 0x0F	; 15
    1d88:	8c 93       	st	X, r24
    1d8a:	07 c0       	rjmp	.+14     	; 0x1d9a <DIO_write_low_nibbleDir+0xe6>
		else
			DDRD&=~(0x0f);
    1d8c:	a1 e3       	ldi	r26, 0x31	; 49
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e1 e3       	ldi	r30, 0x31	; 49
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	80 7f       	andi	r24, 0xF0	; 240
    1d98:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	cf 91       	pop	r28
    1da4:	df 91       	pop	r29
    1da6:	08 95       	ret

00001da8 <KeyPad_init>:
#endif
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void KeyPad_init(void)
{
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
	DIO_setPINDir( KEYPAD_PORT_OUT,0,in);
    1db0:	82 e4       	ldi	r24, 0x42	; 66
    1db2:	60 e0       	ldi	r22, 0x00	; 0
    1db4:	40 e0       	ldi	r20, 0x00	; 0
    1db6:	0e 94 46 07 	call	0xe8c	; 0xe8c <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_OUT,1,in);
    1dba:	82 e4       	ldi	r24, 0x42	; 66
    1dbc:	61 e0       	ldi	r22, 0x01	; 1
    1dbe:	40 e0       	ldi	r20, 0x00	; 0
    1dc0:	0e 94 46 07 	call	0xe8c	; 0xe8c <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_OUT,2,in);
    1dc4:	82 e4       	ldi	r24, 0x42	; 66
    1dc6:	62 e0       	ldi	r22, 0x02	; 2
    1dc8:	40 e0       	ldi	r20, 0x00	; 0
    1dca:	0e 94 46 07 	call	0xe8c	; 0xe8c <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_OUT,3,in);
    1dce:	82 e4       	ldi	r24, 0x42	; 66
    1dd0:	63 e0       	ldi	r22, 0x03	; 3
    1dd2:	40 e0       	ldi	r20, 0x00	; 0
    1dd4:	0e 94 46 07 	call	0xe8c	; 0xe8c <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,0,in);
    1dd8:	81 e4       	ldi	r24, 0x41	; 65
    1dda:	60 e0       	ldi	r22, 0x00	; 0
    1ddc:	40 e0       	ldi	r20, 0x00	; 0
    1dde:	0e 94 46 07 	call	0xe8c	; 0xe8c <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,1,in);
    1de2:	81 e4       	ldi	r24, 0x41	; 65
    1de4:	61 e0       	ldi	r22, 0x01	; 1
    1de6:	40 e0       	ldi	r20, 0x00	; 0
    1de8:	0e 94 46 07 	call	0xe8c	; 0xe8c <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,2,in);
    1dec:	81 e4       	ldi	r24, 0x41	; 65
    1dee:	62 e0       	ldi	r22, 0x02	; 2
    1df0:	40 e0       	ldi	r20, 0x00	; 0
    1df2:	0e 94 46 07 	call	0xe8c	; 0xe8c <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,3,in);
    1df6:	81 e4       	ldi	r24, 0x41	; 65
    1df8:	63 e0       	ldi	r22, 0x03	; 3
    1dfa:	40 e0       	ldi	r20, 0x00	; 0
    1dfc:	0e 94 46 07 	call	0xe8c	; 0xe8c <DIO_setPINDir>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,0,1);
    1e00:	81 e4       	ldi	r24, 0x41	; 65
    1e02:	60 e0       	ldi	r22, 0x00	; 0
    1e04:	41 e0       	ldi	r20, 0x01	; 1
    1e06:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_enablePullup_pin>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,1,1);
    1e0a:	81 e4       	ldi	r24, 0x41	; 65
    1e0c:	61 e0       	ldi	r22, 0x01	; 1
    1e0e:	41 e0       	ldi	r20, 0x01	; 1
    1e10:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_enablePullup_pin>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,2,1);
    1e14:	81 e4       	ldi	r24, 0x41	; 65
    1e16:	62 e0       	ldi	r22, 0x02	; 2
    1e18:	41 e0       	ldi	r20, 0x01	; 1
    1e1a:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_enablePullup_pin>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,3,1);
    1e1e:	81 e4       	ldi	r24, 0x41	; 65
    1e20:	63 e0       	ldi	r22, 0x03	; 3
    1e22:	41 e0       	ldi	r20, 0x01	; 1
    1e24:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <DIO_enablePullup_pin>
}
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	08 95       	ret

00001e2e <KeyPad_getPressedKey>:

uint8 KeyPad_getPressedKey(void)
{
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <KeyPad_getPressedKey+0x6>
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		KeyPad_init();
    1e38:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <KeyPad_init>
		for(row=0;row<N_row;row++)
    1e3c:	19 82       	std	Y+1, r1	; 0x01
    1e3e:	38 c0       	rjmp	.+112    	; 0x1eb0 <KeyPad_getPressedKey+0x82>
		{
			if(row>0)
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	88 23       	and	r24, r24
    1e44:	41 f0       	breq	.+16     	; 0x1e56 <KeyPad_getPressedKey+0x28>
			{
				DIO_setPINDir( KEYPAD_PORT_OUT,row-1,in);
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	98 2f       	mov	r25, r24
    1e4a:	91 50       	subi	r25, 0x01	; 1
    1e4c:	82 e4       	ldi	r24, 0x42	; 66
    1e4e:	69 2f       	mov	r22, r25
    1e50:	40 e0       	ldi	r20, 0x00	; 0
    1e52:	0e 94 46 07 	call	0xe8c	; 0xe8c <DIO_setPINDir>
			}
			DIO_setPINDir( KEYPAD_PORT_OUT,row,out);
    1e56:	82 e4       	ldi	r24, 0x42	; 66
    1e58:	69 81       	ldd	r22, Y+1	; 0x01
    1e5a:	41 e0       	ldi	r20, 0x01	; 1
    1e5c:	0e 94 46 07 	call	0xe8c	; 0xe8c <DIO_setPINDir>
			DIO_write_PIN(KEYPAD_PORT_OUT,row,0);
    1e60:	82 e4       	ldi	r24, 0x42	; 66
    1e62:	69 81       	ldd	r22, Y+1	; 0x01
    1e64:	40 e0       	ldi	r20, 0x00	; 0
    1e66:	0e 94 2a 08 	call	0x1054	; 0x1054 <DIO_write_PIN>
			for(col=0;col<N_col;col++)
    1e6a:	1a 82       	std	Y+2, r1	; 0x02
    1e6c:	1b c0       	rjmp	.+54     	; 0x1ea4 <KeyPad_getPressedKey+0x76>
			{
				if(DIO_read_PIN(KEYPAD_PORT_IN,col)==0)
    1e6e:	81 e4       	ldi	r24, 0x41	; 65
    1e70:	6a 81       	ldd	r22, Y+2	; 0x02
    1e72:	0e 94 0e 09 	call	0x121c	; 0x121c <DIO_read_PIN>
    1e76:	88 23       	and	r24, r24
    1e78:	91 f4       	brne	.+36     	; 0x1e9e <KeyPad_getPressedKey+0x70>
				{
					#if (N_col==3)
					return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col==4)
					return KeyPad_4x4_adjustKeyNumber((col*N_col)+row+1);
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	88 2f       	mov	r24, r24
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	88 0f       	add	r24, r24
    1e82:	99 1f       	adc	r25, r25
    1e84:	88 0f       	add	r24, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	98 2f       	mov	r25, r24
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	89 0f       	add	r24, r25
    1e8e:	8f 5f       	subi	r24, 0xFF	; 255
    1e90:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <KeyPad_4x4_adjustKeyNumber>
				}
			}
		}
	}

}
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	cf 91       	pop	r28
    1e9a:	df 91       	pop	r29
    1e9c:	08 95       	ret
			{
				DIO_setPINDir( KEYPAD_PORT_OUT,row-1,in);
			}
			DIO_setPINDir( KEYPAD_PORT_OUT,row,out);
			DIO_write_PIN(KEYPAD_PORT_OUT,row,0);
			for(col=0;col<N_col;col++)
    1e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea0:	8f 5f       	subi	r24, 0xFF	; 255
    1ea2:	8a 83       	std	Y+2, r24	; 0x02
    1ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea6:	84 30       	cpi	r24, 0x04	; 4
    1ea8:	10 f3       	brcs	.-60     	; 0x1e6e <KeyPad_getPressedKey+0x40>
{
	uint8 col,row;
	while(1)
	{
		KeyPad_init();
		for(row=0;row<N_row;row++)
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	8f 5f       	subi	r24, 0xFF	; 255
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	84 30       	cpi	r24, 0x04	; 4
    1eb4:	28 f2       	brcs	.-118    	; 0x1e40 <KeyPad_getPressedKey+0x12>
    1eb6:	c0 cf       	rjmp	.-128    	; 0x1e38 <KeyPad_getPressedKey+0xa>

00001eb8 <KeyPad_4x3_adjustKeyNumber>:

}


uint8 KeyPad_4x3_adjustKeyNumber(uint8 button_number)
{
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <KeyPad_4x3_adjustKeyNumber+0x6>
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <KeyPad_4x3_adjustKeyNumber+0x8>
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
    1ec4:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	28 2f       	mov	r18, r24
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	3c 83       	std	Y+4, r19	; 0x04
    1ece:	2b 83       	std	Y+3, r18	; 0x03
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed4:	85 30       	cpi	r24, 0x05	; 5
    1ed6:	91 05       	cpc	r25, r1
    1ed8:	09 f4       	brne	.+2      	; 0x1edc <KeyPad_4x3_adjustKeyNumber+0x24>
    1eda:	41 c0       	rjmp	.+130    	; 0x1f5e <KeyPad_4x3_adjustKeyNumber+0xa6>
    1edc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ede:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee0:	26 30       	cpi	r18, 0x06	; 6
    1ee2:	31 05       	cpc	r19, r1
    1ee4:	dc f4       	brge	.+54     	; 0x1f1c <KeyPad_4x3_adjustKeyNumber+0x64>
    1ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eea:	82 30       	cpi	r24, 0x02	; 2
    1eec:	91 05       	cpc	r25, r1
    1eee:	71 f1       	breq	.+92     	; 0x1f4c <KeyPad_4x3_adjustKeyNumber+0x94>
    1ef0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef4:	23 30       	cpi	r18, 0x03	; 3
    1ef6:	31 05       	cpc	r19, r1
    1ef8:	34 f4       	brge	.+12     	; 0x1f06 <KeyPad_4x3_adjustKeyNumber+0x4e>
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	9c 81       	ldd	r25, Y+4	; 0x04
    1efe:	81 30       	cpi	r24, 0x01	; 1
    1f00:	91 05       	cpc	r25, r1
    1f02:	09 f1       	breq	.+66     	; 0x1f46 <KeyPad_4x3_adjustKeyNumber+0x8e>
    1f04:	3b c0       	rjmp	.+118    	; 0x1f7c <KeyPad_4x3_adjustKeyNumber+0xc4>
    1f06:	2b 81       	ldd	r18, Y+3	; 0x03
    1f08:	3c 81       	ldd	r19, Y+4	; 0x04
    1f0a:	23 30       	cpi	r18, 0x03	; 3
    1f0c:	31 05       	cpc	r19, r1
    1f0e:	09 f1       	breq	.+66     	; 0x1f52 <KeyPad_4x3_adjustKeyNumber+0x9a>
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	9c 81       	ldd	r25, Y+4	; 0x04
    1f14:	84 30       	cpi	r24, 0x04	; 4
    1f16:	91 05       	cpc	r25, r1
    1f18:	f9 f0       	breq	.+62     	; 0x1f58 <KeyPad_4x3_adjustKeyNumber+0xa0>
    1f1a:	30 c0       	rjmp	.+96     	; 0x1f7c <KeyPad_4x3_adjustKeyNumber+0xc4>
    1f1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f20:	27 30       	cpi	r18, 0x07	; 7
    1f22:	31 05       	cpc	r19, r1
    1f24:	11 f1       	breq	.+68     	; 0x1f6a <KeyPad_4x3_adjustKeyNumber+0xb2>
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2a:	87 30       	cpi	r24, 0x07	; 7
    1f2c:	91 05       	cpc	r25, r1
    1f2e:	d4 f0       	brlt	.+52     	; 0x1f64 <KeyPad_4x3_adjustKeyNumber+0xac>
    1f30:	2b 81       	ldd	r18, Y+3	; 0x03
    1f32:	3c 81       	ldd	r19, Y+4	; 0x04
    1f34:	28 30       	cpi	r18, 0x08	; 8
    1f36:	31 05       	cpc	r19, r1
    1f38:	d9 f0       	breq	.+54     	; 0x1f70 <KeyPad_4x3_adjustKeyNumber+0xb8>
    1f3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3e:	89 30       	cpi	r24, 0x09	; 9
    1f40:	91 05       	cpc	r25, r1
    1f42:	c9 f0       	breq	.+50     	; 0x1f76 <KeyPad_4x3_adjustKeyNumber+0xbe>
    1f44:	1b c0       	rjmp	.+54     	; 0x1f7c <KeyPad_4x3_adjustKeyNumber+0xc4>
	{
	case 1:
		return '1';
    1f46:	91 e3       	ldi	r25, 0x31	; 49
    1f48:	9a 83       	std	Y+2, r25	; 0x02
    1f4a:	1a c0       	rjmp	.+52     	; 0x1f80 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 2:
		return '2';
    1f4c:	22 e3       	ldi	r18, 0x32	; 50
    1f4e:	2a 83       	std	Y+2, r18	; 0x02
    1f50:	17 c0       	rjmp	.+46     	; 0x1f80 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 3:
		return '3';
    1f52:	33 e3       	ldi	r19, 0x33	; 51
    1f54:	3a 83       	std	Y+2, r19	; 0x02
    1f56:	14 c0       	rjmp	.+40     	; 0x1f80 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 4:
		return '4';
    1f58:	84 e3       	ldi	r24, 0x34	; 52
    1f5a:	8a 83       	std	Y+2, r24	; 0x02
    1f5c:	11 c0       	rjmp	.+34     	; 0x1f80 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 5:
		return '5';
    1f5e:	95 e3       	ldi	r25, 0x35	; 53
    1f60:	9a 83       	std	Y+2, r25	; 0x02
    1f62:	0e c0       	rjmp	.+28     	; 0x1f80 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 6:
		return '6';
    1f64:	26 e3       	ldi	r18, 0x36	; 54
    1f66:	2a 83       	std	Y+2, r18	; 0x02
    1f68:	0b c0       	rjmp	.+22     	; 0x1f80 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 7:
		return '7';
    1f6a:	37 e3       	ldi	r19, 0x37	; 55
    1f6c:	3a 83       	std	Y+2, r19	; 0x02
    1f6e:	08 c0       	rjmp	.+16     	; 0x1f80 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 8:
		return '8';
    1f70:	88 e3       	ldi	r24, 0x38	; 56
    1f72:	8a 83       	std	Y+2, r24	; 0x02
    1f74:	05 c0       	rjmp	.+10     	; 0x1f80 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 9:
		return '9';
    1f76:	99 e3       	ldi	r25, 0x39	; 57
    1f78:	9a 83       	std	Y+2, r25	; 0x02
    1f7a:	02 c0       	rjmp	.+4      	; 0x1f80 <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	default:
		return '0';
    1f7c:	20 e3       	ldi	r18, 0x30	; 48
    1f7e:	2a 83       	std	Y+2, r18	; 0x02
    1f80:	8a 81       	ldd	r24, Y+2	; 0x02
		break;

	}

}
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	cf 91       	pop	r28
    1f8c:	df 91       	pop	r29
    1f8e:	08 95       	ret

00001f90 <KeyPad_4x4_adjustKeyNumber>:

uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    1f90:	df 93       	push	r29
    1f92:	cf 93       	push	r28
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <KeyPad_4x4_adjustKeyNumber+0x6>
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <KeyPad_4x4_adjustKeyNumber+0x8>
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	3c 83       	std	Y+4, r19	; 0x04
    1fa6:	2b 83       	std	Y+3, r18	; 0x03
    1fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1faa:	9c 81       	ldd	r25, Y+4	; 0x04
    1fac:	88 30       	cpi	r24, 0x08	; 8
    1fae:	91 05       	cpc	r25, r1
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <KeyPad_4x4_adjustKeyNumber+0x24>
    1fb2:	70 c0       	rjmp	.+224    	; 0x2094 <KeyPad_4x4_adjustKeyNumber+0x104>
    1fb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1fb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1fb8:	29 30       	cpi	r18, 0x09	; 9
    1fba:	31 05       	cpc	r19, r1
    1fbc:	5c f5       	brge	.+86     	; 0x2014 <KeyPad_4x4_adjustKeyNumber+0x84>
    1fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc2:	84 30       	cpi	r24, 0x04	; 4
    1fc4:	91 05       	cpc	r25, r1
    1fc6:	09 f4       	brne	.+2      	; 0x1fca <KeyPad_4x4_adjustKeyNumber+0x3a>
    1fc8:	59 c0       	rjmp	.+178    	; 0x207c <KeyPad_4x4_adjustKeyNumber+0xec>
    1fca:	2b 81       	ldd	r18, Y+3	; 0x03
    1fcc:	3c 81       	ldd	r19, Y+4	; 0x04
    1fce:	25 30       	cpi	r18, 0x05	; 5
    1fd0:	31 05       	cpc	r19, r1
    1fd2:	9c f4       	brge	.+38     	; 0x1ffa <KeyPad_4x4_adjustKeyNumber+0x6a>
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd8:	82 30       	cpi	r24, 0x02	; 2
    1fda:	91 05       	cpc	r25, r1
    1fdc:	09 f4       	brne	.+2      	; 0x1fe0 <KeyPad_4x4_adjustKeyNumber+0x50>
    1fde:	48 c0       	rjmp	.+144    	; 0x2070 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1fe0:	2b 81       	ldd	r18, Y+3	; 0x03
    1fe2:	3c 81       	ldd	r19, Y+4	; 0x04
    1fe4:	23 30       	cpi	r18, 0x03	; 3
    1fe6:	31 05       	cpc	r19, r1
    1fe8:	0c f0       	brlt	.+2      	; 0x1fec <KeyPad_4x4_adjustKeyNumber+0x5c>
    1fea:	45 c0       	rjmp	.+138    	; 0x2076 <KeyPad_4x4_adjustKeyNumber+0xe6>
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff0:	81 30       	cpi	r24, 0x01	; 1
    1ff2:	91 05       	cpc	r25, r1
    1ff4:	09 f4       	brne	.+2      	; 0x1ff8 <KeyPad_4x4_adjustKeyNumber+0x68>
    1ff6:	39 c0       	rjmp	.+114    	; 0x206a <KeyPad_4x4_adjustKeyNumber+0xda>
    1ff8:	67 c0       	rjmp	.+206    	; 0x20c8 <KeyPad_4x4_adjustKeyNumber+0x138>
    1ffa:	2b 81       	ldd	r18, Y+3	; 0x03
    1ffc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ffe:	26 30       	cpi	r18, 0x06	; 6
    2000:	31 05       	cpc	r19, r1
    2002:	09 f4       	brne	.+2      	; 0x2006 <KeyPad_4x4_adjustKeyNumber+0x76>
    2004:	41 c0       	rjmp	.+130    	; 0x2088 <KeyPad_4x4_adjustKeyNumber+0xf8>
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	9c 81       	ldd	r25, Y+4	; 0x04
    200a:	87 30       	cpi	r24, 0x07	; 7
    200c:	91 05       	cpc	r25, r1
    200e:	0c f0       	brlt	.+2      	; 0x2012 <KeyPad_4x4_adjustKeyNumber+0x82>
    2010:	3e c0       	rjmp	.+124    	; 0x208e <KeyPad_4x4_adjustKeyNumber+0xfe>
    2012:	37 c0       	rjmp	.+110    	; 0x2082 <KeyPad_4x4_adjustKeyNumber+0xf2>
    2014:	2b 81       	ldd	r18, Y+3	; 0x03
    2016:	3c 81       	ldd	r19, Y+4	; 0x04
    2018:	2c 30       	cpi	r18, 0x0C	; 12
    201a:	31 05       	cpc	r19, r1
    201c:	09 f4       	brne	.+2      	; 0x2020 <KeyPad_4x4_adjustKeyNumber+0x90>
    201e:	46 c0       	rjmp	.+140    	; 0x20ac <KeyPad_4x4_adjustKeyNumber+0x11c>
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	9c 81       	ldd	r25, Y+4	; 0x04
    2024:	8d 30       	cpi	r24, 0x0D	; 13
    2026:	91 05       	cpc	r25, r1
    2028:	5c f4       	brge	.+22     	; 0x2040 <KeyPad_4x4_adjustKeyNumber+0xb0>
    202a:	2b 81       	ldd	r18, Y+3	; 0x03
    202c:	3c 81       	ldd	r19, Y+4	; 0x04
    202e:	2a 30       	cpi	r18, 0x0A	; 10
    2030:	31 05       	cpc	r19, r1
    2032:	b1 f1       	breq	.+108    	; 0x20a0 <KeyPad_4x4_adjustKeyNumber+0x110>
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	9c 81       	ldd	r25, Y+4	; 0x04
    2038:	8b 30       	cpi	r24, 0x0B	; 11
    203a:	91 05       	cpc	r25, r1
    203c:	a4 f5       	brge	.+104    	; 0x20a6 <KeyPad_4x4_adjustKeyNumber+0x116>
    203e:	2d c0       	rjmp	.+90     	; 0x209a <KeyPad_4x4_adjustKeyNumber+0x10a>
    2040:	2b 81       	ldd	r18, Y+3	; 0x03
    2042:	3c 81       	ldd	r19, Y+4	; 0x04
    2044:	2e 30       	cpi	r18, 0x0E	; 14
    2046:	31 05       	cpc	r19, r1
    2048:	b9 f1       	breq	.+110    	; 0x20b8 <KeyPad_4x4_adjustKeyNumber+0x128>
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	9c 81       	ldd	r25, Y+4	; 0x04
    204e:	8e 30       	cpi	r24, 0x0E	; 14
    2050:	91 05       	cpc	r25, r1
    2052:	7c f1       	brlt	.+94     	; 0x20b2 <KeyPad_4x4_adjustKeyNumber+0x122>
    2054:	2b 81       	ldd	r18, Y+3	; 0x03
    2056:	3c 81       	ldd	r19, Y+4	; 0x04
    2058:	2f 30       	cpi	r18, 0x0F	; 15
    205a:	31 05       	cpc	r19, r1
    205c:	79 f1       	breq	.+94     	; 0x20bc <KeyPad_4x4_adjustKeyNumber+0x12c>
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	9c 81       	ldd	r25, Y+4	; 0x04
    2062:	80 31       	cpi	r24, 0x10	; 16
    2064:	91 05       	cpc	r25, r1
    2066:	69 f1       	breq	.+90     	; 0x20c2 <KeyPad_4x4_adjustKeyNumber+0x132>
    2068:	2f c0       	rjmp	.+94     	; 0x20c8 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
	case 1:
		return 7;
    206a:	97 e0       	ldi	r25, 0x07	; 7
    206c:	9a 83       	std	Y+2, r25	; 0x02
    206e:	2d c0       	rjmp	.+90     	; 0x20ca <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 2:
		return 8;
    2070:	28 e0       	ldi	r18, 0x08	; 8
    2072:	2a 83       	std	Y+2, r18	; 0x02
    2074:	2a c0       	rjmp	.+84     	; 0x20ca <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 3:
		return 9;
    2076:	39 e0       	ldi	r19, 0x09	; 9
    2078:	3a 83       	std	Y+2, r19	; 0x02
    207a:	27 c0       	rjmp	.+78     	; 0x20ca <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 4:
		return '/';
    207c:	8f e2       	ldi	r24, 0x2F	; 47
    207e:	8a 83       	std	Y+2, r24	; 0x02
    2080:	24 c0       	rjmp	.+72     	; 0x20ca <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 5:
		return 4;
    2082:	94 e0       	ldi	r25, 0x04	; 4
    2084:	9a 83       	std	Y+2, r25	; 0x02
    2086:	21 c0       	rjmp	.+66     	; 0x20ca <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 6:
		return 5;
    2088:	25 e0       	ldi	r18, 0x05	; 5
    208a:	2a 83       	std	Y+2, r18	; 0x02
    208c:	1e c0       	rjmp	.+60     	; 0x20ca <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 7:
		return 6;
    208e:	36 e0       	ldi	r19, 0x06	; 6
    2090:	3a 83       	std	Y+2, r19	; 0x02
    2092:	1b c0       	rjmp	.+54     	; 0x20ca <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 8:
		return '*';
    2094:	8a e2       	ldi	r24, 0x2A	; 42
    2096:	8a 83       	std	Y+2, r24	; 0x02
    2098:	18 c0       	rjmp	.+48     	; 0x20ca <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 9:
		return 1;
    209a:	91 e0       	ldi	r25, 0x01	; 1
    209c:	9a 83       	std	Y+2, r25	; 0x02
    209e:	15 c0       	rjmp	.+42     	; 0x20ca <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 10:
		return 2;
    20a0:	22 e0       	ldi	r18, 0x02	; 2
    20a2:	2a 83       	std	Y+2, r18	; 0x02
    20a4:	12 c0       	rjmp	.+36     	; 0x20ca <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 11:
		return 3;
    20a6:	33 e0       	ldi	r19, 0x03	; 3
    20a8:	3a 83       	std	Y+2, r19	; 0x02
    20aa:	0f c0       	rjmp	.+30     	; 0x20ca <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 12:
		return '-';
    20ac:	8d e2       	ldi	r24, 0x2D	; 45
    20ae:	8a 83       	std	Y+2, r24	; 0x02
    20b0:	0c c0       	rjmp	.+24     	; 0x20ca <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 13:
		return 'A';
    20b2:	91 e4       	ldi	r25, 0x41	; 65
    20b4:	9a 83       	std	Y+2, r25	; 0x02
    20b6:	09 c0       	rjmp	.+18     	; 0x20ca <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 14:
		return 0;
    20b8:	1a 82       	std	Y+2, r1	; 0x02
    20ba:	07 c0       	rjmp	.+14     	; 0x20ca <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 15:
		return '=';
    20bc:	2d e3       	ldi	r18, 0x3D	; 61
    20be:	2a 83       	std	Y+2, r18	; 0x02
    20c0:	04 c0       	rjmp	.+8      	; 0x20ca <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 16:
		return '+';
    20c2:	3b e2       	ldi	r19, 0x2B	; 43
    20c4:	3a 83       	std	Y+2, r19	; 0x02
    20c6:	01 c0       	rjmp	.+2      	; 0x20ca <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;

	default:
		return 0 ;
    20c8:	1a 82       	std	Y+2, r1	; 0x02
    20ca:	8a 81       	ldd	r24, Y+2	; 0x02
		break;


	}

}
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	cf 91       	pop	r28
    20d6:	df 91       	pop	r29
    20d8:	08 95       	ret

000020da <LCD_refresh>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_refresh(void)
{
    20da:	df 93       	push	r29
    20dc:	cf 93       	push	r28
    20de:	cd b7       	in	r28, 0x3d	; 61
    20e0:	de b7       	in	r29, 0x3e	; 62
    20e2:	aa 97       	sbiw	r28, 0x2a	; 42
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	de bf       	out	0x3e, r29	; 62
    20ea:	0f be       	out	0x3f, r0	; 63
    20ec:	cd bf       	out	0x3d, r28	; 61
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	a0 e8       	ldi	r26, 0x80	; 128
    20f4:	bf e3       	ldi	r27, 0x3F	; 63
    20f6:	8f a3       	std	Y+39, r24	; 0x27
    20f8:	98 a7       	std	Y+40, r25	; 0x28
    20fa:	a9 a7       	std	Y+41, r26	; 0x29
    20fc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fe:	6f a1       	ldd	r22, Y+39	; 0x27
    2100:	78 a5       	ldd	r23, Y+40	; 0x28
    2102:	89 a5       	ldd	r24, Y+41	; 0x29
    2104:	9a a5       	ldd	r25, Y+42	; 0x2a
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	4a e7       	ldi	r20, 0x7A	; 122
    210c:	53 e4       	ldi	r21, 0x43	; 67
    210e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	8b a3       	std	Y+35, r24	; 0x23
    2118:	9c a3       	std	Y+36, r25	; 0x24
    211a:	ad a3       	std	Y+37, r26	; 0x25
    211c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    211e:	6b a1       	ldd	r22, Y+35	; 0x23
    2120:	7c a1       	ldd	r23, Y+36	; 0x24
    2122:	8d a1       	ldd	r24, Y+37	; 0x25
    2124:	9e a1       	ldd	r25, Y+38	; 0x26
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e8       	ldi	r20, 0x80	; 128
    212c:	5f e3       	ldi	r21, 0x3F	; 63
    212e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2132:	88 23       	and	r24, r24
    2134:	2c f4       	brge	.+10     	; 0x2140 <LCD_refresh+0x66>
		__ticks = 1;
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	9a a3       	std	Y+34, r25	; 0x22
    213c:	89 a3       	std	Y+33, r24	; 0x21
    213e:	3f c0       	rjmp	.+126    	; 0x21be <LCD_refresh+0xe4>
	else if (__tmp > 65535)
    2140:	6b a1       	ldd	r22, Y+35	; 0x23
    2142:	7c a1       	ldd	r23, Y+36	; 0x24
    2144:	8d a1       	ldd	r24, Y+37	; 0x25
    2146:	9e a1       	ldd	r25, Y+38	; 0x26
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	3f ef       	ldi	r19, 0xFF	; 255
    214c:	4f e7       	ldi	r20, 0x7F	; 127
    214e:	57 e4       	ldi	r21, 0x47	; 71
    2150:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2154:	18 16       	cp	r1, r24
    2156:	4c f5       	brge	.+82     	; 0x21aa <LCD_refresh+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2158:	6f a1       	ldd	r22, Y+39	; 0x27
    215a:	78 a5       	ldd	r23, Y+40	; 0x28
    215c:	89 a5       	ldd	r24, Y+41	; 0x29
    215e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e2       	ldi	r20, 0x20	; 32
    2166:	51 e4       	ldi	r21, 0x41	; 65
    2168:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    216c:	dc 01       	movw	r26, r24
    216e:	cb 01       	movw	r24, r22
    2170:	bc 01       	movw	r22, r24
    2172:	cd 01       	movw	r24, r26
    2174:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	9a a3       	std	Y+34, r25	; 0x22
    217e:	89 a3       	std	Y+33, r24	; 0x21
    2180:	0f c0       	rjmp	.+30     	; 0x21a0 <LCD_refresh+0xc6>
    2182:	89 e1       	ldi	r24, 0x19	; 25
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	98 a3       	std	Y+32, r25	; 0x20
    2188:	8f 8f       	std	Y+31, r24	; 0x1f
    218a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    218c:	98 a1       	ldd	r25, Y+32	; 0x20
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	f1 f7       	brne	.-4      	; 0x218e <LCD_refresh+0xb4>
    2192:	98 a3       	std	Y+32, r25	; 0x20
    2194:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2196:	89 a1       	ldd	r24, Y+33	; 0x21
    2198:	9a a1       	ldd	r25, Y+34	; 0x22
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	9a a3       	std	Y+34, r25	; 0x22
    219e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a0:	89 a1       	ldd	r24, Y+33	; 0x21
    21a2:	9a a1       	ldd	r25, Y+34	; 0x22
    21a4:	00 97       	sbiw	r24, 0x00	; 0
    21a6:	69 f7       	brne	.-38     	; 0x2182 <LCD_refresh+0xa8>
    21a8:	14 c0       	rjmp	.+40     	; 0x21d2 <LCD_refresh+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21aa:	6b a1       	ldd	r22, Y+35	; 0x23
    21ac:	7c a1       	ldd	r23, Y+36	; 0x24
    21ae:	8d a1       	ldd	r24, Y+37	; 0x25
    21b0:	9e a1       	ldd	r25, Y+38	; 0x26
    21b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	9a a3       	std	Y+34, r25	; 0x22
    21bc:	89 a3       	std	Y+33, r24	; 0x21
    21be:	89 a1       	ldd	r24, Y+33	; 0x21
    21c0:	9a a1       	ldd	r25, Y+34	; 0x22
    21c2:	9e 8f       	std	Y+30, r25	; 0x1e
    21c4:	8d 8f       	std	Y+29, r24	; 0x1d
    21c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <LCD_refresh+0xf0>
    21ce:	9e 8f       	std	Y+30, r25	; 0x1e
    21d0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,0);
    21d2:	83 e4       	ldi	r24, 0x43	; 67
    21d4:	62 e0       	ldi	r22, 0x02	; 2
    21d6:	40 e0       	ldi	r20, 0x00	; 0
    21d8:	0e 94 2a 08 	call	0x1054	; 0x1054 <DIO_write_PIN>
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	a0 e8       	ldi	r26, 0x80	; 128
    21e2:	bf e3       	ldi	r27, 0x3F	; 63
    21e4:	89 8f       	std	Y+25, r24	; 0x19
    21e6:	9a 8f       	std	Y+26, r25	; 0x1a
    21e8:	ab 8f       	std	Y+27, r26	; 0x1b
    21ea:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ec:	69 8d       	ldd	r22, Y+25	; 0x19
    21ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	4a e7       	ldi	r20, 0x7A	; 122
    21fa:	53 e4       	ldi	r21, 0x43	; 67
    21fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	8d 8b       	std	Y+21, r24	; 0x15
    2206:	9e 8b       	std	Y+22, r25	; 0x16
    2208:	af 8b       	std	Y+23, r26	; 0x17
    220a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    220c:	6d 89       	ldd	r22, Y+21	; 0x15
    220e:	7e 89       	ldd	r23, Y+22	; 0x16
    2210:	8f 89       	ldd	r24, Y+23	; 0x17
    2212:	98 8d       	ldd	r25, Y+24	; 0x18
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e8       	ldi	r20, 0x80	; 128
    221a:	5f e3       	ldi	r21, 0x3F	; 63
    221c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2220:	88 23       	and	r24, r24
    2222:	2c f4       	brge	.+10     	; 0x222e <LCD_refresh+0x154>
		__ticks = 1;
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	9c 8b       	std	Y+20, r25	; 0x14
    222a:	8b 8b       	std	Y+19, r24	; 0x13
    222c:	3f c0       	rjmp	.+126    	; 0x22ac <LCD_refresh+0x1d2>
	else if (__tmp > 65535)
    222e:	6d 89       	ldd	r22, Y+21	; 0x15
    2230:	7e 89       	ldd	r23, Y+22	; 0x16
    2232:	8f 89       	ldd	r24, Y+23	; 0x17
    2234:	98 8d       	ldd	r25, Y+24	; 0x18
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	3f ef       	ldi	r19, 0xFF	; 255
    223a:	4f e7       	ldi	r20, 0x7F	; 127
    223c:	57 e4       	ldi	r21, 0x47	; 71
    223e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2242:	18 16       	cp	r1, r24
    2244:	4c f5       	brge	.+82     	; 0x2298 <LCD_refresh+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2246:	69 8d       	ldd	r22, Y+25	; 0x19
    2248:	7a 8d       	ldd	r23, Y+26	; 0x1a
    224a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    224c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	40 e2       	ldi	r20, 0x20	; 32
    2254:	51 e4       	ldi	r21, 0x41	; 65
    2256:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	bc 01       	movw	r22, r24
    2260:	cd 01       	movw	r24, r26
    2262:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	9c 8b       	std	Y+20, r25	; 0x14
    226c:	8b 8b       	std	Y+19, r24	; 0x13
    226e:	0f c0       	rjmp	.+30     	; 0x228e <LCD_refresh+0x1b4>
    2270:	89 e1       	ldi	r24, 0x19	; 25
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	9a 8b       	std	Y+18, r25	; 0x12
    2276:	89 8b       	std	Y+17, r24	; 0x11
    2278:	89 89       	ldd	r24, Y+17	; 0x11
    227a:	9a 89       	ldd	r25, Y+18	; 0x12
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	f1 f7       	brne	.-4      	; 0x227c <LCD_refresh+0x1a2>
    2280:	9a 8b       	std	Y+18, r25	; 0x12
    2282:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2284:	8b 89       	ldd	r24, Y+19	; 0x13
    2286:	9c 89       	ldd	r25, Y+20	; 0x14
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	9c 8b       	std	Y+20, r25	; 0x14
    228c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228e:	8b 89       	ldd	r24, Y+19	; 0x13
    2290:	9c 89       	ldd	r25, Y+20	; 0x14
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	69 f7       	brne	.-38     	; 0x2270 <LCD_refresh+0x196>
    2296:	14 c0       	rjmp	.+40     	; 0x22c0 <LCD_refresh+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2298:	6d 89       	ldd	r22, Y+21	; 0x15
    229a:	7e 89       	ldd	r23, Y+22	; 0x16
    229c:	8f 89       	ldd	r24, Y+23	; 0x17
    229e:	98 8d       	ldd	r25, Y+24	; 0x18
    22a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	9c 8b       	std	Y+20, r25	; 0x14
    22aa:	8b 8b       	std	Y+19, r24	; 0x13
    22ac:	8b 89       	ldd	r24, Y+19	; 0x13
    22ae:	9c 89       	ldd	r25, Y+20	; 0x14
    22b0:	98 8b       	std	Y+16, r25	; 0x10
    22b2:	8f 87       	std	Y+15, r24	; 0x0f
    22b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    22b6:	98 89       	ldd	r25, Y+16	; 0x10
    22b8:	01 97       	sbiw	r24, 0x01	; 1
    22ba:	f1 f7       	brne	.-4      	; 0x22b8 <LCD_refresh+0x1de>
    22bc:	98 8b       	std	Y+16, r25	; 0x10
    22be:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,1);
    22c0:	83 e4       	ldi	r24, 0x43	; 67
    22c2:	62 e0       	ldi	r22, 0x02	; 2
    22c4:	41 e0       	ldi	r20, 0x01	; 1
    22c6:	0e 94 2a 08 	call	0x1054	; 0x1054 <DIO_write_PIN>
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	a0 e8       	ldi	r26, 0x80	; 128
    22d0:	bf e3       	ldi	r27, 0x3F	; 63
    22d2:	8b 87       	std	Y+11, r24	; 0x0b
    22d4:	9c 87       	std	Y+12, r25	; 0x0c
    22d6:	ad 87       	std	Y+13, r26	; 0x0d
    22d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22da:	6b 85       	ldd	r22, Y+11	; 0x0b
    22dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    22de:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	4a e7       	ldi	r20, 0x7A	; 122
    22e8:	53 e4       	ldi	r21, 0x43	; 67
    22ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	8f 83       	std	Y+7, r24	; 0x07
    22f4:	98 87       	std	Y+8, r25	; 0x08
    22f6:	a9 87       	std	Y+9, r26	; 0x09
    22f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22fa:	6f 81       	ldd	r22, Y+7	; 0x07
    22fc:	78 85       	ldd	r23, Y+8	; 0x08
    22fe:	89 85       	ldd	r24, Y+9	; 0x09
    2300:	9a 85       	ldd	r25, Y+10	; 0x0a
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e8       	ldi	r20, 0x80	; 128
    2308:	5f e3       	ldi	r21, 0x3F	; 63
    230a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    230e:	88 23       	and	r24, r24
    2310:	2c f4       	brge	.+10     	; 0x231c <LCD_refresh+0x242>
		__ticks = 1;
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	9e 83       	std	Y+6, r25	; 0x06
    2318:	8d 83       	std	Y+5, r24	; 0x05
    231a:	3f c0       	rjmp	.+126    	; 0x239a <LCD_refresh+0x2c0>
	else if (__tmp > 65535)
    231c:	6f 81       	ldd	r22, Y+7	; 0x07
    231e:	78 85       	ldd	r23, Y+8	; 0x08
    2320:	89 85       	ldd	r24, Y+9	; 0x09
    2322:	9a 85       	ldd	r25, Y+10	; 0x0a
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	3f ef       	ldi	r19, 0xFF	; 255
    2328:	4f e7       	ldi	r20, 0x7F	; 127
    232a:	57 e4       	ldi	r21, 0x47	; 71
    232c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2330:	18 16       	cp	r1, r24
    2332:	4c f5       	brge	.+82     	; 0x2386 <LCD_refresh+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2334:	6b 85       	ldd	r22, Y+11	; 0x0b
    2336:	7c 85       	ldd	r23, Y+12	; 0x0c
    2338:	8d 85       	ldd	r24, Y+13	; 0x0d
    233a:	9e 85       	ldd	r25, Y+14	; 0x0e
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	40 e2       	ldi	r20, 0x20	; 32
    2342:	51 e4       	ldi	r21, 0x41	; 65
    2344:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	bc 01       	movw	r22, r24
    234e:	cd 01       	movw	r24, r26
    2350:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	9e 83       	std	Y+6, r25	; 0x06
    235a:	8d 83       	std	Y+5, r24	; 0x05
    235c:	0f c0       	rjmp	.+30     	; 0x237c <LCD_refresh+0x2a2>
    235e:	89 e1       	ldi	r24, 0x19	; 25
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	9c 83       	std	Y+4, r25	; 0x04
    2364:	8b 83       	std	Y+3, r24	; 0x03
    2366:	8b 81       	ldd	r24, Y+3	; 0x03
    2368:	9c 81       	ldd	r25, Y+4	; 0x04
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	f1 f7       	brne	.-4      	; 0x236a <LCD_refresh+0x290>
    236e:	9c 83       	std	Y+4, r25	; 0x04
    2370:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2372:	8d 81       	ldd	r24, Y+5	; 0x05
    2374:	9e 81       	ldd	r25, Y+6	; 0x06
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	9e 83       	std	Y+6, r25	; 0x06
    237a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237c:	8d 81       	ldd	r24, Y+5	; 0x05
    237e:	9e 81       	ldd	r25, Y+6	; 0x06
    2380:	00 97       	sbiw	r24, 0x00	; 0
    2382:	69 f7       	brne	.-38     	; 0x235e <LCD_refresh+0x284>
    2384:	14 c0       	rjmp	.+40     	; 0x23ae <LCD_refresh+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2386:	6f 81       	ldd	r22, Y+7	; 0x07
    2388:	78 85       	ldd	r23, Y+8	; 0x08
    238a:	89 85       	ldd	r24, Y+9	; 0x09
    238c:	9a 85       	ldd	r25, Y+10	; 0x0a
    238e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	9e 83       	std	Y+6, r25	; 0x06
    2398:	8d 83       	std	Y+5, r24	; 0x05
    239a:	8d 81       	ldd	r24, Y+5	; 0x05
    239c:	9e 81       	ldd	r25, Y+6	; 0x06
    239e:	9a 83       	std	Y+2, r25	; 0x02
    23a0:	89 83       	std	Y+1, r24	; 0x01
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	9a 81       	ldd	r25, Y+2	; 0x02
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	f1 f7       	brne	.-4      	; 0x23a6 <LCD_refresh+0x2cc>
    23aa:	9a 83       	std	Y+2, r25	; 0x02
    23ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    23ae:	aa 96       	adiw	r28, 0x2a	; 42
    23b0:	0f b6       	in	r0, 0x3f	; 63
    23b2:	f8 94       	cli
    23b4:	de bf       	out	0x3e, r29	; 62
    23b6:	0f be       	out	0x3f, r0	; 63
    23b8:	cd bf       	out	0x3d, r28	; 61
    23ba:	cf 91       	pop	r28
    23bc:	df 91       	pop	r29
    23be:	08 95       	ret

000023c0 <LCD_Command>:
void LCD_Command(uint8 cmd)
{
    23c0:	df 93       	push	r29
    23c2:	cf 93       	push	r28
    23c4:	cd b7       	in	r28, 0x3d	; 61
    23c6:	de b7       	in	r29, 0x3e	; 62
    23c8:	e9 97       	sbiw	r28, 0x39	; 57
    23ca:	0f b6       	in	r0, 0x3f	; 63
    23cc:	f8 94       	cli
    23ce:	de bf       	out	0x3e, r29	; 62
    23d0:	0f be       	out	0x3f, r0	; 63
    23d2:	cd bf       	out	0x3d, r28	; 61
    23d4:	89 af       	std	Y+57, r24	; 0x39
	DIO_write_PIN(LCD_ctrl_port,RS,0);
    23d6:	83 e4       	ldi	r24, 0x43	; 67
    23d8:	60 e0       	ldi	r22, 0x00	; 0
    23da:	40 e0       	ldi	r20, 0x00	; 0
    23dc:	0e 94 2a 08 	call	0x1054	; 0x1054 <DIO_write_PIN>
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	a0 e8       	ldi	r26, 0x80	; 128
    23e6:	bf e3       	ldi	r27, 0x3F	; 63
    23e8:	8d ab       	std	Y+53, r24	; 0x35
    23ea:	9e ab       	std	Y+54, r25	; 0x36
    23ec:	af ab       	std	Y+55, r26	; 0x37
    23ee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f0:	6d a9       	ldd	r22, Y+53	; 0x35
    23f2:	7e a9       	ldd	r23, Y+54	; 0x36
    23f4:	8f a9       	ldd	r24, Y+55	; 0x37
    23f6:	98 ad       	ldd	r25, Y+56	; 0x38
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	4a e7       	ldi	r20, 0x7A	; 122
    23fe:	53 e4       	ldi	r21, 0x43	; 67
    2400:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	89 ab       	std	Y+49, r24	; 0x31
    240a:	9a ab       	std	Y+50, r25	; 0x32
    240c:	ab ab       	std	Y+51, r26	; 0x33
    240e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2410:	69 a9       	ldd	r22, Y+49	; 0x31
    2412:	7a a9       	ldd	r23, Y+50	; 0x32
    2414:	8b a9       	ldd	r24, Y+51	; 0x33
    2416:	9c a9       	ldd	r25, Y+52	; 0x34
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e8       	ldi	r20, 0x80	; 128
    241e:	5f e3       	ldi	r21, 0x3F	; 63
    2420:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2424:	88 23       	and	r24, r24
    2426:	2c f4       	brge	.+10     	; 0x2432 <LCD_Command+0x72>
		__ticks = 1;
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	98 ab       	std	Y+48, r25	; 0x30
    242e:	8f a7       	std	Y+47, r24	; 0x2f
    2430:	3f c0       	rjmp	.+126    	; 0x24b0 <LCD_Command+0xf0>
	else if (__tmp > 65535)
    2432:	69 a9       	ldd	r22, Y+49	; 0x31
    2434:	7a a9       	ldd	r23, Y+50	; 0x32
    2436:	8b a9       	ldd	r24, Y+51	; 0x33
    2438:	9c a9       	ldd	r25, Y+52	; 0x34
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	3f ef       	ldi	r19, 0xFF	; 255
    243e:	4f e7       	ldi	r20, 0x7F	; 127
    2440:	57 e4       	ldi	r21, 0x47	; 71
    2442:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2446:	18 16       	cp	r1, r24
    2448:	4c f5       	brge	.+82     	; 0x249c <LCD_Command+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    244a:	6d a9       	ldd	r22, Y+53	; 0x35
    244c:	7e a9       	ldd	r23, Y+54	; 0x36
    244e:	8f a9       	ldd	r24, Y+55	; 0x37
    2450:	98 ad       	ldd	r25, Y+56	; 0x38
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	40 e2       	ldi	r20, 0x20	; 32
    2458:	51 e4       	ldi	r21, 0x41	; 65
    245a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	bc 01       	movw	r22, r24
    2464:	cd 01       	movw	r24, r26
    2466:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	98 ab       	std	Y+48, r25	; 0x30
    2470:	8f a7       	std	Y+47, r24	; 0x2f
    2472:	0f c0       	rjmp	.+30     	; 0x2492 <LCD_Command+0xd2>
    2474:	89 e1       	ldi	r24, 0x19	; 25
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	9e a7       	std	Y+46, r25	; 0x2e
    247a:	8d a7       	std	Y+45, r24	; 0x2d
    247c:	8d a5       	ldd	r24, Y+45	; 0x2d
    247e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	f1 f7       	brne	.-4      	; 0x2480 <LCD_Command+0xc0>
    2484:	9e a7       	std	Y+46, r25	; 0x2e
    2486:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2488:	8f a5       	ldd	r24, Y+47	; 0x2f
    248a:	98 a9       	ldd	r25, Y+48	; 0x30
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	98 ab       	std	Y+48, r25	; 0x30
    2490:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2492:	8f a5       	ldd	r24, Y+47	; 0x2f
    2494:	98 a9       	ldd	r25, Y+48	; 0x30
    2496:	00 97       	sbiw	r24, 0x00	; 0
    2498:	69 f7       	brne	.-38     	; 0x2474 <LCD_Command+0xb4>
    249a:	14 c0       	rjmp	.+40     	; 0x24c4 <LCD_Command+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    249c:	69 a9       	ldd	r22, Y+49	; 0x31
    249e:	7a a9       	ldd	r23, Y+50	; 0x32
    24a0:	8b a9       	ldd	r24, Y+51	; 0x33
    24a2:	9c a9       	ldd	r25, Y+52	; 0x34
    24a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	98 ab       	std	Y+48, r25	; 0x30
    24ae:	8f a7       	std	Y+47, r24	; 0x2f
    24b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    24b2:	98 a9       	ldd	r25, Y+48	; 0x30
    24b4:	9c a7       	std	Y+44, r25	; 0x2c
    24b6:	8b a7       	std	Y+43, r24	; 0x2b
    24b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    24ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    24bc:	01 97       	sbiw	r24, 0x01	; 1
    24be:	f1 f7       	brne	.-4      	; 0x24bc <LCD_Command+0xfc>
    24c0:	9c a7       	std	Y+44, r25	; 0x2c
    24c2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,1);
    24c4:	83 e4       	ldi	r24, 0x43	; 67
    24c6:	62 e0       	ldi	r22, 0x02	; 2
    24c8:	41 e0       	ldi	r20, 0x01	; 1
    24ca:	0e 94 2a 08 	call	0x1054	; 0x1054 <DIO_write_PIN>
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	a0 e8       	ldi	r26, 0x80	; 128
    24d4:	bf e3       	ldi	r27, 0x3F	; 63
    24d6:	8f a3       	std	Y+39, r24	; 0x27
    24d8:	98 a7       	std	Y+40, r25	; 0x28
    24da:	a9 a7       	std	Y+41, r26	; 0x29
    24dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24de:	6f a1       	ldd	r22, Y+39	; 0x27
    24e0:	78 a5       	ldd	r23, Y+40	; 0x28
    24e2:	89 a5       	ldd	r24, Y+41	; 0x29
    24e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	4a e7       	ldi	r20, 0x7A	; 122
    24ec:	53 e4       	ldi	r21, 0x43	; 67
    24ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24f2:	dc 01       	movw	r26, r24
    24f4:	cb 01       	movw	r24, r22
    24f6:	8b a3       	std	Y+35, r24	; 0x23
    24f8:	9c a3       	std	Y+36, r25	; 0x24
    24fa:	ad a3       	std	Y+37, r26	; 0x25
    24fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24fe:	6b a1       	ldd	r22, Y+35	; 0x23
    2500:	7c a1       	ldd	r23, Y+36	; 0x24
    2502:	8d a1       	ldd	r24, Y+37	; 0x25
    2504:	9e a1       	ldd	r25, Y+38	; 0x26
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	40 e8       	ldi	r20, 0x80	; 128
    250c:	5f e3       	ldi	r21, 0x3F	; 63
    250e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2512:	88 23       	and	r24, r24
    2514:	2c f4       	brge	.+10     	; 0x2520 <LCD_Command+0x160>
		__ticks = 1;
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	9a a3       	std	Y+34, r25	; 0x22
    251c:	89 a3       	std	Y+33, r24	; 0x21
    251e:	3f c0       	rjmp	.+126    	; 0x259e <LCD_Command+0x1de>
	else if (__tmp > 65535)
    2520:	6b a1       	ldd	r22, Y+35	; 0x23
    2522:	7c a1       	ldd	r23, Y+36	; 0x24
    2524:	8d a1       	ldd	r24, Y+37	; 0x25
    2526:	9e a1       	ldd	r25, Y+38	; 0x26
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	3f ef       	ldi	r19, 0xFF	; 255
    252c:	4f e7       	ldi	r20, 0x7F	; 127
    252e:	57 e4       	ldi	r21, 0x47	; 71
    2530:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2534:	18 16       	cp	r1, r24
    2536:	4c f5       	brge	.+82     	; 0x258a <LCD_Command+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2538:	6f a1       	ldd	r22, Y+39	; 0x27
    253a:	78 a5       	ldd	r23, Y+40	; 0x28
    253c:	89 a5       	ldd	r24, Y+41	; 0x29
    253e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e2       	ldi	r20, 0x20	; 32
    2546:	51 e4       	ldi	r21, 0x41	; 65
    2548:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	bc 01       	movw	r22, r24
    2552:	cd 01       	movw	r24, r26
    2554:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	9a a3       	std	Y+34, r25	; 0x22
    255e:	89 a3       	std	Y+33, r24	; 0x21
    2560:	0f c0       	rjmp	.+30     	; 0x2580 <LCD_Command+0x1c0>
    2562:	89 e1       	ldi	r24, 0x19	; 25
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	98 a3       	std	Y+32, r25	; 0x20
    2568:	8f 8f       	std	Y+31, r24	; 0x1f
    256a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    256c:	98 a1       	ldd	r25, Y+32	; 0x20
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	f1 f7       	brne	.-4      	; 0x256e <LCD_Command+0x1ae>
    2572:	98 a3       	std	Y+32, r25	; 0x20
    2574:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2576:	89 a1       	ldd	r24, Y+33	; 0x21
    2578:	9a a1       	ldd	r25, Y+34	; 0x22
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	9a a3       	std	Y+34, r25	; 0x22
    257e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2580:	89 a1       	ldd	r24, Y+33	; 0x21
    2582:	9a a1       	ldd	r25, Y+34	; 0x22
    2584:	00 97       	sbiw	r24, 0x00	; 0
    2586:	69 f7       	brne	.-38     	; 0x2562 <LCD_Command+0x1a2>
    2588:	14 c0       	rjmp	.+40     	; 0x25b2 <LCD_Command+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258a:	6b a1       	ldd	r22, Y+35	; 0x23
    258c:	7c a1       	ldd	r23, Y+36	; 0x24
    258e:	8d a1       	ldd	r24, Y+37	; 0x25
    2590:	9e a1       	ldd	r25, Y+38	; 0x26
    2592:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	9a a3       	std	Y+34, r25	; 0x22
    259c:	89 a3       	std	Y+33, r24	; 0x21
    259e:	89 a1       	ldd	r24, Y+33	; 0x21
    25a0:	9a a1       	ldd	r25, Y+34	; 0x22
    25a2:	9e 8f       	std	Y+30, r25	; 0x1e
    25a4:	8d 8f       	std	Y+29, r24	; 0x1d
    25a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	f1 f7       	brne	.-4      	; 0x25aa <LCD_Command+0x1ea>
    25ae:	9e 8f       	std	Y+30, r25	; 0x1e
    25b0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_write_high_nibble(LCD_data_port,cmd>>4);
    25b2:	89 ad       	ldd	r24, Y+57	; 0x39
    25b4:	98 2f       	mov	r25, r24
    25b6:	92 95       	swap	r25
    25b8:	9f 70       	andi	r25, 0x0F	; 15
    25ba:	84 e4       	ldi	r24, 0x44	; 68
    25bc:	69 2f       	mov	r22, r25
    25be:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <DIO_write_high_nibble>
	LCD_refresh();
    25c2:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_refresh>
	DIO_write_high_nibble(LCD_data_port,cmd);
    25c6:	84 e4       	ldi	r24, 0x44	; 68
    25c8:	69 ad       	ldd	r22, Y+57	; 0x39
    25ca:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <DIO_write_high_nibble>
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	a0 e8       	ldi	r26, 0x80	; 128
    25d4:	bf e3       	ldi	r27, 0x3F	; 63
    25d6:	89 8f       	std	Y+25, r24	; 0x19
    25d8:	9a 8f       	std	Y+26, r25	; 0x1a
    25da:	ab 8f       	std	Y+27, r26	; 0x1b
    25dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25de:	69 8d       	ldd	r22, Y+25	; 0x19
    25e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	4a e7       	ldi	r20, 0x7A	; 122
    25ec:	53 e4       	ldi	r21, 0x43	; 67
    25ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	8d 8b       	std	Y+21, r24	; 0x15
    25f8:	9e 8b       	std	Y+22, r25	; 0x16
    25fa:	af 8b       	std	Y+23, r26	; 0x17
    25fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2600:	7e 89       	ldd	r23, Y+22	; 0x16
    2602:	8f 89       	ldd	r24, Y+23	; 0x17
    2604:	98 8d       	ldd	r25, Y+24	; 0x18
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	40 e8       	ldi	r20, 0x80	; 128
    260c:	5f e3       	ldi	r21, 0x3F	; 63
    260e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2612:	88 23       	and	r24, r24
    2614:	2c f4       	brge	.+10     	; 0x2620 <LCD_Command+0x260>
		__ticks = 1;
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	9c 8b       	std	Y+20, r25	; 0x14
    261c:	8b 8b       	std	Y+19, r24	; 0x13
    261e:	3f c0       	rjmp	.+126    	; 0x269e <LCD_Command+0x2de>
	else if (__tmp > 65535)
    2620:	6d 89       	ldd	r22, Y+21	; 0x15
    2622:	7e 89       	ldd	r23, Y+22	; 0x16
    2624:	8f 89       	ldd	r24, Y+23	; 0x17
    2626:	98 8d       	ldd	r25, Y+24	; 0x18
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	3f ef       	ldi	r19, 0xFF	; 255
    262c:	4f e7       	ldi	r20, 0x7F	; 127
    262e:	57 e4       	ldi	r21, 0x47	; 71
    2630:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2634:	18 16       	cp	r1, r24
    2636:	4c f5       	brge	.+82     	; 0x268a <LCD_Command+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2638:	69 8d       	ldd	r22, Y+25	; 0x19
    263a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    263c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    263e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	40 e2       	ldi	r20, 0x20	; 32
    2646:	51 e4       	ldi	r21, 0x41	; 65
    2648:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	bc 01       	movw	r22, r24
    2652:	cd 01       	movw	r24, r26
    2654:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	9c 8b       	std	Y+20, r25	; 0x14
    265e:	8b 8b       	std	Y+19, r24	; 0x13
    2660:	0f c0       	rjmp	.+30     	; 0x2680 <LCD_Command+0x2c0>
    2662:	89 e1       	ldi	r24, 0x19	; 25
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	9a 8b       	std	Y+18, r25	; 0x12
    2668:	89 8b       	std	Y+17, r24	; 0x11
    266a:	89 89       	ldd	r24, Y+17	; 0x11
    266c:	9a 89       	ldd	r25, Y+18	; 0x12
    266e:	01 97       	sbiw	r24, 0x01	; 1
    2670:	f1 f7       	brne	.-4      	; 0x266e <LCD_Command+0x2ae>
    2672:	9a 8b       	std	Y+18, r25	; 0x12
    2674:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2676:	8b 89       	ldd	r24, Y+19	; 0x13
    2678:	9c 89       	ldd	r25, Y+20	; 0x14
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	9c 8b       	std	Y+20, r25	; 0x14
    267e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2680:	8b 89       	ldd	r24, Y+19	; 0x13
    2682:	9c 89       	ldd	r25, Y+20	; 0x14
    2684:	00 97       	sbiw	r24, 0x00	; 0
    2686:	69 f7       	brne	.-38     	; 0x2662 <LCD_Command+0x2a2>
    2688:	14 c0       	rjmp	.+40     	; 0x26b2 <LCD_Command+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    268a:	6d 89       	ldd	r22, Y+21	; 0x15
    268c:	7e 89       	ldd	r23, Y+22	; 0x16
    268e:	8f 89       	ldd	r24, Y+23	; 0x17
    2690:	98 8d       	ldd	r25, Y+24	; 0x18
    2692:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	9c 8b       	std	Y+20, r25	; 0x14
    269c:	8b 8b       	std	Y+19, r24	; 0x13
    269e:	8b 89       	ldd	r24, Y+19	; 0x13
    26a0:	9c 89       	ldd	r25, Y+20	; 0x14
    26a2:	98 8b       	std	Y+16, r25	; 0x10
    26a4:	8f 87       	std	Y+15, r24	; 0x0f
    26a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    26a8:	98 89       	ldd	r25, Y+16	; 0x10
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	f1 f7       	brne	.-4      	; 0x26aa <LCD_Command+0x2ea>
    26ae:	98 8b       	std	Y+16, r25	; 0x10
    26b0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,0);
    26b2:	83 e4       	ldi	r24, 0x43	; 67
    26b4:	62 e0       	ldi	r22, 0x02	; 2
    26b6:	40 e0       	ldi	r20, 0x00	; 0
    26b8:	0e 94 2a 08 	call	0x1054	; 0x1054 <DIO_write_PIN>
    26bc:	80 e0       	ldi	r24, 0x00	; 0
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	a0 e8       	ldi	r26, 0x80	; 128
    26c2:	bf e3       	ldi	r27, 0x3F	; 63
    26c4:	8b 87       	std	Y+11, r24	; 0x0b
    26c6:	9c 87       	std	Y+12, r25	; 0x0c
    26c8:	ad 87       	std	Y+13, r26	; 0x0d
    26ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    26d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	4a e7       	ldi	r20, 0x7A	; 122
    26da:	53 e4       	ldi	r21, 0x43	; 67
    26dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	8f 83       	std	Y+7, r24	; 0x07
    26e6:	98 87       	std	Y+8, r25	; 0x08
    26e8:	a9 87       	std	Y+9, r26	; 0x09
    26ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26ec:	6f 81       	ldd	r22, Y+7	; 0x07
    26ee:	78 85       	ldd	r23, Y+8	; 0x08
    26f0:	89 85       	ldd	r24, Y+9	; 0x09
    26f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	40 e8       	ldi	r20, 0x80	; 128
    26fa:	5f e3       	ldi	r21, 0x3F	; 63
    26fc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2700:	88 23       	and	r24, r24
    2702:	2c f4       	brge	.+10     	; 0x270e <LCD_Command+0x34e>
		__ticks = 1;
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	9e 83       	std	Y+6, r25	; 0x06
    270a:	8d 83       	std	Y+5, r24	; 0x05
    270c:	3f c0       	rjmp	.+126    	; 0x278c <LCD_Command+0x3cc>
	else if (__tmp > 65535)
    270e:	6f 81       	ldd	r22, Y+7	; 0x07
    2710:	78 85       	ldd	r23, Y+8	; 0x08
    2712:	89 85       	ldd	r24, Y+9	; 0x09
    2714:	9a 85       	ldd	r25, Y+10	; 0x0a
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	3f ef       	ldi	r19, 0xFF	; 255
    271a:	4f e7       	ldi	r20, 0x7F	; 127
    271c:	57 e4       	ldi	r21, 0x47	; 71
    271e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2722:	18 16       	cp	r1, r24
    2724:	4c f5       	brge	.+82     	; 0x2778 <LCD_Command+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2726:	6b 85       	ldd	r22, Y+11	; 0x0b
    2728:	7c 85       	ldd	r23, Y+12	; 0x0c
    272a:	8d 85       	ldd	r24, Y+13	; 0x0d
    272c:	9e 85       	ldd	r25, Y+14	; 0x0e
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	40 e2       	ldi	r20, 0x20	; 32
    2734:	51 e4       	ldi	r21, 0x41	; 65
    2736:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	bc 01       	movw	r22, r24
    2740:	cd 01       	movw	r24, r26
    2742:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	9e 83       	std	Y+6, r25	; 0x06
    274c:	8d 83       	std	Y+5, r24	; 0x05
    274e:	0f c0       	rjmp	.+30     	; 0x276e <LCD_Command+0x3ae>
    2750:	89 e1       	ldi	r24, 0x19	; 25
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	9c 83       	std	Y+4, r25	; 0x04
    2756:	8b 83       	std	Y+3, r24	; 0x03
    2758:	8b 81       	ldd	r24, Y+3	; 0x03
    275a:	9c 81       	ldd	r25, Y+4	; 0x04
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	f1 f7       	brne	.-4      	; 0x275c <LCD_Command+0x39c>
    2760:	9c 83       	std	Y+4, r25	; 0x04
    2762:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2764:	8d 81       	ldd	r24, Y+5	; 0x05
    2766:	9e 81       	ldd	r25, Y+6	; 0x06
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	9e 83       	std	Y+6, r25	; 0x06
    276c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    276e:	8d 81       	ldd	r24, Y+5	; 0x05
    2770:	9e 81       	ldd	r25, Y+6	; 0x06
    2772:	00 97       	sbiw	r24, 0x00	; 0
    2774:	69 f7       	brne	.-38     	; 0x2750 <LCD_Command+0x390>
    2776:	14 c0       	rjmp	.+40     	; 0x27a0 <LCD_Command+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2778:	6f 81       	ldd	r22, Y+7	; 0x07
    277a:	78 85       	ldd	r23, Y+8	; 0x08
    277c:	89 85       	ldd	r24, Y+9	; 0x09
    277e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2780:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	9e 83       	std	Y+6, r25	; 0x06
    278a:	8d 83       	std	Y+5, r24	; 0x05
    278c:	8d 81       	ldd	r24, Y+5	; 0x05
    278e:	9e 81       	ldd	r25, Y+6	; 0x06
    2790:	9a 83       	std	Y+2, r25	; 0x02
    2792:	89 83       	std	Y+1, r24	; 0x01
    2794:	89 81       	ldd	r24, Y+1	; 0x01
    2796:	9a 81       	ldd	r25, Y+2	; 0x02
    2798:	01 97       	sbiw	r24, 0x01	; 1
    279a:	f1 f7       	brne	.-4      	; 0x2798 <LCD_Command+0x3d8>
    279c:	9a 83       	std	Y+2, r25	; 0x02
    279e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    27a0:	e9 96       	adiw	r28, 0x39	; 57
    27a2:	0f b6       	in	r0, 0x3f	; 63
    27a4:	f8 94       	cli
    27a6:	de bf       	out	0x3e, r29	; 62
    27a8:	0f be       	out	0x3f, r0	; 63
    27aa:	cd bf       	out	0x3d, r28	; 61
    27ac:	cf 91       	pop	r28
    27ae:	df 91       	pop	r29
    27b0:	08 95       	ret

000027b2 <LCD_init>:
void LCD_init(void)
{
    27b2:	df 93       	push	r29
    27b4:	cf 93       	push	r28
    27b6:	cd b7       	in	r28, 0x3d	; 61
    27b8:	de b7       	in	r29, 0x3e	; 62
    27ba:	2e 97       	sbiw	r28, 0x0e	; 14
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	f8 94       	cli
    27c0:	de bf       	out	0x3e, r29	; 62
    27c2:	0f be       	out	0x3f, r0	; 63
    27c4:	cd bf       	out	0x3d, r28	; 61
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	a8 e4       	ldi	r26, 0x48	; 72
    27cc:	b3 e4       	ldi	r27, 0x43	; 67
    27ce:	8b 87       	std	Y+11, r24	; 0x0b
    27d0:	9c 87       	std	Y+12, r25	; 0x0c
    27d2:	ad 87       	std	Y+13, r26	; 0x0d
    27d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27da:	8d 85       	ldd	r24, Y+13	; 0x0d
    27dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	4a e7       	ldi	r20, 0x7A	; 122
    27e4:	53 e4       	ldi	r21, 0x43	; 67
    27e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	8f 83       	std	Y+7, r24	; 0x07
    27f0:	98 87       	std	Y+8, r25	; 0x08
    27f2:	a9 87       	std	Y+9, r26	; 0x09
    27f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27f6:	6f 81       	ldd	r22, Y+7	; 0x07
    27f8:	78 85       	ldd	r23, Y+8	; 0x08
    27fa:	89 85       	ldd	r24, Y+9	; 0x09
    27fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	40 e8       	ldi	r20, 0x80	; 128
    2804:	5f e3       	ldi	r21, 0x3F	; 63
    2806:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    280a:	88 23       	and	r24, r24
    280c:	2c f4       	brge	.+10     	; 0x2818 <LCD_init+0x66>
		__ticks = 1;
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	9e 83       	std	Y+6, r25	; 0x06
    2814:	8d 83       	std	Y+5, r24	; 0x05
    2816:	3f c0       	rjmp	.+126    	; 0x2896 <LCD_init+0xe4>
	else if (__tmp > 65535)
    2818:	6f 81       	ldd	r22, Y+7	; 0x07
    281a:	78 85       	ldd	r23, Y+8	; 0x08
    281c:	89 85       	ldd	r24, Y+9	; 0x09
    281e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2820:	20 e0       	ldi	r18, 0x00	; 0
    2822:	3f ef       	ldi	r19, 0xFF	; 255
    2824:	4f e7       	ldi	r20, 0x7F	; 127
    2826:	57 e4       	ldi	r21, 0x47	; 71
    2828:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    282c:	18 16       	cp	r1, r24
    282e:	4c f5       	brge	.+82     	; 0x2882 <LCD_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2830:	6b 85       	ldd	r22, Y+11	; 0x0b
    2832:	7c 85       	ldd	r23, Y+12	; 0x0c
    2834:	8d 85       	ldd	r24, Y+13	; 0x0d
    2836:	9e 85       	ldd	r25, Y+14	; 0x0e
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	40 e2       	ldi	r20, 0x20	; 32
    283e:	51 e4       	ldi	r21, 0x41	; 65
    2840:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	bc 01       	movw	r22, r24
    284a:	cd 01       	movw	r24, r26
    284c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	9e 83       	std	Y+6, r25	; 0x06
    2856:	8d 83       	std	Y+5, r24	; 0x05
    2858:	0f c0       	rjmp	.+30     	; 0x2878 <LCD_init+0xc6>
    285a:	89 e1       	ldi	r24, 0x19	; 25
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	9c 83       	std	Y+4, r25	; 0x04
    2860:	8b 83       	std	Y+3, r24	; 0x03
    2862:	8b 81       	ldd	r24, Y+3	; 0x03
    2864:	9c 81       	ldd	r25, Y+4	; 0x04
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	f1 f7       	brne	.-4      	; 0x2866 <LCD_init+0xb4>
    286a:	9c 83       	std	Y+4, r25	; 0x04
    286c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286e:	8d 81       	ldd	r24, Y+5	; 0x05
    2870:	9e 81       	ldd	r25, Y+6	; 0x06
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	9e 83       	std	Y+6, r25	; 0x06
    2876:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2878:	8d 81       	ldd	r24, Y+5	; 0x05
    287a:	9e 81       	ldd	r25, Y+6	; 0x06
    287c:	00 97       	sbiw	r24, 0x00	; 0
    287e:	69 f7       	brne	.-38     	; 0x285a <LCD_init+0xa8>
    2880:	14 c0       	rjmp	.+40     	; 0x28aa <LCD_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2882:	6f 81       	ldd	r22, Y+7	; 0x07
    2884:	78 85       	ldd	r23, Y+8	; 0x08
    2886:	89 85       	ldd	r24, Y+9	; 0x09
    2888:	9a 85       	ldd	r25, Y+10	; 0x0a
    288a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	9e 83       	std	Y+6, r25	; 0x06
    2894:	8d 83       	std	Y+5, r24	; 0x05
    2896:	8d 81       	ldd	r24, Y+5	; 0x05
    2898:	9e 81       	ldd	r25, Y+6	; 0x06
    289a:	9a 83       	std	Y+2, r25	; 0x02
    289c:	89 83       	std	Y+1, r24	; 0x01
    289e:	89 81       	ldd	r24, Y+1	; 0x01
    28a0:	9a 81       	ldd	r25, Y+2	; 0x02
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	f1 f7       	brne	.-4      	; 0x28a2 <LCD_init+0xf0>
    28a6:	9a 83       	std	Y+2, r25	; 0x02
    28a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	DIO_setPINDir(LCD_ctrl_port,RS,out);
    28aa:	83 e4       	ldi	r24, 0x43	; 67
    28ac:	60 e0       	ldi	r22, 0x00	; 0
    28ae:	41 e0       	ldi	r20, 0x01	; 1
    28b0:	0e 94 46 07 	call	0xe8c	; 0xe8c <DIO_setPINDir>
	DIO_setPINDir(LCD_ctrl_port,RW,out);
    28b4:	83 e4       	ldi	r24, 0x43	; 67
    28b6:	61 e0       	ldi	r22, 0x01	; 1
    28b8:	41 e0       	ldi	r20, 0x01	; 1
    28ba:	0e 94 46 07 	call	0xe8c	; 0xe8c <DIO_setPINDir>
	DIO_setPINDir(LCD_ctrl_port,EN,out);
    28be:	83 e4       	ldi	r24, 0x43	; 67
    28c0:	62 e0       	ldi	r22, 0x02	; 2
    28c2:	41 e0       	ldi	r20, 0x01	; 1
    28c4:	0e 94 46 07 	call	0xe8c	; 0xe8c <DIO_setPINDir>
	DIO_write_high_nibbleDir(LCD_data_port,out);
    28c8:	84 e4       	ldi	r24, 0x44	; 68
    28ca:	61 e0       	ldi	r22, 0x01	; 1
    28cc:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <DIO_write_high_nibbleDir>
	LCD_Command(LCD_Cursor_reset);
    28d0:	82 e0       	ldi	r24, 0x02	; 2
    28d2:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <LCD_Command>
	LCD_Command(LCD_4bit_2line);
    28d6:	88 e2       	ldi	r24, 0x28	; 40
    28d8:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <LCD_Command>
	LCD_Command(LCD_displayOn_cursorOn);
    28dc:	8e e0       	ldi	r24, 0x0E	; 14
    28de:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <LCD_Command>
	LCD_Command(LCD_clear_cmd);
    28e2:	81 e0       	ldi	r24, 0x01	; 1
    28e4:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <LCD_Command>
}
    28e8:	2e 96       	adiw	r28, 0x0e	; 14
    28ea:	0f b6       	in	r0, 0x3f	; 63
    28ec:	f8 94       	cli
    28ee:	de bf       	out	0x3e, r29	; 62
    28f0:	0f be       	out	0x3f, r0	; 63
    28f2:	cd bf       	out	0x3d, r28	; 61
    28f4:	cf 91       	pop	r28
    28f6:	df 91       	pop	r29
    28f8:	08 95       	ret

000028fa <LCD_displayChar>:

void LCD_displayChar(uint8 data)
{
    28fa:	df 93       	push	r29
    28fc:	cf 93       	push	r28
    28fe:	cd b7       	in	r28, 0x3d	; 61
    2900:	de b7       	in	r29, 0x3e	; 62
    2902:	e9 97       	sbiw	r28, 0x39	; 57
    2904:	0f b6       	in	r0, 0x3f	; 63
    2906:	f8 94       	cli
    2908:	de bf       	out	0x3e, r29	; 62
    290a:	0f be       	out	0x3f, r0	; 63
    290c:	cd bf       	out	0x3d, r28	; 61
    290e:	89 af       	std	Y+57, r24	; 0x39
	DIO_write_PIN(LCD_ctrl_port,RS,1);
    2910:	83 e4       	ldi	r24, 0x43	; 67
    2912:	60 e0       	ldi	r22, 0x00	; 0
    2914:	41 e0       	ldi	r20, 0x01	; 1
    2916:	0e 94 2a 08 	call	0x1054	; 0x1054 <DIO_write_PIN>
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	a0 e8       	ldi	r26, 0x80	; 128
    2920:	bf e3       	ldi	r27, 0x3F	; 63
    2922:	8d ab       	std	Y+53, r24	; 0x35
    2924:	9e ab       	std	Y+54, r25	; 0x36
    2926:	af ab       	std	Y+55, r26	; 0x37
    2928:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    292a:	6d a9       	ldd	r22, Y+53	; 0x35
    292c:	7e a9       	ldd	r23, Y+54	; 0x36
    292e:	8f a9       	ldd	r24, Y+55	; 0x37
    2930:	98 ad       	ldd	r25, Y+56	; 0x38
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	4a e7       	ldi	r20, 0x7A	; 122
    2938:	53 e4       	ldi	r21, 0x43	; 67
    293a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	89 ab       	std	Y+49, r24	; 0x31
    2944:	9a ab       	std	Y+50, r25	; 0x32
    2946:	ab ab       	std	Y+51, r26	; 0x33
    2948:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    294a:	69 a9       	ldd	r22, Y+49	; 0x31
    294c:	7a a9       	ldd	r23, Y+50	; 0x32
    294e:	8b a9       	ldd	r24, Y+51	; 0x33
    2950:	9c a9       	ldd	r25, Y+52	; 0x34
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	40 e8       	ldi	r20, 0x80	; 128
    2958:	5f e3       	ldi	r21, 0x3F	; 63
    295a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    295e:	88 23       	and	r24, r24
    2960:	2c f4       	brge	.+10     	; 0x296c <LCD_displayChar+0x72>
		__ticks = 1;
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	98 ab       	std	Y+48, r25	; 0x30
    2968:	8f a7       	std	Y+47, r24	; 0x2f
    296a:	3f c0       	rjmp	.+126    	; 0x29ea <LCD_displayChar+0xf0>
	else if (__tmp > 65535)
    296c:	69 a9       	ldd	r22, Y+49	; 0x31
    296e:	7a a9       	ldd	r23, Y+50	; 0x32
    2970:	8b a9       	ldd	r24, Y+51	; 0x33
    2972:	9c a9       	ldd	r25, Y+52	; 0x34
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	3f ef       	ldi	r19, 0xFF	; 255
    2978:	4f e7       	ldi	r20, 0x7F	; 127
    297a:	57 e4       	ldi	r21, 0x47	; 71
    297c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2980:	18 16       	cp	r1, r24
    2982:	4c f5       	brge	.+82     	; 0x29d6 <LCD_displayChar+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2984:	6d a9       	ldd	r22, Y+53	; 0x35
    2986:	7e a9       	ldd	r23, Y+54	; 0x36
    2988:	8f a9       	ldd	r24, Y+55	; 0x37
    298a:	98 ad       	ldd	r25, Y+56	; 0x38
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	40 e2       	ldi	r20, 0x20	; 32
    2992:	51 e4       	ldi	r21, 0x41	; 65
    2994:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	bc 01       	movw	r22, r24
    299e:	cd 01       	movw	r24, r26
    29a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	98 ab       	std	Y+48, r25	; 0x30
    29aa:	8f a7       	std	Y+47, r24	; 0x2f
    29ac:	0f c0       	rjmp	.+30     	; 0x29cc <LCD_displayChar+0xd2>
    29ae:	89 e1       	ldi	r24, 0x19	; 25
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	9e a7       	std	Y+46, r25	; 0x2e
    29b4:	8d a7       	std	Y+45, r24	; 0x2d
    29b6:	8d a5       	ldd	r24, Y+45	; 0x2d
    29b8:	9e a5       	ldd	r25, Y+46	; 0x2e
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	f1 f7       	brne	.-4      	; 0x29ba <LCD_displayChar+0xc0>
    29be:	9e a7       	std	Y+46, r25	; 0x2e
    29c0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    29c4:	98 a9       	ldd	r25, Y+48	; 0x30
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	98 ab       	std	Y+48, r25	; 0x30
    29ca:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ce:	98 a9       	ldd	r25, Y+48	; 0x30
    29d0:	00 97       	sbiw	r24, 0x00	; 0
    29d2:	69 f7       	brne	.-38     	; 0x29ae <LCD_displayChar+0xb4>
    29d4:	14 c0       	rjmp	.+40     	; 0x29fe <LCD_displayChar+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d6:	69 a9       	ldd	r22, Y+49	; 0x31
    29d8:	7a a9       	ldd	r23, Y+50	; 0x32
    29da:	8b a9       	ldd	r24, Y+51	; 0x33
    29dc:	9c a9       	ldd	r25, Y+52	; 0x34
    29de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	98 ab       	std	Y+48, r25	; 0x30
    29e8:	8f a7       	std	Y+47, r24	; 0x2f
    29ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ec:	98 a9       	ldd	r25, Y+48	; 0x30
    29ee:	9c a7       	std	Y+44, r25	; 0x2c
    29f0:	8b a7       	std	Y+43, r24	; 0x2b
    29f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    29f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    29f6:	01 97       	sbiw	r24, 0x01	; 1
    29f8:	f1 f7       	brne	.-4      	; 0x29f6 <LCD_displayChar+0xfc>
    29fa:	9c a7       	std	Y+44, r25	; 0x2c
    29fc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,1);
    29fe:	83 e4       	ldi	r24, 0x43	; 67
    2a00:	62 e0       	ldi	r22, 0x02	; 2
    2a02:	41 e0       	ldi	r20, 0x01	; 1
    2a04:	0e 94 2a 08 	call	0x1054	; 0x1054 <DIO_write_PIN>
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	a0 e8       	ldi	r26, 0x80	; 128
    2a0e:	bf e3       	ldi	r27, 0x3F	; 63
    2a10:	8f a3       	std	Y+39, r24	; 0x27
    2a12:	98 a7       	std	Y+40, r25	; 0x28
    2a14:	a9 a7       	std	Y+41, r26	; 0x29
    2a16:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a18:	6f a1       	ldd	r22, Y+39	; 0x27
    2a1a:	78 a5       	ldd	r23, Y+40	; 0x28
    2a1c:	89 a5       	ldd	r24, Y+41	; 0x29
    2a1e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	4a e7       	ldi	r20, 0x7A	; 122
    2a26:	53 e4       	ldi	r21, 0x43	; 67
    2a28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	8b a3       	std	Y+35, r24	; 0x23
    2a32:	9c a3       	std	Y+36, r25	; 0x24
    2a34:	ad a3       	std	Y+37, r26	; 0x25
    2a36:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a38:	6b a1       	ldd	r22, Y+35	; 0x23
    2a3a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	40 e8       	ldi	r20, 0x80	; 128
    2a46:	5f e3       	ldi	r21, 0x3F	; 63
    2a48:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2a4c:	88 23       	and	r24, r24
    2a4e:	2c f4       	brge	.+10     	; 0x2a5a <LCD_displayChar+0x160>
		__ticks = 1;
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	9a a3       	std	Y+34, r25	; 0x22
    2a56:	89 a3       	std	Y+33, r24	; 0x21
    2a58:	3f c0       	rjmp	.+126    	; 0x2ad8 <LCD_displayChar+0x1de>
	else if (__tmp > 65535)
    2a5a:	6b a1       	ldd	r22, Y+35	; 0x23
    2a5c:	7c a1       	ldd	r23, Y+36	; 0x24
    2a5e:	8d a1       	ldd	r24, Y+37	; 0x25
    2a60:	9e a1       	ldd	r25, Y+38	; 0x26
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	3f ef       	ldi	r19, 0xFF	; 255
    2a66:	4f e7       	ldi	r20, 0x7F	; 127
    2a68:	57 e4       	ldi	r21, 0x47	; 71
    2a6a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2a6e:	18 16       	cp	r1, r24
    2a70:	4c f5       	brge	.+82     	; 0x2ac4 <LCD_displayChar+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a72:	6f a1       	ldd	r22, Y+39	; 0x27
    2a74:	78 a5       	ldd	r23, Y+40	; 0x28
    2a76:	89 a5       	ldd	r24, Y+41	; 0x29
    2a78:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	40 e2       	ldi	r20, 0x20	; 32
    2a80:	51 e4       	ldi	r21, 0x41	; 65
    2a82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	bc 01       	movw	r22, r24
    2a8c:	cd 01       	movw	r24, r26
    2a8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	9a a3       	std	Y+34, r25	; 0x22
    2a98:	89 a3       	std	Y+33, r24	; 0x21
    2a9a:	0f c0       	rjmp	.+30     	; 0x2aba <LCD_displayChar+0x1c0>
    2a9c:	89 e1       	ldi	r24, 0x19	; 25
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	98 a3       	std	Y+32, r25	; 0x20
    2aa2:	8f 8f       	std	Y+31, r24	; 0x1f
    2aa4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2aa6:	98 a1       	ldd	r25, Y+32	; 0x20
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	f1 f7       	brne	.-4      	; 0x2aa8 <LCD_displayChar+0x1ae>
    2aac:	98 a3       	std	Y+32, r25	; 0x20
    2aae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ab2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	9a a3       	std	Y+34, r25	; 0x22
    2ab8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aba:	89 a1       	ldd	r24, Y+33	; 0x21
    2abc:	9a a1       	ldd	r25, Y+34	; 0x22
    2abe:	00 97       	sbiw	r24, 0x00	; 0
    2ac0:	69 f7       	brne	.-38     	; 0x2a9c <LCD_displayChar+0x1a2>
    2ac2:	14 c0       	rjmp	.+40     	; 0x2aec <LCD_displayChar+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ac6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ac8:	8d a1       	ldd	r24, Y+37	; 0x25
    2aca:	9e a1       	ldd	r25, Y+38	; 0x26
    2acc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	9a a3       	std	Y+34, r25	; 0x22
    2ad6:	89 a3       	std	Y+33, r24	; 0x21
    2ad8:	89 a1       	ldd	r24, Y+33	; 0x21
    2ada:	9a a1       	ldd	r25, Y+34	; 0x22
    2adc:	9e 8f       	std	Y+30, r25	; 0x1e
    2ade:	8d 8f       	std	Y+29, r24	; 0x1d
    2ae0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ae2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ae4:	01 97       	sbiw	r24, 0x01	; 1
    2ae6:	f1 f7       	brne	.-4      	; 0x2ae4 <LCD_displayChar+0x1ea>
    2ae8:	9e 8f       	std	Y+30, r25	; 0x1e
    2aea:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_write_high_nibble(LCD_data_port,HIGH_NIBBLE_OF(data));
    2aec:	89 ad       	ldd	r24, Y+57	; 0x39
    2aee:	98 2f       	mov	r25, r24
    2af0:	92 95       	swap	r25
    2af2:	9f 70       	andi	r25, 0x0F	; 15
    2af4:	84 e4       	ldi	r24, 0x44	; 68
    2af6:	69 2f       	mov	r22, r25
    2af8:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <DIO_write_high_nibble>
	LCD_refresh();
    2afc:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_refresh>
	DIO_write_high_nibble(LCD_data_port,data);
    2b00:	84 e4       	ldi	r24, 0x44	; 68
    2b02:	69 ad       	ldd	r22, Y+57	; 0x39
    2b04:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <DIO_write_high_nibble>
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	a0 e8       	ldi	r26, 0x80	; 128
    2b0e:	bf e3       	ldi	r27, 0x3F	; 63
    2b10:	89 8f       	std	Y+25, r24	; 0x19
    2b12:	9a 8f       	std	Y+26, r25	; 0x1a
    2b14:	ab 8f       	std	Y+27, r26	; 0x1b
    2b16:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b18:	69 8d       	ldd	r22, Y+25	; 0x19
    2b1a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b1c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b1e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	4a e7       	ldi	r20, 0x7A	; 122
    2b26:	53 e4       	ldi	r21, 0x43	; 67
    2b28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	8d 8b       	std	Y+21, r24	; 0x15
    2b32:	9e 8b       	std	Y+22, r25	; 0x16
    2b34:	af 8b       	std	Y+23, r26	; 0x17
    2b36:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b38:	6d 89       	ldd	r22, Y+21	; 0x15
    2b3a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b3c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b3e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	40 e8       	ldi	r20, 0x80	; 128
    2b46:	5f e3       	ldi	r21, 0x3F	; 63
    2b48:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2b4c:	88 23       	and	r24, r24
    2b4e:	2c f4       	brge	.+10     	; 0x2b5a <LCD_displayChar+0x260>
		__ticks = 1;
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	9c 8b       	std	Y+20, r25	; 0x14
    2b56:	8b 8b       	std	Y+19, r24	; 0x13
    2b58:	3f c0       	rjmp	.+126    	; 0x2bd8 <LCD_displayChar+0x2de>
	else if (__tmp > 65535)
    2b5a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b5c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b5e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b60:	98 8d       	ldd	r25, Y+24	; 0x18
    2b62:	20 e0       	ldi	r18, 0x00	; 0
    2b64:	3f ef       	ldi	r19, 0xFF	; 255
    2b66:	4f e7       	ldi	r20, 0x7F	; 127
    2b68:	57 e4       	ldi	r21, 0x47	; 71
    2b6a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2b6e:	18 16       	cp	r1, r24
    2b70:	4c f5       	brge	.+82     	; 0x2bc4 <LCD_displayChar+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b72:	69 8d       	ldd	r22, Y+25	; 0x19
    2b74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	30 e0       	ldi	r19, 0x00	; 0
    2b7e:	40 e2       	ldi	r20, 0x20	; 32
    2b80:	51 e4       	ldi	r21, 0x41	; 65
    2b82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b86:	dc 01       	movw	r26, r24
    2b88:	cb 01       	movw	r24, r22
    2b8a:	bc 01       	movw	r22, r24
    2b8c:	cd 01       	movw	r24, r26
    2b8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	9c 8b       	std	Y+20, r25	; 0x14
    2b98:	8b 8b       	std	Y+19, r24	; 0x13
    2b9a:	0f c0       	rjmp	.+30     	; 0x2bba <LCD_displayChar+0x2c0>
    2b9c:	89 e1       	ldi	r24, 0x19	; 25
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	9a 8b       	std	Y+18, r25	; 0x12
    2ba2:	89 8b       	std	Y+17, r24	; 0x11
    2ba4:	89 89       	ldd	r24, Y+17	; 0x11
    2ba6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	f1 f7       	brne	.-4      	; 0x2ba8 <LCD_displayChar+0x2ae>
    2bac:	9a 8b       	std	Y+18, r25	; 0x12
    2bae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb0:	8b 89       	ldd	r24, Y+19	; 0x13
    2bb2:	9c 89       	ldd	r25, Y+20	; 0x14
    2bb4:	01 97       	sbiw	r24, 0x01	; 1
    2bb6:	9c 8b       	std	Y+20, r25	; 0x14
    2bb8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bba:	8b 89       	ldd	r24, Y+19	; 0x13
    2bbc:	9c 89       	ldd	r25, Y+20	; 0x14
    2bbe:	00 97       	sbiw	r24, 0x00	; 0
    2bc0:	69 f7       	brne	.-38     	; 0x2b9c <LCD_displayChar+0x2a2>
    2bc2:	14 c0       	rjmp	.+40     	; 0x2bec <LCD_displayChar+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc4:	6d 89       	ldd	r22, Y+21	; 0x15
    2bc6:	7e 89       	ldd	r23, Y+22	; 0x16
    2bc8:	8f 89       	ldd	r24, Y+23	; 0x17
    2bca:	98 8d       	ldd	r25, Y+24	; 0x18
    2bcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	9c 8b       	std	Y+20, r25	; 0x14
    2bd6:	8b 8b       	std	Y+19, r24	; 0x13
    2bd8:	8b 89       	ldd	r24, Y+19	; 0x13
    2bda:	9c 89       	ldd	r25, Y+20	; 0x14
    2bdc:	98 8b       	std	Y+16, r25	; 0x10
    2bde:	8f 87       	std	Y+15, r24	; 0x0f
    2be0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2be2:	98 89       	ldd	r25, Y+16	; 0x10
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	f1 f7       	brne	.-4      	; 0x2be4 <LCD_displayChar+0x2ea>
    2be8:	98 8b       	std	Y+16, r25	; 0x10
    2bea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,0);
    2bec:	83 e4       	ldi	r24, 0x43	; 67
    2bee:	62 e0       	ldi	r22, 0x02	; 2
    2bf0:	40 e0       	ldi	r20, 0x00	; 0
    2bf2:	0e 94 2a 08 	call	0x1054	; 0x1054 <DIO_write_PIN>
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	a0 e8       	ldi	r26, 0x80	; 128
    2bfc:	bf e3       	ldi	r27, 0x3F	; 63
    2bfe:	8b 87       	std	Y+11, r24	; 0x0b
    2c00:	9c 87       	std	Y+12, r25	; 0x0c
    2c02:	ad 87       	std	Y+13, r26	; 0x0d
    2c04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c06:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c08:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	4a e7       	ldi	r20, 0x7A	; 122
    2c14:	53 e4       	ldi	r21, 0x43	; 67
    2c16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	8f 83       	std	Y+7, r24	; 0x07
    2c20:	98 87       	std	Y+8, r25	; 0x08
    2c22:	a9 87       	std	Y+9, r26	; 0x09
    2c24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c26:	6f 81       	ldd	r22, Y+7	; 0x07
    2c28:	78 85       	ldd	r23, Y+8	; 0x08
    2c2a:	89 85       	ldd	r24, Y+9	; 0x09
    2c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	40 e8       	ldi	r20, 0x80	; 128
    2c34:	5f e3       	ldi	r21, 0x3F	; 63
    2c36:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c3a:	88 23       	and	r24, r24
    2c3c:	2c f4       	brge	.+10     	; 0x2c48 <LCD_displayChar+0x34e>
		__ticks = 1;
    2c3e:	81 e0       	ldi	r24, 0x01	; 1
    2c40:	90 e0       	ldi	r25, 0x00	; 0
    2c42:	9e 83       	std	Y+6, r25	; 0x06
    2c44:	8d 83       	std	Y+5, r24	; 0x05
    2c46:	3f c0       	rjmp	.+126    	; 0x2cc6 <LCD_displayChar+0x3cc>
	else if (__tmp > 65535)
    2c48:	6f 81       	ldd	r22, Y+7	; 0x07
    2c4a:	78 85       	ldd	r23, Y+8	; 0x08
    2c4c:	89 85       	ldd	r24, Y+9	; 0x09
    2c4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	3f ef       	ldi	r19, 0xFF	; 255
    2c54:	4f e7       	ldi	r20, 0x7F	; 127
    2c56:	57 e4       	ldi	r21, 0x47	; 71
    2c58:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2c5c:	18 16       	cp	r1, r24
    2c5e:	4c f5       	brge	.+82     	; 0x2cb2 <LCD_displayChar+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c60:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c62:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c64:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c66:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c68:	20 e0       	ldi	r18, 0x00	; 0
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	40 e2       	ldi	r20, 0x20	; 32
    2c6e:	51 e4       	ldi	r21, 0x41	; 65
    2c70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	bc 01       	movw	r22, r24
    2c7a:	cd 01       	movw	r24, r26
    2c7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	9e 83       	std	Y+6, r25	; 0x06
    2c86:	8d 83       	std	Y+5, r24	; 0x05
    2c88:	0f c0       	rjmp	.+30     	; 0x2ca8 <LCD_displayChar+0x3ae>
    2c8a:	89 e1       	ldi	r24, 0x19	; 25
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	9c 83       	std	Y+4, r25	; 0x04
    2c90:	8b 83       	std	Y+3, r24	; 0x03
    2c92:	8b 81       	ldd	r24, Y+3	; 0x03
    2c94:	9c 81       	ldd	r25, Y+4	; 0x04
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	f1 f7       	brne	.-4      	; 0x2c96 <LCD_displayChar+0x39c>
    2c9a:	9c 83       	std	Y+4, r25	; 0x04
    2c9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	9e 83       	std	Y+6, r25	; 0x06
    2ca6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    2caa:	9e 81       	ldd	r25, Y+6	; 0x06
    2cac:	00 97       	sbiw	r24, 0x00	; 0
    2cae:	69 f7       	brne	.-38     	; 0x2c8a <LCD_displayChar+0x390>
    2cb0:	14 c0       	rjmp	.+40     	; 0x2cda <LCD_displayChar+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb4:	78 85       	ldd	r23, Y+8	; 0x08
    2cb6:	89 85       	ldd	r24, Y+9	; 0x09
    2cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	9e 83       	std	Y+6, r25	; 0x06
    2cc4:	8d 83       	std	Y+5, r24	; 0x05
    2cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cca:	9a 83       	std	Y+2, r25	; 0x02
    2ccc:	89 83       	std	Y+1, r24	; 0x01
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	f1 f7       	brne	.-4      	; 0x2cd2 <LCD_displayChar+0x3d8>
    2cd6:	9a 83       	std	Y+2, r25	; 0x02
    2cd8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2cda:	e9 96       	adiw	r28, 0x39	; 57
    2cdc:	0f b6       	in	r0, 0x3f	; 63
    2cde:	f8 94       	cli
    2ce0:	de bf       	out	0x3e, r29	; 62
    2ce2:	0f be       	out	0x3f, r0	; 63
    2ce4:	cd bf       	out	0x3d, r28	; 61
    2ce6:	cf 91       	pop	r28
    2ce8:	df 91       	pop	r29
    2cea:	08 95       	ret

00002cec <LCD_displayString>:


void LCD_displayString(const char *str)
{
    2cec:	df 93       	push	r29
    2cee:	cf 93       	push	r28
    2cf0:	00 d0       	rcall	.+0      	; 0x2cf2 <LCD_displayString+0x6>
    2cf2:	0f 92       	push	r0
    2cf4:	cd b7       	in	r28, 0x3d	; 61
    2cf6:	de b7       	in	r29, 0x3e	; 62
    2cf8:	9b 83       	std	Y+3, r25	; 0x03
    2cfa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2cfc:	19 82       	std	Y+1, r1	; 0x01
    2cfe:	0e c0       	rjmp	.+28     	; 0x2d1c <LCD_displayString+0x30>
	while(str[i]!='\0')
	{
		LCD_displayChar(str[i]);
    2d00:	89 81       	ldd	r24, Y+1	; 0x01
    2d02:	28 2f       	mov	r18, r24
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	8a 81       	ldd	r24, Y+2	; 0x02
    2d08:	9b 81       	ldd	r25, Y+3	; 0x03
    2d0a:	fc 01       	movw	r30, r24
    2d0c:	e2 0f       	add	r30, r18
    2d0e:	f3 1f       	adc	r31, r19
    2d10:	80 81       	ld	r24, Z
    2d12:	0e 94 7d 14 	call	0x28fa	; 0x28fa <LCD_displayChar>
		i++;
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
    2d18:	8f 5f       	subi	r24, 0xFF	; 255
    2d1a:	89 83       	std	Y+1, r24	; 0x01


void LCD_displayString(const char *str)
{
	uint8 i=0;
	while(str[i]!='\0')
    2d1c:	89 81       	ldd	r24, Y+1	; 0x01
    2d1e:	28 2f       	mov	r18, r24
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	8a 81       	ldd	r24, Y+2	; 0x02
    2d24:	9b 81       	ldd	r25, Y+3	; 0x03
    2d26:	fc 01       	movw	r30, r24
    2d28:	e2 0f       	add	r30, r18
    2d2a:	f3 1f       	adc	r31, r19
    2d2c:	80 81       	ld	r24, Z
    2d2e:	88 23       	and	r24, r24
    2d30:	39 f7       	brne	.-50     	; 0x2d00 <LCD_displayString+0x14>
	{
		LCD_displayChar(str[i]);
		i++;
	}

}
    2d32:	0f 90       	pop	r0
    2d34:	0f 90       	pop	r0
    2d36:	0f 90       	pop	r0
    2d38:	cf 91       	pop	r28
    2d3a:	df 91       	pop	r29
    2d3c:	08 95       	ret

00002d3e <LCD_MoveTo_Row_Column>:


void LCD_MoveTo_Row_Column(uint8 row, uint8 col)
{
    2d3e:	df 93       	push	r29
    2d40:	cf 93       	push	r28
    2d42:	00 d0       	rcall	.+0      	; 0x2d44 <LCD_MoveTo_Row_Column+0x6>
    2d44:	00 d0       	rcall	.+0      	; 0x2d46 <LCD_MoveTo_Row_Column+0x8>
    2d46:	0f 92       	push	r0
    2d48:	cd b7       	in	r28, 0x3d	; 61
    2d4a:	de b7       	in	r29, 0x3e	; 62
    2d4c:	8a 83       	std	Y+2, r24	; 0x02
    2d4e:	6b 83       	std	Y+3, r22	; 0x03
	// The position is COL+ROW
	uint8 position;

	switch(row)
    2d50:	8a 81       	ldd	r24, Y+2	; 0x02
    2d52:	28 2f       	mov	r18, r24
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	3d 83       	std	Y+5, r19	; 0x05
    2d58:	2c 83       	std	Y+4, r18	; 0x04
    2d5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d5c:	9d 81       	ldd	r25, Y+5	; 0x05
    2d5e:	00 97       	sbiw	r24, 0x00	; 0
    2d60:	31 f0       	breq	.+12     	; 0x2d6e <LCD_MoveTo_Row_Column+0x30>
    2d62:	2c 81       	ldd	r18, Y+4	; 0x04
    2d64:	3d 81       	ldd	r19, Y+5	; 0x05
    2d66:	21 30       	cpi	r18, 0x01	; 1
    2d68:	31 05       	cpc	r19, r1
    2d6a:	21 f0       	breq	.+8      	; 0x2d74 <LCD_MoveTo_Row_Column+0x36>
    2d6c:	06 c0       	rjmp	.+12     	; 0x2d7a <LCD_MoveTo_Row_Column+0x3c>
	{
		case 0:
			position=col;
    2d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d70:	89 83       	std	Y+1, r24	; 0x01
    2d72:	03 c0       	rjmp	.+6      	; 0x2d7a <LCD_MoveTo_Row_Column+0x3c>
			break;
		case 1:
			position=col+0x40;
    2d74:	8b 81       	ldd	r24, Y+3	; 0x03
    2d76:	80 5c       	subi	r24, 0xC0	; 192
    2d78:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	LCD_Command(position|LCD_Cursor_move_to);
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	80 68       	ori	r24, 0x80	; 128
    2d7e:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <LCD_Command>
}
    2d82:	0f 90       	pop	r0
    2d84:	0f 90       	pop	r0
    2d86:	0f 90       	pop	r0
    2d88:	0f 90       	pop	r0
    2d8a:	0f 90       	pop	r0
    2d8c:	cf 91       	pop	r28
    2d8e:	df 91       	pop	r29
    2d90:	08 95       	ret

00002d92 <LCD_display_String_Row_Column>:


void LCD_display_String_Row_Column(uint8 row,uint8 col, const char *str)
{
    2d92:	df 93       	push	r29
    2d94:	cf 93       	push	r28
    2d96:	00 d0       	rcall	.+0      	; 0x2d98 <LCD_display_String_Row_Column+0x6>
    2d98:	00 d0       	rcall	.+0      	; 0x2d9a <LCD_display_String_Row_Column+0x8>
    2d9a:	cd b7       	in	r28, 0x3d	; 61
    2d9c:	de b7       	in	r29, 0x3e	; 62
    2d9e:	89 83       	std	Y+1, r24	; 0x01
    2da0:	6a 83       	std	Y+2, r22	; 0x02
    2da2:	5c 83       	std	Y+4, r21	; 0x04
    2da4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_MoveTo_Row_Column(row,col);
    2da6:	89 81       	ldd	r24, Y+1	; 0x01
    2da8:	6a 81       	ldd	r22, Y+2	; 0x02
    2daa:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <LCD_MoveTo_Row_Column>
	LCD_displayString(str);
    2dae:	8b 81       	ldd	r24, Y+3	; 0x03
    2db0:	9c 81       	ldd	r25, Y+4	; 0x04
    2db2:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_displayString>

}
    2db6:	0f 90       	pop	r0
    2db8:	0f 90       	pop	r0
    2dba:	0f 90       	pop	r0
    2dbc:	0f 90       	pop	r0
    2dbe:	cf 91       	pop	r28
    2dc0:	df 91       	pop	r29
    2dc2:	08 95       	ret

00002dc4 <LCD_Clear>:



void LCD_Clear(void)
{
    2dc4:	df 93       	push	r29
    2dc6:	cf 93       	push	r28
    2dc8:	cd b7       	in	r28, 0x3d	; 61
    2dca:	de b7       	in	r29, 0x3e	; 62
	LCD_Command(LCD_clear_cmd);
    2dcc:	81 e0       	ldi	r24, 0x01	; 1
    2dce:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <LCD_Command>
}
    2dd2:	cf 91       	pop	r28
    2dd4:	df 91       	pop	r29
    2dd6:	08 95       	ret

00002dd8 <LCD_integerToString>:



void LCD_integerToString(uint8 data)
{
    2dd8:	df 93       	push	r29
    2dda:	cf 93       	push	r28
    2ddc:	cd b7       	in	r28, 0x3d	; 61
    2dde:	de b7       	in	r29, 0x3e	; 62
    2de0:	61 97       	sbiw	r28, 0x11	; 17
    2de2:	0f b6       	in	r0, 0x3f	; 63
    2de4:	f8 94       	cli
    2de6:	de bf       	out	0x3e, r29	; 62
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	cd bf       	out	0x3d, r28	; 61
    2dec:	89 8b       	std	Y+17, r24	; 0x11

	char buff[16];
	itoa(data,buff,10);
    2dee:	89 89       	ldd	r24, Y+17	; 0x11
    2df0:	88 2f       	mov	r24, r24
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	9e 01       	movw	r18, r28
    2df6:	2f 5f       	subi	r18, 0xFF	; 255
    2df8:	3f 4f       	sbci	r19, 0xFF	; 255
    2dfa:	b9 01       	movw	r22, r18
    2dfc:	4a e0       	ldi	r20, 0x0A	; 10
    2dfe:	50 e0       	ldi	r21, 0x00	; 0
    2e00:	0e 94 d6 17 	call	0x2fac	; 0x2fac <itoa>
	LCD_displayString( buff );
    2e04:	ce 01       	movw	r24, r28
    2e06:	01 96       	adiw	r24, 0x01	; 1
    2e08:	0e 94 76 16 	call	0x2cec	; 0x2cec <LCD_displayString>
}
    2e0c:	61 96       	adiw	r28, 0x11	; 17
    2e0e:	0f b6       	in	r0, 0x3f	; 63
    2e10:	f8 94       	cli
    2e12:	de bf       	out	0x3e, r29	; 62
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	cd bf       	out	0x3d, r28	; 61
    2e18:	cf 91       	pop	r28
    2e1a:	df 91       	pop	r29
    2e1c:	08 95       	ret

00002e1e <LCD_display_int>:


void LCD_display_int(uint8 data)
{
    2e1e:	df 93       	push	r29
    2e20:	cf 93       	push	r28
    2e22:	cd b7       	in	r28, 0x3d	; 61
    2e24:	de b7       	in	r29, 0x3e	; 62
    2e26:	2f 97       	sbiw	r28, 0x0f	; 15
    2e28:	0f b6       	in	r0, 0x3f	; 63
    2e2a:	f8 94       	cli
    2e2c:	de bf       	out	0x3e, r29	; 62
    2e2e:	0f be       	out	0x3f, r0	; 63
    2e30:	cd bf       	out	0x3d, r28	; 61
    2e32:	8f 87       	std	Y+15, r24	; 0x0f
	/* if any switch pressed for more than 500 ms it counts more than one press */
	if((data <= 9) && (data >= 0))
    2e34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e36:	8a 30       	cpi	r24, 0x0A	; 10
    2e38:	20 f4       	brcc	.+8      	; 0x2e42 <LCD_display_int+0x24>
	{
		LCD_integerToString(data); /* display the pressed keypad switch */
    2e3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e3c:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <LCD_integerToString>
    2e40:	03 c0       	rjmp	.+6      	; 0x2e48 <LCD_display_int+0x2a>
	}
	else
	{
		LCD_displayChar(data); /* display the pressed keypad switch */
    2e42:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e44:	0e 94 7d 14 	call	0x28fa	; 0x28fa <LCD_displayChar>
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	aa ef       	ldi	r26, 0xFA	; 250
    2e4e:	b3 e4       	ldi	r27, 0x43	; 67
    2e50:	8b 87       	std	Y+11, r24	; 0x0b
    2e52:	9c 87       	std	Y+12, r25	; 0x0c
    2e54:	ad 87       	std	Y+13, r26	; 0x0d
    2e56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	4a e7       	ldi	r20, 0x7A	; 122
    2e66:	53 e4       	ldi	r21, 0x43	; 67
    2e68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	8f 83       	std	Y+7, r24	; 0x07
    2e72:	98 87       	std	Y+8, r25	; 0x08
    2e74:	a9 87       	std	Y+9, r26	; 0x09
    2e76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e78:	6f 81       	ldd	r22, Y+7	; 0x07
    2e7a:	78 85       	ldd	r23, Y+8	; 0x08
    2e7c:	89 85       	ldd	r24, Y+9	; 0x09
    2e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	40 e8       	ldi	r20, 0x80	; 128
    2e86:	5f e3       	ldi	r21, 0x3F	; 63
    2e88:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e8c:	88 23       	and	r24, r24
    2e8e:	2c f4       	brge	.+10     	; 0x2e9a <LCD_display_int+0x7c>
		__ticks = 1;
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	9e 83       	std	Y+6, r25	; 0x06
    2e96:	8d 83       	std	Y+5, r24	; 0x05
    2e98:	3f c0       	rjmp	.+126    	; 0x2f18 <LCD_display_int+0xfa>
	else if (__tmp > 65535)
    2e9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e9c:	78 85       	ldd	r23, Y+8	; 0x08
    2e9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	3f ef       	ldi	r19, 0xFF	; 255
    2ea6:	4f e7       	ldi	r20, 0x7F	; 127
    2ea8:	57 e4       	ldi	r21, 0x47	; 71
    2eaa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2eae:	18 16       	cp	r1, r24
    2eb0:	4c f5       	brge	.+82     	; 0x2f04 <LCD_display_int+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	40 e2       	ldi	r20, 0x20	; 32
    2ec0:	51 e4       	ldi	r21, 0x41	; 65
    2ec2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	bc 01       	movw	r22, r24
    2ecc:	cd 01       	movw	r24, r26
    2ece:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ed2:	dc 01       	movw	r26, r24
    2ed4:	cb 01       	movw	r24, r22
    2ed6:	9e 83       	std	Y+6, r25	; 0x06
    2ed8:	8d 83       	std	Y+5, r24	; 0x05
    2eda:	0f c0       	rjmp	.+30     	; 0x2efa <LCD_display_int+0xdc>
    2edc:	89 e1       	ldi	r24, 0x19	; 25
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	9c 83       	std	Y+4, r25	; 0x04
    2ee2:	8b 83       	std	Y+3, r24	; 0x03
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	f1 f7       	brne	.-4      	; 0x2ee8 <LCD_display_int+0xca>
    2eec:	9c 83       	std	Y+4, r25	; 0x04
    2eee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef4:	01 97       	sbiw	r24, 0x01	; 1
    2ef6:	9e 83       	std	Y+6, r25	; 0x06
    2ef8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efa:	8d 81       	ldd	r24, Y+5	; 0x05
    2efc:	9e 81       	ldd	r25, Y+6	; 0x06
    2efe:	00 97       	sbiw	r24, 0x00	; 0
    2f00:	69 f7       	brne	.-38     	; 0x2edc <LCD_display_int+0xbe>
    2f02:	14 c0       	rjmp	.+40     	; 0x2f2c <LCD_display_int+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f04:	6f 81       	ldd	r22, Y+7	; 0x07
    2f06:	78 85       	ldd	r23, Y+8	; 0x08
    2f08:	89 85       	ldd	r24, Y+9	; 0x09
    2f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	9e 83       	std	Y+6, r25	; 0x06
    2f16:	8d 83       	std	Y+5, r24	; 0x05
    2f18:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1c:	9a 83       	std	Y+2, r25	; 0x02
    2f1e:	89 83       	std	Y+1, r24	; 0x01
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	9a 81       	ldd	r25, Y+2	; 0x02
    2f24:	01 97       	sbiw	r24, 0x01	; 1
    2f26:	f1 f7       	brne	.-4      	; 0x2f24 <LCD_display_int+0x106>
    2f28:	9a 83       	std	Y+2, r25	; 0x02
    2f2a:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(500); /* Press time */

}
    2f2c:	2f 96       	adiw	r28, 0x0f	; 15
    2f2e:	0f b6       	in	r0, 0x3f	; 63
    2f30:	f8 94       	cli
    2f32:	de bf       	out	0x3e, r29	; 62
    2f34:	0f be       	out	0x3f, r0	; 63
    2f36:	cd bf       	out	0x3d, r28	; 61
    2f38:	cf 91       	pop	r28
    2f3a:	df 91       	pop	r29
    2f3c:	08 95       	ret

00002f3e <__prologue_saves__>:
    2f3e:	2f 92       	push	r2
    2f40:	3f 92       	push	r3
    2f42:	4f 92       	push	r4
    2f44:	5f 92       	push	r5
    2f46:	6f 92       	push	r6
    2f48:	7f 92       	push	r7
    2f4a:	8f 92       	push	r8
    2f4c:	9f 92       	push	r9
    2f4e:	af 92       	push	r10
    2f50:	bf 92       	push	r11
    2f52:	cf 92       	push	r12
    2f54:	df 92       	push	r13
    2f56:	ef 92       	push	r14
    2f58:	ff 92       	push	r15
    2f5a:	0f 93       	push	r16
    2f5c:	1f 93       	push	r17
    2f5e:	cf 93       	push	r28
    2f60:	df 93       	push	r29
    2f62:	cd b7       	in	r28, 0x3d	; 61
    2f64:	de b7       	in	r29, 0x3e	; 62
    2f66:	ca 1b       	sub	r28, r26
    2f68:	db 0b       	sbc	r29, r27
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	f8 94       	cli
    2f6e:	de bf       	out	0x3e, r29	; 62
    2f70:	0f be       	out	0x3f, r0	; 63
    2f72:	cd bf       	out	0x3d, r28	; 61
    2f74:	09 94       	ijmp

00002f76 <__epilogue_restores__>:
    2f76:	2a 88       	ldd	r2, Y+18	; 0x12
    2f78:	39 88       	ldd	r3, Y+17	; 0x11
    2f7a:	48 88       	ldd	r4, Y+16	; 0x10
    2f7c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f7e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f80:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f82:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f84:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f86:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f88:	b9 84       	ldd	r11, Y+9	; 0x09
    2f8a:	c8 84       	ldd	r12, Y+8	; 0x08
    2f8c:	df 80       	ldd	r13, Y+7	; 0x07
    2f8e:	ee 80       	ldd	r14, Y+6	; 0x06
    2f90:	fd 80       	ldd	r15, Y+5	; 0x05
    2f92:	0c 81       	ldd	r16, Y+4	; 0x04
    2f94:	1b 81       	ldd	r17, Y+3	; 0x03
    2f96:	aa 81       	ldd	r26, Y+2	; 0x02
    2f98:	b9 81       	ldd	r27, Y+1	; 0x01
    2f9a:	ce 0f       	add	r28, r30
    2f9c:	d1 1d       	adc	r29, r1
    2f9e:	0f b6       	in	r0, 0x3f	; 63
    2fa0:	f8 94       	cli
    2fa2:	de bf       	out	0x3e, r29	; 62
    2fa4:	0f be       	out	0x3f, r0	; 63
    2fa6:	cd bf       	out	0x3d, r28	; 61
    2fa8:	ed 01       	movw	r28, r26
    2faa:	08 95       	ret

00002fac <itoa>:
    2fac:	fb 01       	movw	r30, r22
    2fae:	9f 01       	movw	r18, r30
    2fb0:	e8 94       	clt
    2fb2:	42 30       	cpi	r20, 0x02	; 2
    2fb4:	c4 f0       	brlt	.+48     	; 0x2fe6 <itoa+0x3a>
    2fb6:	45 32       	cpi	r20, 0x25	; 37
    2fb8:	b4 f4       	brge	.+44     	; 0x2fe6 <itoa+0x3a>
    2fba:	4a 30       	cpi	r20, 0x0A	; 10
    2fbc:	29 f4       	brne	.+10     	; 0x2fc8 <itoa+0x1c>
    2fbe:	97 fb       	bst	r25, 7
    2fc0:	1e f4       	brtc	.+6      	; 0x2fc8 <itoa+0x1c>
    2fc2:	90 95       	com	r25
    2fc4:	81 95       	neg	r24
    2fc6:	9f 4f       	sbci	r25, 0xFF	; 255
    2fc8:	64 2f       	mov	r22, r20
    2fca:	77 27       	eor	r23, r23
    2fcc:	0e 94 07 18 	call	0x300e	; 0x300e <__udivmodhi4>
    2fd0:	80 5d       	subi	r24, 0xD0	; 208
    2fd2:	8a 33       	cpi	r24, 0x3A	; 58
    2fd4:	0c f0       	brlt	.+2      	; 0x2fd8 <itoa+0x2c>
    2fd6:	89 5d       	subi	r24, 0xD9	; 217
    2fd8:	81 93       	st	Z+, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	00 97       	sbiw	r24, 0x00	; 0
    2fde:	a1 f7       	brne	.-24     	; 0x2fc8 <itoa+0x1c>
    2fe0:	16 f4       	brtc	.+4      	; 0x2fe6 <itoa+0x3a>
    2fe2:	5d e2       	ldi	r21, 0x2D	; 45
    2fe4:	51 93       	st	Z+, r21
    2fe6:	10 82       	st	Z, r1
    2fe8:	c9 01       	movw	r24, r18
    2fea:	0c 94 f7 17 	jmp	0x2fee	; 0x2fee <strrev>

00002fee <strrev>:
    2fee:	dc 01       	movw	r26, r24
    2ff0:	fc 01       	movw	r30, r24
    2ff2:	67 2f       	mov	r22, r23
    2ff4:	71 91       	ld	r23, Z+
    2ff6:	77 23       	and	r23, r23
    2ff8:	e1 f7       	brne	.-8      	; 0x2ff2 <strrev+0x4>
    2ffa:	32 97       	sbiw	r30, 0x02	; 2
    2ffc:	04 c0       	rjmp	.+8      	; 0x3006 <strrev+0x18>
    2ffe:	7c 91       	ld	r23, X
    3000:	6d 93       	st	X+, r22
    3002:	70 83       	st	Z, r23
    3004:	62 91       	ld	r22, -Z
    3006:	ae 17       	cp	r26, r30
    3008:	bf 07       	cpc	r27, r31
    300a:	c8 f3       	brcs	.-14     	; 0x2ffe <strrev+0x10>
    300c:	08 95       	ret

0000300e <__udivmodhi4>:
    300e:	aa 1b       	sub	r26, r26
    3010:	bb 1b       	sub	r27, r27
    3012:	51 e1       	ldi	r21, 0x11	; 17
    3014:	07 c0       	rjmp	.+14     	; 0x3024 <__udivmodhi4_ep>

00003016 <__udivmodhi4_loop>:
    3016:	aa 1f       	adc	r26, r26
    3018:	bb 1f       	adc	r27, r27
    301a:	a6 17       	cp	r26, r22
    301c:	b7 07       	cpc	r27, r23
    301e:	10 f0       	brcs	.+4      	; 0x3024 <__udivmodhi4_ep>
    3020:	a6 1b       	sub	r26, r22
    3022:	b7 0b       	sbc	r27, r23

00003024 <__udivmodhi4_ep>:
    3024:	88 1f       	adc	r24, r24
    3026:	99 1f       	adc	r25, r25
    3028:	5a 95       	dec	r21
    302a:	a9 f7       	brne	.-22     	; 0x3016 <__udivmodhi4_loop>
    302c:	80 95       	com	r24
    302e:	90 95       	com	r25
    3030:	bc 01       	movw	r22, r24
    3032:	cd 01       	movw	r24, r26
    3034:	08 95       	ret

00003036 <_exit>:
    3036:	f8 94       	cli

00003038 <__stop_program>:
    3038:	ff cf       	rjmp	.-2      	; 0x3038 <__stop_program>
