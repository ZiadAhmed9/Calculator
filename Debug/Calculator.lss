
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000364a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000364a  000036de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800068  00800068  000036e6  2**0
                  ALLOC
  3 .stab         00002808  00000000  00000000  000036e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d41  00000000  00000000  00005ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006c31  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006d71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a7c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a924  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000abb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b37f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a8 37       	cpi	r26, 0x78	; 120
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea e4       	ldi	r30, 0x4A	; 74
      78:	f6 e3       	ldi	r31, 0x36	; 54
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 23 1b 	jmp	0x3646	; 0x3646 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cf 1a 	jmp	0x359e	; 0x359e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cf 1a 	jmp	0x359e	; 0x359e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c3 1a 	jmp	0x3586	; 0x3586 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cf 1a 	jmp	0x359e	; 0x359e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cf 1a 	jmp	0x359e	; 0x359e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cf 1a 	jmp	0x359e	; 0x359e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void restart(void);

volatile uint32 op1,op2,operation,check;

int main(void)
{
     b46:	ef 92       	push	r14
     b48:	ff 92       	push	r15
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	df 93       	push	r29
     b50:	cf 93       	push	r28
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
	check=0;
     b56:	10 92 70 00 	sts	0x0070, r1
     b5a:	10 92 71 00 	sts	0x0071, r1
     b5e:	10 92 72 00 	sts	0x0072, r1
     b62:	10 92 73 00 	sts	0x0073, r1
	LCD_init();
     b66:	0e 94 a0 16 	call	0x2d40	; 0x2d40 <LCD_init>
	KeyPad_init();
     b6a:	0e 94 9b 11 	call	0x2336	; 0x2336 <KeyPad_init>
	GET_OP1();
     b6e:	0e 94 09 08 	call	0x1012	; 0x1012 <GET_OP1>

	if(check==1)
     b72:	80 91 70 00 	lds	r24, 0x0070
     b76:	90 91 71 00 	lds	r25, 0x0071
     b7a:	a0 91 72 00 	lds	r26, 0x0072
     b7e:	b0 91 73 00 	lds	r27, 0x0073
     b82:	81 30       	cpi	r24, 0x01	; 1
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	11 f4       	brne	.+4      	; 0xb90 <main+0x4a>
	{
		main();
     b8c:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
	}

//	GET_OPERATION();

	GET_OP2();
     b90:	0e 94 17 09 	call	0x122e	; 0x122e <GET_OP2>

	if(check==1)
     b94:	80 91 70 00 	lds	r24, 0x0070
     b98:	90 91 71 00 	lds	r25, 0x0071
     b9c:	a0 91 72 00 	lds	r26, 0x0072
     ba0:	b0 91 73 00 	lds	r27, 0x0073
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	91 05       	cpc	r25, r1
     ba8:	a1 05       	cpc	r26, r1
     baa:	b1 05       	cpc	r27, r1
     bac:	11 f4       	brne	.+4      	; 0xbb2 <main+0x6c>
	{
		main();
     bae:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
	}

	LCD_Clear();
     bb2:	0e 94 a9 19 	call	0x3352	; 0x3352 <LCD_Clear>

	calc(operation,op1,op2);
     bb6:	80 91 6c 00 	lds	r24, 0x006C
     bba:	90 91 6d 00 	lds	r25, 0x006D
     bbe:	a0 91 6e 00 	lds	r26, 0x006E
     bc2:	b0 91 6f 00 	lds	r27, 0x006F
     bc6:	20 91 74 00 	lds	r18, 0x0074
     bca:	30 91 75 00 	lds	r19, 0x0075
     bce:	40 91 76 00 	lds	r20, 0x0076
     bd2:	50 91 77 00 	lds	r21, 0x0077
     bd6:	e0 90 68 00 	lds	r14, 0x0068
     bda:	f0 90 69 00 	lds	r15, 0x0069
     bde:	00 91 6a 00 	lds	r16, 0x006A
     be2:	10 91 6b 00 	lds	r17, 0x006B
     be6:	ba 01       	movw	r22, r20
     be8:	a9 01       	movw	r20, r18
     bea:	98 01       	movw	r18, r16
     bec:	87 01       	movw	r16, r14
     bee:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <calc>
     bf2:	ff cf       	rjmp	.-2      	; 0xbf2 <main+0xac>

00000bf4 <calc>:

	}
}

void calc(uint8 operation,uint32 op1,uint32 op2)
{
     bf4:	0f 93       	push	r16
     bf6:	1f 93       	push	r17
     bf8:	df 93       	push	r29
     bfa:	cf 93       	push	r28
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	2f 97       	sbiw	r28, 0x0f	; 15
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	f8 94       	cli
     c06:	de bf       	out	0x3e, r29	; 62
     c08:	0f be       	out	0x3f, r0	; 63
     c0a:	cd bf       	out	0x3d, r28	; 61
     c0c:	8d 83       	std	Y+5, r24	; 0x05
     c0e:	4e 83       	std	Y+6, r20	; 0x06
     c10:	5f 83       	std	Y+7, r21	; 0x07
     c12:	68 87       	std	Y+8, r22	; 0x08
     c14:	79 87       	std	Y+9, r23	; 0x09
     c16:	0a 87       	std	Y+10, r16	; 0x0a
     c18:	1b 87       	std	Y+11, r17	; 0x0b
     c1a:	2c 87       	std	Y+12, r18	; 0x0c
     c1c:	3d 87       	std	Y+13, r19	; 0x0d
	uint32 result;
	switch(operation)
     c1e:	8d 81       	ldd	r24, Y+5	; 0x05
     c20:	28 2f       	mov	r18, r24
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	3f 87       	std	Y+15, r19	; 0x0f
     c26:	2e 87       	std	Y+14, r18	; 0x0e
     c28:	8e 85       	ldd	r24, Y+14	; 0x0e
     c2a:	9f 85       	ldd	r25, Y+15	; 0x0f
     c2c:	8b 32       	cpi	r24, 0x2B	; 43
     c2e:	91 05       	cpc	r25, r1
     c30:	b1 f0       	breq	.+44     	; 0xc5e <calc+0x6a>
     c32:	2e 85       	ldd	r18, Y+14	; 0x0e
     c34:	3f 85       	ldd	r19, Y+15	; 0x0f
     c36:	2c 32       	cpi	r18, 0x2C	; 44
     c38:	31 05       	cpc	r19, r1
     c3a:	34 f4       	brge	.+12     	; 0xc48 <calc+0x54>
     c3c:	8e 85       	ldd	r24, Y+14	; 0x0e
     c3e:	9f 85       	ldd	r25, Y+15	; 0x0f
     c40:	8a 32       	cpi	r24, 0x2A	; 42
     c42:	91 05       	cpc	r25, r1
     c44:	71 f1       	breq	.+92     	; 0xca2 <calc+0xae>
     c46:	52 c0       	rjmp	.+164    	; 0xcec <calc+0xf8>
     c48:	2e 85       	ldd	r18, Y+14	; 0x0e
     c4a:	3f 85       	ldd	r19, Y+15	; 0x0f
     c4c:	2d 32       	cpi	r18, 0x2D	; 45
     c4e:	31 05       	cpc	r19, r1
     c50:	b9 f0       	breq	.+46     	; 0xc80 <calc+0x8c>
     c52:	8e 85       	ldd	r24, Y+14	; 0x0e
     c54:	9f 85       	ldd	r25, Y+15	; 0x0f
     c56:	8f 32       	cpi	r24, 0x2F	; 47
     c58:	91 05       	cpc	r25, r1
     c5a:	b1 f1       	breq	.+108    	; 0xcc8 <calc+0xd4>
     c5c:	47 c0       	rjmp	.+142    	; 0xcec <calc+0xf8>
	{
	case '+' :
		result=op1+op2;
     c5e:	8e 81       	ldd	r24, Y+6	; 0x06
     c60:	9f 81       	ldd	r25, Y+7	; 0x07
     c62:	a8 85       	ldd	r26, Y+8	; 0x08
     c64:	b9 85       	ldd	r27, Y+9	; 0x09
     c66:	2a 85       	ldd	r18, Y+10	; 0x0a
     c68:	3b 85       	ldd	r19, Y+11	; 0x0b
     c6a:	4c 85       	ldd	r20, Y+12	; 0x0c
     c6c:	5d 85       	ldd	r21, Y+13	; 0x0d
     c6e:	82 0f       	add	r24, r18
     c70:	93 1f       	adc	r25, r19
     c72:	a4 1f       	adc	r26, r20
     c74:	b5 1f       	adc	r27, r21
     c76:	89 83       	std	Y+1, r24	; 0x01
     c78:	9a 83       	std	Y+2, r25	; 0x02
     c7a:	ab 83       	std	Y+3, r26	; 0x03
     c7c:	bc 83       	std	Y+4, r27	; 0x04
     c7e:	36 c0       	rjmp	.+108    	; 0xcec <calc+0xf8>
		break;
	case '-' :
		result=op1-op2;
     c80:	8e 81       	ldd	r24, Y+6	; 0x06
     c82:	9f 81       	ldd	r25, Y+7	; 0x07
     c84:	a8 85       	ldd	r26, Y+8	; 0x08
     c86:	b9 85       	ldd	r27, Y+9	; 0x09
     c88:	2a 85       	ldd	r18, Y+10	; 0x0a
     c8a:	3b 85       	ldd	r19, Y+11	; 0x0b
     c8c:	4c 85       	ldd	r20, Y+12	; 0x0c
     c8e:	5d 85       	ldd	r21, Y+13	; 0x0d
     c90:	82 1b       	sub	r24, r18
     c92:	93 0b       	sbc	r25, r19
     c94:	a4 0b       	sbc	r26, r20
     c96:	b5 0b       	sbc	r27, r21
     c98:	89 83       	std	Y+1, r24	; 0x01
     c9a:	9a 83       	std	Y+2, r25	; 0x02
     c9c:	ab 83       	std	Y+3, r26	; 0x03
     c9e:	bc 83       	std	Y+4, r27	; 0x04
     ca0:	25 c0       	rjmp	.+74     	; 0xcec <calc+0xf8>
		break;
	case '*' :
		result=op1*op2;
     ca2:	8e 81       	ldd	r24, Y+6	; 0x06
     ca4:	9f 81       	ldd	r25, Y+7	; 0x07
     ca6:	a8 85       	ldd	r26, Y+8	; 0x08
     ca8:	b9 85       	ldd	r27, Y+9	; 0x09
     caa:	2a 85       	ldd	r18, Y+10	; 0x0a
     cac:	3b 85       	ldd	r19, Y+11	; 0x0b
     cae:	4c 85       	ldd	r20, Y+12	; 0x0c
     cb0:	5d 85       	ldd	r21, Y+13	; 0x0d
     cb2:	bc 01       	movw	r22, r24
     cb4:	cd 01       	movw	r24, r26
     cb6:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__mulsi3>
     cba:	dc 01       	movw	r26, r24
     cbc:	cb 01       	movw	r24, r22
     cbe:	89 83       	std	Y+1, r24	; 0x01
     cc0:	9a 83       	std	Y+2, r25	; 0x02
     cc2:	ab 83       	std	Y+3, r26	; 0x03
     cc4:	bc 83       	std	Y+4, r27	; 0x04
     cc6:	12 c0       	rjmp	.+36     	; 0xcec <calc+0xf8>
		break;
	case '/' :
		result=op1/op2;
     cc8:	8e 81       	ldd	r24, Y+6	; 0x06
     cca:	9f 81       	ldd	r25, Y+7	; 0x07
     ccc:	a8 85       	ldd	r26, Y+8	; 0x08
     cce:	b9 85       	ldd	r27, Y+9	; 0x09
     cd0:	2a 85       	ldd	r18, Y+10	; 0x0a
     cd2:	3b 85       	ldd	r19, Y+11	; 0x0b
     cd4:	4c 85       	ldd	r20, Y+12	; 0x0c
     cd6:	5d 85       	ldd	r21, Y+13	; 0x0d
     cd8:	bc 01       	movw	r22, r24
     cda:	cd 01       	movw	r24, r26
     cdc:	0e 94 85 1a 	call	0x350a	; 0x350a <__udivmodsi4>
     ce0:	da 01       	movw	r26, r20
     ce2:	c9 01       	movw	r24, r18
     ce4:	89 83       	std	Y+1, r24	; 0x01
     ce6:	9a 83       	std	Y+2, r25	; 0x02
     ce8:	ab 83       	std	Y+3, r26	; 0x03
     cea:	bc 83       	std	Y+4, r27	; 0x04
		break;
	}
	if(result>=0&&result<10)
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	9a 81       	ldd	r25, Y+2	; 0x02
     cf0:	ab 81       	ldd	r26, Y+3	; 0x03
     cf2:	bc 81       	ldd	r27, Y+4	; 0x04
     cf4:	8a 30       	cpi	r24, 0x0A	; 10
     cf6:	91 05       	cpc	r25, r1
     cf8:	a1 05       	cpc	r26, r1
     cfa:	b1 05       	cpc	r27, r1
     cfc:	20 f4       	brcc	.+8      	; 0xd06 <calc+0x112>
	{
		LCD_display_int(result);
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_display_int>
     d04:	7b c1       	rjmp	.+758    	; 0xffc <calc+0x408>
	}
	else if(result>=10&&result<100)
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	9a 81       	ldd	r25, Y+2	; 0x02
     d0a:	ab 81       	ldd	r26, Y+3	; 0x03
     d0c:	bc 81       	ldd	r27, Y+4	; 0x04
     d0e:	8a 30       	cpi	r24, 0x0A	; 10
     d10:	91 05       	cpc	r25, r1
     d12:	a1 05       	cpc	r26, r1
     d14:	b1 05       	cpc	r27, r1
     d16:	50 f1       	brcs	.+84     	; 0xd6c <calc+0x178>
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	9a 81       	ldd	r25, Y+2	; 0x02
     d1c:	ab 81       	ldd	r26, Y+3	; 0x03
     d1e:	bc 81       	ldd	r27, Y+4	; 0x04
     d20:	84 36       	cpi	r24, 0x64	; 100
     d22:	91 05       	cpc	r25, r1
     d24:	a1 05       	cpc	r26, r1
     d26:	b1 05       	cpc	r27, r1
     d28:	08 f5       	brcc	.+66     	; 0xd6c <calc+0x178>
	{
		LCD_display_int(result/10);
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	9a 81       	ldd	r25, Y+2	; 0x02
     d2e:	ab 81       	ldd	r26, Y+3	; 0x03
     d30:	bc 81       	ldd	r27, Y+4	; 0x04
     d32:	2a e0       	ldi	r18, 0x0A	; 10
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	40 e0       	ldi	r20, 0x00	; 0
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	0e 94 85 1a 	call	0x350a	; 0x350a <__udivmodsi4>
     d42:	da 01       	movw	r26, r20
     d44:	c9 01       	movw	r24, r18
     d46:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_display_int>
		LCD_display_int(result%10);
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	9a 81       	ldd	r25, Y+2	; 0x02
     d4e:	ab 81       	ldd	r26, Y+3	; 0x03
     d50:	bc 81       	ldd	r27, Y+4	; 0x04
     d52:	2a e0       	ldi	r18, 0x0A	; 10
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	40 e0       	ldi	r20, 0x00	; 0
     d58:	50 e0       	ldi	r21, 0x00	; 0
     d5a:	bc 01       	movw	r22, r24
     d5c:	cd 01       	movw	r24, r26
     d5e:	0e 94 85 1a 	call	0x350a	; 0x350a <__udivmodsi4>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_display_int>
     d6a:	48 c1       	rjmp	.+656    	; 0xffc <calc+0x408>
	}
	else if(result>=100&&result<1000)
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	9a 81       	ldd	r25, Y+2	; 0x02
     d70:	ab 81       	ldd	r26, Y+3	; 0x03
     d72:	bc 81       	ldd	r27, Y+4	; 0x04
     d74:	84 36       	cpi	r24, 0x64	; 100
     d76:	91 05       	cpc	r25, r1
     d78:	a1 05       	cpc	r26, r1
     d7a:	b1 05       	cpc	r27, r1
     d7c:	08 f4       	brcc	.+2      	; 0xd80 <calc+0x18c>
     d7e:	47 c0       	rjmp	.+142    	; 0xe0e <calc+0x21a>
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	9a 81       	ldd	r25, Y+2	; 0x02
     d84:	ab 81       	ldd	r26, Y+3	; 0x03
     d86:	bc 81       	ldd	r27, Y+4	; 0x04
     d88:	88 3e       	cpi	r24, 0xE8	; 232
     d8a:	23 e0       	ldi	r18, 0x03	; 3
     d8c:	92 07       	cpc	r25, r18
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	a2 07       	cpc	r26, r18
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	b2 07       	cpc	r27, r18
     d96:	d8 f5       	brcc	.+118    	; 0xe0e <calc+0x21a>
	{
		LCD_display_int(result/100);
     d98:	89 81       	ldd	r24, Y+1	; 0x01
     d9a:	9a 81       	ldd	r25, Y+2	; 0x02
     d9c:	ab 81       	ldd	r26, Y+3	; 0x03
     d9e:	bc 81       	ldd	r27, Y+4	; 0x04
     da0:	24 e6       	ldi	r18, 0x64	; 100
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	40 e0       	ldi	r20, 0x00	; 0
     da6:	50 e0       	ldi	r21, 0x00	; 0
     da8:	bc 01       	movw	r22, r24
     daa:	cd 01       	movw	r24, r26
     dac:	0e 94 85 1a 	call	0x350a	; 0x350a <__udivmodsi4>
     db0:	da 01       	movw	r26, r20
     db2:	c9 01       	movw	r24, r18
     db4:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_display_int>
		LCD_display_int((result/10)%10);
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	9a 81       	ldd	r25, Y+2	; 0x02
     dbc:	ab 81       	ldd	r26, Y+3	; 0x03
     dbe:	bc 81       	ldd	r27, Y+4	; 0x04
     dc0:	2a e0       	ldi	r18, 0x0A	; 10
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	40 e0       	ldi	r20, 0x00	; 0
     dc6:	50 e0       	ldi	r21, 0x00	; 0
     dc8:	bc 01       	movw	r22, r24
     dca:	cd 01       	movw	r24, r26
     dcc:	0e 94 85 1a 	call	0x350a	; 0x350a <__udivmodsi4>
     dd0:	da 01       	movw	r26, r20
     dd2:	c9 01       	movw	r24, r18
     dd4:	2a e0       	ldi	r18, 0x0A	; 10
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 e0       	ldi	r20, 0x00	; 0
     dda:	50 e0       	ldi	r21, 0x00	; 0
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	0e 94 85 1a 	call	0x350a	; 0x350a <__udivmodsi4>
     de4:	dc 01       	movw	r26, r24
     de6:	cb 01       	movw	r24, r22
     de8:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_display_int>
		LCD_display_int(result%10);
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	9a 81       	ldd	r25, Y+2	; 0x02
     df0:	ab 81       	ldd	r26, Y+3	; 0x03
     df2:	bc 81       	ldd	r27, Y+4	; 0x04
     df4:	2a e0       	ldi	r18, 0x0A	; 10
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	40 e0       	ldi	r20, 0x00	; 0
     dfa:	50 e0       	ldi	r21, 0x00	; 0
     dfc:	bc 01       	movw	r22, r24
     dfe:	cd 01       	movw	r24, r26
     e00:	0e 94 85 1a 	call	0x350a	; 0x350a <__udivmodsi4>
     e04:	dc 01       	movw	r26, r24
     e06:	cb 01       	movw	r24, r22
     e08:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_display_int>
     e0c:	f7 c0       	rjmp	.+494    	; 0xffc <calc+0x408>
	}
	else if(result>=1000&&result<10000)
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	9a 81       	ldd	r25, Y+2	; 0x02
     e12:	ab 81       	ldd	r26, Y+3	; 0x03
     e14:	bc 81       	ldd	r27, Y+4	; 0x04
     e16:	88 3e       	cpi	r24, 0xE8	; 232
     e18:	33 e0       	ldi	r19, 0x03	; 3
     e1a:	93 07       	cpc	r25, r19
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	a3 07       	cpc	r26, r19
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	b3 07       	cpc	r27, r19
     e24:	08 f4       	brcc	.+2      	; 0xe28 <calc+0x234>
     e26:	62 c0       	rjmp	.+196    	; 0xeec <calc+0x2f8>
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	9a 81       	ldd	r25, Y+2	; 0x02
     e2c:	ab 81       	ldd	r26, Y+3	; 0x03
     e2e:	bc 81       	ldd	r27, Y+4	; 0x04
     e30:	80 31       	cpi	r24, 0x10	; 16
     e32:	27 e2       	ldi	r18, 0x27	; 39
     e34:	92 07       	cpc	r25, r18
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	a2 07       	cpc	r26, r18
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	b2 07       	cpc	r27, r18
     e3e:	08 f0       	brcs	.+2      	; 0xe42 <calc+0x24e>
     e40:	55 c0       	rjmp	.+170    	; 0xeec <calc+0x2f8>
	{
		LCD_display_int(result/1000);
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	9a 81       	ldd	r25, Y+2	; 0x02
     e46:	ab 81       	ldd	r26, Y+3	; 0x03
     e48:	bc 81       	ldd	r27, Y+4	; 0x04
     e4a:	28 ee       	ldi	r18, 0xE8	; 232
     e4c:	33 e0       	ldi	r19, 0x03	; 3
     e4e:	40 e0       	ldi	r20, 0x00	; 0
     e50:	50 e0       	ldi	r21, 0x00	; 0
     e52:	bc 01       	movw	r22, r24
     e54:	cd 01       	movw	r24, r26
     e56:	0e 94 85 1a 	call	0x350a	; 0x350a <__udivmodsi4>
     e5a:	da 01       	movw	r26, r20
     e5c:	c9 01       	movw	r24, r18
     e5e:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_display_int>
		LCD_display_int((result/100)%10);
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	9a 81       	ldd	r25, Y+2	; 0x02
     e66:	ab 81       	ldd	r26, Y+3	; 0x03
     e68:	bc 81       	ldd	r27, Y+4	; 0x04
     e6a:	24 e6       	ldi	r18, 0x64	; 100
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	bc 01       	movw	r22, r24
     e74:	cd 01       	movw	r24, r26
     e76:	0e 94 85 1a 	call	0x350a	; 0x350a <__udivmodsi4>
     e7a:	da 01       	movw	r26, r20
     e7c:	c9 01       	movw	r24, r18
     e7e:	2a e0       	ldi	r18, 0x0A	; 10
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 e0       	ldi	r20, 0x00	; 0
     e84:	50 e0       	ldi	r21, 0x00	; 0
     e86:	bc 01       	movw	r22, r24
     e88:	cd 01       	movw	r24, r26
     e8a:	0e 94 85 1a 	call	0x350a	; 0x350a <__udivmodsi4>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_display_int>
		LCD_display_int((result/10)%10);
     e96:	89 81       	ldd	r24, Y+1	; 0x01
     e98:	9a 81       	ldd	r25, Y+2	; 0x02
     e9a:	ab 81       	ldd	r26, Y+3	; 0x03
     e9c:	bc 81       	ldd	r27, Y+4	; 0x04
     e9e:	2a e0       	ldi	r18, 0x0A	; 10
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	50 e0       	ldi	r21, 0x00	; 0
     ea6:	bc 01       	movw	r22, r24
     ea8:	cd 01       	movw	r24, r26
     eaa:	0e 94 85 1a 	call	0x350a	; 0x350a <__udivmodsi4>
     eae:	da 01       	movw	r26, r20
     eb0:	c9 01       	movw	r24, r18
     eb2:	2a e0       	ldi	r18, 0x0A	; 10
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	50 e0       	ldi	r21, 0x00	; 0
     eba:	bc 01       	movw	r22, r24
     ebc:	cd 01       	movw	r24, r26
     ebe:	0e 94 85 1a 	call	0x350a	; 0x350a <__udivmodsi4>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_display_int>
		LCD_display_int(result%10);
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	ab 81       	ldd	r26, Y+3	; 0x03
     ed0:	bc 81       	ldd	r27, Y+4	; 0x04
     ed2:	2a e0       	ldi	r18, 0x0A	; 10
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e0       	ldi	r20, 0x00	; 0
     ed8:	50 e0       	ldi	r21, 0x00	; 0
     eda:	bc 01       	movw	r22, r24
     edc:	cd 01       	movw	r24, r26
     ede:	0e 94 85 1a 	call	0x350a	; 0x350a <__udivmodsi4>
     ee2:	dc 01       	movw	r26, r24
     ee4:	cb 01       	movw	r24, r22
     ee6:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_display_int>
     eea:	88 c0       	rjmp	.+272    	; 0xffc <calc+0x408>

	}
	else if(result>=10000&&result<100000)
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	9a 81       	ldd	r25, Y+2	; 0x02
     ef0:	ab 81       	ldd	r26, Y+3	; 0x03
     ef2:	bc 81       	ldd	r27, Y+4	; 0x04
     ef4:	80 31       	cpi	r24, 0x10	; 16
     ef6:	37 e2       	ldi	r19, 0x27	; 39
     ef8:	93 07       	cpc	r25, r19
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	a3 07       	cpc	r26, r19
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	b3 07       	cpc	r27, r19
     f02:	08 f4       	brcc	.+2      	; 0xf06 <calc+0x312>
     f04:	7b c0       	rjmp	.+246    	; 0xffc <calc+0x408>
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	9a 81       	ldd	r25, Y+2	; 0x02
     f0a:	ab 81       	ldd	r26, Y+3	; 0x03
     f0c:	bc 81       	ldd	r27, Y+4	; 0x04
     f0e:	80 3a       	cpi	r24, 0xA0	; 160
     f10:	26 e8       	ldi	r18, 0x86	; 134
     f12:	92 07       	cpc	r25, r18
     f14:	21 e0       	ldi	r18, 0x01	; 1
     f16:	a2 07       	cpc	r26, r18
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	b2 07       	cpc	r27, r18
     f1c:	08 f0       	brcs	.+2      	; 0xf20 <calc+0x32c>
     f1e:	6e c0       	rjmp	.+220    	; 0xffc <calc+0x408>
	{
		LCD_display_int(result/10000);
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	9a 81       	ldd	r25, Y+2	; 0x02
     f24:	ab 81       	ldd	r26, Y+3	; 0x03
     f26:	bc 81       	ldd	r27, Y+4	; 0x04
     f28:	20 e1       	ldi	r18, 0x10	; 16
     f2a:	37 e2       	ldi	r19, 0x27	; 39
     f2c:	40 e0       	ldi	r20, 0x00	; 0
     f2e:	50 e0       	ldi	r21, 0x00	; 0
     f30:	bc 01       	movw	r22, r24
     f32:	cd 01       	movw	r24, r26
     f34:	0e 94 85 1a 	call	0x350a	; 0x350a <__udivmodsi4>
     f38:	da 01       	movw	r26, r20
     f3a:	c9 01       	movw	r24, r18
     f3c:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_display_int>
		LCD_display_int((result/1000)%10);
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	9a 81       	ldd	r25, Y+2	; 0x02
     f44:	ab 81       	ldd	r26, Y+3	; 0x03
     f46:	bc 81       	ldd	r27, Y+4	; 0x04
     f48:	28 ee       	ldi	r18, 0xE8	; 232
     f4a:	33 e0       	ldi	r19, 0x03	; 3
     f4c:	40 e0       	ldi	r20, 0x00	; 0
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	bc 01       	movw	r22, r24
     f52:	cd 01       	movw	r24, r26
     f54:	0e 94 85 1a 	call	0x350a	; 0x350a <__udivmodsi4>
     f58:	da 01       	movw	r26, r20
     f5a:	c9 01       	movw	r24, r18
     f5c:	2a e0       	ldi	r18, 0x0A	; 10
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	40 e0       	ldi	r20, 0x00	; 0
     f62:	50 e0       	ldi	r21, 0x00	; 0
     f64:	bc 01       	movw	r22, r24
     f66:	cd 01       	movw	r24, r26
     f68:	0e 94 85 1a 	call	0x350a	; 0x350a <__udivmodsi4>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_display_int>
		LCD_display_int((result/100)%10);
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	9a 81       	ldd	r25, Y+2	; 0x02
     f78:	ab 81       	ldd	r26, Y+3	; 0x03
     f7a:	bc 81       	ldd	r27, Y+4	; 0x04
     f7c:	24 e6       	ldi	r18, 0x64	; 100
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	40 e0       	ldi	r20, 0x00	; 0
     f82:	50 e0       	ldi	r21, 0x00	; 0
     f84:	bc 01       	movw	r22, r24
     f86:	cd 01       	movw	r24, r26
     f88:	0e 94 85 1a 	call	0x350a	; 0x350a <__udivmodsi4>
     f8c:	da 01       	movw	r26, r20
     f8e:	c9 01       	movw	r24, r18
     f90:	2a e0       	ldi	r18, 0x0A	; 10
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	40 e0       	ldi	r20, 0x00	; 0
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	bc 01       	movw	r22, r24
     f9a:	cd 01       	movw	r24, r26
     f9c:	0e 94 85 1a 	call	0x350a	; 0x350a <__udivmodsi4>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_display_int>
		LCD_display_int((result/10)%10);
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	9a 81       	ldd	r25, Y+2	; 0x02
     fac:	ab 81       	ldd	r26, Y+3	; 0x03
     fae:	bc 81       	ldd	r27, Y+4	; 0x04
     fb0:	2a e0       	ldi	r18, 0x0A	; 10
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 e0       	ldi	r20, 0x00	; 0
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	bc 01       	movw	r22, r24
     fba:	cd 01       	movw	r24, r26
     fbc:	0e 94 85 1a 	call	0x350a	; 0x350a <__udivmodsi4>
     fc0:	da 01       	movw	r26, r20
     fc2:	c9 01       	movw	r24, r18
     fc4:	2a e0       	ldi	r18, 0x0A	; 10
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	40 e0       	ldi	r20, 0x00	; 0
     fca:	50 e0       	ldi	r21, 0x00	; 0
     fcc:	bc 01       	movw	r22, r24
     fce:	cd 01       	movw	r24, r26
     fd0:	0e 94 85 1a 	call	0x350a	; 0x350a <__udivmodsi4>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_display_int>
		LCD_display_int(result%10);
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	9a 81       	ldd	r25, Y+2	; 0x02
     fe0:	ab 81       	ldd	r26, Y+3	; 0x03
     fe2:	bc 81       	ldd	r27, Y+4	; 0x04
     fe4:	2a e0       	ldi	r18, 0x0A	; 10
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	40 e0       	ldi	r20, 0x00	; 0
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	bc 01       	movw	r22, r24
     fee:	cd 01       	movw	r24, r26
     ff0:	0e 94 85 1a 	call	0x350a	; 0x350a <__udivmodsi4>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_display_int>

	}

}
     ffc:	2f 96       	adiw	r28, 0x0f	; 15
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	08 95       	ret

00001012 <GET_OP1>:

void GET_OP1(void)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	0f 92       	push	r0
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
	volatile uint8 key;
	key = KeyPad_getPressedKey(); /* get the pressed key number */
    101c:	0e 94 de 11 	call	0x23bc	; 0x23bc <KeyPad_getPressedKey>
    1020:	89 83       	std	Y+1, r24	; 0x01
	if(key=='+'||key=='-'||key=='/'||key=='='||key=='A'||key=='*')
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	8b 32       	cpi	r24, 0x2B	; 43
    1026:	79 f0       	breq	.+30     	; 0x1046 <GET_OP1+0x34>
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	8d 32       	cpi	r24, 0x2D	; 45
    102c:	61 f0       	breq	.+24     	; 0x1046 <GET_OP1+0x34>
    102e:	89 81       	ldd	r24, Y+1	; 0x01
    1030:	8f 32       	cpi	r24, 0x2F	; 47
    1032:	49 f0       	breq	.+18     	; 0x1046 <GET_OP1+0x34>
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	8d 33       	cpi	r24, 0x3D	; 61
    1038:	31 f0       	breq	.+12     	; 0x1046 <GET_OP1+0x34>
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	81 34       	cpi	r24, 0x41	; 65
    103e:	19 f0       	breq	.+6      	; 0x1046 <GET_OP1+0x34>
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	8a 32       	cpi	r24, 0x2A	; 42
    1044:	79 f4       	brne	.+30     	; 0x1064 <GET_OP1+0x52>
	{
		LCD_Clear();
    1046:	0e 94 a9 19 	call	0x3352	; 0x3352 <LCD_Clear>
		check=1;
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	a0 e0       	ldi	r26, 0x00	; 0
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	80 93 70 00 	sts	0x0070, r24
    1056:	90 93 71 00 	sts	0x0071, r25
    105a:	a0 93 72 00 	sts	0x0072, r26
    105e:	b0 93 73 00 	sts	0x0073, r27
    1062:	e1 c0       	rjmp	.+450    	; 0x1226 <GET_OP1+0x214>
		return;
	}
	LCD_display_int(key);   /*Display the pressed key*/
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_display_int>
	op1=key;
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	88 2f       	mov	r24, r24
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	a0 e0       	ldi	r26, 0x00	; 0
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	80 93 74 00 	sts	0x0074, r24
    1078:	90 93 75 00 	sts	0x0075, r25
    107c:	a0 93 76 00 	sts	0x0076, r26
    1080:	b0 93 77 00 	sts	0x0077, r27
	key = KeyPad_getPressedKey();
    1084:	0e 94 de 11 	call	0x23bc	; 0x23bc <KeyPad_getPressedKey>
    1088:	89 83       	std	Y+1, r24	; 0x01
	if(key=='+'||key=='-'||key=='/'||key=='*')   /*if the entered digit is an arthimetic operator*/
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	8b 32       	cpi	r24, 0x2B	; 43
    108e:	49 f0       	breq	.+18     	; 0x10a2 <GET_OP1+0x90>
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	8d 32       	cpi	r24, 0x2D	; 45
    1094:	31 f0       	breq	.+12     	; 0x10a2 <GET_OP1+0x90>
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	8f 32       	cpi	r24, 0x2F	; 47
    109a:	19 f0       	breq	.+6      	; 0x10a2 <GET_OP1+0x90>
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	8a 32       	cpi	r24, 0x2A	; 42
    10a0:	89 f4       	brne	.+34     	; 0x10c4 <GET_OP1+0xb2>
		{
			LCD_display_int(key);   /*Display the pressed key*/
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_display_int>
			operation=key;
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a0 e0       	ldi	r26, 0x00	; 0
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	80 93 6c 00 	sts	0x006C, r24
    10b6:	90 93 6d 00 	sts	0x006D, r25
    10ba:	a0 93 6e 00 	sts	0x006E, r26
    10be:	b0 93 6f 00 	sts	0x006F, r27
    10c2:	b1 c0       	rjmp	.+354    	; 0x1226 <GET_OP1+0x214>
			return;
		}
	else if(key=='A'||key=='=')
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	81 34       	cpi	r24, 0x41	; 65
    10c8:	19 f0       	breq	.+6      	; 0x10d0 <GET_OP1+0xbe>
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	8d 33       	cpi	r24, 0x3D	; 61
    10ce:	69 f4       	brne	.+26     	; 0x10ea <GET_OP1+0xd8>
	{
		check=1;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	a0 e0       	ldi	r26, 0x00	; 0
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	80 93 70 00 	sts	0x0070, r24
    10dc:	90 93 71 00 	sts	0x0071, r25
    10e0:	a0 93 72 00 	sts	0x0072, r26
    10e4:	b0 93 73 00 	sts	0x0073, r27
    10e8:	9e c0       	rjmp	.+316    	; 0x1226 <GET_OP1+0x214>
		return;
	}
	LCD_display_int(key);
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_display_int>
	op1=op1*10+key;
    10f0:	80 91 74 00 	lds	r24, 0x0074
    10f4:	90 91 75 00 	lds	r25, 0x0075
    10f8:	a0 91 76 00 	lds	r26, 0x0076
    10fc:	b0 91 77 00 	lds	r27, 0x0077
    1100:	2a e0       	ldi	r18, 0x0A	; 10
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	40 e0       	ldi	r20, 0x00	; 0
    1106:	50 e0       	ldi	r21, 0x00	; 0
    1108:	bc 01       	movw	r22, r24
    110a:	cd 01       	movw	r24, r26
    110c:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__mulsi3>
    1110:	9b 01       	movw	r18, r22
    1112:	ac 01       	movw	r20, r24
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	88 2f       	mov	r24, r24
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	a0 e0       	ldi	r26, 0x00	; 0
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	82 0f       	add	r24, r18
    1120:	93 1f       	adc	r25, r19
    1122:	a4 1f       	adc	r26, r20
    1124:	b5 1f       	adc	r27, r21
    1126:	80 93 74 00 	sts	0x0074, r24
    112a:	90 93 75 00 	sts	0x0075, r25
    112e:	a0 93 76 00 	sts	0x0076, r26
    1132:	b0 93 77 00 	sts	0x0077, r27
	key = KeyPad_getPressedKey();
    1136:	0e 94 de 11 	call	0x23bc	; 0x23bc <KeyPad_getPressedKey>
    113a:	89 83       	std	Y+1, r24	; 0x01
	if(key=='+'||key=='-'||key=='/'||key=='*')   /*if the entered digit is an arthimetic operator*/
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	8b 32       	cpi	r24, 0x2B	; 43
    1140:	49 f0       	breq	.+18     	; 0x1154 <GET_OP1+0x142>
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	8d 32       	cpi	r24, 0x2D	; 45
    1146:	31 f0       	breq	.+12     	; 0x1154 <GET_OP1+0x142>
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	8f 32       	cpi	r24, 0x2F	; 47
    114c:	19 f0       	breq	.+6      	; 0x1154 <GET_OP1+0x142>
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	8a 32       	cpi	r24, 0x2A	; 42
    1152:	89 f4       	brne	.+34     	; 0x1176 <GET_OP1+0x164>
			{
				LCD_display_int(key);   /*Display the pressed key*/
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_display_int>
				operation=key;
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	88 2f       	mov	r24, r24
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	a0 e0       	ldi	r26, 0x00	; 0
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	80 93 6c 00 	sts	0x006C, r24
    1168:	90 93 6d 00 	sts	0x006D, r25
    116c:	a0 93 6e 00 	sts	0x006E, r26
    1170:	b0 93 6f 00 	sts	0x006F, r27
    1174:	58 c0       	rjmp	.+176    	; 0x1226 <GET_OP1+0x214>
				return;
			}
	else if(key=='A'||key=='=')
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	81 34       	cpi	r24, 0x41	; 65
    117a:	19 f0       	breq	.+6      	; 0x1182 <GET_OP1+0x170>
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	8d 33       	cpi	r24, 0x3D	; 61
    1180:	69 f4       	brne	.+26     	; 0x119c <GET_OP1+0x18a>
	{
		check=1;
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	a0 e0       	ldi	r26, 0x00	; 0
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	80 93 70 00 	sts	0x0070, r24
    118e:	90 93 71 00 	sts	0x0071, r25
    1192:	a0 93 72 00 	sts	0x0072, r26
    1196:	b0 93 73 00 	sts	0x0073, r27
    119a:	45 c0       	rjmp	.+138    	; 0x1226 <GET_OP1+0x214>
		return;
	}
	LCD_display_int(key);
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_display_int>
		op1=op1*10+key;
    11a2:	80 91 74 00 	lds	r24, 0x0074
    11a6:	90 91 75 00 	lds	r25, 0x0075
    11aa:	a0 91 76 00 	lds	r26, 0x0076
    11ae:	b0 91 77 00 	lds	r27, 0x0077
    11b2:	2a e0       	ldi	r18, 0x0A	; 10
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	40 e0       	ldi	r20, 0x00	; 0
    11b8:	50 e0       	ldi	r21, 0x00	; 0
    11ba:	bc 01       	movw	r22, r24
    11bc:	cd 01       	movw	r24, r26
    11be:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__mulsi3>
    11c2:	9b 01       	movw	r18, r22
    11c4:	ac 01       	movw	r20, r24
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
    11c8:	88 2f       	mov	r24, r24
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	a0 e0       	ldi	r26, 0x00	; 0
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	82 0f       	add	r24, r18
    11d2:	93 1f       	adc	r25, r19
    11d4:	a4 1f       	adc	r26, r20
    11d6:	b5 1f       	adc	r27, r21
    11d8:	80 93 74 00 	sts	0x0074, r24
    11dc:	90 93 75 00 	sts	0x0075, r25
    11e0:	a0 93 76 00 	sts	0x0076, r26
    11e4:	b0 93 77 00 	sts	0x0077, r27
		key = KeyPad_getPressedKey();
    11e8:	0e 94 de 11 	call	0x23bc	; 0x23bc <KeyPad_getPressedKey>
    11ec:	89 83       	std	Y+1, r24	; 0x01
		if(key=='+'||key=='-'||key=='/'||key=='*')   /*if the entered digit is an arthimetic operator*/
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	8b 32       	cpi	r24, 0x2B	; 43
    11f2:	49 f0       	breq	.+18     	; 0x1206 <GET_OP1+0x1f4>
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	8d 32       	cpi	r24, 0x2D	; 45
    11f8:	31 f0       	breq	.+12     	; 0x1206 <GET_OP1+0x1f4>
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	8f 32       	cpi	r24, 0x2F	; 47
    11fe:	19 f0       	breq	.+6      	; 0x1206 <GET_OP1+0x1f4>
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	8a 32       	cpi	r24, 0x2A	; 42
    1204:	81 f4       	brne	.+32     	; 0x1226 <GET_OP1+0x214>
				{
					LCD_display_int(key);   /*Display the pressed key*/
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_display_int>
					operation=key;
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	88 2f       	mov	r24, r24
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	a0 e0       	ldi	r26, 0x00	; 0
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	80 93 6c 00 	sts	0x006C, r24
    121a:	90 93 6d 00 	sts	0x006D, r25
    121e:	a0 93 6e 00 	sts	0x006E, r26
    1222:	b0 93 6f 00 	sts	0x006F, r27
					return;
				}
}
    1226:	0f 90       	pop	r0
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <GET_OP2>:




void GET_OP2(void)
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	0f 92       	push	r0
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
	uint8 key;

	key =KeyPad_getPressedKey();
    1238:	0e 94 de 11 	call	0x23bc	; 0x23bc <KeyPad_getPressedKey>
    123c:	89 83       	std	Y+1, r24	; 0x01
	if(key=='+'||key=='-'||key=='/'||key=='='||key=='A'||key=='*')
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	8b 32       	cpi	r24, 0x2B	; 43
    1242:	79 f0       	breq	.+30     	; 0x1262 <GET_OP2+0x34>
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	8d 32       	cpi	r24, 0x2D	; 45
    1248:	61 f0       	breq	.+24     	; 0x1262 <GET_OP2+0x34>
    124a:	89 81       	ldd	r24, Y+1	; 0x01
    124c:	8f 32       	cpi	r24, 0x2F	; 47
    124e:	49 f0       	breq	.+18     	; 0x1262 <GET_OP2+0x34>
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	8d 33       	cpi	r24, 0x3D	; 61
    1254:	31 f0       	breq	.+12     	; 0x1262 <GET_OP2+0x34>
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	81 34       	cpi	r24, 0x41	; 65
    125a:	19 f0       	breq	.+6      	; 0x1262 <GET_OP2+0x34>
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	8a 32       	cpi	r24, 0x2A	; 42
    1260:	19 f4       	brne	.+6      	; 0x1268 <GET_OP2+0x3a>
	{
		restart();
    1262:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <restart>
    1266:	c0 c0       	rjmp	.+384    	; 0x13e8 <GET_OP2+0x1ba>
		return;
	}
	LCD_display_int(key);   /*Display the pressed key*/
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_display_int>
	op2=key;
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	88 2f       	mov	r24, r24
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	a0 e0       	ldi	r26, 0x00	; 0
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	80 93 68 00 	sts	0x0068, r24
    127c:	90 93 69 00 	sts	0x0069, r25
    1280:	a0 93 6a 00 	sts	0x006A, r26
    1284:	b0 93 6b 00 	sts	0x006B, r27

	key =KeyPad_getPressedKey();
    1288:	0e 94 de 11 	call	0x23bc	; 0x23bc <KeyPad_getPressedKey>
    128c:	89 83       	std	Y+1, r24	; 0x01
	if(key=='+'||key=='-'||key=='/'||key=='A'||key=='*')
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	8b 32       	cpi	r24, 0x2B	; 43
    1292:	61 f0       	breq	.+24     	; 0x12ac <GET_OP2+0x7e>
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	8d 32       	cpi	r24, 0x2D	; 45
    1298:	49 f0       	breq	.+18     	; 0x12ac <GET_OP2+0x7e>
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	8f 32       	cpi	r24, 0x2F	; 47
    129e:	31 f0       	breq	.+12     	; 0x12ac <GET_OP2+0x7e>
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	81 34       	cpi	r24, 0x41	; 65
    12a4:	19 f0       	breq	.+6      	; 0x12ac <GET_OP2+0x7e>
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	8a 32       	cpi	r24, 0x2A	; 42
    12aa:	69 f4       	brne	.+26     	; 0x12c6 <GET_OP2+0x98>
	{
		check=1;
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	a0 e0       	ldi	r26, 0x00	; 0
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	80 93 70 00 	sts	0x0070, r24
    12b8:	90 93 71 00 	sts	0x0071, r25
    12bc:	a0 93 72 00 	sts	0x0072, r26
    12c0:	b0 93 73 00 	sts	0x0073, r27
    12c4:	91 c0       	rjmp	.+290    	; 0x13e8 <GET_OP2+0x1ba>
		return;
	}
	else if(key=='=')
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	8d 33       	cpi	r24, 0x3D	; 61
    12ca:	09 f4       	brne	.+2      	; 0x12ce <GET_OP2+0xa0>
    12cc:	8d c0       	rjmp	.+282    	; 0x13e8 <GET_OP2+0x1ba>
	{
		return;
	}
	LCD_display_int(key);
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_display_int>
	op2=op2*10+key;
    12d4:	80 91 68 00 	lds	r24, 0x0068
    12d8:	90 91 69 00 	lds	r25, 0x0069
    12dc:	a0 91 6a 00 	lds	r26, 0x006A
    12e0:	b0 91 6b 00 	lds	r27, 0x006B
    12e4:	2a e0       	ldi	r18, 0x0A	; 10
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e0       	ldi	r20, 0x00	; 0
    12ea:	50 e0       	ldi	r21, 0x00	; 0
    12ec:	bc 01       	movw	r22, r24
    12ee:	cd 01       	movw	r24, r26
    12f0:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__mulsi3>
    12f4:	9b 01       	movw	r18, r22
    12f6:	ac 01       	movw	r20, r24
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	88 2f       	mov	r24, r24
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	a0 e0       	ldi	r26, 0x00	; 0
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	82 0f       	add	r24, r18
    1304:	93 1f       	adc	r25, r19
    1306:	a4 1f       	adc	r26, r20
    1308:	b5 1f       	adc	r27, r21
    130a:	80 93 68 00 	sts	0x0068, r24
    130e:	90 93 69 00 	sts	0x0069, r25
    1312:	a0 93 6a 00 	sts	0x006A, r26
    1316:	b0 93 6b 00 	sts	0x006B, r27
	key =KeyPad_getPressedKey();
    131a:	0e 94 de 11 	call	0x23bc	; 0x23bc <KeyPad_getPressedKey>
    131e:	89 83       	std	Y+1, r24	; 0x01
	if(key=='+'||key=='-'||key=='/'||key=='A'||key=='*')
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	8b 32       	cpi	r24, 0x2B	; 43
    1324:	61 f0       	breq	.+24     	; 0x133e <GET_OP2+0x110>
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	8d 32       	cpi	r24, 0x2D	; 45
    132a:	49 f0       	breq	.+18     	; 0x133e <GET_OP2+0x110>
    132c:	89 81       	ldd	r24, Y+1	; 0x01
    132e:	8f 32       	cpi	r24, 0x2F	; 47
    1330:	31 f0       	breq	.+12     	; 0x133e <GET_OP2+0x110>
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	81 34       	cpi	r24, 0x41	; 65
    1336:	19 f0       	breq	.+6      	; 0x133e <GET_OP2+0x110>
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	8a 32       	cpi	r24, 0x2A	; 42
    133c:	69 f4       	brne	.+26     	; 0x1358 <GET_OP2+0x12a>
	{
		check=1;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	a0 e0       	ldi	r26, 0x00	; 0
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	80 93 70 00 	sts	0x0070, r24
    134a:	90 93 71 00 	sts	0x0071, r25
    134e:	a0 93 72 00 	sts	0x0072, r26
    1352:	b0 93 73 00 	sts	0x0073, r27
    1356:	48 c0       	rjmp	.+144    	; 0x13e8 <GET_OP2+0x1ba>
		return;
	}
	else if(key=='=')
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	8d 33       	cpi	r24, 0x3D	; 61
    135c:	09 f4       	brne	.+2      	; 0x1360 <GET_OP2+0x132>
    135e:	44 c0       	rjmp	.+136    	; 0x13e8 <GET_OP2+0x1ba>
	{
		return;
	}
	LCD_display_int(key);
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_display_int>
		op2=op2*10+key;
    1366:	80 91 68 00 	lds	r24, 0x0068
    136a:	90 91 69 00 	lds	r25, 0x0069
    136e:	a0 91 6a 00 	lds	r26, 0x006A
    1372:	b0 91 6b 00 	lds	r27, 0x006B
    1376:	2a e0       	ldi	r18, 0x0A	; 10
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	40 e0       	ldi	r20, 0x00	; 0
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	bc 01       	movw	r22, r24
    1380:	cd 01       	movw	r24, r26
    1382:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__mulsi3>
    1386:	9b 01       	movw	r18, r22
    1388:	ac 01       	movw	r20, r24
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	88 2f       	mov	r24, r24
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	a0 e0       	ldi	r26, 0x00	; 0
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	82 0f       	add	r24, r18
    1396:	93 1f       	adc	r25, r19
    1398:	a4 1f       	adc	r26, r20
    139a:	b5 1f       	adc	r27, r21
    139c:	80 93 68 00 	sts	0x0068, r24
    13a0:	90 93 69 00 	sts	0x0069, r25
    13a4:	a0 93 6a 00 	sts	0x006A, r26
    13a8:	b0 93 6b 00 	sts	0x006B, r27
		key =KeyPad_getPressedKey();
    13ac:	0e 94 de 11 	call	0x23bc	; 0x23bc <KeyPad_getPressedKey>
    13b0:	89 83       	std	Y+1, r24	; 0x01
		if(key=='+'||key=='-'||key=='/'||key=='A'||key=='*')
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	8b 32       	cpi	r24, 0x2B	; 43
    13b6:	61 f0       	breq	.+24     	; 0x13d0 <GET_OP2+0x1a2>
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
    13ba:	8d 32       	cpi	r24, 0x2D	; 45
    13bc:	49 f0       	breq	.+18     	; 0x13d0 <GET_OP2+0x1a2>
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	8f 32       	cpi	r24, 0x2F	; 47
    13c2:	31 f0       	breq	.+12     	; 0x13d0 <GET_OP2+0x1a2>
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	81 34       	cpi	r24, 0x41	; 65
    13c8:	19 f0       	breq	.+6      	; 0x13d0 <GET_OP2+0x1a2>
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	8a 32       	cpi	r24, 0x2A	; 42
    13ce:	61 f4       	brne	.+24     	; 0x13e8 <GET_OP2+0x1ba>
		{
			check=1;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	a0 e0       	ldi	r26, 0x00	; 0
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	80 93 70 00 	sts	0x0070, r24
    13dc:	90 93 71 00 	sts	0x0071, r25
    13e0:	a0 93 72 00 	sts	0x0072, r26
    13e4:	b0 93 73 00 	sts	0x0073, r27
		}
		else if(key=='=')
		{
			return;
		}
}
    13e8:	0f 90       	pop	r0
    13ea:	cf 91       	pop	r28
    13ec:	df 91       	pop	r29
    13ee:	08 95       	ret

000013f0 <restart>:
//	LCD_display_int(key);   /*Display the pressed key*/
//	operation=key;
//}

void restart(void)
{
    13f0:	df 93       	push	r29
    13f2:	cf 93       	push	r28
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
	LCD_Clear();
    13f8:	0e 94 a9 19 	call	0x3352	; 0x3352 <LCD_Clear>
	check=1;
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	a0 e0       	ldi	r26, 0x00	; 0
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	80 93 70 00 	sts	0x0070, r24
    1408:	90 93 71 00 	sts	0x0071, r25
    140c:	a0 93 72 00 	sts	0x0072, r26
    1410:	b0 93 73 00 	sts	0x0073, r27
}
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <DIO_setPINDir>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void DIO_setPINDir(uint8 portname,uint8 pin,uint8 direction)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	00 d0       	rcall	.+0      	; 0x1420 <DIO_setPINDir+0x6>
    1420:	00 d0       	rcall	.+0      	; 0x1422 <DIO_setPINDir+0x8>
    1422:	0f 92       	push	r0
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	6a 83       	std	Y+2, r22	; 0x02
    142c:	4b 83       	std	Y+3, r20	; 0x03

	switch(portname)
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	3d 83       	std	Y+5, r19	; 0x05
    1436:	2c 83       	std	Y+4, r18	; 0x04
    1438:	8c 81       	ldd	r24, Y+4	; 0x04
    143a:	9d 81       	ldd	r25, Y+5	; 0x05
    143c:	82 34       	cpi	r24, 0x42	; 66
    143e:	91 05       	cpc	r25, r1
    1440:	09 f4       	brne	.+2      	; 0x1444 <DIO_setPINDir+0x2a>
    1442:	44 c0       	rjmp	.+136    	; 0x14cc <DIO_setPINDir+0xb2>
    1444:	2c 81       	ldd	r18, Y+4	; 0x04
    1446:	3d 81       	ldd	r19, Y+5	; 0x05
    1448:	23 34       	cpi	r18, 0x43	; 67
    144a:	31 05       	cpc	r19, r1
    144c:	34 f4       	brge	.+12     	; 0x145a <DIO_setPINDir+0x40>
    144e:	8c 81       	ldd	r24, Y+4	; 0x04
    1450:	9d 81       	ldd	r25, Y+5	; 0x05
    1452:	81 34       	cpi	r24, 0x41	; 65
    1454:	91 05       	cpc	r25, r1
    1456:	71 f0       	breq	.+28     	; 0x1474 <DIO_setPINDir+0x5a>
    1458:	bc c0       	rjmp	.+376    	; 0x15d2 <DIO_setPINDir+0x1b8>
    145a:	2c 81       	ldd	r18, Y+4	; 0x04
    145c:	3d 81       	ldd	r19, Y+5	; 0x05
    145e:	23 34       	cpi	r18, 0x43	; 67
    1460:	31 05       	cpc	r19, r1
    1462:	09 f4       	brne	.+2      	; 0x1466 <DIO_setPINDir+0x4c>
    1464:	5f c0       	rjmp	.+190    	; 0x1524 <DIO_setPINDir+0x10a>
    1466:	8c 81       	ldd	r24, Y+4	; 0x04
    1468:	9d 81       	ldd	r25, Y+5	; 0x05
    146a:	84 34       	cpi	r24, 0x44	; 68
    146c:	91 05       	cpc	r25, r1
    146e:	09 f4       	brne	.+2      	; 0x1472 <DIO_setPINDir+0x58>
    1470:	85 c0       	rjmp	.+266    	; 0x157c <DIO_setPINDir+0x162>
    1472:	af c0       	rjmp	.+350    	; 0x15d2 <DIO_setPINDir+0x1b8>
	{

	case 'A':
		if( direction==1 )
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	a1 f4       	brne	.+40     	; 0x14a2 <DIO_setPINDir+0x88>
		{
			SET_BIT(DDRA,pin);
    147a:	aa e3       	ldi	r26, 0x3A	; 58
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	ea e3       	ldi	r30, 0x3A	; 58
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	48 2f       	mov	r20, r24
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 2e       	mov	r0, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <DIO_setPINDir+0x7e>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	0a 94       	dec	r0
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <DIO_setPINDir+0x7a>
    149c:	84 2b       	or	r24, r20
    149e:	8c 93       	st	X, r24
    14a0:	98 c0       	rjmp	.+304    	; 0x15d2 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRA,pin);
    14a2:	aa e3       	ldi	r26, 0x3A	; 58
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	ea e3       	ldi	r30, 0x3A	; 58
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	48 2f       	mov	r20, r24
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 2e       	mov	r0, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <DIO_setPINDir+0xa6>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	0a 94       	dec	r0
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <DIO_setPINDir+0xa2>
    14c4:	80 95       	com	r24
    14c6:	84 23       	and	r24, r20
    14c8:	8c 93       	st	X, r24
    14ca:	83 c0       	rjmp	.+262    	; 0x15d2 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'B':
		if( direction==1 )
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	81 30       	cpi	r24, 0x01	; 1
    14d0:	a1 f4       	brne	.+40     	; 0x14fa <DIO_setPINDir+0xe0>
		{
			SET_BIT(DDRB,pin);
    14d2:	a7 e3       	ldi	r26, 0x37	; 55
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e7 e3       	ldi	r30, 0x37	; 55
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	48 2f       	mov	r20, r24
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	02 2e       	mov	r0, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <DIO_setPINDir+0xd6>
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	0a 94       	dec	r0
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <DIO_setPINDir+0xd2>
    14f4:	84 2b       	or	r24, r20
    14f6:	8c 93       	st	X, r24
    14f8:	6c c0       	rjmp	.+216    	; 0x15d2 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRB,pin);
    14fa:	a7 e3       	ldi	r26, 0x37	; 55
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e7 e3       	ldi	r30, 0x37	; 55
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	48 2f       	mov	r20, r24
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	02 2e       	mov	r0, r18
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <DIO_setPINDir+0xfe>
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	0a 94       	dec	r0
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <DIO_setPINDir+0xfa>
    151c:	80 95       	com	r24
    151e:	84 23       	and	r24, r20
    1520:	8c 93       	st	X, r24
    1522:	57 c0       	rjmp	.+174    	; 0x15d2 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'C':
		if( direction==1 )
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	81 30       	cpi	r24, 0x01	; 1
    1528:	a1 f4       	brne	.+40     	; 0x1552 <DIO_setPINDir+0x138>
		{
			SET_BIT(DDRC,pin);
    152a:	a4 e3       	ldi	r26, 0x34	; 52
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e4 e3       	ldi	r30, 0x34	; 52
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_setPINDir+0x12e>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_setPINDir+0x12a>
    154c:	84 2b       	or	r24, r20
    154e:	8c 93       	st	X, r24
    1550:	40 c0       	rjmp	.+128    	; 0x15d2 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRC,pin);
    1552:	a4 e3       	ldi	r26, 0x34	; 52
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e4 e3       	ldi	r30, 0x34	; 52
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_setPINDir+0x156>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <DIO_setPINDir+0x152>
    1574:	80 95       	com	r24
    1576:	84 23       	and	r24, r20
    1578:	8c 93       	st	X, r24
    157a:	2b c0       	rjmp	.+86     	; 0x15d2 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'D':
		if( direction==1)
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	81 30       	cpi	r24, 0x01	; 1
    1580:	a1 f4       	brne	.+40     	; 0x15aa <DIO_setPINDir+0x190>
		{
			SET_BIT(DDRD,pin);
    1582:	a1 e3       	ldi	r26, 0x31	; 49
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e1 e3       	ldi	r30, 0x31	; 49
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	48 2f       	mov	r20, r24
    158e:	8a 81       	ldd	r24, Y+2	; 0x02
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 2e       	mov	r0, r18
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <DIO_setPINDir+0x186>
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	0a 94       	dec	r0
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <DIO_setPINDir+0x182>
    15a4:	84 2b       	or	r24, r20
    15a6:	8c 93       	st	X, r24
    15a8:	14 c0       	rjmp	.+40     	; 0x15d2 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRD,pin);
    15aa:	a1 e3       	ldi	r26, 0x31	; 49
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e1 e3       	ldi	r30, 0x31	; 49
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 2e       	mov	r0, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <DIO_setPINDir+0x1ae>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	0a 94       	dec	r0
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <DIO_setPINDir+0x1aa>
    15cc:	80 95       	com	r24
    15ce:	84 23       	and	r24, r20
    15d0:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <DIO_write_PIN>:


void DIO_write_PIN(uint8 portname,uint8 pin,uint8 pinvalue)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <DIO_write_PIN+0x6>
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <DIO_write_PIN+0x8>
    15ea:	0f 92       	push	r0
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	89 83       	std	Y+1, r24	; 0x01
    15f2:	6a 83       	std	Y+2, r22	; 0x02
    15f4:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	3d 83       	std	Y+5, r19	; 0x05
    15fe:	2c 83       	std	Y+4, r18	; 0x04
    1600:	8c 81       	ldd	r24, Y+4	; 0x04
    1602:	9d 81       	ldd	r25, Y+5	; 0x05
    1604:	82 34       	cpi	r24, 0x42	; 66
    1606:	91 05       	cpc	r25, r1
    1608:	09 f4       	brne	.+2      	; 0x160c <DIO_write_PIN+0x2a>
    160a:	44 c0       	rjmp	.+136    	; 0x1694 <DIO_write_PIN+0xb2>
    160c:	2c 81       	ldd	r18, Y+4	; 0x04
    160e:	3d 81       	ldd	r19, Y+5	; 0x05
    1610:	23 34       	cpi	r18, 0x43	; 67
    1612:	31 05       	cpc	r19, r1
    1614:	34 f4       	brge	.+12     	; 0x1622 <DIO_write_PIN+0x40>
    1616:	8c 81       	ldd	r24, Y+4	; 0x04
    1618:	9d 81       	ldd	r25, Y+5	; 0x05
    161a:	81 34       	cpi	r24, 0x41	; 65
    161c:	91 05       	cpc	r25, r1
    161e:	71 f0       	breq	.+28     	; 0x163c <DIO_write_PIN+0x5a>
    1620:	bc c0       	rjmp	.+376    	; 0x179a <DIO_write_PIN+0x1b8>
    1622:	2c 81       	ldd	r18, Y+4	; 0x04
    1624:	3d 81       	ldd	r19, Y+5	; 0x05
    1626:	23 34       	cpi	r18, 0x43	; 67
    1628:	31 05       	cpc	r19, r1
    162a:	09 f4       	brne	.+2      	; 0x162e <DIO_write_PIN+0x4c>
    162c:	5f c0       	rjmp	.+190    	; 0x16ec <DIO_write_PIN+0x10a>
    162e:	8c 81       	ldd	r24, Y+4	; 0x04
    1630:	9d 81       	ldd	r25, Y+5	; 0x05
    1632:	84 34       	cpi	r24, 0x44	; 68
    1634:	91 05       	cpc	r25, r1
    1636:	09 f4       	brne	.+2      	; 0x163a <DIO_write_PIN+0x58>
    1638:	85 c0       	rjmp	.+266    	; 0x1744 <DIO_write_PIN+0x162>
    163a:	af c0       	rjmp	.+350    	; 0x179a <DIO_write_PIN+0x1b8>
	{

	case 'A':
		if( pinvalue==1 )
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	81 30       	cpi	r24, 0x01	; 1
    1640:	a1 f4       	brne	.+40     	; 0x166a <DIO_write_PIN+0x88>
		{
			SET_BIT(PORTA,pin);
    1642:	ab e3       	ldi	r26, 0x3B	; 59
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	eb e3       	ldi	r30, 0x3B	; 59
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	48 2f       	mov	r20, r24
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	02 2e       	mov	r0, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <DIO_write_PIN+0x7e>
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	0a 94       	dec	r0
    1662:	e2 f7       	brpl	.-8      	; 0x165c <DIO_write_PIN+0x7a>
    1664:	84 2b       	or	r24, r20
    1666:	8c 93       	st	X, r24
    1668:	98 c0       	rjmp	.+304    	; 0x179a <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
    166a:	ab e3       	ldi	r26, 0x3B	; 59
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	eb e3       	ldi	r30, 0x3B	; 59
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	48 2f       	mov	r20, r24
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	02 2e       	mov	r0, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <DIO_write_PIN+0xa6>
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	0a 94       	dec	r0
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <DIO_write_PIN+0xa2>
    168c:	80 95       	com	r24
    168e:	84 23       	and	r24, r20
    1690:	8c 93       	st	X, r24
    1692:	83 c0       	rjmp	.+262    	; 0x179a <DIO_write_PIN+0x1b8>
		}
		break;
	case 'B':
		if( pinvalue==1 )
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	81 30       	cpi	r24, 0x01	; 1
    1698:	a1 f4       	brne	.+40     	; 0x16c2 <DIO_write_PIN+0xe0>
		{
			SET_BIT(PORTB,pin);
    169a:	a8 e3       	ldi	r26, 0x38	; 56
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e8 e3       	ldi	r30, 0x38	; 56
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	48 2f       	mov	r20, r24
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	02 2e       	mov	r0, r18
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <DIO_write_PIN+0xd6>
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	0a 94       	dec	r0
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <DIO_write_PIN+0xd2>
    16bc:	84 2b       	or	r24, r20
    16be:	8c 93       	st	X, r24
    16c0:	6c c0       	rjmp	.+216    	; 0x179a <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTB,pin);
    16c2:	a8 e3       	ldi	r26, 0x38	; 56
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e8 e3       	ldi	r30, 0x38	; 56
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	48 2f       	mov	r20, r24
    16ce:	8a 81       	ldd	r24, Y+2	; 0x02
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	02 2e       	mov	r0, r18
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <DIO_write_PIN+0xfe>
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	0a 94       	dec	r0
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <DIO_write_PIN+0xfa>
    16e4:	80 95       	com	r24
    16e6:	84 23       	and	r24, r20
    16e8:	8c 93       	st	X, r24
    16ea:	57 c0       	rjmp	.+174    	; 0x179a <DIO_write_PIN+0x1b8>
		}
		break;
	case 'C':
		if( pinvalue==1 )
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	81 30       	cpi	r24, 0x01	; 1
    16f0:	a1 f4       	brne	.+40     	; 0x171a <DIO_write_PIN+0x138>
		{
			SET_BIT(PORTC,pin);
    16f2:	a5 e3       	ldi	r26, 0x35	; 53
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e5 e3       	ldi	r30, 0x35	; 53
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	48 2f       	mov	r20, r24
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	02 2e       	mov	r0, r18
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <DIO_write_PIN+0x12e>
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	0a 94       	dec	r0
    1712:	e2 f7       	brpl	.-8      	; 0x170c <DIO_write_PIN+0x12a>
    1714:	84 2b       	or	r24, r20
    1716:	8c 93       	st	X, r24
    1718:	40 c0       	rjmp	.+128    	; 0x179a <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTC,pin);
    171a:	a5 e3       	ldi	r26, 0x35	; 53
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	e5 e3       	ldi	r30, 0x35	; 53
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	48 2f       	mov	r20, r24
    1726:	8a 81       	ldd	r24, Y+2	; 0x02
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	02 2e       	mov	r0, r18
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <DIO_write_PIN+0x156>
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	0a 94       	dec	r0
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <DIO_write_PIN+0x152>
    173c:	80 95       	com	r24
    173e:	84 23       	and	r24, r20
    1740:	8c 93       	st	X, r24
    1742:	2b c0       	rjmp	.+86     	; 0x179a <DIO_write_PIN+0x1b8>
		}
		break;
	case 'D':
		if( pinvalue==1)
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	81 30       	cpi	r24, 0x01	; 1
    1748:	a1 f4       	brne	.+40     	; 0x1772 <DIO_write_PIN+0x190>
		{
			SET_BIT(PORTD,pin);
    174a:	a2 e3       	ldi	r26, 0x32	; 50
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	e2 e3       	ldi	r30, 0x32	; 50
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	48 2f       	mov	r20, r24
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	02 2e       	mov	r0, r18
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <DIO_write_PIN+0x186>
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	0a 94       	dec	r0
    176a:	e2 f7       	brpl	.-8      	; 0x1764 <DIO_write_PIN+0x182>
    176c:	84 2b       	or	r24, r20
    176e:	8c 93       	st	X, r24
    1770:	14 c0       	rjmp	.+40     	; 0x179a <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTD,pin);
    1772:	a2 e3       	ldi	r26, 0x32	; 50
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e2 e3       	ldi	r30, 0x32	; 50
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	48 2f       	mov	r20, r24
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	02 2e       	mov	r0, r18
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <DIO_write_PIN+0x1ae>
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	0a 94       	dec	r0
    1792:	e2 f7       	brpl	.-8      	; 0x178c <DIO_write_PIN+0x1aa>
    1794:	80 95       	com	r24
    1796:	84 23       	and	r24, r20
    1798:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	0f 90       	pop	r0
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <DIO_read_PIN>:

uint8 DIO_read_PIN(uint8 portname,uint8 pin)
{
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <DIO_read_PIN+0x6>
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <DIO_read_PIN+0x8>
    17b2:	0f 92       	push	r0
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	8a 83       	std	Y+2, r24	; 0x02
    17ba:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_val=0;
    17bc:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	3d 83       	std	Y+5, r19	; 0x05
    17c6:	2c 83       	std	Y+4, r18	; 0x04
    17c8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ca:	9d 81       	ldd	r25, Y+5	; 0x05
    17cc:	82 34       	cpi	r24, 0x42	; 66
    17ce:	91 05       	cpc	r25, r1
    17d0:	41 f1       	breq	.+80     	; 0x1822 <DIO_read_PIN+0x78>
    17d2:	2c 81       	ldd	r18, Y+4	; 0x04
    17d4:	3d 81       	ldd	r19, Y+5	; 0x05
    17d6:	23 34       	cpi	r18, 0x43	; 67
    17d8:	31 05       	cpc	r19, r1
    17da:	34 f4       	brge	.+12     	; 0x17e8 <DIO_read_PIN+0x3e>
    17dc:	8c 81       	ldd	r24, Y+4	; 0x04
    17de:	9d 81       	ldd	r25, Y+5	; 0x05
    17e0:	81 34       	cpi	r24, 0x41	; 65
    17e2:	91 05       	cpc	r25, r1
    17e4:	61 f0       	breq	.+24     	; 0x17fe <DIO_read_PIN+0x54>
    17e6:	52 c0       	rjmp	.+164    	; 0x188c <DIO_read_PIN+0xe2>
    17e8:	2c 81       	ldd	r18, Y+4	; 0x04
    17ea:	3d 81       	ldd	r19, Y+5	; 0x05
    17ec:	23 34       	cpi	r18, 0x43	; 67
    17ee:	31 05       	cpc	r19, r1
    17f0:	51 f1       	breq	.+84     	; 0x1846 <DIO_read_PIN+0x9c>
    17f2:	8c 81       	ldd	r24, Y+4	; 0x04
    17f4:	9d 81       	ldd	r25, Y+5	; 0x05
    17f6:	84 34       	cpi	r24, 0x44	; 68
    17f8:	91 05       	cpc	r25, r1
    17fa:	b9 f1       	breq	.+110    	; 0x186a <DIO_read_PIN+0xc0>
    17fc:	47 c0       	rjmp	.+142    	; 0x188c <DIO_read_PIN+0xe2>
	{

	case 'A':
		pin_val=READ_BIT(PINA,pin);
    17fe:	e9 e3       	ldi	r30, 0x39	; 57
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	48 2f       	mov	r20, r24
    1806:	8b 81       	ldd	r24, Y+3	; 0x03
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	02 2e       	mov	r0, r18
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <DIO_read_PIN+0x6e>
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	0a 94       	dec	r0
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <DIO_read_PIN+0x6a>
    181c:	84 23       	and	r24, r20
    181e:	89 83       	std	Y+1, r24	; 0x01
    1820:	35 c0       	rjmp	.+106    	; 0x188c <DIO_read_PIN+0xe2>
		break;
	case 'B':
		pin_val=READ_BIT(PINB,pin);
    1822:	e6 e3       	ldi	r30, 0x36	; 54
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	48 2f       	mov	r20, r24
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	28 2f       	mov	r18, r24
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	02 2e       	mov	r0, r18
    1836:	02 c0       	rjmp	.+4      	; 0x183c <DIO_read_PIN+0x92>
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	0a 94       	dec	r0
    183e:	e2 f7       	brpl	.-8      	; 0x1838 <DIO_read_PIN+0x8e>
    1840:	84 23       	and	r24, r20
    1842:	89 83       	std	Y+1, r24	; 0x01
    1844:	23 c0       	rjmp	.+70     	; 0x188c <DIO_read_PIN+0xe2>
		break;
	case 'C':
		pin_val=READ_BIT(PINC,pin);
    1846:	e3 e3       	ldi	r30, 0x33	; 51
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	48 2f       	mov	r20, r24
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 2e       	mov	r0, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <DIO_read_PIN+0xb6>
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	0a 94       	dec	r0
    1862:	e2 f7       	brpl	.-8      	; 0x185c <DIO_read_PIN+0xb2>
    1864:	84 23       	and	r24, r20
    1866:	89 83       	std	Y+1, r24	; 0x01
    1868:	11 c0       	rjmp	.+34     	; 0x188c <DIO_read_PIN+0xe2>
		break;
	case 'D':
		pin_val=READ_BIT(PIND,pin);
    186a:	e0 e3       	ldi	r30, 0x30	; 48
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	48 2f       	mov	r20, r24
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	28 2f       	mov	r18, r24
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	02 2e       	mov	r0, r18
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <DIO_read_PIN+0xda>
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	0a 94       	dec	r0
    1886:	e2 f7       	brpl	.-8      	; 0x1880 <DIO_read_PIN+0xd6>
    1888:	84 23       	and	r24, r20
    188a:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	return pin_val;
    188c:	89 81       	ldd	r24, Y+1	; 0x01
}
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <DIO_BIT_TOGGLE>:

void DIO_BIT_TOGGLE(uint8 portname,uint8 pin)
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <DIO_BIT_TOGGLE+0x6>
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <DIO_BIT_TOGGLE+0x8>
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	3c 83       	std	Y+4, r19	; 0x04
    18b6:	2b 83       	std	Y+3, r18	; 0x03
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	82 34       	cpi	r24, 0x42	; 66
    18be:	91 05       	cpc	r25, r1
    18c0:	51 f1       	breq	.+84     	; 0x1916 <DIO_BIT_TOGGLE+0x78>
    18c2:	2b 81       	ldd	r18, Y+3	; 0x03
    18c4:	3c 81       	ldd	r19, Y+4	; 0x04
    18c6:	23 34       	cpi	r18, 0x43	; 67
    18c8:	31 05       	cpc	r19, r1
    18ca:	34 f4       	brge	.+12     	; 0x18d8 <DIO_BIT_TOGGLE+0x3a>
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	9c 81       	ldd	r25, Y+4	; 0x04
    18d0:	81 34       	cpi	r24, 0x41	; 65
    18d2:	91 05       	cpc	r25, r1
    18d4:	61 f0       	breq	.+24     	; 0x18ee <DIO_BIT_TOGGLE+0x50>
    18d6:	5a c0       	rjmp	.+180    	; 0x198c <DIO_BIT_TOGGLE+0xee>
    18d8:	2b 81       	ldd	r18, Y+3	; 0x03
    18da:	3c 81       	ldd	r19, Y+4	; 0x04
    18dc:	23 34       	cpi	r18, 0x43	; 67
    18de:	31 05       	cpc	r19, r1
    18e0:	71 f1       	breq	.+92     	; 0x193e <DIO_BIT_TOGGLE+0xa0>
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	9c 81       	ldd	r25, Y+4	; 0x04
    18e6:	84 34       	cpi	r24, 0x44	; 68
    18e8:	91 05       	cpc	r25, r1
    18ea:	e9 f1       	breq	.+122    	; 0x1966 <DIO_BIT_TOGGLE+0xc8>
    18ec:	4f c0       	rjmp	.+158    	; 0x198c <DIO_BIT_TOGGLE+0xee>
	{

	case 'A':
		TOGGLE_BIT(PORTA,pin);
    18ee:	ab e3       	ldi	r26, 0x3B	; 59
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	eb e3       	ldi	r30, 0x3B	; 59
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	48 2f       	mov	r20, r24
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	02 2e       	mov	r0, r18
    1906:	02 c0       	rjmp	.+4      	; 0x190c <DIO_BIT_TOGGLE+0x6e>
    1908:	88 0f       	add	r24, r24
    190a:	99 1f       	adc	r25, r25
    190c:	0a 94       	dec	r0
    190e:	e2 f7       	brpl	.-8      	; 0x1908 <DIO_BIT_TOGGLE+0x6a>
    1910:	84 27       	eor	r24, r20
    1912:	8c 93       	st	X, r24
    1914:	3b c0       	rjmp	.+118    	; 0x198c <DIO_BIT_TOGGLE+0xee>
		break;
	case 'B':
		TOGGLE_BIT(PORTB,pin);
    1916:	a8 e3       	ldi	r26, 0x38	; 56
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e8 e3       	ldi	r30, 0x38	; 56
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	48 2f       	mov	r20, r24
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	02 2e       	mov	r0, r18
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <DIO_BIT_TOGGLE+0x96>
    1930:	88 0f       	add	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	0a 94       	dec	r0
    1936:	e2 f7       	brpl	.-8      	; 0x1930 <DIO_BIT_TOGGLE+0x92>
    1938:	84 27       	eor	r24, r20
    193a:	8c 93       	st	X, r24
    193c:	27 c0       	rjmp	.+78     	; 0x198c <DIO_BIT_TOGGLE+0xee>
		break;
	case 'C':
		TOGGLE_BIT(PORTC,pin);
    193e:	a5 e3       	ldi	r26, 0x35	; 53
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e5 e3       	ldi	r30, 0x35	; 53
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	48 2f       	mov	r20, r24
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	02 2e       	mov	r0, r18
    1956:	02 c0       	rjmp	.+4      	; 0x195c <DIO_BIT_TOGGLE+0xbe>
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	0a 94       	dec	r0
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <DIO_BIT_TOGGLE+0xba>
    1960:	84 27       	eor	r24, r20
    1962:	8c 93       	st	X, r24
    1964:	13 c0       	rjmp	.+38     	; 0x198c <DIO_BIT_TOGGLE+0xee>
		break;
	case 'D':
		TOGGLE_BIT(PORTD,pin);
    1966:	a2 e3       	ldi	r26, 0x32	; 50
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e2 e3       	ldi	r30, 0x32	; 50
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	48 2f       	mov	r20, r24
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	02 2e       	mov	r0, r18
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <DIO_BIT_TOGGLE+0xe6>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	0a 94       	dec	r0
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <DIO_BIT_TOGGLE+0xe2>
    1988:	84 27       	eor	r24, r20
    198a:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	08 95       	ret

0000199a <DIO_set_port_Dir>:

void DIO_set_port_Dir(uint8 portname,uint8 direction)
{
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	00 d0       	rcall	.+0      	; 0x19a0 <DIO_set_port_Dir+0x6>
    19a0:	00 d0       	rcall	.+0      	; 0x19a2 <DIO_set_port_Dir+0x8>
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	89 83       	std	Y+1, r24	; 0x01
    19a8:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    19aa:	89 81       	ldd	r24, Y+1	; 0x01
    19ac:	28 2f       	mov	r18, r24
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	3c 83       	std	Y+4, r19	; 0x04
    19b2:	2b 83       	std	Y+3, r18	; 0x03
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	9c 81       	ldd	r25, Y+4	; 0x04
    19b8:	82 34       	cpi	r24, 0x42	; 66
    19ba:	91 05       	cpc	r25, r1
    19bc:	11 f1       	breq	.+68     	; 0x1a02 <DIO_set_port_Dir+0x68>
    19be:	2b 81       	ldd	r18, Y+3	; 0x03
    19c0:	3c 81       	ldd	r19, Y+4	; 0x04
    19c2:	23 34       	cpi	r18, 0x43	; 67
    19c4:	31 05       	cpc	r19, r1
    19c6:	34 f4       	brge	.+12     	; 0x19d4 <DIO_set_port_Dir+0x3a>
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	9c 81       	ldd	r25, Y+4	; 0x04
    19cc:	81 34       	cpi	r24, 0x41	; 65
    19ce:	91 05       	cpc	r25, r1
    19d0:	61 f0       	breq	.+24     	; 0x19ea <DIO_set_port_Dir+0x50>
    19d2:	3a c0       	rjmp	.+116    	; 0x1a48 <DIO_set_port_Dir+0xae>
    19d4:	2b 81       	ldd	r18, Y+3	; 0x03
    19d6:	3c 81       	ldd	r19, Y+4	; 0x04
    19d8:	23 34       	cpi	r18, 0x43	; 67
    19da:	31 05       	cpc	r19, r1
    19dc:	f1 f0       	breq	.+60     	; 0x1a1a <DIO_set_port_Dir+0x80>
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	9c 81       	ldd	r25, Y+4	; 0x04
    19e2:	84 34       	cpi	r24, 0x44	; 68
    19e4:	91 05       	cpc	r25, r1
    19e6:	29 f1       	breq	.+74     	; 0x1a32 <DIO_set_port_Dir+0x98>
    19e8:	2f c0       	rjmp	.+94     	; 0x1a48 <DIO_set_port_Dir+0xae>
	{
	case 'A':
		if(direction==1)
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	81 30       	cpi	r24, 0x01	; 1
    19ee:	29 f4       	brne	.+10     	; 0x19fa <DIO_set_port_Dir+0x60>
		{
			DDRA=0xFF;
    19f0:	ea e3       	ldi	r30, 0x3A	; 58
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	8f ef       	ldi	r24, 0xFF	; 255
    19f6:	80 83       	st	Z, r24
    19f8:	27 c0       	rjmp	.+78     	; 0x1a48 <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRA=0;
    19fa:	ea e3       	ldi	r30, 0x3A	; 58
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	10 82       	st	Z, r1
    1a00:	23 c0       	rjmp	.+70     	; 0x1a48 <DIO_set_port_Dir+0xae>
		}
		break;
	case 'B':
		if(direction==1)
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	81 30       	cpi	r24, 0x01	; 1
    1a06:	29 f4       	brne	.+10     	; 0x1a12 <DIO_set_port_Dir+0x78>
		{
			DDRB=0xFF;
    1a08:	e7 e3       	ldi	r30, 0x37	; 55
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	8f ef       	ldi	r24, 0xFF	; 255
    1a0e:	80 83       	st	Z, r24
    1a10:	1b c0       	rjmp	.+54     	; 0x1a48 <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRB=0;
    1a12:	e7 e3       	ldi	r30, 0x37	; 55
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	10 82       	st	Z, r1
    1a18:	17 c0       	rjmp	.+46     	; 0x1a48 <DIO_set_port_Dir+0xae>
		}
		break;
	case 'C':
		if(direction==1)
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	81 30       	cpi	r24, 0x01	; 1
    1a1e:	29 f4       	brne	.+10     	; 0x1a2a <DIO_set_port_Dir+0x90>
		{
			DDRC=0XFF;
    1a20:	e4 e3       	ldi	r30, 0x34	; 52
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	8f ef       	ldi	r24, 0xFF	; 255
    1a26:	80 83       	st	Z, r24
    1a28:	0f c0       	rjmp	.+30     	; 0x1a48 <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRC=0;
    1a2a:	e4 e3       	ldi	r30, 0x34	; 52
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	10 82       	st	Z, r1
    1a30:	0b c0       	rjmp	.+22     	; 0x1a48 <DIO_set_port_Dir+0xae>
		}
		break;
	case 'D':
		if(direction==1)
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	81 30       	cpi	r24, 0x01	; 1
    1a36:	29 f4       	brne	.+10     	; 0x1a42 <DIO_set_port_Dir+0xa8>
		{
			DDRD=0XFF;
    1a38:	e1 e3       	ldi	r30, 0x31	; 49
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	8f ef       	ldi	r24, 0xFF	; 255
    1a3e:	80 83       	st	Z, r24
    1a40:	03 c0       	rjmp	.+6      	; 0x1a48 <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRD=0;
    1a42:	e1 e3       	ldi	r30, 0x31	; 49
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	10 82       	st	Z, r1
		}
		break;
	default:
		break;
	}
}
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <DIO_write_port>:

void DIO_write_port(uint8 portname,uint8 portvalue)
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	00 d0       	rcall	.+0      	; 0x1a5c <DIO_write_port+0x6>
    1a5c:	00 d0       	rcall	.+0      	; 0x1a5e <DIO_write_port+0x8>
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	89 83       	std	Y+1, r24	; 0x01
    1a64:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
    1a68:	28 2f       	mov	r18, r24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	3c 83       	std	Y+4, r19	; 0x04
    1a6e:	2b 83       	std	Y+3, r18	; 0x03
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	9c 81       	ldd	r25, Y+4	; 0x04
    1a74:	82 34       	cpi	r24, 0x42	; 66
    1a76:	91 05       	cpc	r25, r1
    1a78:	d9 f0       	breq	.+54     	; 0x1ab0 <DIO_write_port+0x5a>
    1a7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a7e:	23 34       	cpi	r18, 0x43	; 67
    1a80:	31 05       	cpc	r19, r1
    1a82:	34 f4       	brge	.+12     	; 0x1a90 <DIO_write_port+0x3a>
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	9c 81       	ldd	r25, Y+4	; 0x04
    1a88:	81 34       	cpi	r24, 0x41	; 65
    1a8a:	91 05       	cpc	r25, r1
    1a8c:	61 f0       	breq	.+24     	; 0x1aa6 <DIO_write_port+0x50>
    1a8e:	1e c0       	rjmp	.+60     	; 0x1acc <DIO_write_port+0x76>
    1a90:	2b 81       	ldd	r18, Y+3	; 0x03
    1a92:	3c 81       	ldd	r19, Y+4	; 0x04
    1a94:	23 34       	cpi	r18, 0x43	; 67
    1a96:	31 05       	cpc	r19, r1
    1a98:	81 f0       	breq	.+32     	; 0x1aba <DIO_write_port+0x64>
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9e:	84 34       	cpi	r24, 0x44	; 68
    1aa0:	91 05       	cpc	r25, r1
    1aa2:	81 f0       	breq	.+32     	; 0x1ac4 <DIO_write_port+0x6e>
    1aa4:	13 c0       	rjmp	.+38     	; 0x1acc <DIO_write_port+0x76>
	{
	case 'A':
		PORTA=portvalue;
    1aa6:	eb e3       	ldi	r30, 0x3B	; 59
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	80 83       	st	Z, r24
    1aae:	0e c0       	rjmp	.+28     	; 0x1acc <DIO_write_port+0x76>
		break;
	case 'B':
		PORTB=portvalue;
    1ab0:	e8 e3       	ldi	r30, 0x38	; 56
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	80 83       	st	Z, r24
    1ab8:	09 c0       	rjmp	.+18     	; 0x1acc <DIO_write_port+0x76>
		break;
	case 'C':
		PORTC=portvalue;
    1aba:	e5 e3       	ldi	r30, 0x35	; 53
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	80 83       	st	Z, r24
    1ac2:	04 c0       	rjmp	.+8      	; 0x1acc <DIO_write_port+0x76>
		break;
	case 'D':
		PORTD=portvalue;
    1ac4:	e2 e3       	ldi	r30, 0x32	; 50
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aca:	80 83       	st	Z, r24
	}
}
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <DIO_read_port>:

uint8 DIO_read_port(uint8 portname)
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	00 d0       	rcall	.+0      	; 0x1ae0 <DIO_read_port+0x6>
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <DIO_read_port+0x8>
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_val=0;
    1ae8:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	28 2f       	mov	r18, r24
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	3c 83       	std	Y+4, r19	; 0x04
    1af2:	2b 83       	std	Y+3, r18	; 0x03
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	9c 81       	ldd	r25, Y+4	; 0x04
    1af8:	82 34       	cpi	r24, 0x42	; 66
    1afa:	91 05       	cpc	r25, r1
    1afc:	d9 f0       	breq	.+54     	; 0x1b34 <DIO_read_port+0x5a>
    1afe:	2b 81       	ldd	r18, Y+3	; 0x03
    1b00:	3c 81       	ldd	r19, Y+4	; 0x04
    1b02:	23 34       	cpi	r18, 0x43	; 67
    1b04:	31 05       	cpc	r19, r1
    1b06:	34 f4       	brge	.+12     	; 0x1b14 <DIO_read_port+0x3a>
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0c:	81 34       	cpi	r24, 0x41	; 65
    1b0e:	91 05       	cpc	r25, r1
    1b10:	61 f0       	breq	.+24     	; 0x1b2a <DIO_read_port+0x50>
    1b12:	1e c0       	rjmp	.+60     	; 0x1b50 <DIO_read_port+0x76>
    1b14:	2b 81       	ldd	r18, Y+3	; 0x03
    1b16:	3c 81       	ldd	r19, Y+4	; 0x04
    1b18:	23 34       	cpi	r18, 0x43	; 67
    1b1a:	31 05       	cpc	r19, r1
    1b1c:	81 f0       	breq	.+32     	; 0x1b3e <DIO_read_port+0x64>
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	9c 81       	ldd	r25, Y+4	; 0x04
    1b22:	84 34       	cpi	r24, 0x44	; 68
    1b24:	91 05       	cpc	r25, r1
    1b26:	81 f0       	breq	.+32     	; 0x1b48 <DIO_read_port+0x6e>
    1b28:	13 c0       	rjmp	.+38     	; 0x1b50 <DIO_read_port+0x76>
	{

	case 'A':
		port_val=PINA;
    1b2a:	e9 e3       	ldi	r30, 0x39	; 57
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	89 83       	std	Y+1, r24	; 0x01
    1b32:	0e c0       	rjmp	.+28     	; 0x1b50 <DIO_read_port+0x76>
		break;
	case 'B':
		port_val=PINB;
    1b34:	e6 e3       	ldi	r30, 0x36	; 54
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	89 83       	std	Y+1, r24	; 0x01
    1b3c:	09 c0       	rjmp	.+18     	; 0x1b50 <DIO_read_port+0x76>
		break;
	case 'C':
		port_val=PINC;
    1b3e:	e3 e3       	ldi	r30, 0x33	; 51
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	89 83       	std	Y+1, r24	; 0x01
    1b46:	04 c0       	rjmp	.+8      	; 0x1b50 <DIO_read_port+0x76>
		break;
	case 'D':
		port_val=PIND;
    1b48:	e0 e3       	ldi	r30, 0x30	; 48
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	return port_val;
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	cf 91       	pop	r28
    1b5c:	df 91       	pop	r29
    1b5e:	08 95       	ret

00001b60 <DIO_enablePullup_pin>:

void DIO_enablePullup_pin(uint8 portname,uint8 pin,uint8 status)
{
    1b60:	df 93       	push	r29
    1b62:	cf 93       	push	r28
    1b64:	00 d0       	rcall	.+0      	; 0x1b66 <DIO_enablePullup_pin+0x6>
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <DIO_enablePullup_pin+0x8>
    1b68:	0f 92       	push	r0
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	6a 83       	std	Y+2, r22	; 0x02
    1b72:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	3d 83       	std	Y+5, r19	; 0x05
    1b7c:	2c 83       	std	Y+4, r18	; 0x04
    1b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b80:	9d 81       	ldd	r25, Y+5	; 0x05
    1b82:	82 34       	cpi	r24, 0x42	; 66
    1b84:	91 05       	cpc	r25, r1
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <DIO_enablePullup_pin+0x2a>
    1b88:	44 c0       	rjmp	.+136    	; 0x1c12 <DIO_enablePullup_pin+0xb2>
    1b8a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b8c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b8e:	23 34       	cpi	r18, 0x43	; 67
    1b90:	31 05       	cpc	r19, r1
    1b92:	34 f4       	brge	.+12     	; 0x1ba0 <DIO_enablePullup_pin+0x40>
    1b94:	8c 81       	ldd	r24, Y+4	; 0x04
    1b96:	9d 81       	ldd	r25, Y+5	; 0x05
    1b98:	81 34       	cpi	r24, 0x41	; 65
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	71 f0       	breq	.+28     	; 0x1bba <DIO_enablePullup_pin+0x5a>
    1b9e:	bc c0       	rjmp	.+376    	; 0x1d18 <DIO_enablePullup_pin+0x1b8>
    1ba0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ba2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ba4:	23 34       	cpi	r18, 0x43	; 67
    1ba6:	31 05       	cpc	r19, r1
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <DIO_enablePullup_pin+0x4c>
    1baa:	5f c0       	rjmp	.+190    	; 0x1c6a <DIO_enablePullup_pin+0x10a>
    1bac:	8c 81       	ldd	r24, Y+4	; 0x04
    1bae:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb0:	84 34       	cpi	r24, 0x44	; 68
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <DIO_enablePullup_pin+0x58>
    1bb6:	85 c0       	rjmp	.+266    	; 0x1cc2 <DIO_enablePullup_pin+0x162>
    1bb8:	af c0       	rjmp	.+350    	; 0x1d18 <DIO_enablePullup_pin+0x1b8>
	{
	case 'A':
		if(status==1)
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	81 30       	cpi	r24, 0x01	; 1
    1bbe:	a1 f4       	brne	.+40     	; 0x1be8 <DIO_enablePullup_pin+0x88>
		{
			SET_BIT(PORTA,pin);
    1bc0:	ab e3       	ldi	r26, 0x3B	; 59
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	eb e3       	ldi	r30, 0x3B	; 59
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	48 2f       	mov	r20, r24
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	02 2e       	mov	r0, r18
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <DIO_enablePullup_pin+0x7e>
    1bda:	88 0f       	add	r24, r24
    1bdc:	99 1f       	adc	r25, r25
    1bde:	0a 94       	dec	r0
    1be0:	e2 f7       	brpl	.-8      	; 0x1bda <DIO_enablePullup_pin+0x7a>
    1be2:	84 2b       	or	r24, r20
    1be4:	8c 93       	st	X, r24
    1be6:	98 c0       	rjmp	.+304    	; 0x1d18 <DIO_enablePullup_pin+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
    1be8:	ab e3       	ldi	r26, 0x3B	; 59
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	eb e3       	ldi	r30, 0x3B	; 59
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	48 2f       	mov	r20, r24
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	02 2e       	mov	r0, r18
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <DIO_enablePullup_pin+0xa6>
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	0a 94       	dec	r0
    1c08:	e2 f7       	brpl	.-8      	; 0x1c02 <DIO_enablePullup_pin+0xa2>
    1c0a:	80 95       	com	r24
    1c0c:	84 23       	and	r24, r20
    1c0e:	8c 93       	st	X, r24
    1c10:	83 c0       	rjmp	.+262    	; 0x1d18 <DIO_enablePullup_pin+0x1b8>
		}
		break;
	case 'B':
		if(status==1)
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	81 30       	cpi	r24, 0x01	; 1
    1c16:	a1 f4       	brne	.+40     	; 0x1c40 <DIO_enablePullup_pin+0xe0>
				{
					SET_BIT(PORTB,pin);
    1c18:	a8 e3       	ldi	r26, 0x38	; 56
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e8 e3       	ldi	r30, 0x38	; 56
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	48 2f       	mov	r20, r24
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	02 2e       	mov	r0, r18
    1c30:	02 c0       	rjmp	.+4      	; 0x1c36 <DIO_enablePullup_pin+0xd6>
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	0a 94       	dec	r0
    1c38:	e2 f7       	brpl	.-8      	; 0x1c32 <DIO_enablePullup_pin+0xd2>
    1c3a:	84 2b       	or	r24, r20
    1c3c:	8c 93       	st	X, r24
    1c3e:	6c c0       	rjmp	.+216    	; 0x1d18 <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTB,pin);
    1c40:	a8 e3       	ldi	r26, 0x38	; 56
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e8 e3       	ldi	r30, 0x38	; 56
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	48 2f       	mov	r20, r24
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	02 2e       	mov	r0, r18
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <DIO_enablePullup_pin+0xfe>
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	0a 94       	dec	r0
    1c60:	e2 f7       	brpl	.-8      	; 0x1c5a <DIO_enablePullup_pin+0xfa>
    1c62:	80 95       	com	r24
    1c64:	84 23       	and	r24, r20
    1c66:	8c 93       	st	X, r24
    1c68:	57 c0       	rjmp	.+174    	; 0x1d18 <DIO_enablePullup_pin+0x1b8>
				}
				break;
	case 'C':
		if(status==1)
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	81 30       	cpi	r24, 0x01	; 1
    1c6e:	a1 f4       	brne	.+40     	; 0x1c98 <DIO_enablePullup_pin+0x138>
				{
					SET_BIT(PORTC,pin);
    1c70:	a5 e3       	ldi	r26, 0x35	; 53
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e5 e3       	ldi	r30, 0x35	; 53
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	48 2f       	mov	r20, r24
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	28 2f       	mov	r18, r24
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	02 2e       	mov	r0, r18
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <DIO_enablePullup_pin+0x12e>
    1c8a:	88 0f       	add	r24, r24
    1c8c:	99 1f       	adc	r25, r25
    1c8e:	0a 94       	dec	r0
    1c90:	e2 f7       	brpl	.-8      	; 0x1c8a <DIO_enablePullup_pin+0x12a>
    1c92:	84 2b       	or	r24, r20
    1c94:	8c 93       	st	X, r24
    1c96:	40 c0       	rjmp	.+128    	; 0x1d18 <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTC,pin);
    1c98:	a5 e3       	ldi	r26, 0x35	; 53
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e5 e3       	ldi	r30, 0x35	; 53
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	48 2f       	mov	r20, r24
    1ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	02 2e       	mov	r0, r18
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <DIO_enablePullup_pin+0x156>
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	0a 94       	dec	r0
    1cb8:	e2 f7       	brpl	.-8      	; 0x1cb2 <DIO_enablePullup_pin+0x152>
    1cba:	80 95       	com	r24
    1cbc:	84 23       	and	r24, r20
    1cbe:	8c 93       	st	X, r24
    1cc0:	2b c0       	rjmp	.+86     	; 0x1d18 <DIO_enablePullup_pin+0x1b8>
				}
				break;
	case 'D':
		if(status==1)
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	81 30       	cpi	r24, 0x01	; 1
    1cc6:	a1 f4       	brne	.+40     	; 0x1cf0 <DIO_enablePullup_pin+0x190>
				{
					SET_BIT(PORTD,pin);
    1cc8:	a2 e3       	ldi	r26, 0x32	; 50
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	e2 e3       	ldi	r30, 0x32	; 50
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	48 2f       	mov	r20, r24
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	28 2f       	mov	r18, r24
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	02 2e       	mov	r0, r18
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <DIO_enablePullup_pin+0x186>
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	0a 94       	dec	r0
    1ce8:	e2 f7       	brpl	.-8      	; 0x1ce2 <DIO_enablePullup_pin+0x182>
    1cea:	84 2b       	or	r24, r20
    1cec:	8c 93       	st	X, r24
    1cee:	14 c0       	rjmp	.+40     	; 0x1d18 <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTD,pin);
    1cf0:	a2 e3       	ldi	r26, 0x32	; 50
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e2 e3       	ldi	r30, 0x32	; 50
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	48 2f       	mov	r20, r24
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	28 2f       	mov	r18, r24
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	02 2e       	mov	r0, r18
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <DIO_enablePullup_pin+0x1ae>
    1d0a:	88 0f       	add	r24, r24
    1d0c:	99 1f       	adc	r25, r25
    1d0e:	0a 94       	dec	r0
    1d10:	e2 f7       	brpl	.-8      	; 0x1d0a <DIO_enablePullup_pin+0x1aa>
    1d12:	80 95       	com	r24
    1d14:	84 23       	and	r24, r20
    1d16:	8c 93       	st	X, r24
				}
				break;
	}
}
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <DIO_write_low_nibble>:

void DIO_write_low_nibble(uint8 portname,uint8 value)
{
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	00 d0       	rcall	.+0      	; 0x1d2e <DIO_write_low_nibble+0x6>
    1d2e:	00 d0       	rcall	.+0      	; 0x1d30 <DIO_write_low_nibble+0x8>
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
    1d34:	89 83       	std	Y+1, r24	; 0x01
    1d36:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	8f 70       	andi	r24, 0x0F	; 15
    1d3c:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	3c 83       	std	Y+4, r19	; 0x04
    1d46:	2b 83       	std	Y+3, r18	; 0x03
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	82 34       	cpi	r24, 0x42	; 66
    1d4e:	91 05       	cpc	r25, r1
    1d50:	31 f1       	breq	.+76     	; 0x1d9e <DIO_write_low_nibble+0x76>
    1d52:	2b 81       	ldd	r18, Y+3	; 0x03
    1d54:	3c 81       	ldd	r19, Y+4	; 0x04
    1d56:	23 34       	cpi	r18, 0x43	; 67
    1d58:	31 05       	cpc	r19, r1
    1d5a:	34 f4       	brge	.+12     	; 0x1d68 <DIO_write_low_nibble+0x40>
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d60:	81 34       	cpi	r24, 0x41	; 65
    1d62:	91 05       	cpc	r25, r1
    1d64:	61 f0       	breq	.+24     	; 0x1d7e <DIO_write_low_nibble+0x56>
    1d66:	4a c0       	rjmp	.+148    	; 0x1dfc <DIO_write_low_nibble+0xd4>
    1d68:	2b 81       	ldd	r18, Y+3	; 0x03
    1d6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d6c:	23 34       	cpi	r18, 0x43	; 67
    1d6e:	31 05       	cpc	r19, r1
    1d70:	31 f1       	breq	.+76     	; 0x1dbe <DIO_write_low_nibble+0x96>
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	9c 81       	ldd	r25, Y+4	; 0x04
    1d76:	84 34       	cpi	r24, 0x44	; 68
    1d78:	91 05       	cpc	r25, r1
    1d7a:	89 f1       	breq	.+98     	; 0x1dde <DIO_write_low_nibble+0xb6>
    1d7c:	3f c0       	rjmp	.+126    	; 0x1dfc <DIO_write_low_nibble+0xd4>
	{
	case 'A':
		PORTA&=0xf0;
    1d7e:	ab e3       	ldi	r26, 0x3B	; 59
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	eb e3       	ldi	r30, 0x3B	; 59
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	80 7f       	andi	r24, 0xF0	; 240
    1d8a:	8c 93       	st	X, r24
		PORTA|=value;
    1d8c:	ab e3       	ldi	r26, 0x3B	; 59
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	eb e3       	ldi	r30, 0x3B	; 59
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	90 81       	ld	r25, Z
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	89 2b       	or	r24, r25
    1d9a:	8c 93       	st	X, r24
    1d9c:	2f c0       	rjmp	.+94     	; 0x1dfc <DIO_write_low_nibble+0xd4>
		break;
	case 'B':
		PORTB&=0xf0;
    1d9e:	a8 e3       	ldi	r26, 0x38	; 56
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e8 e3       	ldi	r30, 0x38	; 56
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	80 7f       	andi	r24, 0xF0	; 240
    1daa:	8c 93       	st	X, r24
		PORTA|=value;
    1dac:	ab e3       	ldi	r26, 0x3B	; 59
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	eb e3       	ldi	r30, 0x3B	; 59
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	90 81       	ld	r25, Z
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	89 2b       	or	r24, r25
    1dba:	8c 93       	st	X, r24
    1dbc:	1f c0       	rjmp	.+62     	; 0x1dfc <DIO_write_low_nibble+0xd4>
		break;
	case 'C':
		PORTC&=0xf0;
    1dbe:	a5 e3       	ldi	r26, 0x35	; 53
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e5 e3       	ldi	r30, 0x35	; 53
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	80 81       	ld	r24, Z
    1dc8:	80 7f       	andi	r24, 0xF0	; 240
    1dca:	8c 93       	st	X, r24
		PORTA|=value;
    1dcc:	ab e3       	ldi	r26, 0x3B	; 59
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	eb e3       	ldi	r30, 0x3B	; 59
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	90 81       	ld	r25, Z
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	89 2b       	or	r24, r25
    1dda:	8c 93       	st	X, r24
    1ddc:	0f c0       	rjmp	.+30     	; 0x1dfc <DIO_write_low_nibble+0xd4>
		break;
	case 'D':
		PORTD&=0xf0;
    1dde:	a2 e3       	ldi	r26, 0x32	; 50
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e2 e3       	ldi	r30, 0x32	; 50
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	80 7f       	andi	r24, 0xF0	; 240
    1dea:	8c 93       	st	X, r24
		PORTD|=value;
    1dec:	a2 e3       	ldi	r26, 0x32	; 50
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e2 e3       	ldi	r30, 0x32	; 50
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	90 81       	ld	r25, Z
    1df6:	8a 81       	ldd	r24, Y+2	; 0x02
    1df8:	89 2b       	or	r24, r25
    1dfa:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1dfc:	0f 90       	pop	r0
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	cf 91       	pop	r28
    1e06:	df 91       	pop	r29
    1e08:	08 95       	ret

00001e0a <DIO_set_low_nibble>:

void DIO_set_low_nibble(uint8 portname)
{
    1e0a:	df 93       	push	r29
    1e0c:	cf 93       	push	r28
    1e0e:	00 d0       	rcall	.+0      	; 0x1e10 <DIO_set_low_nibble+0x6>
    1e10:	0f 92       	push	r0
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
    1e16:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    1e18:	89 81       	ldd	r24, Y+1	; 0x01
    1e1a:	28 2f       	mov	r18, r24
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	3b 83       	std	Y+3, r19	; 0x03
    1e20:	2a 83       	std	Y+2, r18	; 0x02
    1e22:	8a 81       	ldd	r24, Y+2	; 0x02
    1e24:	9b 81       	ldd	r25, Y+3	; 0x03
    1e26:	82 34       	cpi	r24, 0x42	; 66
    1e28:	91 05       	cpc	r25, r1
    1e2a:	f1 f0       	breq	.+60     	; 0x1e68 <DIO_set_low_nibble+0x5e>
    1e2c:	2a 81       	ldd	r18, Y+2	; 0x02
    1e2e:	3b 81       	ldd	r19, Y+3	; 0x03
    1e30:	23 34       	cpi	r18, 0x43	; 67
    1e32:	31 05       	cpc	r19, r1
    1e34:	34 f4       	brge	.+12     	; 0x1e42 <DIO_set_low_nibble+0x38>
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3a:	81 34       	cpi	r24, 0x41	; 65
    1e3c:	91 05       	cpc	r25, r1
    1e3e:	61 f0       	breq	.+24     	; 0x1e58 <DIO_set_low_nibble+0x4e>
    1e40:	2a c0       	rjmp	.+84     	; 0x1e96 <DIO_set_low_nibble+0x8c>
    1e42:	2a 81       	ldd	r18, Y+2	; 0x02
    1e44:	3b 81       	ldd	r19, Y+3	; 0x03
    1e46:	23 34       	cpi	r18, 0x43	; 67
    1e48:	31 05       	cpc	r19, r1
    1e4a:	b1 f0       	breq	.+44     	; 0x1e78 <DIO_set_low_nibble+0x6e>
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e50:	84 34       	cpi	r24, 0x44	; 68
    1e52:	91 05       	cpc	r25, r1
    1e54:	c9 f0       	breq	.+50     	; 0x1e88 <DIO_set_low_nibble+0x7e>
    1e56:	1f c0       	rjmp	.+62     	; 0x1e96 <DIO_set_low_nibble+0x8c>
	{
	case 'A':
		PORTA|=0x0f;
    1e58:	ab e3       	ldi	r26, 0x3B	; 59
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	eb e3       	ldi	r30, 0x3B	; 59
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	8f 60       	ori	r24, 0x0F	; 15
    1e64:	8c 93       	st	X, r24
    1e66:	17 c0       	rjmp	.+46     	; 0x1e96 <DIO_set_low_nibble+0x8c>
		break;
	case 'B':
		PORTB|=0x0f;
    1e68:	a8 e3       	ldi	r26, 0x38	; 56
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e8 e3       	ldi	r30, 0x38	; 56
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	8f 60       	ori	r24, 0x0F	; 15
    1e74:	8c 93       	st	X, r24
    1e76:	0f c0       	rjmp	.+30     	; 0x1e96 <DIO_set_low_nibble+0x8c>
		break;
	case 'C':
		PORTC|=0x0f;
    1e78:	a5 e3       	ldi	r26, 0x35	; 53
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	e5 e3       	ldi	r30, 0x35	; 53
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	8f 60       	ori	r24, 0x0F	; 15
    1e84:	8c 93       	st	X, r24
    1e86:	07 c0       	rjmp	.+14     	; 0x1e96 <DIO_set_low_nibble+0x8c>
		break;
	case 'D':
		PORTD|=0x0f;
    1e88:	a2 e3       	ldi	r26, 0x32	; 50
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	e2 e3       	ldi	r30, 0x32	; 50
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	8f 60       	ori	r24, 0x0F	; 15
    1e94:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1e96:	0f 90       	pop	r0
    1e98:	0f 90       	pop	r0
    1e9a:	0f 90       	pop	r0
    1e9c:	cf 91       	pop	r28
    1e9e:	df 91       	pop	r29
    1ea0:	08 95       	ret

00001ea2 <DIO_clear_low_nibble>:

void DIO_clear_low_nibble(uint8 portname)
{
    1ea2:	df 93       	push	r29
    1ea4:	cf 93       	push	r28
    1ea6:	00 d0       	rcall	.+0      	; 0x1ea8 <DIO_clear_low_nibble+0x6>
    1ea8:	0f 92       	push	r0
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	3b 83       	std	Y+3, r19	; 0x03
    1eb8:	2a 83       	std	Y+2, r18	; 0x02
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ebe:	82 34       	cpi	r24, 0x42	; 66
    1ec0:	91 05       	cpc	r25, r1
    1ec2:	f1 f0       	breq	.+60     	; 0x1f00 <DIO_clear_low_nibble+0x5e>
    1ec4:	2a 81       	ldd	r18, Y+2	; 0x02
    1ec6:	3b 81       	ldd	r19, Y+3	; 0x03
    1ec8:	23 34       	cpi	r18, 0x43	; 67
    1eca:	31 05       	cpc	r19, r1
    1ecc:	34 f4       	brge	.+12     	; 0x1eda <DIO_clear_low_nibble+0x38>
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed2:	81 34       	cpi	r24, 0x41	; 65
    1ed4:	91 05       	cpc	r25, r1
    1ed6:	61 f0       	breq	.+24     	; 0x1ef0 <DIO_clear_low_nibble+0x4e>
    1ed8:	2a c0       	rjmp	.+84     	; 0x1f2e <DIO_clear_low_nibble+0x8c>
    1eda:	2a 81       	ldd	r18, Y+2	; 0x02
    1edc:	3b 81       	ldd	r19, Y+3	; 0x03
    1ede:	23 34       	cpi	r18, 0x43	; 67
    1ee0:	31 05       	cpc	r19, r1
    1ee2:	b1 f0       	breq	.+44     	; 0x1f10 <DIO_clear_low_nibble+0x6e>
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee8:	84 34       	cpi	r24, 0x44	; 68
    1eea:	91 05       	cpc	r25, r1
    1eec:	c9 f0       	breq	.+50     	; 0x1f20 <DIO_clear_low_nibble+0x7e>
    1eee:	1f c0       	rjmp	.+62     	; 0x1f2e <DIO_clear_low_nibble+0x8c>
	{
	case 'A':
		PORTA&=~(0x0f);
    1ef0:	ab e3       	ldi	r26, 0x3B	; 59
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	eb e3       	ldi	r30, 0x3B	; 59
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	80 7f       	andi	r24, 0xF0	; 240
    1efc:	8c 93       	st	X, r24
    1efe:	17 c0       	rjmp	.+46     	; 0x1f2e <DIO_clear_low_nibble+0x8c>
		break;
	case 'B':
		PORTB&=~(0x0f);
    1f00:	a8 e3       	ldi	r26, 0x38	; 56
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e8 e3       	ldi	r30, 0x38	; 56
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	80 7f       	andi	r24, 0xF0	; 240
    1f0c:	8c 93       	st	X, r24
    1f0e:	0f c0       	rjmp	.+30     	; 0x1f2e <DIO_clear_low_nibble+0x8c>
		break;
	case 'C':
		PORTC&=~(0x0f);
    1f10:	a5 e3       	ldi	r26, 0x35	; 53
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e5 e3       	ldi	r30, 0x35	; 53
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	80 7f       	andi	r24, 0xF0	; 240
    1f1c:	8c 93       	st	X, r24
    1f1e:	07 c0       	rjmp	.+14     	; 0x1f2e <DIO_clear_low_nibble+0x8c>
		break;
	case 'D':
		PORTD&=~(0x0f);
    1f20:	a2 e3       	ldi	r26, 0x32	; 50
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
    1f24:	e2 e3       	ldi	r30, 0x32	; 50
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 81       	ld	r24, Z
    1f2a:	80 7f       	andi	r24, 0xF0	; 240
    1f2c:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	cf 91       	pop	r28
    1f36:	df 91       	pop	r29
    1f38:	08 95       	ret

00001f3a <DIO_set_high_nibble>:

void DIO_set_high_nibble(uint8 portname)
{
    1f3a:	df 93       	push	r29
    1f3c:	cf 93       	push	r28
    1f3e:	00 d0       	rcall	.+0      	; 0x1f40 <DIO_set_high_nibble+0x6>
    1f40:	0f 92       	push	r0
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	3b 83       	std	Y+3, r19	; 0x03
    1f50:	2a 83       	std	Y+2, r18	; 0x02
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	9b 81       	ldd	r25, Y+3	; 0x03
    1f56:	82 34       	cpi	r24, 0x42	; 66
    1f58:	91 05       	cpc	r25, r1
    1f5a:	f1 f0       	breq	.+60     	; 0x1f98 <DIO_set_high_nibble+0x5e>
    1f5c:	2a 81       	ldd	r18, Y+2	; 0x02
    1f5e:	3b 81       	ldd	r19, Y+3	; 0x03
    1f60:	23 34       	cpi	r18, 0x43	; 67
    1f62:	31 05       	cpc	r19, r1
    1f64:	34 f4       	brge	.+12     	; 0x1f72 <DIO_set_high_nibble+0x38>
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
    1f68:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6a:	81 34       	cpi	r24, 0x41	; 65
    1f6c:	91 05       	cpc	r25, r1
    1f6e:	61 f0       	breq	.+24     	; 0x1f88 <DIO_set_high_nibble+0x4e>
    1f70:	2a c0       	rjmp	.+84     	; 0x1fc6 <DIO_set_high_nibble+0x8c>
    1f72:	2a 81       	ldd	r18, Y+2	; 0x02
    1f74:	3b 81       	ldd	r19, Y+3	; 0x03
    1f76:	23 34       	cpi	r18, 0x43	; 67
    1f78:	31 05       	cpc	r19, r1
    1f7a:	b1 f0       	breq	.+44     	; 0x1fa8 <DIO_set_high_nibble+0x6e>
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f80:	84 34       	cpi	r24, 0x44	; 68
    1f82:	91 05       	cpc	r25, r1
    1f84:	c9 f0       	breq	.+50     	; 0x1fb8 <DIO_set_high_nibble+0x7e>
    1f86:	1f c0       	rjmp	.+62     	; 0x1fc6 <DIO_set_high_nibble+0x8c>
	{
	case 'A':
		PORTA|=0xf0;
    1f88:	ab e3       	ldi	r26, 0x3B	; 59
    1f8a:	b0 e0       	ldi	r27, 0x00	; 0
    1f8c:	eb e3       	ldi	r30, 0x3B	; 59
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	80 6f       	ori	r24, 0xF0	; 240
    1f94:	8c 93       	st	X, r24
    1f96:	17 c0       	rjmp	.+46     	; 0x1fc6 <DIO_set_high_nibble+0x8c>
		break;
	case 'B':
		PORTB|=0xf0;
    1f98:	a8 e3       	ldi	r26, 0x38	; 56
    1f9a:	b0 e0       	ldi	r27, 0x00	; 0
    1f9c:	e8 e3       	ldi	r30, 0x38	; 56
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	80 81       	ld	r24, Z
    1fa2:	80 6f       	ori	r24, 0xF0	; 240
    1fa4:	8c 93       	st	X, r24
    1fa6:	0f c0       	rjmp	.+30     	; 0x1fc6 <DIO_set_high_nibble+0x8c>
		break;
	case 'C':
		PORTC|=0xf0;
    1fa8:	a5 e3       	ldi	r26, 0x35	; 53
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e5 e3       	ldi	r30, 0x35	; 53
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	80 6f       	ori	r24, 0xF0	; 240
    1fb4:	8c 93       	st	X, r24
    1fb6:	07 c0       	rjmp	.+14     	; 0x1fc6 <DIO_set_high_nibble+0x8c>
		break;
	case 'D':
		PORTD|=0xf0;
    1fb8:	a2 e3       	ldi	r26, 0x32	; 50
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	e2 e3       	ldi	r30, 0x32	; 50
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	80 6f       	ori	r24, 0xF0	; 240
    1fc4:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	08 95       	ret

00001fd2 <DIO_clear_high_nibble>:

void DIO_clear_high_nibble(uint8 portname)
{
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	00 d0       	rcall	.+0      	; 0x1fd8 <DIO_clear_high_nibble+0x6>
    1fd8:	0f 92       	push	r0
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	28 2f       	mov	r18, r24
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	3b 83       	std	Y+3, r19	; 0x03
    1fe8:	2a 83       	std	Y+2, r18	; 0x02
    1fea:	8a 81       	ldd	r24, Y+2	; 0x02
    1fec:	9b 81       	ldd	r25, Y+3	; 0x03
    1fee:	82 34       	cpi	r24, 0x42	; 66
    1ff0:	91 05       	cpc	r25, r1
    1ff2:	f1 f0       	breq	.+60     	; 0x2030 <DIO_clear_high_nibble+0x5e>
    1ff4:	2a 81       	ldd	r18, Y+2	; 0x02
    1ff6:	3b 81       	ldd	r19, Y+3	; 0x03
    1ff8:	23 34       	cpi	r18, 0x43	; 67
    1ffa:	31 05       	cpc	r19, r1
    1ffc:	34 f4       	brge	.+12     	; 0x200a <DIO_clear_high_nibble+0x38>
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	9b 81       	ldd	r25, Y+3	; 0x03
    2002:	81 34       	cpi	r24, 0x41	; 65
    2004:	91 05       	cpc	r25, r1
    2006:	61 f0       	breq	.+24     	; 0x2020 <DIO_clear_high_nibble+0x4e>
    2008:	2a c0       	rjmp	.+84     	; 0x205e <DIO_clear_high_nibble+0x8c>
    200a:	2a 81       	ldd	r18, Y+2	; 0x02
    200c:	3b 81       	ldd	r19, Y+3	; 0x03
    200e:	23 34       	cpi	r18, 0x43	; 67
    2010:	31 05       	cpc	r19, r1
    2012:	b1 f0       	breq	.+44     	; 0x2040 <DIO_clear_high_nibble+0x6e>
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	9b 81       	ldd	r25, Y+3	; 0x03
    2018:	84 34       	cpi	r24, 0x44	; 68
    201a:	91 05       	cpc	r25, r1
    201c:	c9 f0       	breq	.+50     	; 0x2050 <DIO_clear_high_nibble+0x7e>
    201e:	1f c0       	rjmp	.+62     	; 0x205e <DIO_clear_high_nibble+0x8c>
	{
	case 'A':
		PORTA&=~(0xf0);
    2020:	ab e3       	ldi	r26, 0x3B	; 59
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	eb e3       	ldi	r30, 0x3B	; 59
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	8f 70       	andi	r24, 0x0F	; 15
    202c:	8c 93       	st	X, r24
    202e:	17 c0       	rjmp	.+46     	; 0x205e <DIO_clear_high_nibble+0x8c>
		break;
	case 'B':
		PORTB&=~(0xf0);
    2030:	a8 e3       	ldi	r26, 0x38	; 56
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	e8 e3       	ldi	r30, 0x38	; 56
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	8f 70       	andi	r24, 0x0F	; 15
    203c:	8c 93       	st	X, r24
    203e:	0f c0       	rjmp	.+30     	; 0x205e <DIO_clear_high_nibble+0x8c>
		break;
	case 'C':
		PORTC&=~(0xf0);
    2040:	a5 e3       	ldi	r26, 0x35	; 53
    2042:	b0 e0       	ldi	r27, 0x00	; 0
    2044:	e5 e3       	ldi	r30, 0x35	; 53
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	8f 70       	andi	r24, 0x0F	; 15
    204c:	8c 93       	st	X, r24
    204e:	07 c0       	rjmp	.+14     	; 0x205e <DIO_clear_high_nibble+0x8c>
		break;
	case 'D':
		PORTD&=~(0xf0);
    2050:	a2 e3       	ldi	r26, 0x32	; 50
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	e2 e3       	ldi	r30, 0x32	; 50
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	8f 70       	andi	r24, 0x0F	; 15
    205c:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	08 95       	ret

0000206a <DIO_write_high_nibble>:

void DIO_write_high_nibble(uint8 portname,uint8 value)
{
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	00 d0       	rcall	.+0      	; 0x2070 <DIO_write_high_nibble+0x6>
    2070:	00 d0       	rcall	.+0      	; 0x2072 <DIO_write_high_nibble+0x8>
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
    2076:	89 83       	std	Y+1, r24	; 0x01
    2078:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
    207a:	8a 81       	ldd	r24, Y+2	; 0x02
    207c:	82 95       	swap	r24
    207e:	80 7f       	andi	r24, 0xF0	; 240
    2080:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    2082:	89 81       	ldd	r24, Y+1	; 0x01
    2084:	28 2f       	mov	r18, r24
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	3c 83       	std	Y+4, r19	; 0x04
    208a:	2b 83       	std	Y+3, r18	; 0x03
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
    2090:	82 34       	cpi	r24, 0x42	; 66
    2092:	91 05       	cpc	r25, r1
    2094:	31 f1       	breq	.+76     	; 0x20e2 <DIO_write_high_nibble+0x78>
    2096:	2b 81       	ldd	r18, Y+3	; 0x03
    2098:	3c 81       	ldd	r19, Y+4	; 0x04
    209a:	23 34       	cpi	r18, 0x43	; 67
    209c:	31 05       	cpc	r19, r1
    209e:	34 f4       	brge	.+12     	; 0x20ac <DIO_write_high_nibble+0x42>
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	9c 81       	ldd	r25, Y+4	; 0x04
    20a4:	81 34       	cpi	r24, 0x41	; 65
    20a6:	91 05       	cpc	r25, r1
    20a8:	61 f0       	breq	.+24     	; 0x20c2 <DIO_write_high_nibble+0x58>
    20aa:	4a c0       	rjmp	.+148    	; 0x2140 <DIO_write_high_nibble+0xd6>
    20ac:	2b 81       	ldd	r18, Y+3	; 0x03
    20ae:	3c 81       	ldd	r19, Y+4	; 0x04
    20b0:	23 34       	cpi	r18, 0x43	; 67
    20b2:	31 05       	cpc	r19, r1
    20b4:	31 f1       	breq	.+76     	; 0x2102 <DIO_write_high_nibble+0x98>
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ba:	84 34       	cpi	r24, 0x44	; 68
    20bc:	91 05       	cpc	r25, r1
    20be:	89 f1       	breq	.+98     	; 0x2122 <DIO_write_high_nibble+0xb8>
    20c0:	3f c0       	rjmp	.+126    	; 0x2140 <DIO_write_high_nibble+0xd6>
	{
	case 'A':
		PORTA&=0x0f;
    20c2:	ab e3       	ldi	r26, 0x3B	; 59
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	eb e3       	ldi	r30, 0x3B	; 59
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	8f 70       	andi	r24, 0x0F	; 15
    20ce:	8c 93       	st	X, r24
		PORTA|=value;
    20d0:	ab e3       	ldi	r26, 0x3B	; 59
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	eb e3       	ldi	r30, 0x3B	; 59
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	90 81       	ld	r25, Z
    20da:	8a 81       	ldd	r24, Y+2	; 0x02
    20dc:	89 2b       	or	r24, r25
    20de:	8c 93       	st	X, r24
    20e0:	2f c0       	rjmp	.+94     	; 0x2140 <DIO_write_high_nibble+0xd6>
		break;
	case 'B':
		PORTB&=0x0f;
    20e2:	a8 e3       	ldi	r26, 0x38	; 56
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e8 e3       	ldi	r30, 0x38	; 56
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	8f 70       	andi	r24, 0x0F	; 15
    20ee:	8c 93       	st	X, r24
		PORTA|=value;
    20f0:	ab e3       	ldi	r26, 0x3B	; 59
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	eb e3       	ldi	r30, 0x3B	; 59
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	90 81       	ld	r25, Z
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	89 2b       	or	r24, r25
    20fe:	8c 93       	st	X, r24
    2100:	1f c0       	rjmp	.+62     	; 0x2140 <DIO_write_high_nibble+0xd6>
		break;
	case 'C':
		PORTC&=0x0f;
    2102:	a5 e3       	ldi	r26, 0x35	; 53
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	e5 e3       	ldi	r30, 0x35	; 53
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	8f 70       	andi	r24, 0x0F	; 15
    210e:	8c 93       	st	X, r24
		PORTA|=value;
    2110:	ab e3       	ldi	r26, 0x3B	; 59
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	eb e3       	ldi	r30, 0x3B	; 59
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	90 81       	ld	r25, Z
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	89 2b       	or	r24, r25
    211e:	8c 93       	st	X, r24
    2120:	0f c0       	rjmp	.+30     	; 0x2140 <DIO_write_high_nibble+0xd6>
		break;
	case 'D':
		PORTD&=0x0f;
    2122:	a2 e3       	ldi	r26, 0x32	; 50
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e2 e3       	ldi	r30, 0x32	; 50
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	8f 70       	andi	r24, 0x0F	; 15
    212e:	8c 93       	st	X, r24
		PORTD|=value;
    2130:	a2 e3       	ldi	r26, 0x32	; 50
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e2 e3       	ldi	r30, 0x32	; 50
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	90 81       	ld	r25, Z
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
    213c:	89 2b       	or	r24, r25
    213e:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	0f 90       	pop	r0
    2146:	0f 90       	pop	r0
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	08 95       	ret

0000214e <DIO_write_high_nibbleDir>:

void DIO_write_high_nibbleDir(uint8 portname,uint8 direction)
{
    214e:	df 93       	push	r29
    2150:	cf 93       	push	r28
    2152:	00 d0       	rcall	.+0      	; 0x2154 <DIO_write_high_nibbleDir+0x6>
    2154:	00 d0       	rcall	.+0      	; 0x2156 <DIO_write_high_nibbleDir+0x8>
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	89 83       	std	Y+1, r24	; 0x01
    215c:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	28 2f       	mov	r18, r24
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	3c 83       	std	Y+4, r19	; 0x04
    2166:	2b 83       	std	Y+3, r18	; 0x03
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	9c 81       	ldd	r25, Y+4	; 0x04
    216c:	82 34       	cpi	r24, 0x42	; 66
    216e:	91 05       	cpc	r25, r1
    2170:	49 f1       	breq	.+82     	; 0x21c4 <DIO_write_high_nibbleDir+0x76>
    2172:	2b 81       	ldd	r18, Y+3	; 0x03
    2174:	3c 81       	ldd	r19, Y+4	; 0x04
    2176:	23 34       	cpi	r18, 0x43	; 67
    2178:	31 05       	cpc	r19, r1
    217a:	34 f4       	brge	.+12     	; 0x2188 <DIO_write_high_nibbleDir+0x3a>
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	9c 81       	ldd	r25, Y+4	; 0x04
    2180:	81 34       	cpi	r24, 0x41	; 65
    2182:	91 05       	cpc	r25, r1
    2184:	61 f0       	breq	.+24     	; 0x219e <DIO_write_high_nibbleDir+0x50>
    2186:	56 c0       	rjmp	.+172    	; 0x2234 <DIO_write_high_nibbleDir+0xe6>
    2188:	2b 81       	ldd	r18, Y+3	; 0x03
    218a:	3c 81       	ldd	r19, Y+4	; 0x04
    218c:	23 34       	cpi	r18, 0x43	; 67
    218e:	31 05       	cpc	r19, r1
    2190:	61 f1       	breq	.+88     	; 0x21ea <DIO_write_high_nibbleDir+0x9c>
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	9c 81       	ldd	r25, Y+4	; 0x04
    2196:	84 34       	cpi	r24, 0x44	; 68
    2198:	91 05       	cpc	r25, r1
    219a:	d1 f1       	breq	.+116    	; 0x2210 <DIO_write_high_nibbleDir+0xc2>
    219c:	4b c0       	rjmp	.+150    	; 0x2234 <DIO_write_high_nibbleDir+0xe6>
	{
	case 'A':
		if(direction==1)
    219e:	8a 81       	ldd	r24, Y+2	; 0x02
    21a0:	81 30       	cpi	r24, 0x01	; 1
    21a2:	41 f4       	brne	.+16     	; 0x21b4 <DIO_write_high_nibbleDir+0x66>
			DDRA|=0xf0;
    21a4:	aa e3       	ldi	r26, 0x3A	; 58
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	ea e3       	ldi	r30, 0x3A	; 58
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	80 6f       	ori	r24, 0xF0	; 240
    21b0:	8c 93       	st	X, r24
    21b2:	40 c0       	rjmp	.+128    	; 0x2234 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRA&=~(0xf0);
    21b4:	aa e3       	ldi	r26, 0x3A	; 58
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	ea e3       	ldi	r30, 0x3A	; 58
    21ba:	f0 e0       	ldi	r31, 0x00	; 0
    21bc:	80 81       	ld	r24, Z
    21be:	8f 70       	andi	r24, 0x0F	; 15
    21c0:	8c 93       	st	X, r24
    21c2:	38 c0       	rjmp	.+112    	; 0x2234 <DIO_write_high_nibbleDir+0xe6>
		break;
	case 'B':
		if(direction==1)
    21c4:	8a 81       	ldd	r24, Y+2	; 0x02
    21c6:	81 30       	cpi	r24, 0x01	; 1
    21c8:	41 f4       	brne	.+16     	; 0x21da <DIO_write_high_nibbleDir+0x8c>
			DDRB|=0xf0;
    21ca:	a7 e3       	ldi	r26, 0x37	; 55
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	e7 e3       	ldi	r30, 0x37	; 55
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 81       	ld	r24, Z
    21d4:	80 6f       	ori	r24, 0xF0	; 240
    21d6:	8c 93       	st	X, r24
    21d8:	2d c0       	rjmp	.+90     	; 0x2234 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRB&=~(0xf0);
    21da:	a7 e3       	ldi	r26, 0x37	; 55
    21dc:	b0 e0       	ldi	r27, 0x00	; 0
    21de:	e7 e3       	ldi	r30, 0x37	; 55
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	8f 70       	andi	r24, 0x0F	; 15
    21e6:	8c 93       	st	X, r24
    21e8:	25 c0       	rjmp	.+74     	; 0x2234 <DIO_write_high_nibbleDir+0xe6>
		break;
	case 'C':
		if(direction==1)
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	81 30       	cpi	r24, 0x01	; 1
    21ee:	41 f4       	brne	.+16     	; 0x2200 <DIO_write_high_nibbleDir+0xb2>
			DDRC|=0xf0;
    21f0:	a4 e3       	ldi	r26, 0x34	; 52
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	e4 e3       	ldi	r30, 0x34	; 52
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	80 6f       	ori	r24, 0xF0	; 240
    21fc:	8c 93       	st	X, r24
    21fe:	1a c0       	rjmp	.+52     	; 0x2234 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRC&=~(0xf0);
    2200:	a4 e3       	ldi	r26, 0x34	; 52
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	e4 e3       	ldi	r30, 0x34	; 52
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	8f 70       	andi	r24, 0x0F	; 15
    220c:	8c 93       	st	X, r24
    220e:	12 c0       	rjmp	.+36     	; 0x2234 <DIO_write_high_nibbleDir+0xe6>
		break;
	case 'D':
		if(direction==1)
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	81 30       	cpi	r24, 0x01	; 1
    2214:	41 f4       	brne	.+16     	; 0x2226 <DIO_write_high_nibbleDir+0xd8>
			DDRD|=0xf0;
    2216:	a1 e3       	ldi	r26, 0x31	; 49
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	e1 e3       	ldi	r30, 0x31	; 49
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	80 6f       	ori	r24, 0xF0	; 240
    2222:	8c 93       	st	X, r24
    2224:	07 c0       	rjmp	.+14     	; 0x2234 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRD&=~(0xf0);
    2226:	a1 e3       	ldi	r26, 0x31	; 49
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	e1 e3       	ldi	r30, 0x31	; 49
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	8f 70       	andi	r24, 0x0F	; 15
    2232:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	cf 91       	pop	r28
    223e:	df 91       	pop	r29
    2240:	08 95       	ret

00002242 <DIO_write_low_nibbleDir>:

void DIO_write_low_nibbleDir(uint8 portname,uint8 direction)
{
    2242:	df 93       	push	r29
    2244:	cf 93       	push	r28
    2246:	00 d0       	rcall	.+0      	; 0x2248 <DIO_write_low_nibbleDir+0x6>
    2248:	00 d0       	rcall	.+0      	; 0x224a <DIO_write_low_nibbleDir+0x8>
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62
    224e:	89 83       	std	Y+1, r24	; 0x01
    2250:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	3c 83       	std	Y+4, r19	; 0x04
    225a:	2b 83       	std	Y+3, r18	; 0x03
    225c:	8b 81       	ldd	r24, Y+3	; 0x03
    225e:	9c 81       	ldd	r25, Y+4	; 0x04
    2260:	82 34       	cpi	r24, 0x42	; 66
    2262:	91 05       	cpc	r25, r1
    2264:	49 f1       	breq	.+82     	; 0x22b8 <DIO_write_low_nibbleDir+0x76>
    2266:	2b 81       	ldd	r18, Y+3	; 0x03
    2268:	3c 81       	ldd	r19, Y+4	; 0x04
    226a:	23 34       	cpi	r18, 0x43	; 67
    226c:	31 05       	cpc	r19, r1
    226e:	34 f4       	brge	.+12     	; 0x227c <DIO_write_low_nibbleDir+0x3a>
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	9c 81       	ldd	r25, Y+4	; 0x04
    2274:	81 34       	cpi	r24, 0x41	; 65
    2276:	91 05       	cpc	r25, r1
    2278:	61 f0       	breq	.+24     	; 0x2292 <DIO_write_low_nibbleDir+0x50>
    227a:	56 c0       	rjmp	.+172    	; 0x2328 <DIO_write_low_nibbleDir+0xe6>
    227c:	2b 81       	ldd	r18, Y+3	; 0x03
    227e:	3c 81       	ldd	r19, Y+4	; 0x04
    2280:	23 34       	cpi	r18, 0x43	; 67
    2282:	31 05       	cpc	r19, r1
    2284:	61 f1       	breq	.+88     	; 0x22de <DIO_write_low_nibbleDir+0x9c>
    2286:	8b 81       	ldd	r24, Y+3	; 0x03
    2288:	9c 81       	ldd	r25, Y+4	; 0x04
    228a:	84 34       	cpi	r24, 0x44	; 68
    228c:	91 05       	cpc	r25, r1
    228e:	d1 f1       	breq	.+116    	; 0x2304 <DIO_write_low_nibbleDir+0xc2>
    2290:	4b c0       	rjmp	.+150    	; 0x2328 <DIO_write_low_nibbleDir+0xe6>
	{
	case 'A':
		if(direction==1)
    2292:	8a 81       	ldd	r24, Y+2	; 0x02
    2294:	81 30       	cpi	r24, 0x01	; 1
    2296:	41 f4       	brne	.+16     	; 0x22a8 <DIO_write_low_nibbleDir+0x66>
			DDRA|=0x0f;
    2298:	aa e3       	ldi	r26, 0x3A	; 58
    229a:	b0 e0       	ldi	r27, 0x00	; 0
    229c:	ea e3       	ldi	r30, 0x3A	; 58
    229e:	f0 e0       	ldi	r31, 0x00	; 0
    22a0:	80 81       	ld	r24, Z
    22a2:	8f 60       	ori	r24, 0x0F	; 15
    22a4:	8c 93       	st	X, r24
    22a6:	40 c0       	rjmp	.+128    	; 0x2328 <DIO_write_low_nibbleDir+0xe6>
		else
			DDRA&=~(0x0f);
    22a8:	aa e3       	ldi	r26, 0x3A	; 58
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	ea e3       	ldi	r30, 0x3A	; 58
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	80 7f       	andi	r24, 0xF0	; 240
    22b4:	8c 93       	st	X, r24
    22b6:	38 c0       	rjmp	.+112    	; 0x2328 <DIO_write_low_nibbleDir+0xe6>
		break;
	case 'B':
		if(direction==1)
    22b8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ba:	81 30       	cpi	r24, 0x01	; 1
    22bc:	41 f4       	brne	.+16     	; 0x22ce <DIO_write_low_nibbleDir+0x8c>
			DDRB|=0x0f;
    22be:	a7 e3       	ldi	r26, 0x37	; 55
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e7 e3       	ldi	r30, 0x37	; 55
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	8f 60       	ori	r24, 0x0F	; 15
    22ca:	8c 93       	st	X, r24
    22cc:	2d c0       	rjmp	.+90     	; 0x2328 <DIO_write_low_nibbleDir+0xe6>
		else
			DDRB&=~(0x0f);
    22ce:	a7 e3       	ldi	r26, 0x37	; 55
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	e7 e3       	ldi	r30, 0x37	; 55
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	80 7f       	andi	r24, 0xF0	; 240
    22da:	8c 93       	st	X, r24
    22dc:	25 c0       	rjmp	.+74     	; 0x2328 <DIO_write_low_nibbleDir+0xe6>
		break;
	case 'C':
		if(direction==1)
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	81 30       	cpi	r24, 0x01	; 1
    22e2:	41 f4       	brne	.+16     	; 0x22f4 <DIO_write_low_nibbleDir+0xb2>
			DDRC|=0x0f;
    22e4:	a4 e3       	ldi	r26, 0x34	; 52
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	e4 e3       	ldi	r30, 0x34	; 52
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	8f 60       	ori	r24, 0x0F	; 15
    22f0:	8c 93       	st	X, r24
    22f2:	1a c0       	rjmp	.+52     	; 0x2328 <DIO_write_low_nibbleDir+0xe6>
		else
			DDRC&=~(0x0f);
    22f4:	a4 e3       	ldi	r26, 0x34	; 52
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	e4 e3       	ldi	r30, 0x34	; 52
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	80 7f       	andi	r24, 0xF0	; 240
    2300:	8c 93       	st	X, r24
    2302:	12 c0       	rjmp	.+36     	; 0x2328 <DIO_write_low_nibbleDir+0xe6>
		break;
	case 'D':
		if(direction==1)
    2304:	8a 81       	ldd	r24, Y+2	; 0x02
    2306:	81 30       	cpi	r24, 0x01	; 1
    2308:	41 f4       	brne	.+16     	; 0x231a <DIO_write_low_nibbleDir+0xd8>
			DDRD|=0x0f;
    230a:	a1 e3       	ldi	r26, 0x31	; 49
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	e1 e3       	ldi	r30, 0x31	; 49
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	8f 60       	ori	r24, 0x0F	; 15
    2316:	8c 93       	st	X, r24
    2318:	07 c0       	rjmp	.+14     	; 0x2328 <DIO_write_low_nibbleDir+0xe6>
		else
			DDRD&=~(0x0f);
    231a:	a1 e3       	ldi	r26, 0x31	; 49
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	e1 e3       	ldi	r30, 0x31	; 49
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	80 7f       	andi	r24, 0xF0	; 240
    2326:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	cf 91       	pop	r28
    2332:	df 91       	pop	r29
    2334:	08 95       	ret

00002336 <KeyPad_init>:
#endif
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void KeyPad_init(void)
{
    2336:	df 93       	push	r29
    2338:	cf 93       	push	r28
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
	DIO_setPINDir( KEYPAD_PORT_OUT,0,in);
    233e:	82 e4       	ldi	r24, 0x42	; 66
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	40 e0       	ldi	r20, 0x00	; 0
    2344:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_OUT,1,in);
    2348:	82 e4       	ldi	r24, 0x42	; 66
    234a:	61 e0       	ldi	r22, 0x01	; 1
    234c:	40 e0       	ldi	r20, 0x00	; 0
    234e:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_OUT,2,in);
    2352:	82 e4       	ldi	r24, 0x42	; 66
    2354:	62 e0       	ldi	r22, 0x02	; 2
    2356:	40 e0       	ldi	r20, 0x00	; 0
    2358:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_OUT,3,in);
    235c:	82 e4       	ldi	r24, 0x42	; 66
    235e:	63 e0       	ldi	r22, 0x03	; 3
    2360:	40 e0       	ldi	r20, 0x00	; 0
    2362:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,0,in);
    2366:	81 e4       	ldi	r24, 0x41	; 65
    2368:	60 e0       	ldi	r22, 0x00	; 0
    236a:	40 e0       	ldi	r20, 0x00	; 0
    236c:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,1,in);
    2370:	81 e4       	ldi	r24, 0x41	; 65
    2372:	61 e0       	ldi	r22, 0x01	; 1
    2374:	40 e0       	ldi	r20, 0x00	; 0
    2376:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,2,in);
    237a:	81 e4       	ldi	r24, 0x41	; 65
    237c:	62 e0       	ldi	r22, 0x02	; 2
    237e:	40 e0       	ldi	r20, 0x00	; 0
    2380:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_setPINDir>
	DIO_setPINDir( KEYPAD_PORT_IN,3,in);
    2384:	81 e4       	ldi	r24, 0x41	; 65
    2386:	63 e0       	ldi	r22, 0x03	; 3
    2388:	40 e0       	ldi	r20, 0x00	; 0
    238a:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_setPINDir>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,0,1);
    238e:	81 e4       	ldi	r24, 0x41	; 65
    2390:	60 e0       	ldi	r22, 0x00	; 0
    2392:	41 e0       	ldi	r20, 0x01	; 1
    2394:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <DIO_enablePullup_pin>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,1,1);
    2398:	81 e4       	ldi	r24, 0x41	; 65
    239a:	61 e0       	ldi	r22, 0x01	; 1
    239c:	41 e0       	ldi	r20, 0x01	; 1
    239e:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <DIO_enablePullup_pin>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,2,1);
    23a2:	81 e4       	ldi	r24, 0x41	; 65
    23a4:	62 e0       	ldi	r22, 0x02	; 2
    23a6:	41 e0       	ldi	r20, 0x01	; 1
    23a8:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <DIO_enablePullup_pin>
	DIO_enablePullup_pin(KEYPAD_PORT_IN,3,1);
    23ac:	81 e4       	ldi	r24, 0x41	; 65
    23ae:	63 e0       	ldi	r22, 0x03	; 3
    23b0:	41 e0       	ldi	r20, 0x01	; 1
    23b2:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <DIO_enablePullup_pin>
}
    23b6:	cf 91       	pop	r28
    23b8:	df 91       	pop	r29
    23ba:	08 95       	ret

000023bc <KeyPad_getPressedKey>:

uint8 KeyPad_getPressedKey(void)
{
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	00 d0       	rcall	.+0      	; 0x23c2 <KeyPad_getPressedKey+0x6>
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		KeyPad_init();
    23c6:	0e 94 9b 11 	call	0x2336	; 0x2336 <KeyPad_init>
		for(row=0;row<N_row;row++)
    23ca:	19 82       	std	Y+1, r1	; 0x01
    23cc:	38 c0       	rjmp	.+112    	; 0x243e <KeyPad_getPressedKey+0x82>
		{
			if(row>0)
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	88 23       	and	r24, r24
    23d2:	41 f0       	breq	.+16     	; 0x23e4 <KeyPad_getPressedKey+0x28>
			{
				DIO_setPINDir( KEYPAD_PORT_OUT,row-1,in);
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	98 2f       	mov	r25, r24
    23d8:	91 50       	subi	r25, 0x01	; 1
    23da:	82 e4       	ldi	r24, 0x42	; 66
    23dc:	69 2f       	mov	r22, r25
    23de:	40 e0       	ldi	r20, 0x00	; 0
    23e0:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_setPINDir>
			}
			DIO_setPINDir( KEYPAD_PORT_OUT,row,out);
    23e4:	82 e4       	ldi	r24, 0x42	; 66
    23e6:	69 81       	ldd	r22, Y+1	; 0x01
    23e8:	41 e0       	ldi	r20, 0x01	; 1
    23ea:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_setPINDir>
			DIO_write_PIN(KEYPAD_PORT_OUT,row,0);
    23ee:	82 e4       	ldi	r24, 0x42	; 66
    23f0:	69 81       	ldd	r22, Y+1	; 0x01
    23f2:	40 e0       	ldi	r20, 0x00	; 0
    23f4:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <DIO_write_PIN>
			for(col=0;col<N_col;col++)
    23f8:	1a 82       	std	Y+2, r1	; 0x02
    23fa:	1b c0       	rjmp	.+54     	; 0x2432 <KeyPad_getPressedKey+0x76>
			{
				if(DIO_read_PIN(KEYPAD_PORT_IN,col)==0)
    23fc:	81 e4       	ldi	r24, 0x41	; 65
    23fe:	6a 81       	ldd	r22, Y+2	; 0x02
    2400:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <DIO_read_PIN>
    2404:	88 23       	and	r24, r24
    2406:	91 f4       	brne	.+36     	; 0x242c <KeyPad_getPressedKey+0x70>
				{
					#if (N_col==3)
					return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1);
					#elif (N_col==4)
					return KeyPad_4x4_adjustKeyNumber((col*N_col)+row+1);
    2408:	8a 81       	ldd	r24, Y+2	; 0x02
    240a:	88 2f       	mov	r24, r24
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	88 0f       	add	r24, r24
    2410:	99 1f       	adc	r25, r25
    2412:	88 0f       	add	r24, r24
    2414:	99 1f       	adc	r25, r25
    2416:	98 2f       	mov	r25, r24
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	89 0f       	add	r24, r25
    241c:	8f 5f       	subi	r24, 0xFF	; 255
    241e:	0e 94 8f 12 	call	0x251e	; 0x251e <KeyPad_4x4_adjustKeyNumber>
				}
			}
		}
	}

}
    2422:	0f 90       	pop	r0
    2424:	0f 90       	pop	r0
    2426:	cf 91       	pop	r28
    2428:	df 91       	pop	r29
    242a:	08 95       	ret
			{
				DIO_setPINDir( KEYPAD_PORT_OUT,row-1,in);
			}
			DIO_setPINDir( KEYPAD_PORT_OUT,row,out);
			DIO_write_PIN(KEYPAD_PORT_OUT,row,0);
			for(col=0;col<N_col;col++)
    242c:	8a 81       	ldd	r24, Y+2	; 0x02
    242e:	8f 5f       	subi	r24, 0xFF	; 255
    2430:	8a 83       	std	Y+2, r24	; 0x02
    2432:	8a 81       	ldd	r24, Y+2	; 0x02
    2434:	84 30       	cpi	r24, 0x04	; 4
    2436:	10 f3       	brcs	.-60     	; 0x23fc <KeyPad_getPressedKey+0x40>
{
	uint8 col,row;
	while(1)
	{
		KeyPad_init();
		for(row=0;row<N_row;row++)
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	8f 5f       	subi	r24, 0xFF	; 255
    243c:	89 83       	std	Y+1, r24	; 0x01
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	84 30       	cpi	r24, 0x04	; 4
    2442:	28 f2       	brcs	.-118    	; 0x23ce <KeyPad_getPressedKey+0x12>
    2444:	c0 cf       	rjmp	.-128    	; 0x23c6 <KeyPad_getPressedKey+0xa>

00002446 <KeyPad_4x3_adjustKeyNumber>:

}


uint8 KeyPad_4x3_adjustKeyNumber(uint8 button_number)
{
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	00 d0       	rcall	.+0      	; 0x244c <KeyPad_4x3_adjustKeyNumber+0x6>
    244c:	00 d0       	rcall	.+0      	; 0x244e <KeyPad_4x3_adjustKeyNumber+0x8>
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
    2452:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	28 2f       	mov	r18, r24
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	3c 83       	std	Y+4, r19	; 0x04
    245c:	2b 83       	std	Y+3, r18	; 0x03
    245e:	8b 81       	ldd	r24, Y+3	; 0x03
    2460:	9c 81       	ldd	r25, Y+4	; 0x04
    2462:	85 30       	cpi	r24, 0x05	; 5
    2464:	91 05       	cpc	r25, r1
    2466:	09 f4       	brne	.+2      	; 0x246a <KeyPad_4x3_adjustKeyNumber+0x24>
    2468:	41 c0       	rjmp	.+130    	; 0x24ec <KeyPad_4x3_adjustKeyNumber+0xa6>
    246a:	2b 81       	ldd	r18, Y+3	; 0x03
    246c:	3c 81       	ldd	r19, Y+4	; 0x04
    246e:	26 30       	cpi	r18, 0x06	; 6
    2470:	31 05       	cpc	r19, r1
    2472:	dc f4       	brge	.+54     	; 0x24aa <KeyPad_4x3_adjustKeyNumber+0x64>
    2474:	8b 81       	ldd	r24, Y+3	; 0x03
    2476:	9c 81       	ldd	r25, Y+4	; 0x04
    2478:	82 30       	cpi	r24, 0x02	; 2
    247a:	91 05       	cpc	r25, r1
    247c:	71 f1       	breq	.+92     	; 0x24da <KeyPad_4x3_adjustKeyNumber+0x94>
    247e:	2b 81       	ldd	r18, Y+3	; 0x03
    2480:	3c 81       	ldd	r19, Y+4	; 0x04
    2482:	23 30       	cpi	r18, 0x03	; 3
    2484:	31 05       	cpc	r19, r1
    2486:	34 f4       	brge	.+12     	; 0x2494 <KeyPad_4x3_adjustKeyNumber+0x4e>
    2488:	8b 81       	ldd	r24, Y+3	; 0x03
    248a:	9c 81       	ldd	r25, Y+4	; 0x04
    248c:	81 30       	cpi	r24, 0x01	; 1
    248e:	91 05       	cpc	r25, r1
    2490:	09 f1       	breq	.+66     	; 0x24d4 <KeyPad_4x3_adjustKeyNumber+0x8e>
    2492:	3b c0       	rjmp	.+118    	; 0x250a <KeyPad_4x3_adjustKeyNumber+0xc4>
    2494:	2b 81       	ldd	r18, Y+3	; 0x03
    2496:	3c 81       	ldd	r19, Y+4	; 0x04
    2498:	23 30       	cpi	r18, 0x03	; 3
    249a:	31 05       	cpc	r19, r1
    249c:	09 f1       	breq	.+66     	; 0x24e0 <KeyPad_4x3_adjustKeyNumber+0x9a>
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	9c 81       	ldd	r25, Y+4	; 0x04
    24a2:	84 30       	cpi	r24, 0x04	; 4
    24a4:	91 05       	cpc	r25, r1
    24a6:	f9 f0       	breq	.+62     	; 0x24e6 <KeyPad_4x3_adjustKeyNumber+0xa0>
    24a8:	30 c0       	rjmp	.+96     	; 0x250a <KeyPad_4x3_adjustKeyNumber+0xc4>
    24aa:	2b 81       	ldd	r18, Y+3	; 0x03
    24ac:	3c 81       	ldd	r19, Y+4	; 0x04
    24ae:	27 30       	cpi	r18, 0x07	; 7
    24b0:	31 05       	cpc	r19, r1
    24b2:	11 f1       	breq	.+68     	; 0x24f8 <KeyPad_4x3_adjustKeyNumber+0xb2>
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	9c 81       	ldd	r25, Y+4	; 0x04
    24b8:	87 30       	cpi	r24, 0x07	; 7
    24ba:	91 05       	cpc	r25, r1
    24bc:	d4 f0       	brlt	.+52     	; 0x24f2 <KeyPad_4x3_adjustKeyNumber+0xac>
    24be:	2b 81       	ldd	r18, Y+3	; 0x03
    24c0:	3c 81       	ldd	r19, Y+4	; 0x04
    24c2:	28 30       	cpi	r18, 0x08	; 8
    24c4:	31 05       	cpc	r19, r1
    24c6:	d9 f0       	breq	.+54     	; 0x24fe <KeyPad_4x3_adjustKeyNumber+0xb8>
    24c8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ca:	9c 81       	ldd	r25, Y+4	; 0x04
    24cc:	89 30       	cpi	r24, 0x09	; 9
    24ce:	91 05       	cpc	r25, r1
    24d0:	c9 f0       	breq	.+50     	; 0x2504 <KeyPad_4x3_adjustKeyNumber+0xbe>
    24d2:	1b c0       	rjmp	.+54     	; 0x250a <KeyPad_4x3_adjustKeyNumber+0xc4>
	{
	case 1:
		return '1';
    24d4:	91 e3       	ldi	r25, 0x31	; 49
    24d6:	9a 83       	std	Y+2, r25	; 0x02
    24d8:	1a c0       	rjmp	.+52     	; 0x250e <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 2:
		return '2';
    24da:	22 e3       	ldi	r18, 0x32	; 50
    24dc:	2a 83       	std	Y+2, r18	; 0x02
    24de:	17 c0       	rjmp	.+46     	; 0x250e <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 3:
		return '3';
    24e0:	33 e3       	ldi	r19, 0x33	; 51
    24e2:	3a 83       	std	Y+2, r19	; 0x02
    24e4:	14 c0       	rjmp	.+40     	; 0x250e <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 4:
		return '4';
    24e6:	84 e3       	ldi	r24, 0x34	; 52
    24e8:	8a 83       	std	Y+2, r24	; 0x02
    24ea:	11 c0       	rjmp	.+34     	; 0x250e <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 5:
		return '5';
    24ec:	95 e3       	ldi	r25, 0x35	; 53
    24ee:	9a 83       	std	Y+2, r25	; 0x02
    24f0:	0e c0       	rjmp	.+28     	; 0x250e <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 6:
		return '6';
    24f2:	26 e3       	ldi	r18, 0x36	; 54
    24f4:	2a 83       	std	Y+2, r18	; 0x02
    24f6:	0b c0       	rjmp	.+22     	; 0x250e <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 7:
		return '7';
    24f8:	37 e3       	ldi	r19, 0x37	; 55
    24fa:	3a 83       	std	Y+2, r19	; 0x02
    24fc:	08 c0       	rjmp	.+16     	; 0x250e <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 8:
		return '8';
    24fe:	88 e3       	ldi	r24, 0x38	; 56
    2500:	8a 83       	std	Y+2, r24	; 0x02
    2502:	05 c0       	rjmp	.+10     	; 0x250e <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	case 9:
		return '9';
    2504:	99 e3       	ldi	r25, 0x39	; 57
    2506:	9a 83       	std	Y+2, r25	; 0x02
    2508:	02 c0       	rjmp	.+4      	; 0x250e <KeyPad_4x3_adjustKeyNumber+0xc8>
		break;
	default:
		return '0';
    250a:	20 e3       	ldi	r18, 0x30	; 48
    250c:	2a 83       	std	Y+2, r18	; 0x02
    250e:	8a 81       	ldd	r24, Y+2	; 0x02
		break;

	}

}
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	0f 90       	pop	r0
    2518:	cf 91       	pop	r28
    251a:	df 91       	pop	r29
    251c:	08 95       	ret

0000251e <KeyPad_4x4_adjustKeyNumber>:

uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    251e:	df 93       	push	r29
    2520:	cf 93       	push	r28
    2522:	00 d0       	rcall	.+0      	; 0x2524 <KeyPad_4x4_adjustKeyNumber+0x6>
    2524:	00 d0       	rcall	.+0      	; 0x2526 <KeyPad_4x4_adjustKeyNumber+0x8>
    2526:	cd b7       	in	r28, 0x3d	; 61
    2528:	de b7       	in	r29, 0x3e	; 62
    252a:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	28 2f       	mov	r18, r24
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	3c 83       	std	Y+4, r19	; 0x04
    2534:	2b 83       	std	Y+3, r18	; 0x03
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	9c 81       	ldd	r25, Y+4	; 0x04
    253a:	88 30       	cpi	r24, 0x08	; 8
    253c:	91 05       	cpc	r25, r1
    253e:	09 f4       	brne	.+2      	; 0x2542 <KeyPad_4x4_adjustKeyNumber+0x24>
    2540:	70 c0       	rjmp	.+224    	; 0x2622 <KeyPad_4x4_adjustKeyNumber+0x104>
    2542:	2b 81       	ldd	r18, Y+3	; 0x03
    2544:	3c 81       	ldd	r19, Y+4	; 0x04
    2546:	29 30       	cpi	r18, 0x09	; 9
    2548:	31 05       	cpc	r19, r1
    254a:	5c f5       	brge	.+86     	; 0x25a2 <KeyPad_4x4_adjustKeyNumber+0x84>
    254c:	8b 81       	ldd	r24, Y+3	; 0x03
    254e:	9c 81       	ldd	r25, Y+4	; 0x04
    2550:	84 30       	cpi	r24, 0x04	; 4
    2552:	91 05       	cpc	r25, r1
    2554:	09 f4       	brne	.+2      	; 0x2558 <KeyPad_4x4_adjustKeyNumber+0x3a>
    2556:	59 c0       	rjmp	.+178    	; 0x260a <KeyPad_4x4_adjustKeyNumber+0xec>
    2558:	2b 81       	ldd	r18, Y+3	; 0x03
    255a:	3c 81       	ldd	r19, Y+4	; 0x04
    255c:	25 30       	cpi	r18, 0x05	; 5
    255e:	31 05       	cpc	r19, r1
    2560:	9c f4       	brge	.+38     	; 0x2588 <KeyPad_4x4_adjustKeyNumber+0x6a>
    2562:	8b 81       	ldd	r24, Y+3	; 0x03
    2564:	9c 81       	ldd	r25, Y+4	; 0x04
    2566:	82 30       	cpi	r24, 0x02	; 2
    2568:	91 05       	cpc	r25, r1
    256a:	09 f4       	brne	.+2      	; 0x256e <KeyPad_4x4_adjustKeyNumber+0x50>
    256c:	48 c0       	rjmp	.+144    	; 0x25fe <KeyPad_4x4_adjustKeyNumber+0xe0>
    256e:	2b 81       	ldd	r18, Y+3	; 0x03
    2570:	3c 81       	ldd	r19, Y+4	; 0x04
    2572:	23 30       	cpi	r18, 0x03	; 3
    2574:	31 05       	cpc	r19, r1
    2576:	0c f0       	brlt	.+2      	; 0x257a <KeyPad_4x4_adjustKeyNumber+0x5c>
    2578:	45 c0       	rjmp	.+138    	; 0x2604 <KeyPad_4x4_adjustKeyNumber+0xe6>
    257a:	8b 81       	ldd	r24, Y+3	; 0x03
    257c:	9c 81       	ldd	r25, Y+4	; 0x04
    257e:	81 30       	cpi	r24, 0x01	; 1
    2580:	91 05       	cpc	r25, r1
    2582:	09 f4       	brne	.+2      	; 0x2586 <KeyPad_4x4_adjustKeyNumber+0x68>
    2584:	39 c0       	rjmp	.+114    	; 0x25f8 <KeyPad_4x4_adjustKeyNumber+0xda>
    2586:	67 c0       	rjmp	.+206    	; 0x2656 <KeyPad_4x4_adjustKeyNumber+0x138>
    2588:	2b 81       	ldd	r18, Y+3	; 0x03
    258a:	3c 81       	ldd	r19, Y+4	; 0x04
    258c:	26 30       	cpi	r18, 0x06	; 6
    258e:	31 05       	cpc	r19, r1
    2590:	09 f4       	brne	.+2      	; 0x2594 <KeyPad_4x4_adjustKeyNumber+0x76>
    2592:	41 c0       	rjmp	.+130    	; 0x2616 <KeyPad_4x4_adjustKeyNumber+0xf8>
    2594:	8b 81       	ldd	r24, Y+3	; 0x03
    2596:	9c 81       	ldd	r25, Y+4	; 0x04
    2598:	87 30       	cpi	r24, 0x07	; 7
    259a:	91 05       	cpc	r25, r1
    259c:	0c f0       	brlt	.+2      	; 0x25a0 <KeyPad_4x4_adjustKeyNumber+0x82>
    259e:	3e c0       	rjmp	.+124    	; 0x261c <KeyPad_4x4_adjustKeyNumber+0xfe>
    25a0:	37 c0       	rjmp	.+110    	; 0x2610 <KeyPad_4x4_adjustKeyNumber+0xf2>
    25a2:	2b 81       	ldd	r18, Y+3	; 0x03
    25a4:	3c 81       	ldd	r19, Y+4	; 0x04
    25a6:	2c 30       	cpi	r18, 0x0C	; 12
    25a8:	31 05       	cpc	r19, r1
    25aa:	09 f4       	brne	.+2      	; 0x25ae <KeyPad_4x4_adjustKeyNumber+0x90>
    25ac:	46 c0       	rjmp	.+140    	; 0x263a <KeyPad_4x4_adjustKeyNumber+0x11c>
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	9c 81       	ldd	r25, Y+4	; 0x04
    25b2:	8d 30       	cpi	r24, 0x0D	; 13
    25b4:	91 05       	cpc	r25, r1
    25b6:	5c f4       	brge	.+22     	; 0x25ce <KeyPad_4x4_adjustKeyNumber+0xb0>
    25b8:	2b 81       	ldd	r18, Y+3	; 0x03
    25ba:	3c 81       	ldd	r19, Y+4	; 0x04
    25bc:	2a 30       	cpi	r18, 0x0A	; 10
    25be:	31 05       	cpc	r19, r1
    25c0:	b1 f1       	breq	.+108    	; 0x262e <KeyPad_4x4_adjustKeyNumber+0x110>
    25c2:	8b 81       	ldd	r24, Y+3	; 0x03
    25c4:	9c 81       	ldd	r25, Y+4	; 0x04
    25c6:	8b 30       	cpi	r24, 0x0B	; 11
    25c8:	91 05       	cpc	r25, r1
    25ca:	a4 f5       	brge	.+104    	; 0x2634 <KeyPad_4x4_adjustKeyNumber+0x116>
    25cc:	2d c0       	rjmp	.+90     	; 0x2628 <KeyPad_4x4_adjustKeyNumber+0x10a>
    25ce:	2b 81       	ldd	r18, Y+3	; 0x03
    25d0:	3c 81       	ldd	r19, Y+4	; 0x04
    25d2:	2e 30       	cpi	r18, 0x0E	; 14
    25d4:	31 05       	cpc	r19, r1
    25d6:	b9 f1       	breq	.+110    	; 0x2646 <KeyPad_4x4_adjustKeyNumber+0x128>
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	9c 81       	ldd	r25, Y+4	; 0x04
    25dc:	8e 30       	cpi	r24, 0x0E	; 14
    25de:	91 05       	cpc	r25, r1
    25e0:	7c f1       	brlt	.+94     	; 0x2640 <KeyPad_4x4_adjustKeyNumber+0x122>
    25e2:	2b 81       	ldd	r18, Y+3	; 0x03
    25e4:	3c 81       	ldd	r19, Y+4	; 0x04
    25e6:	2f 30       	cpi	r18, 0x0F	; 15
    25e8:	31 05       	cpc	r19, r1
    25ea:	79 f1       	breq	.+94     	; 0x264a <KeyPad_4x4_adjustKeyNumber+0x12c>
    25ec:	8b 81       	ldd	r24, Y+3	; 0x03
    25ee:	9c 81       	ldd	r25, Y+4	; 0x04
    25f0:	80 31       	cpi	r24, 0x10	; 16
    25f2:	91 05       	cpc	r25, r1
    25f4:	69 f1       	breq	.+90     	; 0x2650 <KeyPad_4x4_adjustKeyNumber+0x132>
    25f6:	2f c0       	rjmp	.+94     	; 0x2656 <KeyPad_4x4_adjustKeyNumber+0x138>
	{
	case 1:
		return 7;
    25f8:	97 e0       	ldi	r25, 0x07	; 7
    25fa:	9a 83       	std	Y+2, r25	; 0x02
    25fc:	2d c0       	rjmp	.+90     	; 0x2658 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 2:
		return 8;
    25fe:	28 e0       	ldi	r18, 0x08	; 8
    2600:	2a 83       	std	Y+2, r18	; 0x02
    2602:	2a c0       	rjmp	.+84     	; 0x2658 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 3:
		return 9;
    2604:	39 e0       	ldi	r19, 0x09	; 9
    2606:	3a 83       	std	Y+2, r19	; 0x02
    2608:	27 c0       	rjmp	.+78     	; 0x2658 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 4:
		return '/';
    260a:	8f e2       	ldi	r24, 0x2F	; 47
    260c:	8a 83       	std	Y+2, r24	; 0x02
    260e:	24 c0       	rjmp	.+72     	; 0x2658 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 5:
		return 4;
    2610:	94 e0       	ldi	r25, 0x04	; 4
    2612:	9a 83       	std	Y+2, r25	; 0x02
    2614:	21 c0       	rjmp	.+66     	; 0x2658 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 6:
		return 5;
    2616:	25 e0       	ldi	r18, 0x05	; 5
    2618:	2a 83       	std	Y+2, r18	; 0x02
    261a:	1e c0       	rjmp	.+60     	; 0x2658 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 7:
		return 6;
    261c:	36 e0       	ldi	r19, 0x06	; 6
    261e:	3a 83       	std	Y+2, r19	; 0x02
    2620:	1b c0       	rjmp	.+54     	; 0x2658 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 8:
		return '*';
    2622:	8a e2       	ldi	r24, 0x2A	; 42
    2624:	8a 83       	std	Y+2, r24	; 0x02
    2626:	18 c0       	rjmp	.+48     	; 0x2658 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 9:
		return 1;
    2628:	91 e0       	ldi	r25, 0x01	; 1
    262a:	9a 83       	std	Y+2, r25	; 0x02
    262c:	15 c0       	rjmp	.+42     	; 0x2658 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 10:
		return 2;
    262e:	22 e0       	ldi	r18, 0x02	; 2
    2630:	2a 83       	std	Y+2, r18	; 0x02
    2632:	12 c0       	rjmp	.+36     	; 0x2658 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 11:
		return 3;
    2634:	33 e0       	ldi	r19, 0x03	; 3
    2636:	3a 83       	std	Y+2, r19	; 0x02
    2638:	0f c0       	rjmp	.+30     	; 0x2658 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 12:
		return '-';
    263a:	8d e2       	ldi	r24, 0x2D	; 45
    263c:	8a 83       	std	Y+2, r24	; 0x02
    263e:	0c c0       	rjmp	.+24     	; 0x2658 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 13:
		return 'A';
    2640:	91 e4       	ldi	r25, 0x41	; 65
    2642:	9a 83       	std	Y+2, r25	; 0x02
    2644:	09 c0       	rjmp	.+18     	; 0x2658 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 14:
		return 0;
    2646:	1a 82       	std	Y+2, r1	; 0x02
    2648:	07 c0       	rjmp	.+14     	; 0x2658 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 15:
		return '=';
    264a:	2d e3       	ldi	r18, 0x3D	; 61
    264c:	2a 83       	std	Y+2, r18	; 0x02
    264e:	04 c0       	rjmp	.+8      	; 0x2658 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;
	case 16:
		return '+';
    2650:	3b e2       	ldi	r19, 0x2B	; 43
    2652:	3a 83       	std	Y+2, r19	; 0x02
    2654:	01 c0       	rjmp	.+2      	; 0x2658 <KeyPad_4x4_adjustKeyNumber+0x13a>
		break;

	default:
		return 0 ;
    2656:	1a 82       	std	Y+2, r1	; 0x02
    2658:	8a 81       	ldd	r24, Y+2	; 0x02
		break;


	}

}
    265a:	0f 90       	pop	r0
    265c:	0f 90       	pop	r0
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	cf 91       	pop	r28
    2664:	df 91       	pop	r29
    2666:	08 95       	ret

00002668 <LCD_refresh>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_refresh(void)
{
    2668:	df 93       	push	r29
    266a:	cf 93       	push	r28
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	aa 97       	sbiw	r28, 0x2a	; 42
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	a0 e8       	ldi	r26, 0x80	; 128
    2682:	bf e3       	ldi	r27, 0x3F	; 63
    2684:	8f a3       	std	Y+39, r24	; 0x27
    2686:	98 a7       	std	Y+40, r25	; 0x28
    2688:	a9 a7       	std	Y+41, r26	; 0x29
    268a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    268c:	6f a1       	ldd	r22, Y+39	; 0x27
    268e:	78 a5       	ldd	r23, Y+40	; 0x28
    2690:	89 a5       	ldd	r24, Y+41	; 0x29
    2692:	9a a5       	ldd	r25, Y+42	; 0x2a
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	4a e7       	ldi	r20, 0x7A	; 122
    269a:	53 e4       	ldi	r21, 0x43	; 67
    269c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	8b a3       	std	Y+35, r24	; 0x23
    26a6:	9c a3       	std	Y+36, r25	; 0x24
    26a8:	ad a3       	std	Y+37, r26	; 0x25
    26aa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26ac:	6b a1       	ldd	r22, Y+35	; 0x23
    26ae:	7c a1       	ldd	r23, Y+36	; 0x24
    26b0:	8d a1       	ldd	r24, Y+37	; 0x25
    26b2:	9e a1       	ldd	r25, Y+38	; 0x26
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	40 e8       	ldi	r20, 0x80	; 128
    26ba:	5f e3       	ldi	r21, 0x3F	; 63
    26bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26c0:	88 23       	and	r24, r24
    26c2:	2c f4       	brge	.+10     	; 0x26ce <LCD_refresh+0x66>
		__ticks = 1;
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	9a a3       	std	Y+34, r25	; 0x22
    26ca:	89 a3       	std	Y+33, r24	; 0x21
    26cc:	3f c0       	rjmp	.+126    	; 0x274c <LCD_refresh+0xe4>
	else if (__tmp > 65535)
    26ce:	6b a1       	ldd	r22, Y+35	; 0x23
    26d0:	7c a1       	ldd	r23, Y+36	; 0x24
    26d2:	8d a1       	ldd	r24, Y+37	; 0x25
    26d4:	9e a1       	ldd	r25, Y+38	; 0x26
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	3f ef       	ldi	r19, 0xFF	; 255
    26da:	4f e7       	ldi	r20, 0x7F	; 127
    26dc:	57 e4       	ldi	r21, 0x47	; 71
    26de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26e2:	18 16       	cp	r1, r24
    26e4:	4c f5       	brge	.+82     	; 0x2738 <LCD_refresh+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e6:	6f a1       	ldd	r22, Y+39	; 0x27
    26e8:	78 a5       	ldd	r23, Y+40	; 0x28
    26ea:	89 a5       	ldd	r24, Y+41	; 0x29
    26ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	40 e2       	ldi	r20, 0x20	; 32
    26f4:	51 e4       	ldi	r21, 0x41	; 65
    26f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	bc 01       	movw	r22, r24
    2700:	cd 01       	movw	r24, r26
    2702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	9a a3       	std	Y+34, r25	; 0x22
    270c:	89 a3       	std	Y+33, r24	; 0x21
    270e:	0f c0       	rjmp	.+30     	; 0x272e <LCD_refresh+0xc6>
    2710:	89 e1       	ldi	r24, 0x19	; 25
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	98 a3       	std	Y+32, r25	; 0x20
    2716:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2718:	8f 8d       	ldd	r24, Y+31	; 0x1f
    271a:	98 a1       	ldd	r25, Y+32	; 0x20
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	f1 f7       	brne	.-4      	; 0x271c <LCD_refresh+0xb4>
    2720:	98 a3       	std	Y+32, r25	; 0x20
    2722:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2724:	89 a1       	ldd	r24, Y+33	; 0x21
    2726:	9a a1       	ldd	r25, Y+34	; 0x22
    2728:	01 97       	sbiw	r24, 0x01	; 1
    272a:	9a a3       	std	Y+34, r25	; 0x22
    272c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272e:	89 a1       	ldd	r24, Y+33	; 0x21
    2730:	9a a1       	ldd	r25, Y+34	; 0x22
    2732:	00 97       	sbiw	r24, 0x00	; 0
    2734:	69 f7       	brne	.-38     	; 0x2710 <LCD_refresh+0xa8>
    2736:	14 c0       	rjmp	.+40     	; 0x2760 <LCD_refresh+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2738:	6b a1       	ldd	r22, Y+35	; 0x23
    273a:	7c a1       	ldd	r23, Y+36	; 0x24
    273c:	8d a1       	ldd	r24, Y+37	; 0x25
    273e:	9e a1       	ldd	r25, Y+38	; 0x26
    2740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	9a a3       	std	Y+34, r25	; 0x22
    274a:	89 a3       	std	Y+33, r24	; 0x21
    274c:	89 a1       	ldd	r24, Y+33	; 0x21
    274e:	9a a1       	ldd	r25, Y+34	; 0x22
    2750:	9e 8f       	std	Y+30, r25	; 0x1e
    2752:	8d 8f       	std	Y+29, r24	; 0x1d
    2754:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2756:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	f1 f7       	brne	.-4      	; 0x2758 <LCD_refresh+0xf0>
    275c:	9e 8f       	std	Y+30, r25	; 0x1e
    275e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,0);
    2760:	83 e4       	ldi	r24, 0x43	; 67
    2762:	62 e0       	ldi	r22, 0x02	; 2
    2764:	40 e0       	ldi	r20, 0x00	; 0
    2766:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <DIO_write_PIN>
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	a0 e8       	ldi	r26, 0x80	; 128
    2770:	bf e3       	ldi	r27, 0x3F	; 63
    2772:	89 8f       	std	Y+25, r24	; 0x19
    2774:	9a 8f       	std	Y+26, r25	; 0x1a
    2776:	ab 8f       	std	Y+27, r26	; 0x1b
    2778:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277a:	69 8d       	ldd	r22, Y+25	; 0x19
    277c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    277e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2780:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	4a e7       	ldi	r20, 0x7A	; 122
    2788:	53 e4       	ldi	r21, 0x43	; 67
    278a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	8d 8b       	std	Y+21, r24	; 0x15
    2794:	9e 8b       	std	Y+22, r25	; 0x16
    2796:	af 8b       	std	Y+23, r26	; 0x17
    2798:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    279a:	6d 89       	ldd	r22, Y+21	; 0x15
    279c:	7e 89       	ldd	r23, Y+22	; 0x16
    279e:	8f 89       	ldd	r24, Y+23	; 0x17
    27a0:	98 8d       	ldd	r25, Y+24	; 0x18
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	40 e8       	ldi	r20, 0x80	; 128
    27a8:	5f e3       	ldi	r21, 0x3F	; 63
    27aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ae:	88 23       	and	r24, r24
    27b0:	2c f4       	brge	.+10     	; 0x27bc <LCD_refresh+0x154>
		__ticks = 1;
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	9c 8b       	std	Y+20, r25	; 0x14
    27b8:	8b 8b       	std	Y+19, r24	; 0x13
    27ba:	3f c0       	rjmp	.+126    	; 0x283a <LCD_refresh+0x1d2>
	else if (__tmp > 65535)
    27bc:	6d 89       	ldd	r22, Y+21	; 0x15
    27be:	7e 89       	ldd	r23, Y+22	; 0x16
    27c0:	8f 89       	ldd	r24, Y+23	; 0x17
    27c2:	98 8d       	ldd	r25, Y+24	; 0x18
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	3f ef       	ldi	r19, 0xFF	; 255
    27c8:	4f e7       	ldi	r20, 0x7F	; 127
    27ca:	57 e4       	ldi	r21, 0x47	; 71
    27cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27d0:	18 16       	cp	r1, r24
    27d2:	4c f5       	brge	.+82     	; 0x2826 <LCD_refresh+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d4:	69 8d       	ldd	r22, Y+25	; 0x19
    27d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e2       	ldi	r20, 0x20	; 32
    27e2:	51 e4       	ldi	r21, 0x41	; 65
    27e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e8:	dc 01       	movw	r26, r24
    27ea:	cb 01       	movw	r24, r22
    27ec:	bc 01       	movw	r22, r24
    27ee:	cd 01       	movw	r24, r26
    27f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	9c 8b       	std	Y+20, r25	; 0x14
    27fa:	8b 8b       	std	Y+19, r24	; 0x13
    27fc:	0f c0       	rjmp	.+30     	; 0x281c <LCD_refresh+0x1b4>
    27fe:	89 e1       	ldi	r24, 0x19	; 25
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	9a 8b       	std	Y+18, r25	; 0x12
    2804:	89 8b       	std	Y+17, r24	; 0x11
    2806:	89 89       	ldd	r24, Y+17	; 0x11
    2808:	9a 89       	ldd	r25, Y+18	; 0x12
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	f1 f7       	brne	.-4      	; 0x280a <LCD_refresh+0x1a2>
    280e:	9a 8b       	std	Y+18, r25	; 0x12
    2810:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2812:	8b 89       	ldd	r24, Y+19	; 0x13
    2814:	9c 89       	ldd	r25, Y+20	; 0x14
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	9c 8b       	std	Y+20, r25	; 0x14
    281a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    281c:	8b 89       	ldd	r24, Y+19	; 0x13
    281e:	9c 89       	ldd	r25, Y+20	; 0x14
    2820:	00 97       	sbiw	r24, 0x00	; 0
    2822:	69 f7       	brne	.-38     	; 0x27fe <LCD_refresh+0x196>
    2824:	14 c0       	rjmp	.+40     	; 0x284e <LCD_refresh+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2826:	6d 89       	ldd	r22, Y+21	; 0x15
    2828:	7e 89       	ldd	r23, Y+22	; 0x16
    282a:	8f 89       	ldd	r24, Y+23	; 0x17
    282c:	98 8d       	ldd	r25, Y+24	; 0x18
    282e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2832:	dc 01       	movw	r26, r24
    2834:	cb 01       	movw	r24, r22
    2836:	9c 8b       	std	Y+20, r25	; 0x14
    2838:	8b 8b       	std	Y+19, r24	; 0x13
    283a:	8b 89       	ldd	r24, Y+19	; 0x13
    283c:	9c 89       	ldd	r25, Y+20	; 0x14
    283e:	98 8b       	std	Y+16, r25	; 0x10
    2840:	8f 87       	std	Y+15, r24	; 0x0f
    2842:	8f 85       	ldd	r24, Y+15	; 0x0f
    2844:	98 89       	ldd	r25, Y+16	; 0x10
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	f1 f7       	brne	.-4      	; 0x2846 <LCD_refresh+0x1de>
    284a:	98 8b       	std	Y+16, r25	; 0x10
    284c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,1);
    284e:	83 e4       	ldi	r24, 0x43	; 67
    2850:	62 e0       	ldi	r22, 0x02	; 2
    2852:	41 e0       	ldi	r20, 0x01	; 1
    2854:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <DIO_write_PIN>
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	a0 e8       	ldi	r26, 0x80	; 128
    285e:	bf e3       	ldi	r27, 0x3F	; 63
    2860:	8b 87       	std	Y+11, r24	; 0x0b
    2862:	9c 87       	std	Y+12, r25	; 0x0c
    2864:	ad 87       	std	Y+13, r26	; 0x0d
    2866:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2868:	6b 85       	ldd	r22, Y+11	; 0x0b
    286a:	7c 85       	ldd	r23, Y+12	; 0x0c
    286c:	8d 85       	ldd	r24, Y+13	; 0x0d
    286e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	4a e7       	ldi	r20, 0x7A	; 122
    2876:	53 e4       	ldi	r21, 0x43	; 67
    2878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	8f 83       	std	Y+7, r24	; 0x07
    2882:	98 87       	std	Y+8, r25	; 0x08
    2884:	a9 87       	std	Y+9, r26	; 0x09
    2886:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2888:	6f 81       	ldd	r22, Y+7	; 0x07
    288a:	78 85       	ldd	r23, Y+8	; 0x08
    288c:	89 85       	ldd	r24, Y+9	; 0x09
    288e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	40 e8       	ldi	r20, 0x80	; 128
    2896:	5f e3       	ldi	r21, 0x3F	; 63
    2898:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    289c:	88 23       	and	r24, r24
    289e:	2c f4       	brge	.+10     	; 0x28aa <LCD_refresh+0x242>
		__ticks = 1;
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	9e 83       	std	Y+6, r25	; 0x06
    28a6:	8d 83       	std	Y+5, r24	; 0x05
    28a8:	3f c0       	rjmp	.+126    	; 0x2928 <LCD_refresh+0x2c0>
	else if (__tmp > 65535)
    28aa:	6f 81       	ldd	r22, Y+7	; 0x07
    28ac:	78 85       	ldd	r23, Y+8	; 0x08
    28ae:	89 85       	ldd	r24, Y+9	; 0x09
    28b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	3f ef       	ldi	r19, 0xFF	; 255
    28b6:	4f e7       	ldi	r20, 0x7F	; 127
    28b8:	57 e4       	ldi	r21, 0x47	; 71
    28ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28be:	18 16       	cp	r1, r24
    28c0:	4c f5       	brge	.+82     	; 0x2914 <LCD_refresh+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	40 e2       	ldi	r20, 0x20	; 32
    28d0:	51 e4       	ldi	r21, 0x41	; 65
    28d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	bc 01       	movw	r22, r24
    28dc:	cd 01       	movw	r24, r26
    28de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	9e 83       	std	Y+6, r25	; 0x06
    28e8:	8d 83       	std	Y+5, r24	; 0x05
    28ea:	0f c0       	rjmp	.+30     	; 0x290a <LCD_refresh+0x2a2>
    28ec:	89 e1       	ldi	r24, 0x19	; 25
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	9c 83       	std	Y+4, r25	; 0x04
    28f2:	8b 83       	std	Y+3, r24	; 0x03
    28f4:	8b 81       	ldd	r24, Y+3	; 0x03
    28f6:	9c 81       	ldd	r25, Y+4	; 0x04
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	f1 f7       	brne	.-4      	; 0x28f8 <LCD_refresh+0x290>
    28fc:	9c 83       	std	Y+4, r25	; 0x04
    28fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2900:	8d 81       	ldd	r24, Y+5	; 0x05
    2902:	9e 81       	ldd	r25, Y+6	; 0x06
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	9e 83       	std	Y+6, r25	; 0x06
    2908:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    290a:	8d 81       	ldd	r24, Y+5	; 0x05
    290c:	9e 81       	ldd	r25, Y+6	; 0x06
    290e:	00 97       	sbiw	r24, 0x00	; 0
    2910:	69 f7       	brne	.-38     	; 0x28ec <LCD_refresh+0x284>
    2912:	14 c0       	rjmp	.+40     	; 0x293c <LCD_refresh+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2914:	6f 81       	ldd	r22, Y+7	; 0x07
    2916:	78 85       	ldd	r23, Y+8	; 0x08
    2918:	89 85       	ldd	r24, Y+9	; 0x09
    291a:	9a 85       	ldd	r25, Y+10	; 0x0a
    291c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	9e 83       	std	Y+6, r25	; 0x06
    2926:	8d 83       	std	Y+5, r24	; 0x05
    2928:	8d 81       	ldd	r24, Y+5	; 0x05
    292a:	9e 81       	ldd	r25, Y+6	; 0x06
    292c:	9a 83       	std	Y+2, r25	; 0x02
    292e:	89 83       	std	Y+1, r24	; 0x01
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	9a 81       	ldd	r25, Y+2	; 0x02
    2934:	01 97       	sbiw	r24, 0x01	; 1
    2936:	f1 f7       	brne	.-4      	; 0x2934 <LCD_refresh+0x2cc>
    2938:	9a 83       	std	Y+2, r25	; 0x02
    293a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    293c:	aa 96       	adiw	r28, 0x2a	; 42
    293e:	0f b6       	in	r0, 0x3f	; 63
    2940:	f8 94       	cli
    2942:	de bf       	out	0x3e, r29	; 62
    2944:	0f be       	out	0x3f, r0	; 63
    2946:	cd bf       	out	0x3d, r28	; 61
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	08 95       	ret

0000294e <LCD_Command>:
void LCD_Command(uint8 cmd)
{
    294e:	df 93       	push	r29
    2950:	cf 93       	push	r28
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	e9 97       	sbiw	r28, 0x39	; 57
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	f8 94       	cli
    295c:	de bf       	out	0x3e, r29	; 62
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	cd bf       	out	0x3d, r28	; 61
    2962:	89 af       	std	Y+57, r24	; 0x39
	DIO_write_PIN(LCD_ctrl_port,RS,0);
    2964:	83 e4       	ldi	r24, 0x43	; 67
    2966:	60 e0       	ldi	r22, 0x00	; 0
    2968:	40 e0       	ldi	r20, 0x00	; 0
    296a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <DIO_write_PIN>
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	a0 e8       	ldi	r26, 0x80	; 128
    2974:	bf e3       	ldi	r27, 0x3F	; 63
    2976:	8d ab       	std	Y+53, r24	; 0x35
    2978:	9e ab       	std	Y+54, r25	; 0x36
    297a:	af ab       	std	Y+55, r26	; 0x37
    297c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297e:	6d a9       	ldd	r22, Y+53	; 0x35
    2980:	7e a9       	ldd	r23, Y+54	; 0x36
    2982:	8f a9       	ldd	r24, Y+55	; 0x37
    2984:	98 ad       	ldd	r25, Y+56	; 0x38
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	4a e7       	ldi	r20, 0x7A	; 122
    298c:	53 e4       	ldi	r21, 0x43	; 67
    298e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2992:	dc 01       	movw	r26, r24
    2994:	cb 01       	movw	r24, r22
    2996:	89 ab       	std	Y+49, r24	; 0x31
    2998:	9a ab       	std	Y+50, r25	; 0x32
    299a:	ab ab       	std	Y+51, r26	; 0x33
    299c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    299e:	69 a9       	ldd	r22, Y+49	; 0x31
    29a0:	7a a9       	ldd	r23, Y+50	; 0x32
    29a2:	8b a9       	ldd	r24, Y+51	; 0x33
    29a4:	9c a9       	ldd	r25, Y+52	; 0x34
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	40 e8       	ldi	r20, 0x80	; 128
    29ac:	5f e3       	ldi	r21, 0x3F	; 63
    29ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29b2:	88 23       	and	r24, r24
    29b4:	2c f4       	brge	.+10     	; 0x29c0 <LCD_Command+0x72>
		__ticks = 1;
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	98 ab       	std	Y+48, r25	; 0x30
    29bc:	8f a7       	std	Y+47, r24	; 0x2f
    29be:	3f c0       	rjmp	.+126    	; 0x2a3e <LCD_Command+0xf0>
	else if (__tmp > 65535)
    29c0:	69 a9       	ldd	r22, Y+49	; 0x31
    29c2:	7a a9       	ldd	r23, Y+50	; 0x32
    29c4:	8b a9       	ldd	r24, Y+51	; 0x33
    29c6:	9c a9       	ldd	r25, Y+52	; 0x34
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	3f ef       	ldi	r19, 0xFF	; 255
    29cc:	4f e7       	ldi	r20, 0x7F	; 127
    29ce:	57 e4       	ldi	r21, 0x47	; 71
    29d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29d4:	18 16       	cp	r1, r24
    29d6:	4c f5       	brge	.+82     	; 0x2a2a <LCD_Command+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d8:	6d a9       	ldd	r22, Y+53	; 0x35
    29da:	7e a9       	ldd	r23, Y+54	; 0x36
    29dc:	8f a9       	ldd	r24, Y+55	; 0x37
    29de:	98 ad       	ldd	r25, Y+56	; 0x38
    29e0:	20 e0       	ldi	r18, 0x00	; 0
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	40 e2       	ldi	r20, 0x20	; 32
    29e6:	51 e4       	ldi	r21, 0x41	; 65
    29e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ec:	dc 01       	movw	r26, r24
    29ee:	cb 01       	movw	r24, r22
    29f0:	bc 01       	movw	r22, r24
    29f2:	cd 01       	movw	r24, r26
    29f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f8:	dc 01       	movw	r26, r24
    29fa:	cb 01       	movw	r24, r22
    29fc:	98 ab       	std	Y+48, r25	; 0x30
    29fe:	8f a7       	std	Y+47, r24	; 0x2f
    2a00:	0f c0       	rjmp	.+30     	; 0x2a20 <LCD_Command+0xd2>
    2a02:	89 e1       	ldi	r24, 0x19	; 25
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	9e a7       	std	Y+46, r25	; 0x2e
    2a08:	8d a7       	std	Y+45, r24	; 0x2d
    2a0a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a0c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	f1 f7       	brne	.-4      	; 0x2a0e <LCD_Command+0xc0>
    2a12:	9e a7       	std	Y+46, r25	; 0x2e
    2a14:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a16:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a18:	98 a9       	ldd	r25, Y+48	; 0x30
    2a1a:	01 97       	sbiw	r24, 0x01	; 1
    2a1c:	98 ab       	std	Y+48, r25	; 0x30
    2a1e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a20:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a22:	98 a9       	ldd	r25, Y+48	; 0x30
    2a24:	00 97       	sbiw	r24, 0x00	; 0
    2a26:	69 f7       	brne	.-38     	; 0x2a02 <LCD_Command+0xb4>
    2a28:	14 c0       	rjmp	.+40     	; 0x2a52 <LCD_Command+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a2a:	69 a9       	ldd	r22, Y+49	; 0x31
    2a2c:	7a a9       	ldd	r23, Y+50	; 0x32
    2a2e:	8b a9       	ldd	r24, Y+51	; 0x33
    2a30:	9c a9       	ldd	r25, Y+52	; 0x34
    2a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	98 ab       	std	Y+48, r25	; 0x30
    2a3c:	8f a7       	std	Y+47, r24	; 0x2f
    2a3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a40:	98 a9       	ldd	r25, Y+48	; 0x30
    2a42:	9c a7       	std	Y+44, r25	; 0x2c
    2a44:	8b a7       	std	Y+43, r24	; 0x2b
    2a46:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a48:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a4a:	01 97       	sbiw	r24, 0x01	; 1
    2a4c:	f1 f7       	brne	.-4      	; 0x2a4a <LCD_Command+0xfc>
    2a4e:	9c a7       	std	Y+44, r25	; 0x2c
    2a50:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,1);
    2a52:	83 e4       	ldi	r24, 0x43	; 67
    2a54:	62 e0       	ldi	r22, 0x02	; 2
    2a56:	41 e0       	ldi	r20, 0x01	; 1
    2a58:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <DIO_write_PIN>
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	a0 e8       	ldi	r26, 0x80	; 128
    2a62:	bf e3       	ldi	r27, 0x3F	; 63
    2a64:	8f a3       	std	Y+39, r24	; 0x27
    2a66:	98 a7       	std	Y+40, r25	; 0x28
    2a68:	a9 a7       	std	Y+41, r26	; 0x29
    2a6a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a6c:	6f a1       	ldd	r22, Y+39	; 0x27
    2a6e:	78 a5       	ldd	r23, Y+40	; 0x28
    2a70:	89 a5       	ldd	r24, Y+41	; 0x29
    2a72:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	4a e7       	ldi	r20, 0x7A	; 122
    2a7a:	53 e4       	ldi	r21, 0x43	; 67
    2a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	8b a3       	std	Y+35, r24	; 0x23
    2a86:	9c a3       	std	Y+36, r25	; 0x24
    2a88:	ad a3       	std	Y+37, r26	; 0x25
    2a8a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a8c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a8e:	7c a1       	ldd	r23, Y+36	; 0x24
    2a90:	8d a1       	ldd	r24, Y+37	; 0x25
    2a92:	9e a1       	ldd	r25, Y+38	; 0x26
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	40 e8       	ldi	r20, 0x80	; 128
    2a9a:	5f e3       	ldi	r21, 0x3F	; 63
    2a9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aa0:	88 23       	and	r24, r24
    2aa2:	2c f4       	brge	.+10     	; 0x2aae <LCD_Command+0x160>
		__ticks = 1;
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	9a a3       	std	Y+34, r25	; 0x22
    2aaa:	89 a3       	std	Y+33, r24	; 0x21
    2aac:	3f c0       	rjmp	.+126    	; 0x2b2c <LCD_Command+0x1de>
	else if (__tmp > 65535)
    2aae:	6b a1       	ldd	r22, Y+35	; 0x23
    2ab0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ab2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ab4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	3f ef       	ldi	r19, 0xFF	; 255
    2aba:	4f e7       	ldi	r20, 0x7F	; 127
    2abc:	57 e4       	ldi	r21, 0x47	; 71
    2abe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ac2:	18 16       	cp	r1, r24
    2ac4:	4c f5       	brge	.+82     	; 0x2b18 <LCD_Command+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac6:	6f a1       	ldd	r22, Y+39	; 0x27
    2ac8:	78 a5       	ldd	r23, Y+40	; 0x28
    2aca:	89 a5       	ldd	r24, Y+41	; 0x29
    2acc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	40 e2       	ldi	r20, 0x20	; 32
    2ad4:	51 e4       	ldi	r21, 0x41	; 65
    2ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	bc 01       	movw	r22, r24
    2ae0:	cd 01       	movw	r24, r26
    2ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	9a a3       	std	Y+34, r25	; 0x22
    2aec:	89 a3       	std	Y+33, r24	; 0x21
    2aee:	0f c0       	rjmp	.+30     	; 0x2b0e <LCD_Command+0x1c0>
    2af0:	89 e1       	ldi	r24, 0x19	; 25
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	98 a3       	std	Y+32, r25	; 0x20
    2af6:	8f 8f       	std	Y+31, r24	; 0x1f
    2af8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2afa:	98 a1       	ldd	r25, Y+32	; 0x20
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	f1 f7       	brne	.-4      	; 0x2afc <LCD_Command+0x1ae>
    2b00:	98 a3       	std	Y+32, r25	; 0x20
    2b02:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b04:	89 a1       	ldd	r24, Y+33	; 0x21
    2b06:	9a a1       	ldd	r25, Y+34	; 0x22
    2b08:	01 97       	sbiw	r24, 0x01	; 1
    2b0a:	9a a3       	std	Y+34, r25	; 0x22
    2b0c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b0e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b10:	9a a1       	ldd	r25, Y+34	; 0x22
    2b12:	00 97       	sbiw	r24, 0x00	; 0
    2b14:	69 f7       	brne	.-38     	; 0x2af0 <LCD_Command+0x1a2>
    2b16:	14 c0       	rjmp	.+40     	; 0x2b40 <LCD_Command+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b18:	6b a1       	ldd	r22, Y+35	; 0x23
    2b1a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b1c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b1e:	9e a1       	ldd	r25, Y+38	; 0x26
    2b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	9a a3       	std	Y+34, r25	; 0x22
    2b2a:	89 a3       	std	Y+33, r24	; 0x21
    2b2c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b2e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b30:	9e 8f       	std	Y+30, r25	; 0x1e
    2b32:	8d 8f       	std	Y+29, r24	; 0x1d
    2b34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b36:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	f1 f7       	brne	.-4      	; 0x2b38 <LCD_Command+0x1ea>
    2b3c:	9e 8f       	std	Y+30, r25	; 0x1e
    2b3e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_write_high_nibble(LCD_data_port,cmd>>4);
    2b40:	89 ad       	ldd	r24, Y+57	; 0x39
    2b42:	98 2f       	mov	r25, r24
    2b44:	92 95       	swap	r25
    2b46:	9f 70       	andi	r25, 0x0F	; 15
    2b48:	84 e4       	ldi	r24, 0x44	; 68
    2b4a:	69 2f       	mov	r22, r25
    2b4c:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_write_high_nibble>
	LCD_refresh();
    2b50:	0e 94 34 13 	call	0x2668	; 0x2668 <LCD_refresh>
	DIO_write_high_nibble(LCD_data_port,cmd);
    2b54:	84 e4       	ldi	r24, 0x44	; 68
    2b56:	69 ad       	ldd	r22, Y+57	; 0x39
    2b58:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_write_high_nibble>
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	a0 e8       	ldi	r26, 0x80	; 128
    2b62:	bf e3       	ldi	r27, 0x3F	; 63
    2b64:	89 8f       	std	Y+25, r24	; 0x19
    2b66:	9a 8f       	std	Y+26, r25	; 0x1a
    2b68:	ab 8f       	std	Y+27, r26	; 0x1b
    2b6a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b6c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	4a e7       	ldi	r20, 0x7A	; 122
    2b7a:	53 e4       	ldi	r21, 0x43	; 67
    2b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	8d 8b       	std	Y+21, r24	; 0x15
    2b86:	9e 8b       	std	Y+22, r25	; 0x16
    2b88:	af 8b       	std	Y+23, r26	; 0x17
    2b8a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b8c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b8e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b90:	8f 89       	ldd	r24, Y+23	; 0x17
    2b92:	98 8d       	ldd	r25, Y+24	; 0x18
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	40 e8       	ldi	r20, 0x80	; 128
    2b9a:	5f e3       	ldi	r21, 0x3F	; 63
    2b9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ba0:	88 23       	and	r24, r24
    2ba2:	2c f4       	brge	.+10     	; 0x2bae <LCD_Command+0x260>
		__ticks = 1;
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	9c 8b       	std	Y+20, r25	; 0x14
    2baa:	8b 8b       	std	Y+19, r24	; 0x13
    2bac:	3f c0       	rjmp	.+126    	; 0x2c2c <LCD_Command+0x2de>
	else if (__tmp > 65535)
    2bae:	6d 89       	ldd	r22, Y+21	; 0x15
    2bb0:	7e 89       	ldd	r23, Y+22	; 0x16
    2bb2:	8f 89       	ldd	r24, Y+23	; 0x17
    2bb4:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	3f ef       	ldi	r19, 0xFF	; 255
    2bba:	4f e7       	ldi	r20, 0x7F	; 127
    2bbc:	57 e4       	ldi	r21, 0x47	; 71
    2bbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bc2:	18 16       	cp	r1, r24
    2bc4:	4c f5       	brge	.+82     	; 0x2c18 <LCD_Command+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc6:	69 8d       	ldd	r22, Y+25	; 0x19
    2bc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	40 e2       	ldi	r20, 0x20	; 32
    2bd4:	51 e4       	ldi	r21, 0x41	; 65
    2bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	bc 01       	movw	r22, r24
    2be0:	cd 01       	movw	r24, r26
    2be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	9c 8b       	std	Y+20, r25	; 0x14
    2bec:	8b 8b       	std	Y+19, r24	; 0x13
    2bee:	0f c0       	rjmp	.+30     	; 0x2c0e <LCD_Command+0x2c0>
    2bf0:	89 e1       	ldi	r24, 0x19	; 25
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	9a 8b       	std	Y+18, r25	; 0x12
    2bf6:	89 8b       	std	Y+17, r24	; 0x11
    2bf8:	89 89       	ldd	r24, Y+17	; 0x11
    2bfa:	9a 89       	ldd	r25, Y+18	; 0x12
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	f1 f7       	brne	.-4      	; 0x2bfc <LCD_Command+0x2ae>
    2c00:	9a 8b       	std	Y+18, r25	; 0x12
    2c02:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c04:	8b 89       	ldd	r24, Y+19	; 0x13
    2c06:	9c 89       	ldd	r25, Y+20	; 0x14
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	9c 8b       	std	Y+20, r25	; 0x14
    2c0c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c10:	9c 89       	ldd	r25, Y+20	; 0x14
    2c12:	00 97       	sbiw	r24, 0x00	; 0
    2c14:	69 f7       	brne	.-38     	; 0x2bf0 <LCD_Command+0x2a2>
    2c16:	14 c0       	rjmp	.+40     	; 0x2c40 <LCD_Command+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c18:	6d 89       	ldd	r22, Y+21	; 0x15
    2c1a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c1e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	9c 8b       	std	Y+20, r25	; 0x14
    2c2a:	8b 8b       	std	Y+19, r24	; 0x13
    2c2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c30:	98 8b       	std	Y+16, r25	; 0x10
    2c32:	8f 87       	std	Y+15, r24	; 0x0f
    2c34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c36:	98 89       	ldd	r25, Y+16	; 0x10
    2c38:	01 97       	sbiw	r24, 0x01	; 1
    2c3a:	f1 f7       	brne	.-4      	; 0x2c38 <LCD_Command+0x2ea>
    2c3c:	98 8b       	std	Y+16, r25	; 0x10
    2c3e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,0);
    2c40:	83 e4       	ldi	r24, 0x43	; 67
    2c42:	62 e0       	ldi	r22, 0x02	; 2
    2c44:	40 e0       	ldi	r20, 0x00	; 0
    2c46:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <DIO_write_PIN>
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	a0 e8       	ldi	r26, 0x80	; 128
    2c50:	bf e3       	ldi	r27, 0x3F	; 63
    2c52:	8b 87       	std	Y+11, r24	; 0x0b
    2c54:	9c 87       	std	Y+12, r25	; 0x0c
    2c56:	ad 87       	std	Y+13, r26	; 0x0d
    2c58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	4a e7       	ldi	r20, 0x7A	; 122
    2c68:	53 e4       	ldi	r21, 0x43	; 67
    2c6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	8f 83       	std	Y+7, r24	; 0x07
    2c74:	98 87       	std	Y+8, r25	; 0x08
    2c76:	a9 87       	std	Y+9, r26	; 0x09
    2c78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7c:	78 85       	ldd	r23, Y+8	; 0x08
    2c7e:	89 85       	ldd	r24, Y+9	; 0x09
    2c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	40 e8       	ldi	r20, 0x80	; 128
    2c88:	5f e3       	ldi	r21, 0x3F	; 63
    2c8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c8e:	88 23       	and	r24, r24
    2c90:	2c f4       	brge	.+10     	; 0x2c9c <LCD_Command+0x34e>
		__ticks = 1;
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	9e 83       	std	Y+6, r25	; 0x06
    2c98:	8d 83       	std	Y+5, r24	; 0x05
    2c9a:	3f c0       	rjmp	.+126    	; 0x2d1a <LCD_Command+0x3cc>
	else if (__tmp > 65535)
    2c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c9e:	78 85       	ldd	r23, Y+8	; 0x08
    2ca0:	89 85       	ldd	r24, Y+9	; 0x09
    2ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	3f ef       	ldi	r19, 0xFF	; 255
    2ca8:	4f e7       	ldi	r20, 0x7F	; 127
    2caa:	57 e4       	ldi	r21, 0x47	; 71
    2cac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cb0:	18 16       	cp	r1, r24
    2cb2:	4c f5       	brge	.+82     	; 0x2d06 <LCD_Command+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	40 e2       	ldi	r20, 0x20	; 32
    2cc2:	51 e4       	ldi	r21, 0x41	; 65
    2cc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	bc 01       	movw	r22, r24
    2cce:	cd 01       	movw	r24, r26
    2cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	9e 83       	std	Y+6, r25	; 0x06
    2cda:	8d 83       	std	Y+5, r24	; 0x05
    2cdc:	0f c0       	rjmp	.+30     	; 0x2cfc <LCD_Command+0x3ae>
    2cde:	89 e1       	ldi	r24, 0x19	; 25
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	9c 83       	std	Y+4, r25	; 0x04
    2ce4:	8b 83       	std	Y+3, r24	; 0x03
    2ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cea:	01 97       	sbiw	r24, 0x01	; 1
    2cec:	f1 f7       	brne	.-4      	; 0x2cea <LCD_Command+0x39c>
    2cee:	9c 83       	std	Y+4, r25	; 0x04
    2cf0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	9e 83       	std	Y+6, r25	; 0x06
    2cfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2d00:	00 97       	sbiw	r24, 0x00	; 0
    2d02:	69 f7       	brne	.-38     	; 0x2cde <LCD_Command+0x390>
    2d04:	14 c0       	rjmp	.+40     	; 0x2d2e <LCD_Command+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d06:	6f 81       	ldd	r22, Y+7	; 0x07
    2d08:	78 85       	ldd	r23, Y+8	; 0x08
    2d0a:	89 85       	ldd	r24, Y+9	; 0x09
    2d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d12:	dc 01       	movw	r26, r24
    2d14:	cb 01       	movw	r24, r22
    2d16:	9e 83       	std	Y+6, r25	; 0x06
    2d18:	8d 83       	std	Y+5, r24	; 0x05
    2d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d1e:	9a 83       	std	Y+2, r25	; 0x02
    2d20:	89 83       	std	Y+1, r24	; 0x01
    2d22:	89 81       	ldd	r24, Y+1	; 0x01
    2d24:	9a 81       	ldd	r25, Y+2	; 0x02
    2d26:	01 97       	sbiw	r24, 0x01	; 1
    2d28:	f1 f7       	brne	.-4      	; 0x2d26 <LCD_Command+0x3d8>
    2d2a:	9a 83       	std	Y+2, r25	; 0x02
    2d2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2d2e:	e9 96       	adiw	r28, 0x39	; 57
    2d30:	0f b6       	in	r0, 0x3f	; 63
    2d32:	f8 94       	cli
    2d34:	de bf       	out	0x3e, r29	; 62
    2d36:	0f be       	out	0x3f, r0	; 63
    2d38:	cd bf       	out	0x3d, r28	; 61
    2d3a:	cf 91       	pop	r28
    2d3c:	df 91       	pop	r29
    2d3e:	08 95       	ret

00002d40 <LCD_init>:
void LCD_init(void)
{
    2d40:	df 93       	push	r29
    2d42:	cf 93       	push	r28
    2d44:	cd b7       	in	r28, 0x3d	; 61
    2d46:	de b7       	in	r29, 0x3e	; 62
    2d48:	2e 97       	sbiw	r28, 0x0e	; 14
    2d4a:	0f b6       	in	r0, 0x3f	; 63
    2d4c:	f8 94       	cli
    2d4e:	de bf       	out	0x3e, r29	; 62
    2d50:	0f be       	out	0x3f, r0	; 63
    2d52:	cd bf       	out	0x3d, r28	; 61
    2d54:	80 e0       	ldi	r24, 0x00	; 0
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	a8 e4       	ldi	r26, 0x48	; 72
    2d5a:	b3 e4       	ldi	r27, 0x43	; 67
    2d5c:	8b 87       	std	Y+11, r24	; 0x0b
    2d5e:	9c 87       	std	Y+12, r25	; 0x0c
    2d60:	ad 87       	std	Y+13, r26	; 0x0d
    2d62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	4a e7       	ldi	r20, 0x7A	; 122
    2d72:	53 e4       	ldi	r21, 0x43	; 67
    2d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	8f 83       	std	Y+7, r24	; 0x07
    2d7e:	98 87       	std	Y+8, r25	; 0x08
    2d80:	a9 87       	std	Y+9, r26	; 0x09
    2d82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d84:	6f 81       	ldd	r22, Y+7	; 0x07
    2d86:	78 85       	ldd	r23, Y+8	; 0x08
    2d88:	89 85       	ldd	r24, Y+9	; 0x09
    2d8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	40 e8       	ldi	r20, 0x80	; 128
    2d92:	5f e3       	ldi	r21, 0x3F	; 63
    2d94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d98:	88 23       	and	r24, r24
    2d9a:	2c f4       	brge	.+10     	; 0x2da6 <LCD_init+0x66>
		__ticks = 1;
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	9e 83       	std	Y+6, r25	; 0x06
    2da2:	8d 83       	std	Y+5, r24	; 0x05
    2da4:	3f c0       	rjmp	.+126    	; 0x2e24 <LCD_init+0xe4>
	else if (__tmp > 65535)
    2da6:	6f 81       	ldd	r22, Y+7	; 0x07
    2da8:	78 85       	ldd	r23, Y+8	; 0x08
    2daa:	89 85       	ldd	r24, Y+9	; 0x09
    2dac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dae:	20 e0       	ldi	r18, 0x00	; 0
    2db0:	3f ef       	ldi	r19, 0xFF	; 255
    2db2:	4f e7       	ldi	r20, 0x7F	; 127
    2db4:	57 e4       	ldi	r21, 0x47	; 71
    2db6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dba:	18 16       	cp	r1, r24
    2dbc:	4c f5       	brge	.+82     	; 0x2e10 <LCD_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	40 e2       	ldi	r20, 0x20	; 32
    2dcc:	51 e4       	ldi	r21, 0x41	; 65
    2dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	bc 01       	movw	r22, r24
    2dd8:	cd 01       	movw	r24, r26
    2dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	9e 83       	std	Y+6, r25	; 0x06
    2de4:	8d 83       	std	Y+5, r24	; 0x05
    2de6:	0f c0       	rjmp	.+30     	; 0x2e06 <LCD_init+0xc6>
    2de8:	89 e1       	ldi	r24, 0x19	; 25
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	9c 83       	std	Y+4, r25	; 0x04
    2dee:	8b 83       	std	Y+3, r24	; 0x03
    2df0:	8b 81       	ldd	r24, Y+3	; 0x03
    2df2:	9c 81       	ldd	r25, Y+4	; 0x04
    2df4:	01 97       	sbiw	r24, 0x01	; 1
    2df6:	f1 f7       	brne	.-4      	; 0x2df4 <LCD_init+0xb4>
    2df8:	9c 83       	std	Y+4, r25	; 0x04
    2dfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2e00:	01 97       	sbiw	r24, 0x01	; 1
    2e02:	9e 83       	std	Y+6, r25	; 0x06
    2e04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e06:	8d 81       	ldd	r24, Y+5	; 0x05
    2e08:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0a:	00 97       	sbiw	r24, 0x00	; 0
    2e0c:	69 f7       	brne	.-38     	; 0x2de8 <LCD_init+0xa8>
    2e0e:	14 c0       	rjmp	.+40     	; 0x2e38 <LCD_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e10:	6f 81       	ldd	r22, Y+7	; 0x07
    2e12:	78 85       	ldd	r23, Y+8	; 0x08
    2e14:	89 85       	ldd	r24, Y+9	; 0x09
    2e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	9e 83       	std	Y+6, r25	; 0x06
    2e22:	8d 83       	std	Y+5, r24	; 0x05
    2e24:	8d 81       	ldd	r24, Y+5	; 0x05
    2e26:	9e 81       	ldd	r25, Y+6	; 0x06
    2e28:	9a 83       	std	Y+2, r25	; 0x02
    2e2a:	89 83       	std	Y+1, r24	; 0x01
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
    2e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e30:	01 97       	sbiw	r24, 0x01	; 1
    2e32:	f1 f7       	brne	.-4      	; 0x2e30 <LCD_init+0xf0>
    2e34:	9a 83       	std	Y+2, r25	; 0x02
    2e36:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	DIO_setPINDir(LCD_ctrl_port,RS,out);
    2e38:	83 e4       	ldi	r24, 0x43	; 67
    2e3a:	60 e0       	ldi	r22, 0x00	; 0
    2e3c:	41 e0       	ldi	r20, 0x01	; 1
    2e3e:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_setPINDir>
	DIO_setPINDir(LCD_ctrl_port,RW,out);
    2e42:	83 e4       	ldi	r24, 0x43	; 67
    2e44:	61 e0       	ldi	r22, 0x01	; 1
    2e46:	41 e0       	ldi	r20, 0x01	; 1
    2e48:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_setPINDir>
	DIO_setPINDir(LCD_ctrl_port,EN,out);
    2e4c:	83 e4       	ldi	r24, 0x43	; 67
    2e4e:	62 e0       	ldi	r22, 0x02	; 2
    2e50:	41 e0       	ldi	r20, 0x01	; 1
    2e52:	0e 94 0d 0a 	call	0x141a	; 0x141a <DIO_setPINDir>
	DIO_write_high_nibbleDir(LCD_data_port,out);
    2e56:	84 e4       	ldi	r24, 0x44	; 68
    2e58:	61 e0       	ldi	r22, 0x01	; 1
    2e5a:	0e 94 a7 10 	call	0x214e	; 0x214e <DIO_write_high_nibbleDir>
	LCD_Command(LCD_Cursor_reset);
    2e5e:	82 e0       	ldi	r24, 0x02	; 2
    2e60:	0e 94 a7 14 	call	0x294e	; 0x294e <LCD_Command>
	LCD_Command(LCD_4bit_2line);
    2e64:	88 e2       	ldi	r24, 0x28	; 40
    2e66:	0e 94 a7 14 	call	0x294e	; 0x294e <LCD_Command>
	LCD_Command(LCD_displayOn_cursorOn);
    2e6a:	8e e0       	ldi	r24, 0x0E	; 14
    2e6c:	0e 94 a7 14 	call	0x294e	; 0x294e <LCD_Command>
	LCD_Command(LCD_clear_cmd);
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	0e 94 a7 14 	call	0x294e	; 0x294e <LCD_Command>
}
    2e76:	2e 96       	adiw	r28, 0x0e	; 14
    2e78:	0f b6       	in	r0, 0x3f	; 63
    2e7a:	f8 94       	cli
    2e7c:	de bf       	out	0x3e, r29	; 62
    2e7e:	0f be       	out	0x3f, r0	; 63
    2e80:	cd bf       	out	0x3d, r28	; 61
    2e82:	cf 91       	pop	r28
    2e84:	df 91       	pop	r29
    2e86:	08 95       	ret

00002e88 <LCD_displayChar>:

void LCD_displayChar(uint8 data)
{
    2e88:	df 93       	push	r29
    2e8a:	cf 93       	push	r28
    2e8c:	cd b7       	in	r28, 0x3d	; 61
    2e8e:	de b7       	in	r29, 0x3e	; 62
    2e90:	e9 97       	sbiw	r28, 0x39	; 57
    2e92:	0f b6       	in	r0, 0x3f	; 63
    2e94:	f8 94       	cli
    2e96:	de bf       	out	0x3e, r29	; 62
    2e98:	0f be       	out	0x3f, r0	; 63
    2e9a:	cd bf       	out	0x3d, r28	; 61
    2e9c:	89 af       	std	Y+57, r24	; 0x39
	DIO_write_PIN(LCD_ctrl_port,RS,1);
    2e9e:	83 e4       	ldi	r24, 0x43	; 67
    2ea0:	60 e0       	ldi	r22, 0x00	; 0
    2ea2:	41 e0       	ldi	r20, 0x01	; 1
    2ea4:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <DIO_write_PIN>
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	a0 e8       	ldi	r26, 0x80	; 128
    2eae:	bf e3       	ldi	r27, 0x3F	; 63
    2eb0:	8d ab       	std	Y+53, r24	; 0x35
    2eb2:	9e ab       	std	Y+54, r25	; 0x36
    2eb4:	af ab       	std	Y+55, r26	; 0x37
    2eb6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eb8:	6d a9       	ldd	r22, Y+53	; 0x35
    2eba:	7e a9       	ldd	r23, Y+54	; 0x36
    2ebc:	8f a9       	ldd	r24, Y+55	; 0x37
    2ebe:	98 ad       	ldd	r25, Y+56	; 0x38
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	4a e7       	ldi	r20, 0x7A	; 122
    2ec6:	53 e4       	ldi	r21, 0x43	; 67
    2ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ecc:	dc 01       	movw	r26, r24
    2ece:	cb 01       	movw	r24, r22
    2ed0:	89 ab       	std	Y+49, r24	; 0x31
    2ed2:	9a ab       	std	Y+50, r25	; 0x32
    2ed4:	ab ab       	std	Y+51, r26	; 0x33
    2ed6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ed8:	69 a9       	ldd	r22, Y+49	; 0x31
    2eda:	7a a9       	ldd	r23, Y+50	; 0x32
    2edc:	8b a9       	ldd	r24, Y+51	; 0x33
    2ede:	9c a9       	ldd	r25, Y+52	; 0x34
    2ee0:	20 e0       	ldi	r18, 0x00	; 0
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	40 e8       	ldi	r20, 0x80	; 128
    2ee6:	5f e3       	ldi	r21, 0x3F	; 63
    2ee8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2eec:	88 23       	and	r24, r24
    2eee:	2c f4       	brge	.+10     	; 0x2efa <LCD_displayChar+0x72>
		__ticks = 1;
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	98 ab       	std	Y+48, r25	; 0x30
    2ef6:	8f a7       	std	Y+47, r24	; 0x2f
    2ef8:	3f c0       	rjmp	.+126    	; 0x2f78 <LCD_displayChar+0xf0>
	else if (__tmp > 65535)
    2efa:	69 a9       	ldd	r22, Y+49	; 0x31
    2efc:	7a a9       	ldd	r23, Y+50	; 0x32
    2efe:	8b a9       	ldd	r24, Y+51	; 0x33
    2f00:	9c a9       	ldd	r25, Y+52	; 0x34
    2f02:	20 e0       	ldi	r18, 0x00	; 0
    2f04:	3f ef       	ldi	r19, 0xFF	; 255
    2f06:	4f e7       	ldi	r20, 0x7F	; 127
    2f08:	57 e4       	ldi	r21, 0x47	; 71
    2f0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f0e:	18 16       	cp	r1, r24
    2f10:	4c f5       	brge	.+82     	; 0x2f64 <LCD_displayChar+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f12:	6d a9       	ldd	r22, Y+53	; 0x35
    2f14:	7e a9       	ldd	r23, Y+54	; 0x36
    2f16:	8f a9       	ldd	r24, Y+55	; 0x37
    2f18:	98 ad       	ldd	r25, Y+56	; 0x38
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	40 e2       	ldi	r20, 0x20	; 32
    2f20:	51 e4       	ldi	r21, 0x41	; 65
    2f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f26:	dc 01       	movw	r26, r24
    2f28:	cb 01       	movw	r24, r22
    2f2a:	bc 01       	movw	r22, r24
    2f2c:	cd 01       	movw	r24, r26
    2f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	98 ab       	std	Y+48, r25	; 0x30
    2f38:	8f a7       	std	Y+47, r24	; 0x2f
    2f3a:	0f c0       	rjmp	.+30     	; 0x2f5a <LCD_displayChar+0xd2>
    2f3c:	89 e1       	ldi	r24, 0x19	; 25
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	9e a7       	std	Y+46, r25	; 0x2e
    2f42:	8d a7       	std	Y+45, r24	; 0x2d
    2f44:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f46:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f48:	01 97       	sbiw	r24, 0x01	; 1
    2f4a:	f1 f7       	brne	.-4      	; 0x2f48 <LCD_displayChar+0xc0>
    2f4c:	9e a7       	std	Y+46, r25	; 0x2e
    2f4e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f50:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f52:	98 a9       	ldd	r25, Y+48	; 0x30
    2f54:	01 97       	sbiw	r24, 0x01	; 1
    2f56:	98 ab       	std	Y+48, r25	; 0x30
    2f58:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f5c:	98 a9       	ldd	r25, Y+48	; 0x30
    2f5e:	00 97       	sbiw	r24, 0x00	; 0
    2f60:	69 f7       	brne	.-38     	; 0x2f3c <LCD_displayChar+0xb4>
    2f62:	14 c0       	rjmp	.+40     	; 0x2f8c <LCD_displayChar+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f64:	69 a9       	ldd	r22, Y+49	; 0x31
    2f66:	7a a9       	ldd	r23, Y+50	; 0x32
    2f68:	8b a9       	ldd	r24, Y+51	; 0x33
    2f6a:	9c a9       	ldd	r25, Y+52	; 0x34
    2f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f70:	dc 01       	movw	r26, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	98 ab       	std	Y+48, r25	; 0x30
    2f76:	8f a7       	std	Y+47, r24	; 0x2f
    2f78:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f7a:	98 a9       	ldd	r25, Y+48	; 0x30
    2f7c:	9c a7       	std	Y+44, r25	; 0x2c
    2f7e:	8b a7       	std	Y+43, r24	; 0x2b
    2f80:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f82:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f84:	01 97       	sbiw	r24, 0x01	; 1
    2f86:	f1 f7       	brne	.-4      	; 0x2f84 <LCD_displayChar+0xfc>
    2f88:	9c a7       	std	Y+44, r25	; 0x2c
    2f8a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,1);
    2f8c:	83 e4       	ldi	r24, 0x43	; 67
    2f8e:	62 e0       	ldi	r22, 0x02	; 2
    2f90:	41 e0       	ldi	r20, 0x01	; 1
    2f92:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <DIO_write_PIN>
    2f96:	80 e0       	ldi	r24, 0x00	; 0
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	a0 e8       	ldi	r26, 0x80	; 128
    2f9c:	bf e3       	ldi	r27, 0x3F	; 63
    2f9e:	8f a3       	std	Y+39, r24	; 0x27
    2fa0:	98 a7       	std	Y+40, r25	; 0x28
    2fa2:	a9 a7       	std	Y+41, r26	; 0x29
    2fa4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fa6:	6f a1       	ldd	r22, Y+39	; 0x27
    2fa8:	78 a5       	ldd	r23, Y+40	; 0x28
    2faa:	89 a5       	ldd	r24, Y+41	; 0x29
    2fac:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	4a e7       	ldi	r20, 0x7A	; 122
    2fb4:	53 e4       	ldi	r21, 0x43	; 67
    2fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fba:	dc 01       	movw	r26, r24
    2fbc:	cb 01       	movw	r24, r22
    2fbe:	8b a3       	std	Y+35, r24	; 0x23
    2fc0:	9c a3       	std	Y+36, r25	; 0x24
    2fc2:	ad a3       	std	Y+37, r26	; 0x25
    2fc4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2fc6:	6b a1       	ldd	r22, Y+35	; 0x23
    2fc8:	7c a1       	ldd	r23, Y+36	; 0x24
    2fca:	8d a1       	ldd	r24, Y+37	; 0x25
    2fcc:	9e a1       	ldd	r25, Y+38	; 0x26
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	40 e8       	ldi	r20, 0x80	; 128
    2fd4:	5f e3       	ldi	r21, 0x3F	; 63
    2fd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fda:	88 23       	and	r24, r24
    2fdc:	2c f4       	brge	.+10     	; 0x2fe8 <LCD_displayChar+0x160>
		__ticks = 1;
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	9a a3       	std	Y+34, r25	; 0x22
    2fe4:	89 a3       	std	Y+33, r24	; 0x21
    2fe6:	3f c0       	rjmp	.+126    	; 0x3066 <LCD_displayChar+0x1de>
	else if (__tmp > 65535)
    2fe8:	6b a1       	ldd	r22, Y+35	; 0x23
    2fea:	7c a1       	ldd	r23, Y+36	; 0x24
    2fec:	8d a1       	ldd	r24, Y+37	; 0x25
    2fee:	9e a1       	ldd	r25, Y+38	; 0x26
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	3f ef       	ldi	r19, 0xFF	; 255
    2ff4:	4f e7       	ldi	r20, 0x7F	; 127
    2ff6:	57 e4       	ldi	r21, 0x47	; 71
    2ff8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ffc:	18 16       	cp	r1, r24
    2ffe:	4c f5       	brge	.+82     	; 0x3052 <LCD_displayChar+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3000:	6f a1       	ldd	r22, Y+39	; 0x27
    3002:	78 a5       	ldd	r23, Y+40	; 0x28
    3004:	89 a5       	ldd	r24, Y+41	; 0x29
    3006:	9a a5       	ldd	r25, Y+42	; 0x2a
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	40 e2       	ldi	r20, 0x20	; 32
    300e:	51 e4       	ldi	r21, 0x41	; 65
    3010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3014:	dc 01       	movw	r26, r24
    3016:	cb 01       	movw	r24, r22
    3018:	bc 01       	movw	r22, r24
    301a:	cd 01       	movw	r24, r26
    301c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	9a a3       	std	Y+34, r25	; 0x22
    3026:	89 a3       	std	Y+33, r24	; 0x21
    3028:	0f c0       	rjmp	.+30     	; 0x3048 <LCD_displayChar+0x1c0>
    302a:	89 e1       	ldi	r24, 0x19	; 25
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	98 a3       	std	Y+32, r25	; 0x20
    3030:	8f 8f       	std	Y+31, r24	; 0x1f
    3032:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3034:	98 a1       	ldd	r25, Y+32	; 0x20
    3036:	01 97       	sbiw	r24, 0x01	; 1
    3038:	f1 f7       	brne	.-4      	; 0x3036 <LCD_displayChar+0x1ae>
    303a:	98 a3       	std	Y+32, r25	; 0x20
    303c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    303e:	89 a1       	ldd	r24, Y+33	; 0x21
    3040:	9a a1       	ldd	r25, Y+34	; 0x22
    3042:	01 97       	sbiw	r24, 0x01	; 1
    3044:	9a a3       	std	Y+34, r25	; 0x22
    3046:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3048:	89 a1       	ldd	r24, Y+33	; 0x21
    304a:	9a a1       	ldd	r25, Y+34	; 0x22
    304c:	00 97       	sbiw	r24, 0x00	; 0
    304e:	69 f7       	brne	.-38     	; 0x302a <LCD_displayChar+0x1a2>
    3050:	14 c0       	rjmp	.+40     	; 0x307a <LCD_displayChar+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3052:	6b a1       	ldd	r22, Y+35	; 0x23
    3054:	7c a1       	ldd	r23, Y+36	; 0x24
    3056:	8d a1       	ldd	r24, Y+37	; 0x25
    3058:	9e a1       	ldd	r25, Y+38	; 0x26
    305a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    305e:	dc 01       	movw	r26, r24
    3060:	cb 01       	movw	r24, r22
    3062:	9a a3       	std	Y+34, r25	; 0x22
    3064:	89 a3       	std	Y+33, r24	; 0x21
    3066:	89 a1       	ldd	r24, Y+33	; 0x21
    3068:	9a a1       	ldd	r25, Y+34	; 0x22
    306a:	9e 8f       	std	Y+30, r25	; 0x1e
    306c:	8d 8f       	std	Y+29, r24	; 0x1d
    306e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3070:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3072:	01 97       	sbiw	r24, 0x01	; 1
    3074:	f1 f7       	brne	.-4      	; 0x3072 <LCD_displayChar+0x1ea>
    3076:	9e 8f       	std	Y+30, r25	; 0x1e
    3078:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_write_high_nibble(LCD_data_port,HIGH_NIBBLE_OF(data));
    307a:	89 ad       	ldd	r24, Y+57	; 0x39
    307c:	98 2f       	mov	r25, r24
    307e:	92 95       	swap	r25
    3080:	9f 70       	andi	r25, 0x0F	; 15
    3082:	84 e4       	ldi	r24, 0x44	; 68
    3084:	69 2f       	mov	r22, r25
    3086:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_write_high_nibble>
	LCD_refresh();
    308a:	0e 94 34 13 	call	0x2668	; 0x2668 <LCD_refresh>
	DIO_write_high_nibble(LCD_data_port,data);
    308e:	84 e4       	ldi	r24, 0x44	; 68
    3090:	69 ad       	ldd	r22, Y+57	; 0x39
    3092:	0e 94 35 10 	call	0x206a	; 0x206a <DIO_write_high_nibble>
    3096:	80 e0       	ldi	r24, 0x00	; 0
    3098:	90 e0       	ldi	r25, 0x00	; 0
    309a:	a0 e8       	ldi	r26, 0x80	; 128
    309c:	bf e3       	ldi	r27, 0x3F	; 63
    309e:	89 8f       	std	Y+25, r24	; 0x19
    30a0:	9a 8f       	std	Y+26, r25	; 0x1a
    30a2:	ab 8f       	std	Y+27, r26	; 0x1b
    30a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30a6:	69 8d       	ldd	r22, Y+25	; 0x19
    30a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	4a e7       	ldi	r20, 0x7A	; 122
    30b4:	53 e4       	ldi	r21, 0x43	; 67
    30b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ba:	dc 01       	movw	r26, r24
    30bc:	cb 01       	movw	r24, r22
    30be:	8d 8b       	std	Y+21, r24	; 0x15
    30c0:	9e 8b       	std	Y+22, r25	; 0x16
    30c2:	af 8b       	std	Y+23, r26	; 0x17
    30c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30c6:	6d 89       	ldd	r22, Y+21	; 0x15
    30c8:	7e 89       	ldd	r23, Y+22	; 0x16
    30ca:	8f 89       	ldd	r24, Y+23	; 0x17
    30cc:	98 8d       	ldd	r25, Y+24	; 0x18
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	40 e8       	ldi	r20, 0x80	; 128
    30d4:	5f e3       	ldi	r21, 0x3F	; 63
    30d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30da:	88 23       	and	r24, r24
    30dc:	2c f4       	brge	.+10     	; 0x30e8 <LCD_displayChar+0x260>
		__ticks = 1;
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	9c 8b       	std	Y+20, r25	; 0x14
    30e4:	8b 8b       	std	Y+19, r24	; 0x13
    30e6:	3f c0       	rjmp	.+126    	; 0x3166 <LCD_displayChar+0x2de>
	else if (__tmp > 65535)
    30e8:	6d 89       	ldd	r22, Y+21	; 0x15
    30ea:	7e 89       	ldd	r23, Y+22	; 0x16
    30ec:	8f 89       	ldd	r24, Y+23	; 0x17
    30ee:	98 8d       	ldd	r25, Y+24	; 0x18
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	3f ef       	ldi	r19, 0xFF	; 255
    30f4:	4f e7       	ldi	r20, 0x7F	; 127
    30f6:	57 e4       	ldi	r21, 0x47	; 71
    30f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30fc:	18 16       	cp	r1, r24
    30fe:	4c f5       	brge	.+82     	; 0x3152 <LCD_displayChar+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3100:	69 8d       	ldd	r22, Y+25	; 0x19
    3102:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3104:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3106:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	40 e2       	ldi	r20, 0x20	; 32
    310e:	51 e4       	ldi	r21, 0x41	; 65
    3110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	bc 01       	movw	r22, r24
    311a:	cd 01       	movw	r24, r26
    311c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	9c 8b       	std	Y+20, r25	; 0x14
    3126:	8b 8b       	std	Y+19, r24	; 0x13
    3128:	0f c0       	rjmp	.+30     	; 0x3148 <LCD_displayChar+0x2c0>
    312a:	89 e1       	ldi	r24, 0x19	; 25
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	9a 8b       	std	Y+18, r25	; 0x12
    3130:	89 8b       	std	Y+17, r24	; 0x11
    3132:	89 89       	ldd	r24, Y+17	; 0x11
    3134:	9a 89       	ldd	r25, Y+18	; 0x12
    3136:	01 97       	sbiw	r24, 0x01	; 1
    3138:	f1 f7       	brne	.-4      	; 0x3136 <LCD_displayChar+0x2ae>
    313a:	9a 8b       	std	Y+18, r25	; 0x12
    313c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    313e:	8b 89       	ldd	r24, Y+19	; 0x13
    3140:	9c 89       	ldd	r25, Y+20	; 0x14
    3142:	01 97       	sbiw	r24, 0x01	; 1
    3144:	9c 8b       	std	Y+20, r25	; 0x14
    3146:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3148:	8b 89       	ldd	r24, Y+19	; 0x13
    314a:	9c 89       	ldd	r25, Y+20	; 0x14
    314c:	00 97       	sbiw	r24, 0x00	; 0
    314e:	69 f7       	brne	.-38     	; 0x312a <LCD_displayChar+0x2a2>
    3150:	14 c0       	rjmp	.+40     	; 0x317a <LCD_displayChar+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3152:	6d 89       	ldd	r22, Y+21	; 0x15
    3154:	7e 89       	ldd	r23, Y+22	; 0x16
    3156:	8f 89       	ldd	r24, Y+23	; 0x17
    3158:	98 8d       	ldd	r25, Y+24	; 0x18
    315a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315e:	dc 01       	movw	r26, r24
    3160:	cb 01       	movw	r24, r22
    3162:	9c 8b       	std	Y+20, r25	; 0x14
    3164:	8b 8b       	std	Y+19, r24	; 0x13
    3166:	8b 89       	ldd	r24, Y+19	; 0x13
    3168:	9c 89       	ldd	r25, Y+20	; 0x14
    316a:	98 8b       	std	Y+16, r25	; 0x10
    316c:	8f 87       	std	Y+15, r24	; 0x0f
    316e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3170:	98 89       	ldd	r25, Y+16	; 0x10
    3172:	01 97       	sbiw	r24, 0x01	; 1
    3174:	f1 f7       	brne	.-4      	; 0x3172 <LCD_displayChar+0x2ea>
    3176:	98 8b       	std	Y+16, r25	; 0x10
    3178:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,0);
    317a:	83 e4       	ldi	r24, 0x43	; 67
    317c:	62 e0       	ldi	r22, 0x02	; 2
    317e:	40 e0       	ldi	r20, 0x00	; 0
    3180:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <DIO_write_PIN>
    3184:	80 e0       	ldi	r24, 0x00	; 0
    3186:	90 e0       	ldi	r25, 0x00	; 0
    3188:	a0 e8       	ldi	r26, 0x80	; 128
    318a:	bf e3       	ldi	r27, 0x3F	; 63
    318c:	8b 87       	std	Y+11, r24	; 0x0b
    318e:	9c 87       	std	Y+12, r25	; 0x0c
    3190:	ad 87       	std	Y+13, r26	; 0x0d
    3192:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3194:	6b 85       	ldd	r22, Y+11	; 0x0b
    3196:	7c 85       	ldd	r23, Y+12	; 0x0c
    3198:	8d 85       	ldd	r24, Y+13	; 0x0d
    319a:	9e 85       	ldd	r25, Y+14	; 0x0e
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	4a e7       	ldi	r20, 0x7A	; 122
    31a2:	53 e4       	ldi	r21, 0x43	; 67
    31a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a8:	dc 01       	movw	r26, r24
    31aa:	cb 01       	movw	r24, r22
    31ac:	8f 83       	std	Y+7, r24	; 0x07
    31ae:	98 87       	std	Y+8, r25	; 0x08
    31b0:	a9 87       	std	Y+9, r26	; 0x09
    31b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31b4:	6f 81       	ldd	r22, Y+7	; 0x07
    31b6:	78 85       	ldd	r23, Y+8	; 0x08
    31b8:	89 85       	ldd	r24, Y+9	; 0x09
    31ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	40 e8       	ldi	r20, 0x80	; 128
    31c2:	5f e3       	ldi	r21, 0x3F	; 63
    31c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31c8:	88 23       	and	r24, r24
    31ca:	2c f4       	brge	.+10     	; 0x31d6 <LCD_displayChar+0x34e>
		__ticks = 1;
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	9e 83       	std	Y+6, r25	; 0x06
    31d2:	8d 83       	std	Y+5, r24	; 0x05
    31d4:	3f c0       	rjmp	.+126    	; 0x3254 <LCD_displayChar+0x3cc>
	else if (__tmp > 65535)
    31d6:	6f 81       	ldd	r22, Y+7	; 0x07
    31d8:	78 85       	ldd	r23, Y+8	; 0x08
    31da:	89 85       	ldd	r24, Y+9	; 0x09
    31dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    31de:	20 e0       	ldi	r18, 0x00	; 0
    31e0:	3f ef       	ldi	r19, 0xFF	; 255
    31e2:	4f e7       	ldi	r20, 0x7F	; 127
    31e4:	57 e4       	ldi	r21, 0x47	; 71
    31e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31ea:	18 16       	cp	r1, r24
    31ec:	4c f5       	brge	.+82     	; 0x3240 <LCD_displayChar+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    31f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    31f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	40 e2       	ldi	r20, 0x20	; 32
    31fc:	51 e4       	ldi	r21, 0x41	; 65
    31fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3202:	dc 01       	movw	r26, r24
    3204:	cb 01       	movw	r24, r22
    3206:	bc 01       	movw	r22, r24
    3208:	cd 01       	movw	r24, r26
    320a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	9e 83       	std	Y+6, r25	; 0x06
    3214:	8d 83       	std	Y+5, r24	; 0x05
    3216:	0f c0       	rjmp	.+30     	; 0x3236 <LCD_displayChar+0x3ae>
    3218:	89 e1       	ldi	r24, 0x19	; 25
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	9c 83       	std	Y+4, r25	; 0x04
    321e:	8b 83       	std	Y+3, r24	; 0x03
    3220:	8b 81       	ldd	r24, Y+3	; 0x03
    3222:	9c 81       	ldd	r25, Y+4	; 0x04
    3224:	01 97       	sbiw	r24, 0x01	; 1
    3226:	f1 f7       	brne	.-4      	; 0x3224 <LCD_displayChar+0x39c>
    3228:	9c 83       	std	Y+4, r25	; 0x04
    322a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    322c:	8d 81       	ldd	r24, Y+5	; 0x05
    322e:	9e 81       	ldd	r25, Y+6	; 0x06
    3230:	01 97       	sbiw	r24, 0x01	; 1
    3232:	9e 83       	std	Y+6, r25	; 0x06
    3234:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3236:	8d 81       	ldd	r24, Y+5	; 0x05
    3238:	9e 81       	ldd	r25, Y+6	; 0x06
    323a:	00 97       	sbiw	r24, 0x00	; 0
    323c:	69 f7       	brne	.-38     	; 0x3218 <LCD_displayChar+0x390>
    323e:	14 c0       	rjmp	.+40     	; 0x3268 <LCD_displayChar+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3240:	6f 81       	ldd	r22, Y+7	; 0x07
    3242:	78 85       	ldd	r23, Y+8	; 0x08
    3244:	89 85       	ldd	r24, Y+9	; 0x09
    3246:	9a 85       	ldd	r25, Y+10	; 0x0a
    3248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	9e 83       	std	Y+6, r25	; 0x06
    3252:	8d 83       	std	Y+5, r24	; 0x05
    3254:	8d 81       	ldd	r24, Y+5	; 0x05
    3256:	9e 81       	ldd	r25, Y+6	; 0x06
    3258:	9a 83       	std	Y+2, r25	; 0x02
    325a:	89 83       	std	Y+1, r24	; 0x01
    325c:	89 81       	ldd	r24, Y+1	; 0x01
    325e:	9a 81       	ldd	r25, Y+2	; 0x02
    3260:	01 97       	sbiw	r24, 0x01	; 1
    3262:	f1 f7       	brne	.-4      	; 0x3260 <LCD_displayChar+0x3d8>
    3264:	9a 83       	std	Y+2, r25	; 0x02
    3266:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3268:	e9 96       	adiw	r28, 0x39	; 57
    326a:	0f b6       	in	r0, 0x3f	; 63
    326c:	f8 94       	cli
    326e:	de bf       	out	0x3e, r29	; 62
    3270:	0f be       	out	0x3f, r0	; 63
    3272:	cd bf       	out	0x3d, r28	; 61
    3274:	cf 91       	pop	r28
    3276:	df 91       	pop	r29
    3278:	08 95       	ret

0000327a <LCD_displayString>:


void LCD_displayString(const char *str)
{
    327a:	df 93       	push	r29
    327c:	cf 93       	push	r28
    327e:	00 d0       	rcall	.+0      	; 0x3280 <LCD_displayString+0x6>
    3280:	0f 92       	push	r0
    3282:	cd b7       	in	r28, 0x3d	; 61
    3284:	de b7       	in	r29, 0x3e	; 62
    3286:	9b 83       	std	Y+3, r25	; 0x03
    3288:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    328a:	19 82       	std	Y+1, r1	; 0x01
    328c:	0e c0       	rjmp	.+28     	; 0x32aa <LCD_displayString+0x30>
	while(str[i]!='\0')
	{
		LCD_displayChar(str[i]);
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	28 2f       	mov	r18, r24
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	8a 81       	ldd	r24, Y+2	; 0x02
    3296:	9b 81       	ldd	r25, Y+3	; 0x03
    3298:	fc 01       	movw	r30, r24
    329a:	e2 0f       	add	r30, r18
    329c:	f3 1f       	adc	r31, r19
    329e:	80 81       	ld	r24, Z
    32a0:	0e 94 44 17 	call	0x2e88	; 0x2e88 <LCD_displayChar>
		i++;
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
    32a6:	8f 5f       	subi	r24, 0xFF	; 255
    32a8:	89 83       	std	Y+1, r24	; 0x01


void LCD_displayString(const char *str)
{
	uint8 i=0;
	while(str[i]!='\0')
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	28 2f       	mov	r18, r24
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	8a 81       	ldd	r24, Y+2	; 0x02
    32b2:	9b 81       	ldd	r25, Y+3	; 0x03
    32b4:	fc 01       	movw	r30, r24
    32b6:	e2 0f       	add	r30, r18
    32b8:	f3 1f       	adc	r31, r19
    32ba:	80 81       	ld	r24, Z
    32bc:	88 23       	and	r24, r24
    32be:	39 f7       	brne	.-50     	; 0x328e <LCD_displayString+0x14>
	{
		LCD_displayChar(str[i]);
		i++;
	}

}
    32c0:	0f 90       	pop	r0
    32c2:	0f 90       	pop	r0
    32c4:	0f 90       	pop	r0
    32c6:	cf 91       	pop	r28
    32c8:	df 91       	pop	r29
    32ca:	08 95       	ret

000032cc <LCD_MoveTo_Row_Column>:


void LCD_MoveTo_Row_Column(uint8 row, uint8 col)
{
    32cc:	df 93       	push	r29
    32ce:	cf 93       	push	r28
    32d0:	00 d0       	rcall	.+0      	; 0x32d2 <LCD_MoveTo_Row_Column+0x6>
    32d2:	00 d0       	rcall	.+0      	; 0x32d4 <LCD_MoveTo_Row_Column+0x8>
    32d4:	0f 92       	push	r0
    32d6:	cd b7       	in	r28, 0x3d	; 61
    32d8:	de b7       	in	r29, 0x3e	; 62
    32da:	8a 83       	std	Y+2, r24	; 0x02
    32dc:	6b 83       	std	Y+3, r22	; 0x03
	// The position is COL+ROW
	uint8 position;

	switch(row)
    32de:	8a 81       	ldd	r24, Y+2	; 0x02
    32e0:	28 2f       	mov	r18, r24
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	3d 83       	std	Y+5, r19	; 0x05
    32e6:	2c 83       	std	Y+4, r18	; 0x04
    32e8:	8c 81       	ldd	r24, Y+4	; 0x04
    32ea:	9d 81       	ldd	r25, Y+5	; 0x05
    32ec:	00 97       	sbiw	r24, 0x00	; 0
    32ee:	31 f0       	breq	.+12     	; 0x32fc <LCD_MoveTo_Row_Column+0x30>
    32f0:	2c 81       	ldd	r18, Y+4	; 0x04
    32f2:	3d 81       	ldd	r19, Y+5	; 0x05
    32f4:	21 30       	cpi	r18, 0x01	; 1
    32f6:	31 05       	cpc	r19, r1
    32f8:	21 f0       	breq	.+8      	; 0x3302 <LCD_MoveTo_Row_Column+0x36>
    32fa:	06 c0       	rjmp	.+12     	; 0x3308 <LCD_MoveTo_Row_Column+0x3c>
	{
		case 0:
			position=col;
    32fc:	8b 81       	ldd	r24, Y+3	; 0x03
    32fe:	89 83       	std	Y+1, r24	; 0x01
    3300:	03 c0       	rjmp	.+6      	; 0x3308 <LCD_MoveTo_Row_Column+0x3c>
			break;
		case 1:
			position=col+0x40;
    3302:	8b 81       	ldd	r24, Y+3	; 0x03
    3304:	80 5c       	subi	r24, 0xC0	; 192
    3306:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	LCD_Command(position|LCD_Cursor_move_to);
    3308:	89 81       	ldd	r24, Y+1	; 0x01
    330a:	80 68       	ori	r24, 0x80	; 128
    330c:	0e 94 a7 14 	call	0x294e	; 0x294e <LCD_Command>
}
    3310:	0f 90       	pop	r0
    3312:	0f 90       	pop	r0
    3314:	0f 90       	pop	r0
    3316:	0f 90       	pop	r0
    3318:	0f 90       	pop	r0
    331a:	cf 91       	pop	r28
    331c:	df 91       	pop	r29
    331e:	08 95       	ret

00003320 <LCD_display_String_Row_Column>:


void LCD_display_String_Row_Column(uint8 row,uint8 col, const char *str)
{
    3320:	df 93       	push	r29
    3322:	cf 93       	push	r28
    3324:	00 d0       	rcall	.+0      	; 0x3326 <LCD_display_String_Row_Column+0x6>
    3326:	00 d0       	rcall	.+0      	; 0x3328 <LCD_display_String_Row_Column+0x8>
    3328:	cd b7       	in	r28, 0x3d	; 61
    332a:	de b7       	in	r29, 0x3e	; 62
    332c:	89 83       	std	Y+1, r24	; 0x01
    332e:	6a 83       	std	Y+2, r22	; 0x02
    3330:	5c 83       	std	Y+4, r21	; 0x04
    3332:	4b 83       	std	Y+3, r20	; 0x03
	LCD_MoveTo_Row_Column(row,col);
    3334:	89 81       	ldd	r24, Y+1	; 0x01
    3336:	6a 81       	ldd	r22, Y+2	; 0x02
    3338:	0e 94 66 19 	call	0x32cc	; 0x32cc <LCD_MoveTo_Row_Column>
	LCD_displayString(str);
    333c:	8b 81       	ldd	r24, Y+3	; 0x03
    333e:	9c 81       	ldd	r25, Y+4	; 0x04
    3340:	0e 94 3d 19 	call	0x327a	; 0x327a <LCD_displayString>

}
    3344:	0f 90       	pop	r0
    3346:	0f 90       	pop	r0
    3348:	0f 90       	pop	r0
    334a:	0f 90       	pop	r0
    334c:	cf 91       	pop	r28
    334e:	df 91       	pop	r29
    3350:	08 95       	ret

00003352 <LCD_Clear>:



void LCD_Clear(void)
{
    3352:	df 93       	push	r29
    3354:	cf 93       	push	r28
    3356:	cd b7       	in	r28, 0x3d	; 61
    3358:	de b7       	in	r29, 0x3e	; 62
	LCD_Command(LCD_clear_cmd);
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	0e 94 a7 14 	call	0x294e	; 0x294e <LCD_Command>
}
    3360:	cf 91       	pop	r28
    3362:	df 91       	pop	r29
    3364:	08 95       	ret

00003366 <LCD_integerToString>:



void LCD_integerToString(uint8 data)
{
    3366:	df 93       	push	r29
    3368:	cf 93       	push	r28
    336a:	cd b7       	in	r28, 0x3d	; 61
    336c:	de b7       	in	r29, 0x3e	; 62
    336e:	61 97       	sbiw	r28, 0x11	; 17
    3370:	0f b6       	in	r0, 0x3f	; 63
    3372:	f8 94       	cli
    3374:	de bf       	out	0x3e, r29	; 62
    3376:	0f be       	out	0x3f, r0	; 63
    3378:	cd bf       	out	0x3d, r28	; 61
    337a:	89 8b       	std	Y+17, r24	; 0x11

	char buff[16];
	itoa(data,buff,10);
    337c:	89 89       	ldd	r24, Y+17	; 0x11
    337e:	88 2f       	mov	r24, r24
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	9e 01       	movw	r18, r28
    3384:	2f 5f       	subi	r18, 0xFF	; 255
    3386:	3f 4f       	sbci	r19, 0xFF	; 255
    3388:	b9 01       	movw	r22, r18
    338a:	4a e0       	ldi	r20, 0x0A	; 10
    338c:	50 e0       	ldi	r21, 0x00	; 0
    338e:	0e 94 de 1a 	call	0x35bc	; 0x35bc <itoa>
	LCD_displayString( buff );
    3392:	ce 01       	movw	r24, r28
    3394:	01 96       	adiw	r24, 0x01	; 1
    3396:	0e 94 3d 19 	call	0x327a	; 0x327a <LCD_displayString>
}
    339a:	61 96       	adiw	r28, 0x11	; 17
    339c:	0f b6       	in	r0, 0x3f	; 63
    339e:	f8 94       	cli
    33a0:	de bf       	out	0x3e, r29	; 62
    33a2:	0f be       	out	0x3f, r0	; 63
    33a4:	cd bf       	out	0x3d, r28	; 61
    33a6:	cf 91       	pop	r28
    33a8:	df 91       	pop	r29
    33aa:	08 95       	ret

000033ac <LCD_display_int>:


void LCD_display_int(uint8 data)
{
    33ac:	df 93       	push	r29
    33ae:	cf 93       	push	r28
    33b0:	cd b7       	in	r28, 0x3d	; 61
    33b2:	de b7       	in	r29, 0x3e	; 62
    33b4:	2f 97       	sbiw	r28, 0x0f	; 15
    33b6:	0f b6       	in	r0, 0x3f	; 63
    33b8:	f8 94       	cli
    33ba:	de bf       	out	0x3e, r29	; 62
    33bc:	0f be       	out	0x3f, r0	; 63
    33be:	cd bf       	out	0x3d, r28	; 61
    33c0:	8f 87       	std	Y+15, r24	; 0x0f
	/* if any switch pressed for more than 500 ms it counts more than one press */
	if((data <= 9) && (data >= 0))
    33c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    33c4:	8a 30       	cpi	r24, 0x0A	; 10
    33c6:	20 f4       	brcc	.+8      	; 0x33d0 <LCD_display_int+0x24>
	{
		LCD_integerToString(data); /* display the pressed keypad switch */
    33c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    33ca:	0e 94 b3 19 	call	0x3366	; 0x3366 <LCD_integerToString>
    33ce:	03 c0       	rjmp	.+6      	; 0x33d6 <LCD_display_int+0x2a>
	}
	else
	{
		LCD_displayChar(data); /* display the pressed keypad switch */
    33d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    33d2:	0e 94 44 17 	call	0x2e88	; 0x2e88 <LCD_displayChar>
    33d6:	80 e0       	ldi	r24, 0x00	; 0
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	aa ef       	ldi	r26, 0xFA	; 250
    33dc:	b3 e4       	ldi	r27, 0x43	; 67
    33de:	8b 87       	std	Y+11, r24	; 0x0b
    33e0:	9c 87       	std	Y+12, r25	; 0x0c
    33e2:	ad 87       	std	Y+13, r26	; 0x0d
    33e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    33e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    33ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	4a e7       	ldi	r20, 0x7A	; 122
    33f4:	53 e4       	ldi	r21, 0x43	; 67
    33f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	8f 83       	std	Y+7, r24	; 0x07
    3400:	98 87       	std	Y+8, r25	; 0x08
    3402:	a9 87       	std	Y+9, r26	; 0x09
    3404:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3406:	6f 81       	ldd	r22, Y+7	; 0x07
    3408:	78 85       	ldd	r23, Y+8	; 0x08
    340a:	89 85       	ldd	r24, Y+9	; 0x09
    340c:	9a 85       	ldd	r25, Y+10	; 0x0a
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	40 e8       	ldi	r20, 0x80	; 128
    3414:	5f e3       	ldi	r21, 0x3F	; 63
    3416:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    341a:	88 23       	and	r24, r24
    341c:	2c f4       	brge	.+10     	; 0x3428 <LCD_display_int+0x7c>
		__ticks = 1;
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	9e 83       	std	Y+6, r25	; 0x06
    3424:	8d 83       	std	Y+5, r24	; 0x05
    3426:	3f c0       	rjmp	.+126    	; 0x34a6 <LCD_display_int+0xfa>
	else if (__tmp > 65535)
    3428:	6f 81       	ldd	r22, Y+7	; 0x07
    342a:	78 85       	ldd	r23, Y+8	; 0x08
    342c:	89 85       	ldd	r24, Y+9	; 0x09
    342e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	3f ef       	ldi	r19, 0xFF	; 255
    3434:	4f e7       	ldi	r20, 0x7F	; 127
    3436:	57 e4       	ldi	r21, 0x47	; 71
    3438:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    343c:	18 16       	cp	r1, r24
    343e:	4c f5       	brge	.+82     	; 0x3492 <LCD_display_int+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3440:	6b 85       	ldd	r22, Y+11	; 0x0b
    3442:	7c 85       	ldd	r23, Y+12	; 0x0c
    3444:	8d 85       	ldd	r24, Y+13	; 0x0d
    3446:	9e 85       	ldd	r25, Y+14	; 0x0e
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	40 e2       	ldi	r20, 0x20	; 32
    344e:	51 e4       	ldi	r21, 0x41	; 65
    3450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3454:	dc 01       	movw	r26, r24
    3456:	cb 01       	movw	r24, r22
    3458:	bc 01       	movw	r22, r24
    345a:	cd 01       	movw	r24, r26
    345c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3460:	dc 01       	movw	r26, r24
    3462:	cb 01       	movw	r24, r22
    3464:	9e 83       	std	Y+6, r25	; 0x06
    3466:	8d 83       	std	Y+5, r24	; 0x05
    3468:	0f c0       	rjmp	.+30     	; 0x3488 <LCD_display_int+0xdc>
    346a:	89 e1       	ldi	r24, 0x19	; 25
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	9c 83       	std	Y+4, r25	; 0x04
    3470:	8b 83       	std	Y+3, r24	; 0x03
    3472:	8b 81       	ldd	r24, Y+3	; 0x03
    3474:	9c 81       	ldd	r25, Y+4	; 0x04
    3476:	01 97       	sbiw	r24, 0x01	; 1
    3478:	f1 f7       	brne	.-4      	; 0x3476 <LCD_display_int+0xca>
    347a:	9c 83       	std	Y+4, r25	; 0x04
    347c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    347e:	8d 81       	ldd	r24, Y+5	; 0x05
    3480:	9e 81       	ldd	r25, Y+6	; 0x06
    3482:	01 97       	sbiw	r24, 0x01	; 1
    3484:	9e 83       	std	Y+6, r25	; 0x06
    3486:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3488:	8d 81       	ldd	r24, Y+5	; 0x05
    348a:	9e 81       	ldd	r25, Y+6	; 0x06
    348c:	00 97       	sbiw	r24, 0x00	; 0
    348e:	69 f7       	brne	.-38     	; 0x346a <LCD_display_int+0xbe>
    3490:	14 c0       	rjmp	.+40     	; 0x34ba <LCD_display_int+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3492:	6f 81       	ldd	r22, Y+7	; 0x07
    3494:	78 85       	ldd	r23, Y+8	; 0x08
    3496:	89 85       	ldd	r24, Y+9	; 0x09
    3498:	9a 85       	ldd	r25, Y+10	; 0x0a
    349a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349e:	dc 01       	movw	r26, r24
    34a0:	cb 01       	movw	r24, r22
    34a2:	9e 83       	std	Y+6, r25	; 0x06
    34a4:	8d 83       	std	Y+5, r24	; 0x05
    34a6:	8d 81       	ldd	r24, Y+5	; 0x05
    34a8:	9e 81       	ldd	r25, Y+6	; 0x06
    34aa:	9a 83       	std	Y+2, r25	; 0x02
    34ac:	89 83       	std	Y+1, r24	; 0x01
    34ae:	89 81       	ldd	r24, Y+1	; 0x01
    34b0:	9a 81       	ldd	r25, Y+2	; 0x02
    34b2:	01 97       	sbiw	r24, 0x01	; 1
    34b4:	f1 f7       	brne	.-4      	; 0x34b2 <LCD_display_int+0x106>
    34b6:	9a 83       	std	Y+2, r25	; 0x02
    34b8:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(500); /* Press time */

}
    34ba:	2f 96       	adiw	r28, 0x0f	; 15
    34bc:	0f b6       	in	r0, 0x3f	; 63
    34be:	f8 94       	cli
    34c0:	de bf       	out	0x3e, r29	; 62
    34c2:	0f be       	out	0x3f, r0	; 63
    34c4:	cd bf       	out	0x3d, r28	; 61
    34c6:	cf 91       	pop	r28
    34c8:	df 91       	pop	r29
    34ca:	08 95       	ret

000034cc <__mulsi3>:
    34cc:	62 9f       	mul	r22, r18
    34ce:	d0 01       	movw	r26, r0
    34d0:	73 9f       	mul	r23, r19
    34d2:	f0 01       	movw	r30, r0
    34d4:	82 9f       	mul	r24, r18
    34d6:	e0 0d       	add	r30, r0
    34d8:	f1 1d       	adc	r31, r1
    34da:	64 9f       	mul	r22, r20
    34dc:	e0 0d       	add	r30, r0
    34de:	f1 1d       	adc	r31, r1
    34e0:	92 9f       	mul	r25, r18
    34e2:	f0 0d       	add	r31, r0
    34e4:	83 9f       	mul	r24, r19
    34e6:	f0 0d       	add	r31, r0
    34e8:	74 9f       	mul	r23, r20
    34ea:	f0 0d       	add	r31, r0
    34ec:	65 9f       	mul	r22, r21
    34ee:	f0 0d       	add	r31, r0
    34f0:	99 27       	eor	r25, r25
    34f2:	72 9f       	mul	r23, r18
    34f4:	b0 0d       	add	r27, r0
    34f6:	e1 1d       	adc	r30, r1
    34f8:	f9 1f       	adc	r31, r25
    34fa:	63 9f       	mul	r22, r19
    34fc:	b0 0d       	add	r27, r0
    34fe:	e1 1d       	adc	r30, r1
    3500:	f9 1f       	adc	r31, r25
    3502:	bd 01       	movw	r22, r26
    3504:	cf 01       	movw	r24, r30
    3506:	11 24       	eor	r1, r1
    3508:	08 95       	ret

0000350a <__udivmodsi4>:
    350a:	a1 e2       	ldi	r26, 0x21	; 33
    350c:	1a 2e       	mov	r1, r26
    350e:	aa 1b       	sub	r26, r26
    3510:	bb 1b       	sub	r27, r27
    3512:	fd 01       	movw	r30, r26
    3514:	0d c0       	rjmp	.+26     	; 0x3530 <__udivmodsi4_ep>

00003516 <__udivmodsi4_loop>:
    3516:	aa 1f       	adc	r26, r26
    3518:	bb 1f       	adc	r27, r27
    351a:	ee 1f       	adc	r30, r30
    351c:	ff 1f       	adc	r31, r31
    351e:	a2 17       	cp	r26, r18
    3520:	b3 07       	cpc	r27, r19
    3522:	e4 07       	cpc	r30, r20
    3524:	f5 07       	cpc	r31, r21
    3526:	20 f0       	brcs	.+8      	; 0x3530 <__udivmodsi4_ep>
    3528:	a2 1b       	sub	r26, r18
    352a:	b3 0b       	sbc	r27, r19
    352c:	e4 0b       	sbc	r30, r20
    352e:	f5 0b       	sbc	r31, r21

00003530 <__udivmodsi4_ep>:
    3530:	66 1f       	adc	r22, r22
    3532:	77 1f       	adc	r23, r23
    3534:	88 1f       	adc	r24, r24
    3536:	99 1f       	adc	r25, r25
    3538:	1a 94       	dec	r1
    353a:	69 f7       	brne	.-38     	; 0x3516 <__udivmodsi4_loop>
    353c:	60 95       	com	r22
    353e:	70 95       	com	r23
    3540:	80 95       	com	r24
    3542:	90 95       	com	r25
    3544:	9b 01       	movw	r18, r22
    3546:	ac 01       	movw	r20, r24
    3548:	bd 01       	movw	r22, r26
    354a:	cf 01       	movw	r24, r30
    354c:	08 95       	ret

0000354e <__prologue_saves__>:
    354e:	2f 92       	push	r2
    3550:	3f 92       	push	r3
    3552:	4f 92       	push	r4
    3554:	5f 92       	push	r5
    3556:	6f 92       	push	r6
    3558:	7f 92       	push	r7
    355a:	8f 92       	push	r8
    355c:	9f 92       	push	r9
    355e:	af 92       	push	r10
    3560:	bf 92       	push	r11
    3562:	cf 92       	push	r12
    3564:	df 92       	push	r13
    3566:	ef 92       	push	r14
    3568:	ff 92       	push	r15
    356a:	0f 93       	push	r16
    356c:	1f 93       	push	r17
    356e:	cf 93       	push	r28
    3570:	df 93       	push	r29
    3572:	cd b7       	in	r28, 0x3d	; 61
    3574:	de b7       	in	r29, 0x3e	; 62
    3576:	ca 1b       	sub	r28, r26
    3578:	db 0b       	sbc	r29, r27
    357a:	0f b6       	in	r0, 0x3f	; 63
    357c:	f8 94       	cli
    357e:	de bf       	out	0x3e, r29	; 62
    3580:	0f be       	out	0x3f, r0	; 63
    3582:	cd bf       	out	0x3d, r28	; 61
    3584:	09 94       	ijmp

00003586 <__epilogue_restores__>:
    3586:	2a 88       	ldd	r2, Y+18	; 0x12
    3588:	39 88       	ldd	r3, Y+17	; 0x11
    358a:	48 88       	ldd	r4, Y+16	; 0x10
    358c:	5f 84       	ldd	r5, Y+15	; 0x0f
    358e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3590:	7d 84       	ldd	r7, Y+13	; 0x0d
    3592:	8c 84       	ldd	r8, Y+12	; 0x0c
    3594:	9b 84       	ldd	r9, Y+11	; 0x0b
    3596:	aa 84       	ldd	r10, Y+10	; 0x0a
    3598:	b9 84       	ldd	r11, Y+9	; 0x09
    359a:	c8 84       	ldd	r12, Y+8	; 0x08
    359c:	df 80       	ldd	r13, Y+7	; 0x07
    359e:	ee 80       	ldd	r14, Y+6	; 0x06
    35a0:	fd 80       	ldd	r15, Y+5	; 0x05
    35a2:	0c 81       	ldd	r16, Y+4	; 0x04
    35a4:	1b 81       	ldd	r17, Y+3	; 0x03
    35a6:	aa 81       	ldd	r26, Y+2	; 0x02
    35a8:	b9 81       	ldd	r27, Y+1	; 0x01
    35aa:	ce 0f       	add	r28, r30
    35ac:	d1 1d       	adc	r29, r1
    35ae:	0f b6       	in	r0, 0x3f	; 63
    35b0:	f8 94       	cli
    35b2:	de bf       	out	0x3e, r29	; 62
    35b4:	0f be       	out	0x3f, r0	; 63
    35b6:	cd bf       	out	0x3d, r28	; 61
    35b8:	ed 01       	movw	r28, r26
    35ba:	08 95       	ret

000035bc <itoa>:
    35bc:	fb 01       	movw	r30, r22
    35be:	9f 01       	movw	r18, r30
    35c0:	e8 94       	clt
    35c2:	42 30       	cpi	r20, 0x02	; 2
    35c4:	c4 f0       	brlt	.+48     	; 0x35f6 <itoa+0x3a>
    35c6:	45 32       	cpi	r20, 0x25	; 37
    35c8:	b4 f4       	brge	.+44     	; 0x35f6 <itoa+0x3a>
    35ca:	4a 30       	cpi	r20, 0x0A	; 10
    35cc:	29 f4       	brne	.+10     	; 0x35d8 <itoa+0x1c>
    35ce:	97 fb       	bst	r25, 7
    35d0:	1e f4       	brtc	.+6      	; 0x35d8 <itoa+0x1c>
    35d2:	90 95       	com	r25
    35d4:	81 95       	neg	r24
    35d6:	9f 4f       	sbci	r25, 0xFF	; 255
    35d8:	64 2f       	mov	r22, r20
    35da:	77 27       	eor	r23, r23
    35dc:	0e 94 0f 1b 	call	0x361e	; 0x361e <__udivmodhi4>
    35e0:	80 5d       	subi	r24, 0xD0	; 208
    35e2:	8a 33       	cpi	r24, 0x3A	; 58
    35e4:	0c f0       	brlt	.+2      	; 0x35e8 <itoa+0x2c>
    35e6:	89 5d       	subi	r24, 0xD9	; 217
    35e8:	81 93       	st	Z+, r24
    35ea:	cb 01       	movw	r24, r22
    35ec:	00 97       	sbiw	r24, 0x00	; 0
    35ee:	a1 f7       	brne	.-24     	; 0x35d8 <itoa+0x1c>
    35f0:	16 f4       	brtc	.+4      	; 0x35f6 <itoa+0x3a>
    35f2:	5d e2       	ldi	r21, 0x2D	; 45
    35f4:	51 93       	st	Z+, r21
    35f6:	10 82       	st	Z, r1
    35f8:	c9 01       	movw	r24, r18
    35fa:	0c 94 ff 1a 	jmp	0x35fe	; 0x35fe <strrev>

000035fe <strrev>:
    35fe:	dc 01       	movw	r26, r24
    3600:	fc 01       	movw	r30, r24
    3602:	67 2f       	mov	r22, r23
    3604:	71 91       	ld	r23, Z+
    3606:	77 23       	and	r23, r23
    3608:	e1 f7       	brne	.-8      	; 0x3602 <strrev+0x4>
    360a:	32 97       	sbiw	r30, 0x02	; 2
    360c:	04 c0       	rjmp	.+8      	; 0x3616 <strrev+0x18>
    360e:	7c 91       	ld	r23, X
    3610:	6d 93       	st	X+, r22
    3612:	70 83       	st	Z, r23
    3614:	62 91       	ld	r22, -Z
    3616:	ae 17       	cp	r26, r30
    3618:	bf 07       	cpc	r27, r31
    361a:	c8 f3       	brcs	.-14     	; 0x360e <strrev+0x10>
    361c:	08 95       	ret

0000361e <__udivmodhi4>:
    361e:	aa 1b       	sub	r26, r26
    3620:	bb 1b       	sub	r27, r27
    3622:	51 e1       	ldi	r21, 0x11	; 17
    3624:	07 c0       	rjmp	.+14     	; 0x3634 <__udivmodhi4_ep>

00003626 <__udivmodhi4_loop>:
    3626:	aa 1f       	adc	r26, r26
    3628:	bb 1f       	adc	r27, r27
    362a:	a6 17       	cp	r26, r22
    362c:	b7 07       	cpc	r27, r23
    362e:	10 f0       	brcs	.+4      	; 0x3634 <__udivmodhi4_ep>
    3630:	a6 1b       	sub	r26, r22
    3632:	b7 0b       	sbc	r27, r23

00003634 <__udivmodhi4_ep>:
    3634:	88 1f       	adc	r24, r24
    3636:	99 1f       	adc	r25, r25
    3638:	5a 95       	dec	r21
    363a:	a9 f7       	brne	.-22     	; 0x3626 <__udivmodhi4_loop>
    363c:	80 95       	com	r24
    363e:	90 95       	com	r25
    3640:	bc 01       	movw	r22, r24
    3642:	cd 01       	movw	r24, r26
    3644:	08 95       	ret

00003646 <_exit>:
    3646:	f8 94       	cli

00003648 <__stop_program>:
    3648:	ff cf       	rjmp	.-2      	; 0x3648 <__stop_program>
